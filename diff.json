{'author': {'avatar_url': 'https://avatars.githubusercontent.com/u/101974014?v=4',
            'events_url': 'https://api.github.com/users/cswamy/events{/privacy}',
            'followers_url': 'https://api.github.com/users/cswamy/followers',
            'following_url': 'https://api.github.com/users/cswamy/following{/other_user}',
            'gists_url': 'https://api.github.com/users/cswamy/gists{/gist_id}',
            'gravatar_id': '',
            'html_url': 'https://github.com/cswamy',
            'id': 101974014,
            'login': 'cswamy',
            'node_id': 'U_kgDOBhP__g',
            'organizations_url': 'https://api.github.com/users/cswamy/orgs',
            'received_events_url': 'https://api.github.com/users/cswamy/received_events',
            'repos_url': 'https://api.github.com/users/cswamy/repos',
            'site_admin': False,
            'starred_url': 'https://api.github.com/users/cswamy/starred{/owner}{/repo}',
            'subscriptions_url': 'https://api.github.com/users/cswamy/subscriptions',
            'type': 'User',
            'url': 'https://api.github.com/users/cswamy'},
 'comments_url': 'https://api.github.com/repos/gradio-app/gradio/commits/6abad536778517a2ab9f5fc75d52afc576f01218/comments',
 'commit': {'author': {'date': '2024-01-25T17:56:54Z',
                       'email': '101974014+cswamy@users.noreply.github.com',
                       'name': 'cswamy'},
            'comment_count': 0,
            'committer': {'date': '2024-01-25T17:56:54Z',
                          'email': 'noreply@github.com',
                          'name': 'GitHub'},
            'message': 'Added polars dataframe support with demo (#7139)\n'
                       '\n'
                       '* first commit\r\n'
                       '\r\n'
                       '* minor update\r\n'
                       '\r\n'
                       '* working polars\r\n'
                       '\r\n'
                       '* fixed. demo added.\r\n'
                       '\r\n'
                       '* add changeset\r\n'
                       '\r\n'
                       '* dynamic import of polars\r\n'
                       '\r\n'
                       '* Fix import logic\r\n'
                       '\r\n'
                       '* add changeset\r\n'
                       '\r\n'
                       '* Fix lint\r\n'
                       '\r\n'
                       '* Add code\r\n'
                       '\r\n'
                       '* Fix code\r\n'
                       '\r\n'
                       '* Add code\r\n'
                       '\r\n'
                       "* remove screenshot'\r\n"
                       '\r\n'
                       '* delete\r\n'
                       '\r\n'
                       '* add changeset\r\n'
                       '\r\n'
                       '---------\r\n'
                       '\r\n'
                       'Co-authored-by: gradio-pr-bot '
                       '<gradio-pr-bot@users.noreply.github.com>\r\n'
                       'Co-authored-by: freddyaboulton '
                       '<alfonsoboulton@gmail.com>',
            'tree': {'sha': '0f7aa0132897e292934f755a03492718c20b79b6',
                     'url': 'https://api.github.com/repos/gradio-app/gradio/git/trees/0f7aa0132897e292934f755a03492718c20b79b6'},
            'url': 'https://api.github.com/repos/gradio-app/gradio/git/commits/6abad536778517a2ab9f5fc75d52afc576f01218',
            'verification': {'payload': 'tree '
                                        '0f7aa0132897e292934f755a03492718c20b79b6\n'
                                        'parent '
                                        'be56c76c7b5d2814ea8239c7dbeddc4b1d3701c4\n'
                                        'author cswamy '
                                        '<101974014+cswamy@users.noreply.github.com> '
                                        '1706205414 +0000\n'
                                        'committer GitHub <noreply@github.com> '
                                        '1706205414 -0500\n'
                                        '\n'
                                        'Added polars dataframe support with '
                                        'demo (#7139)\n'
                                        '\n'
                                        '* first commit\r\n'
                                        '\r\n'
                                        '* minor update\r\n'
                                        '\r\n'
                                        '* working polars\r\n'
                                        '\r\n'
                                        '* fixed. demo added.\r\n'
                                        '\r\n'
                                        '* add changeset\r\n'
                                        '\r\n'
                                        '* dynamic import of polars\r\n'
                                        '\r\n'
                                        '* Fix import logic\r\n'
                                        '\r\n'
                                        '* add changeset\r\n'
                                        '\r\n'
                                        '* Fix lint\r\n'
                                        '\r\n'
                                        '* Add code\r\n'
                                        '\r\n'
                                        '* Fix code\r\n'
                                        '\r\n'
                                        '* Add code\r\n'
                                        '\r\n'
                                        "* remove screenshot'\r\n"
                                        '\r\n'
                                        '* delete\r\n'
                                        '\r\n'
                                        '* add changeset\r\n'
                                        '\r\n'
                                        '---------\r\n'
                                        '\r\n'
                                        'Co-authored-by: gradio-pr-bot '
                                        '<gradio-pr-bot@users.noreply.github.com>\r\n'
                                        'Co-authored-by: freddyaboulton '
                                        '<alfonsoboulton@gmail.com>',
                             'reason': 'valid',
                             'signature': '-----BEGIN PGP SIGNATURE-----\n'
                                          '\n'
                                          'wsFcBAABCAAQBQJlsqDmCRC1aQ7uu5UhlAAAD1YQAKfylSuMhRkF3kCeLGEt6L2R\n'
                                          'g1HBhsJOKunQPUy9fMFByHJtuCv5WVO1qN6bUenMhBwgiifOnrdCNnPUePa6jNyT\n'
                                          '6Ub2x8BjXCqtmoPgNTktH1TeQ3lg7E+ac+a6e2Z1+TEo23rEJKeU6ibYQ5b+pyXv\n'
                                          'E1FKRn6MLJlSZfqIeNX0w/CNOJUA20ZmJqldwfzTdkautsl9DXWQT4RvD70WjOiH\n'
                                          'IPuNLB7r3oPsR7f+f2dEOhTMM76xQ10u2aLWC6EGgBGp7iXm0wM8IMJPDKghJFu9\n'
                                          'GJxJ/lpfqnPybN4m+NXoxe6qQXGPb1z/c0z51BANyGx/vRO65k8zJ6vYx1U5APQ8\n'
                                          '7Al2cw4dtc5h3Xxir5DFUl1zOlqWLU+4XFHPcTD+nWAhTsCz8GJj8K2NJWlQUl4b\n'
                                          'VYODdf50yiDEyEzNtuFdqIXjLtnFiNiQ80gurciWOosVaq2iq9WLZ/RsDplWrM84\n'
                                          '5HUIuhttqaKVEO5mtKZOX2YZoxq0d4U+M8NiZ2c3QtY2//HaAPU9WQyDgxtA88FI\n'
                                          'sgABU2DNgx366KEXmfvjT0Bw3DqyhQaAkQYUx4naGbSO4XAso09fe9ngNGdV3mMq\n'
                                          'xnDuQ2g5YHG3Di6KCbHjdz7lLIP5MS/HvLq8LF8qTe5wPH/OhqtueCH4kibXLVD9\n'
                                          'FgWS3TPb7fR3Z6J2dDo5\n'
                                          '=SPDb\n'
                                          '-----END PGP SIGNATURE-----\n',
                             'verified': True}},
 'committer': {'avatar_url': 'https://avatars.githubusercontent.com/u/19864447?v=4',
               'events_url': 'https://api.github.com/users/web-flow/events{/privacy}',
               'followers_url': 'https://api.github.com/users/web-flow/followers',
               'following_url': 'https://api.github.com/users/web-flow/following{/other_user}',
               'gists_url': 'https://api.github.com/users/web-flow/gists{/gist_id}',
               'gravatar_id': '',
               'html_url': 'https://github.com/web-flow',
               'id': 19864447,
               'login': 'web-flow',
               'node_id': 'MDQ6VXNlcjE5ODY0NDQ3',
               'organizations_url': 'https://api.github.com/users/web-flow/orgs',
               'received_events_url': 'https://api.github.com/users/web-flow/received_events',
               'repos_url': 'https://api.github.com/users/web-flow/repos',
               'site_admin': False,
               'starred_url': 'https://api.github.com/users/web-flow/starred{/owner}{/repo}',
               'subscriptions_url': 'https://api.github.com/users/web-flow/subscriptions',
               'type': 'User',
               'url': 'https://api.github.com/users/web-flow'},
 'files': [{'additions': 5,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/.changeset%2Ffine-lions-rescue.md',
            'changes': 5,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/.changeset%2Ffine-lions-rescue.md?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 0,
            'filename': '.changeset/fine-lions-rescue.md',
            'patch': '@@ -0,0 +1,5 @@\n'
                     '+---\n'
                     '+"gradio": minor\n'
                     '+---\n'
                     '+\n'
                     '+feat:Added polars dataframe support with demo',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/.changeset%2Ffine-lions-rescue.md',
            'sha': '4795c2bdd4f92fbeaba5595d9d2af4e8e135adff',
            'status': 'added'},
           {'additions': 4,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/demo%2Fsort_records%2Fpolars_sort.csv',
            'changes': 4,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/demo%2Fsort_records%2Fpolars_sort.csv?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 0,
            'filename': 'demo/sort_records/polars_sort.csv',
            'patch': '@@ -0,0 +1,4 @@\n'
                     '+Item,Quantity\n'
                     '+apple,56\n'
                     '+banana,12\n'
                     '+orange,30',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/demo%2Fsort_records%2Fpolars_sort.csv',
            'sha': '3620f4c1ecb842db76e30a3011aef3af12e825f4',
            'status': 'added'},
           {'additions': 1,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/demo%2Fsort_records%2Frun.ipynb',
            'changes': 1,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/demo%2Fsort_records%2Frun.ipynb?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 0,
            'filename': 'demo/sort_records/run.ipynb',
            'patch': '@@ -0,0 +1 @@\n'
                     '+{"cells": [{"cell_type": "markdown", "id": '
                     '"302934307671667531413257853548643485645", "metadata": '
                     '{}, "source": ["# Gradio Demo: sort_records"]}, '
                     '{"cell_type": "code", "execution_count": null, "id": '
                     '"272996653310673477252411125948039410165", "metadata": '
                     '{}, "outputs": [], "source": ["!pip install -q gradio '
                     '"]}, {"cell_type": "code", "execution_count": null, '
                     '"id": "288918539441861185822528903084949547379", '
                     '"metadata": {}, "outputs": [], "source": ["# Downloading '
                     'files from the demo repo\\n", "import os\\n", "!wget -q '
                     'https://github.com/gradio-app/gradio/raw/main/demo/sort_records/polars_sort.csv"]}, '
                     '{"cell_type": "code", "execution_count": null, "id": '
                     '"44380577570523278879349135829904343037", "metadata": '
                     '{}, "outputs": [], "source": ["import gradio as gr\\n", '
                     '"import os\\n", "\\n", "def sort_records(records):\\n", '
                     '"    return records.sort(\\"Quantity\\")\\n", "\\n", '
                     '"demo = gr.Interface(\\n", "    sort_records,\\n", "    '
                     'gr.Dataframe(\\n", "        headers=[\\"Item\\", '
                     '\\"Quantity\\"],\\n", "        datatype=[\\"str\\", '
                     '\\"number\\"],\\n", "        row_count=3,\\n", "        '
                     'col_count=(2, \\"fixed\\"),\\n", "        '
                     'type=\\"polars\\"\\n", "    ),\\n", "    '
                     '\\"dataframe\\",\\n", "    description=\\"Sort by '
                     'Quantity\\",\\n", "    examples=[\\n", "        '
                     "[os.path.join(os.path.abspath(''), "
                     '\\"polars_sort.csv\\")],\\n", "    ],\\n", ")\\n", '
                     '"\\n", "if __name__ == \\"__main__\\":\\n", "    '
                     'demo.launch()"]}], "metadata": {}, "nbformat": 4, '
                     '"nbformat_minor": 5}\n'
                     '\\ No newline at end of file',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/demo%2Fsort_records%2Frun.ipynb',
            'sha': 'c48b62e9cdcf724aa1e6d0d23c9224d2e4a7c3f9',
            'status': 'added'},
           {'additions': 24,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/demo%2Fsort_records%2Frun.py',
            'changes': 24,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/demo%2Fsort_records%2Frun.py?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 0,
            'filename': 'demo/sort_records/run.py',
            'patch': '@@ -0,0 +1,24 @@\n'
                     '+import gradio as gr\n'
                     '+import os\n'
                     '+\n'
                     '+def sort_records(records):\n'
                     '+    return records.sort("Quantity")\n'
                     '+\n'
                     '+demo = gr.Interface(\n'
                     '+    sort_records,\n'
                     '+    gr.Dataframe(\n'
                     '+        headers=["Item", "Quantity"],\n'
                     '+        datatype=["str", "number"],\n'
                     '+        row_count=3,\n'
                     '+        col_count=(2, "fixed"),\n'
                     '+        type="polars"\n'
                     '+    ),\n'
                     '+    "dataframe",\n'
                     '+    description="Sort by Quantity",\n'
                     '+    examples=[\n'
                     '+        [os.path.join(os.path.dirname(__file__), '
                     '"polars_sort.csv")],\n'
                     '+    ],\n'
                     '+)\n'
                     '+\n'
                     '+if __name__ == "__main__":\n'
                     '+    demo.launch()\n'
                     '\\ No newline at end of file',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/demo%2Fsort_records%2Frun.py',
            'sha': '4113c3f8ac98df4c7f44f8490c9a13c7a466169b',
            'status': 'added'},
           {'additions': 0,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/gradio%2Fcli%2Fcommands%2Fcomponents%2Fdocs.py',
            'changes': 1,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/gradio%2Fcli%2Fcommands%2Fcomponents%2Fdocs.py?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 1,
            'filename': 'gradio/cli/commands/components/docs.py',
            'patch': '@@ -6,7 +6,6 @@\n'
                     ' \n'
                     ' import requests\n'
                     ' import tomlkit as toml\n'
                     '-from rich import print\n'
                     ' from typer import Argument, Option\n'
                     ' from typing_extensions import Annotated\n'
                     ' ',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/gradio%2Fcli%2Fcommands%2Fcomponents%2Fdocs.py',
            'sha': 'afe5a72a04e66073f3399a1b42dce0ae66525999',
            'status': 'modified'},
           {'additions': 57,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/gradio%2Fcomponents%2Fdataframe.py',
            'changes': 68,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/gradio%2Fcomponents%2Fdataframe.py?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 11,
            'filename': 'gradio/components/dataframe.py',
            'patch': '@@ -3,7 +3,17 @@\n'
                     ' from __future__ import annotations\n'
                     ' \n'
                     ' import warnings\n'
                     '-from typing import Any, Callable, Dict, List, Literal, '
                     'Optional\n'
                     '+from typing import (\n'
                     '+    TYPE_CHECKING,\n'
                     '+    Any,\n'
                     '+    Callable,\n'
                     '+    Dict,\n'
                     '+    List,\n'
                     '+    Literal,\n'
                     '+    Optional,\n'
                     '+    Tuple,\n'
                     '+    Union,\n'
                     '+)\n'
                     ' \n'
                     ' import numpy as np\n'
                     ' import pandas as pd\n'
                     '@@ -15,10 +25,26 @@\n'
                     ' from gradio.data_classes import GradioModel\n'
                     ' from gradio.events import Events\n'
                     ' \n'
                     '+if TYPE_CHECKING:\n'
                     '+    import polars as pl  # type: ignore\n'
                     '+\n'
                     '+\n'
                     '+def _is_polars_available():\n'
                     '+    import importlib.util\n'
                     '+\n'
                     '+    spec = importlib.util.find_spec("polars")\n'
                     '+    return bool(spec)\n'
                     '+\n'
                     '+\n'
                     '+def _import_polars():\n'
                     '+    import polars as pl  # type: ignore\n'
                     '+\n'
                     '+    return pl\n'
                     '+\n'
                     ' \n'
                     ' class DataframeData(GradioModel):\n'
                     '     headers: List[str]\n'
                     '-    data: List[List[Any]]\n'
                     '+    data: Union[List[List[Any]], List[Tuple[Any, '
                     '...]]]\n'
                     '     metadata: Optional[Dict[str, Optional[List[Any]]]] '
                     '= None\n'
                     ' \n'
                     ' \n'
                     '@@ -29,10 +55,10 @@ class DataframeData(GradioModel):\n'
                     ' class Dataframe(Component):\n'
                     '     """\n'
                     '     Accepts or displays 2D input through a '
                     'spreadsheet-like component for dataframes.\n'
                     '-    Preprocessing: passes the uploaded spreadsheet data '
                     'as a {pandas.DataFrame}, {numpy.array}, or {List[List]} '
                     'depending on `type`\n'
                     '-    Postprocessing: expects a {pandas.DataFrame}, '
                     '{pandas.Styler}, {numpy.array}, {List[List]}, {List}, a '
                     '{Dict} with keys `data` (and optionally `headers`), or '
                     '{str} path to a csv, which is rendered in the '
                     'spreadsheet.\n'
                     '-    Examples-format: a {str} filepath to a csv with '
                     'data, a pandas dataframe, or a list of lists (excluding '
                     'headers) where each sublist is a row of data.\n'
                     '-    Demos: filter_records, matrix_transpose, '
                     'tax_calculator\n'
                     '+    Preprocessing: passes the uploaded spreadsheet data '
                     'as a {pandas.DataFrame}, {numpy.array}, '
                     '{polars.DataFrame}, or {List[List]} depending on `type`\n'
                     '+    Postprocessing: expects a {pandas.DataFrame}, '
                     '{pandas.Styler}, {numpy.array}, {polars.DataFrame}, '
                     '{List[List]}, {List}, a {Dict} with keys `data` (and '
                     'optionally `headers`), or {str} path to a csv, which is '
                     'rendered in the spreadsheet.\n'
                     '+    Examples-format: a {str} filepath to a csv with '
                     'data, a pandas dataframe, a polars dataframe, or a list '
                     'of lists (excluding headers) where each sublist is a row '
                     'of data.\n'
                     '+    Demos: filter_records, matrix_transpose, '
                     'tax_calculator, sort_records\n'
                     '     """\n'
                     ' \n'
                     '     EVENTS = [Events.change, Events.input, '
                     'Events.select]\n'
                     '@@ -44,6 +70,7 @@ def __init__(\n'
                     '         value: pd.DataFrame\n'
                     '         | Styler\n'
                     '         | np.ndarray\n'
                     '+        | pl.DataFrame\n'
                     '         | list\n'
                     '         | list[list]\n'
                     '         | dict\n'
                     '@@ -55,7 +82,7 @@ def __init__(\n'
                     '         row_count: int | tuple[int, str] = (1, '
                     '"dynamic"),\n'
                     '         col_count: int | tuple[int, str] | None = '
                     'None,\n'
                     '         datatype: str | list[str] = "str",\n'
                     '-        type: Literal["pandas", "numpy", "array"] = '
                     '"pandas",\n'
                     '+        type: Literal["pandas", "numpy", "array", '
                     '"polars"] = "pandas",\n'
                     '         latex_delimiters: list[dict[str, str | bool]] | '
                     'None = None,\n'
                     '         label: str | None = None,\n'
                     '         show_label: bool | None = None,\n'
                     '@@ -79,7 +106,7 @@ def __init__(\n'
                     '             row_count: Limit number of rows for input '
                     'and decide whether user can create new rows. The first '
                     'element of the tuple is an `int`, the row count; the '
                     "second should be 'fixed' or 'dynamic', the new row "
                     'behaviour. If an `int` is passed the rows default to '
                     "'dynamic'\n"
                     '             col_count: Limit number of columns for '
                     'input and decide whether user can create new columns. '
                     'The first element of the tuple is an `int`, the number '
                     "of columns; the second should be 'fixed' or 'dynamic', "
                     'the new column behaviour. If an `int` is passed the '
                     "columns default to 'dynamic'\n"
                     '             datatype: Datatype of values in sheet. Can '
                     'be provided per column as a list of strings, or for the '
                     'entire sheet as a single string. Valid datatypes are '
                     '"str", "number", "bool", "date", and "markdown".\n'
                     '-            type: Type of value to be returned by '
                     'component. "pandas" for pandas dataframe, "numpy" for '
                     'numpy array, or "array" for a Python list of lists.\n'
                     '+            type: Type of value to be returned by '
                     'component. "pandas" for pandas dataframe, "numpy" for '
                     'numpy array, "polars" for polars dataframe, or "array" '
                     'for a Python list of lists.\n'
                     '             label: The label for this component. '
                     'Appears above the component and is also used as the '
                     'header if there are a table of examples for this '
                     'component. If None and used in a `gr.Interface`, the '
                     'label will be the name of the parameter this component '
                     'is assigned to.\n'
                     '             latex_delimiters: A list of dicts of the '
                     'form {"left": open delimiter (str), "right": close '
                     'delimiter (str), "display": whether to display in '
                     'newline (bool)} that will be used to render LaTeX '
                     'expressions. If not provided, `latex_delimiters` is set '
                     'to `[{ "left": "$$", "right": "$$", "display": True }]`, '
                     'so only expressions enclosed in $$ delimiters will be '
                     'rendered as LaTeX, and in a new line. Pass in an empty '
                     'list to disable LaTeX rendering. For more information, '
                     'see the [KaTeX '
                     'documentation](https://katex.org/docs/autorender.html). '
                     'Only applies to columns whose datatype is "markdown".\n'
                     '             label: The label for this component. '
                     'Appears above the component and is also used as the '
                     'header if there are a table of examples for this '
                     'component. If None and used in a `gr.Interface`, the '
                     'label will be the name of the parameter this component '
                     'is assigned to.\n'
                     '@@ -113,11 +140,15 @@ def __init__(\n'
                     '         self.datatype = (\n'
                     '             datatype if isinstance(datatype, list) else '
                     '[datatype] * self.col_count[0]\n'
                     '         )\n'
                     '-        valid_types = ["pandas", "numpy", "array"]\n'
                     '+        valid_types = ["pandas", "numpy", "array", '
                     '"polars"]\n'
                     '         if type not in valid_types:\n'
                     '             raise ValueError(\n'
                     '                 f"Invalid value for parameter `type`: '
                     '{type}. Please choose from one of: {valid_types}"\n'
                     '             )\n'
                     '+        if type == "polars" and not '
                     '_is_polars_available():\n'
                     '+            raise ImportError(\n'
                     '+                "Polars is not installed. Please '
                     'install using `pip install polars`."\n'
                     '+            )\n'
                     '         self.type = type\n'
                     '         values = {\n'
                     '             "str": "",\n'
                     '@@ -160,12 +191,20 @@ def __init__(\n'
                     '             value=value,\n'
                     '         )\n'
                     ' \n'
                     '-    def preprocess(self, payload: DataframeData) -> '
                     'pd.DataFrame | np.ndarray | list:\n'
                     '+    def preprocess(\n'
                     '+        self, payload: DataframeData\n'
                     '+    ) -> pd.DataFrame | np.ndarray | pl.DataFrame | '
                     'list:\n'
                     '         if self.type == "pandas":\n'
                     '             if payload.headers is not None:\n'
                     '                 return pd.DataFrame(payload.data, '
                     'columns=payload.headers)\n'
                     '             else:\n'
                     '                 return pd.DataFrame(payload.data)\n'
                     '+        if self.type == "polars":\n'
                     '+            polars = _import_polars()\n'
                     '+            if payload.headers is not None:\n'
                     '+                return polars.DataFrame(payload.data, '
                     'schema=payload.headers)\n'
                     '+            else:\n'
                     '+                return polars.DataFrame(payload.data)\n'
                     '         if self.type == "numpy":\n'
                     '             return np.array(payload.data)\n'
                     '         elif self.type == "array":\n'
                     '@@ -174,14 +213,15 @@ def preprocess(self, payload: '
                     'DataframeData) -> pd.DataFrame | np.ndarray | list\n'
                     '             raise ValueError(\n'
                     '                 "Unknown type: "\n'
                     '                 + str(self.type)\n'
                     '-                + ". Please choose from: \'pandas\', '
                     '\'numpy\', \'array\'."\n'
                     '+                + ". Please choose from: \'pandas\', '
                     '\'numpy\', \'array\', \'polars\'."\n'
                     '             )\n'
                     ' \n'
                     '     def postprocess(\n'
                     '         self,\n'
                     '         value: pd.DataFrame\n'
                     '         | Styler\n'
                     '         | np.ndarray\n'
                     '+        | pl.DataFrame\n'
                     '         | list\n'
                     '         | list[list]\n'
                     '         | dict\n'
                     '@@ -224,6 +264,11 @@ def postprocess(\n'
                     '                 headers=list(df.columns),\n'
                     '                 '
                     'data=df.to_dict(orient="split")["data"],  # type: '
                     'ignore\n'
                     '             )\n'
                     '+        elif _is_polars_available() and '
                     'isinstance(value, _import_polars().DataFrame):\n'
                     '+            df_dict = value.to_dict()\n'
                     '+            headers = list(df_dict.keys())\n'
                     '+            data = list(zip(*df_dict.values()))\n'
                     '+            return DataframeData(headers=headers, '
                     'data=data)\n'
                     '         elif isinstance(value, (np.ndarray, list)):\n'
                     '             if len(value) == 0:\n'
                     '                 return self.postprocess([[]])\n'
                     '@@ -296,6 +341,7 @@ def process_example(\n'
                     '         value: pd.DataFrame\n'
                     '         | Styler\n'
                     '         | np.ndarray\n'
                     '+        | pl.DataFrame\n'
                     '         | list\n'
                     '         | list[list]\n'
                     '         | dict',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/gradio%2Fcomponents%2Fdataframe.py',
            'sha': 'a69580b8005dd09f6423c649cc8048fdb073de32',
            'status': 'modified'},
           {'additions': 1,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/test%2Frequirements.in',
            'changes': 1,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/test%2Frequirements.in?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 0,
            'filename': 'test/requirements.in',
            'patch': '@@ -8,6 +8,7 @@ fastapi>=0.101.0\n'
                     ' gradio_pdf==0.0.3\n'
                     ' httpx\n'
                     ' huggingface_hub\n'
                     '+polars==0.20.5\n'
                     ' pydantic\n'
                     ' pytest\n'
                     ' pytest-asyncio',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/test%2Frequirements.in',
            'sha': 'e3e683d5484de8f54a40c36646f93aa5cd7562ae',
            'status': 'modified'},
           {'additions': 2,
            'blob_url': 'https://github.com/gradio-app/gradio/blob/6abad536778517a2ab9f5fc75d52afc576f01218/test%2Frequirements.txt',
            'changes': 2,
            'contents_url': 'https://api.github.com/repos/gradio-app/gradio/contents/test%2Frequirements.txt?ref=6abad536778517a2ab9f5fc75d52afc576f01218',
            'deletions': 0,
            'filename': 'test/requirements.txt',
            'patch': '@@ -130,6 +130,8 @@ prompt-toolkit==3.0.30\n'
                     '     # via ipython\n'
                     ' ptyprocess==0.7.0\n'
                     '     # via pexpect\n'
                     '+polars==0.20.5\n'
                     '+    # via -r requirements.in\n'
                     ' py==1.11.0\n'
                     '     # via pytest\n'
                     ' pyparsing==3.0.9',
            'raw_url': 'https://github.com/gradio-app/gradio/raw/6abad536778517a2ab9f5fc75d52afc576f01218/test%2Frequirements.txt',
            'sha': '886c17a49c1440ab0954ac5cb4c565e8134583ff',
            'status': 'modified'}],
 'html_url': 'https://github.com/gradio-app/gradio/commit/6abad536778517a2ab9f5fc75d52afc576f01218',
 'node_id': 'C_kwDOCa4eS9oAKDZhYmFkNTM2Nzc4NTE3YTJhYjlmNWZjNzVkNTJhZmM1NzZmMDEyMTg',
 'parents': [{'html_url': 'https://github.com/gradio-app/gradio/commit/be56c76c7b5d2814ea8239c7dbeddc4b1d3701c4',
              'sha': 'be56c76c7b5d2814ea8239c7dbeddc4b1d3701c4',
              'url': 'https://api.github.com/repos/gradio-app/gradio/commits/be56c76c7b5d2814ea8239c7dbeddc4b1d3701c4'}],
 'sha': '6abad536778517a2ab9f5fc75d52afc576f01218',
 'stats': {'additions': 94, 'deletions': 12, 'total': 106},
 'url': 'https://api.github.com/repos/gradio-app/gradio/commits/6abad536778517a2ab9f5fc75d52afc576f01218'}
Request failed for https://api.github.com/repos/gradio-app/gradio/issues/6973

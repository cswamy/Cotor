repo,folder,file,raw_code,llm_summary,summary_embed
../../../gradio,../../../gradio/gradio/components,audio.pyi,"""""""gr.Audio() component.""""""

from __future__ import annotations

import dataclasses
from pathlib import Path
from typing import Any, Callable, Literal

import httpx
import numpy as np
from gradio_client import utils as client_utils
from gradio_client.documentation import document, set_documentation_group

from gradio import processing_utils, utils
from gradio.components.base import Component, StreamingInput, StreamingOutput
from gradio.data_classes import FileData
from gradio.events import Events
from gradio.exceptions import Error

set_documentation_group(""component"")


@dataclasses.dataclass
class WaveformOptions:
    waveform_color: str | None = None
    waveform_progress_color: str | None = None
    show_controls: bool = False
    skip_length: str | None = None
    show_recording_waveform: bool = True

from gradio.events import Dependency

@document()
class Audio(
    StreamingInput,
    StreamingOutput,
    Component,
):
    """"""
    Creates an audio component that can be used to upload/record audio (as an input) or display audio (as an output).
    Demos: generate_tone, reverse_audio
    Guides: real-time-speech-recognition
    """"""

    EVENTS = [
        Events.stream,
        Events.change,
        Events.clear,
        Events.play,
        Events.pause,
        Events.stop,
        Events.pause,
        Events.start_recording,
        Events.pause_recording,
        Events.stop_recording,
        Events.upload,
    ]

    data_model = FileData

    def __init__(
        self,
        value: str | Path | tuple[int, np.ndarray] | Callable | None = None,
        *,
        sources: list[Literal[""upload"", ""microphone""]] | None = None,
        type: Literal[""numpy"", ""filepath""] = ""numpy"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        streaming: bool = False,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        format: Literal[""wav"", ""mp3""] = ""wav"",
        autoplay: bool = False,
        show_download_button: bool | None = None,
        show_share_button: bool | None = None,
        editable: bool = True,
        min_length: int | None = None,
        max_length: int | None = None,
        waveform_options: WaveformOptions | dict | None = None,
    ):
        """"""
        Parameters:
            value: A path, URL, or [sample_rate, numpy array] tuple (sample rate in Hz, audio data as a float or int numpy array) for the default value that Audio component is going to take. If callable, the function will be called whenever the app loads to set the initial value of the component.
            sources: A list of sources permitted for audio. ""upload"" creates a box where user can drop an audio file, ""microphone"" creates a microphone input. The first element in the list will be used as the default source. If None, defaults to [""upload"", ""microphone""], or [""microphone""] if `streaming` is True.
            type: The format the audio file is converted to before being passed into the prediction function. ""numpy"" converts the audio to a tuple consisting of: (int sample rate, numpy.array for the data), ""filepath"" passes a str path to a temporary file containing the audio.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If True, will allow users to upload and edit an audio file. If False, can only be used to play audio. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            streaming: If set to True when used in a `live` interface as an input, will automatically stream webcam feed. When used set as an output, takes audio chunks yield from the backend and combines them into one streaming audio output.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            format: The file format to save audio files. Either 'wav' or 'mp3'. wav files are lossless but will tend to be larger files. mp3 files tend to be smaller. Default is wav. Applies both when this component is used as an input (when `type` is ""format"") and when this component is used as an output.
            autoplay: Whether to automatically play the audio when the component is used as an output. Note: browsers will not autoplay audio files if the user has not interacted with the page yet.
            show_download_button: If True, will show a download button in the corner of the component for saving audio. If False, icon does not appear. By default, it will be True for output components and False for input components.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            editable: If True, allows users to manipulate the audio file if the component is interactive. Defaults to True.
            min_length: The minimum length of audio (in seconds) that the user can pass into the prediction function. If None, there is no minimum length.
            max_length: The maximum length of audio (in seconds) that the user can pass into the prediction function. If None, there is no maximum length.
            waveform_options: A dictionary of options for the waveform display. Options include: waveform_color (str), waveform_progress_color (str), show_controls (bool), skip_length (int), trim_region_color (str). Default is None, which uses the default values for these options.
        """"""
        valid_sources: list[Literal[""upload"", ""microphone""]] = [""upload"", ""microphone""]
        if sources is None:
            self.sources = [""microphone""] if streaming else valid_sources
        elif isinstance(sources, str) and sources in valid_sources:
            self.sources = [sources]
        elif isinstance(sources, list):
            self.sources = sources
        else:
            raise ValueError(
                f""`sources` must be a list consisting of elements in {valid_sources}""
            )
        for source in self.sources:
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must a list consisting of elements in {valid_sources}""
                )
        valid_types = [""numpy"", ""filepath""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.streaming = streaming
        if self.streaming and ""microphone"" not in self.sources:
            raise ValueError(
                ""Audio streaming only available if sources includes 'microphone'.""
            )
        self.format = format
        self.autoplay = autoplay
        self.show_download_button = show_download_button
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        self.editable = editable
        if waveform_options is None:
            self.waveform_options = WaveformOptions()
        elif isinstance(waveform_options, dict):
            self.waveform_options = WaveformOptions(**waveform_options)
        else:
            self.waveform_options = waveform_options
        self.min_length = min_length
        self.max_length = max_length
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return file(
            ""https://github.com/gradio-app/gradio/raw/main/test/test_files/audio_sample.wav""
        )

    def example_value(self) -> Any:
        return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/audio_sample.wav""

    def preprocess(
        self, payload: FileData | None
    ) -> str | tuple[int, np.ndarray] | None:
        """"""
        Parameters:
            payload: audio data as a FileData object, or None.
        Returns:
            passes audio as one of these formats (depending on `type`): a `str` filepath, or `tuple` of (sample rate in Hz, audio data as numpy array). If the latter, the audio data is a 16-bit `int` array whose values range from -32768 to 32767 and shape of the audio data array is (samples,) for mono audio or (samples, channels) for multi-channel audio.
        """"""
        if payload is None:
            return payload

        if not payload.path:
            raise ValueError(""payload path missing"")

        # Need a unique name for the file to avoid re-using the same audio file if
        # a user submits the same audio file twice
        temp_file_path = Path(payload.path)
        output_file_name = str(
            temp_file_path.with_name(f""{temp_file_path.stem}{temp_file_path.suffix}"")
        )

        sample_rate, data = processing_utils.audio_from_file(temp_file_path)

        duration = len(data) / sample_rate
        if self.min_length is not None and duration < self.min_length:
            raise Error(
                f""Audio is too short, and must be at least {self.min_length} seconds""
            )
        if self.max_length is not None and duration > self.max_length:
            raise Error(
                f""Audio is too long, and must be at most {self.max_length} seconds""
            )

        if self.type == ""numpy"":
            return sample_rate, data
        elif self.type == ""filepath"":
            output_file = str(Path(output_file_name).with_suffix(f"".{self.format}""))
            processing_utils.audio_to_file(
                sample_rate, data, output_file, format=self.format
            )
            return output_file
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(self.type)
                + "". Please choose from: 'numpy', 'filepath'.""
            )

    def postprocess(
        self, value: str | Path | bytes | tuple[int, np.ndarray] | None
    ) -> FileData | bytes | None:
        """"""
        Parameters:
            value: expects audio data in any of these formats: a `str` or `pathlib.Path` filepath or URL to an audio file, or a `bytes` object (recommended for streaming), or a `tuple` of (sample rate in Hz, audio data as numpy array). Note: if audio is supplied as a numpy array, the audio will be normalized by its peak value to avoid distortion or clipping in the resulting audio.
        Returns:
            FileData object, bytes, or None.
        """"""
        orig_name = None
        if value is None:
            return None
        if isinstance(value, bytes):
            if self.streaming:
                return value
            file_path = processing_utils.save_bytes_to_cache(
                value, ""audio"", cache_dir=self.GRADIO_CACHE
            )
            orig_name = Path(file_path).name
        elif isinstance(value, tuple):
            sample_rate, data = value
            file_path = processing_utils.save_audio_to_cache(
                data, sample_rate, format=self.format, cache_dir=self.GRADIO_CACHE
            )
            orig_name = Path(file_path).name
        else:
            if not isinstance(value, (str, Path)):
                raise ValueError(f""Cannot process {value} as Audio"")
            file_path = str(value)
            orig_name = Path(file_path).name if Path(file_path).exists() else None
        return FileData(path=file_path, orig_name=orig_name)

    def stream_output(
        self, value, output_id: str, first_chunk: bool
    ) -> tuple[bytes | None, Any]:
        output_file = {
            ""path"": output_id,
            ""is_stream"": True,
        }
        if value is None:
            return None, output_file
        if isinstance(value, bytes):
            return value, output_file
        if client_utils.is_http_url_like(value[""path""]):
            response = httpx.get(value[""path""])
            binary_data = response.content
        else:
            output_file[""orig_name""] = value[""orig_name""]
            file_path = value[""path""]
            is_wav = file_path.endswith("".wav"")
            with open(file_path, ""rb"") as f:
                binary_data = f.read()
            if is_wav:
                # strip length information from first chunk header, remove headers entirely from subsequent chunks
                if first_chunk:
                    binary_data = (
                        binary_data[:4] + b""\xFF\xFF\xFF\xFF"" + binary_data[8:]
                    )
                    binary_data = (
                        binary_data[:40] + b""\xFF\xFF\xFF\xFF"" + binary_data[44:]
                    )
                else:
                    binary_data = binary_data[44:]
        return binary_data, output_file

    def process_example(
        self, value: tuple[int, np.ndarray] | str | Path | bytes | None
    ) -> str:
        if value is None:
            return """"
        elif isinstance(value, (str, Path)):
            return Path(value).name
        return ""(audio)""

    def check_streamable(self):
        if (
            self.sources is not None
            and ""microphone"" not in self.sources
            and self.streaming
        ):
            raise ValueError(
                ""Audio streaming only available if source includes 'microphone'.""
            )

    
    def stream(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def clear(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def play(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def pause(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def stop(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def pause(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def start_recording(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def pause_recording(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def stop_recording(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","This code defines an `Audio` component in Gradio, which allows users to upload/record audio as an input or display audio as an output. The component supports various events such as streaming, changing, clearing, playing, pausing, stopping, starting recording, pausing recording, stopping recording, and uploading. Each event can be associated with a function to be executed when the event is triggered. The component provides methods for preprocessing and postprocessing audio data, as well as for streaming audio output. Additionally, it includes options for setting up the component, such as sources, type, label, format, autoplay, waveform display options, and more.","[-0.05896204, 0.032356028, 0.021075275, -0.027068937, -0.0050495383, -0.027824236, 0.020112878, -0.030796703, -0.005217044, -0.032648403, 0.028457712, -0.009453418, -0.023438629, 0.0057774275, 0.010555911, -0.024766494, -0.0423211, -0.003730811, 0.021440743, 0.028238432, 0.0126451645, -0.027678048, -0.027994787, 0.055989575, 0.038203504, -0.06636884, -0.03442701, 0.09092824, -0.024997957, -0.0037003553, -0.047023445, -0.035767056, -0.004269875, -0.006298218, 0.005183543, -0.040493764, 0.023999013, 0.006499225, -0.029700302, -0.022062037, -0.017310962, -0.037350748, -0.035304133, 0.018175902, -0.012206605, 0.008558024, -0.032356028, 0.029286105, 0.01908957, 0.03844715, -0.054576434, 0.008326561, -0.019223575, -0.015654178, -0.009496056, 0.032550946, -0.020222519, 0.014496866, -0.026094358, -0.036351804, -0.0073763463, -0.018614462, 0.0270933, 0.0044465177, 0.00293592, -0.02387719, -0.021684388, 0.019662134, 0.00690733, -0.011219843, 0.03910499, -0.038836982, 0.014643053, -0.055989575, -0.035255402, -0.013863389, -0.018066261, -0.04546412, 0.0330626, 0.0050343107, -0.01675058, 0.013863389, -0.086932465, -0.03111344, 0.0034780295, 0.027263852, -0.055404827, 0.022439687, 0.018626645, -0.04536666, -0.03888571, 0.009861523, -0.023682274, 0.048558407, -0.009922435, 0.0027608, 0.0071387924, -0.017578973, 0.02370664, 0.048290398, 0.012358882, -0.04617069, -0.014959791, -0.091269344, 0.035742693, -0.051360324, 0.0028247568, 0.025826348, -0.028433347, -0.012535525, 0.012243151, -0.0057134703, -0.029188646, 0.028945003, -0.007077881, -0.029505385, 0.024790859, -0.016653122, -0.04042067, -0.03269713, -0.05097049, 0.045829587, -0.026386732, -0.020198153, 0.07747904, -0.039470457, 0.011146749, -0.03367171, -0.03160073, -0.01897993, 0.019272303, 0.021038728, 0.019759594, -0.07280107, 0.00062586257, 0.012657347, -0.046682343, -0.012523343, -0.03774058, 0.0073458906, 0.030090133, -0.043222588, 0.0103549035, -0.006913421, -0.012584254, -0.03345243, -0.046195053, 0.0051865885, -0.039909016, -0.04263784, -0.0033105237, 0.026362367, -0.059595518, 0.012827898, 0.01876065, 0.019540312, 0.014167945, 0.0029541932, -0.019820504, -0.030309413, 0.0071387924, 0.03318442, 0.042564746, 0.0045927046, -0.022817336, -0.0017451058, 0.0024806086, 0.020539256, -0.033257514, 0.07041334, -0.02811661, -0.030211955, -0.080646425, 0.02926174, 0.013607562, -0.044148438, 9.060541e-05, -0.028701358, -0.01359538, -0.01348574, -0.0010172171, 0.008813851, -0.011810682, 0.017262233, -0.009215864, -0.0012951244, -0.016896768, -0.04210182, -0.035718326, 0.006505316, 0.009672699, 0.0052018166, 0.005655605, 0.052724734, 0.035425954, -0.023243714, 0.030772338, -0.0040170937, 0.0018197221, -0.028603898, 0.04017703, -0.01533744, -0.0025567475, -0.033476796, -0.04117597, -0.0034902117, 0.034183364, 0.015093795, 0.030260684, -0.023085345, 0.01882156, -0.051750153, 0.02001542, -0.017225686, -0.086347714, 0.02643546, -0.024401026, 0.039470457, 0.0060789376, -0.034500103, -0.04660925, 0.004035367, -0.0016872402, -0.0064748605, 0.035474684, -0.0021593021, 0.0045927046, 0.0050190827, 0.05433279, -0.026557283, 0.050239556, 0.00094640773, -0.0072788885, 0.0047145267, 0.058328565, -0.046682343, 0.020344341, -0.03632744, 0.0504832, 0.024754312, -0.04646306, -0.03372044, 0.027068937, 0.016324202, 0.01816372, 0.050824303, 0.0071448837, -0.032989506, 0.050385743, 0.07543243, -0.030821066, -0.005433279, 0.0063164914, 0.025168508, 0.0072910707, 0.0064200405, 0.01544708, 0.04215055, 0.013887754, -0.0007305537, 0.0165313, -0.052091256, -0.033086963, 0.03703401, 0.0050069005, 0.0137172025, 0.0036973099, 0.024669036, 0.009429053, -0.0020374795, -0.04850968, -0.020843813, 0.035718326, 0.012285789, 0.015727272, 0.016165832, 0.05482008, 0.04882642, 0.021014364, 0.042394195, -0.013388282, 0.000569139, -0.0178348, 0.045634672, -0.01844391, 0.015690725, 0.029992674, -0.0019674317, 0.028603898, -0.042272374, 0.024059923, 0.006505316, 0.054576434, -0.038057316, 0.023779731, -0.0002636313, 0.046877258, -0.01962559, 0.0270933, 0.00023146256, 0.022853881, 0.021075275, 0.006785508, -0.02507105, -0.022975704, 0.03893444, -0.0006163452, 0.028750086, 0.0312109, -0.0032587491, 0.056769237, 0.03844715, -0.0069926055, -0.016762761, -0.043222588, 0.024193928, 0.059790432, 0.00815601, 0.0029892172, -0.024486301, 0.024644671, 0.018468276, 0.038227867, -0.044855006, -0.0074250754, -0.02904246, -0.052578546, -0.018845925, -0.009270685, -0.030431235, 0.022695513, 0.008527568, -0.045001194, 0.034451373, 0.040396307, 0.02067326, -0.031893104, 0.025485246, -0.057353985, 0.007053517, -0.013351735, -0.022500597, 0.0029054643, 0.031405814, 0.025753256, 0.031478908, -0.05525864, -0.0044312896, -0.021891486, -0.056087032, -0.0017344464, -0.025923807, -0.017432785, -0.030382507, 0.04368551, -0.009325504, -0.03698528, -0.03654672, -0.065930285, -0.014155762, -0.034183364, 0.053553127, -0.018200267, 0.027872965, -0.009812795, 0.006499225, -0.043856062, -0.025801985, -0.0008169715, -0.049898453, 0.034353916, 0.018297724, -0.0031430179, 0.008168192, -0.039080624, 0.012188331, 0.018346453, -0.021258008, -0.035693962, 0.00035271392, 0.020185972, 0.015288711, 0.019455036, -0.017749524, -0.015142524, -0.000896156, -0.026045628, 0.05530737, 0.017822618, 0.0077479044, 0.0017055136, -0.03286768, 0.00968488, -0.00048538612, 0.03242912, 0.0007457815, 0.024401026, 0.015349622, 0.028140973, 0.0055337823, -0.02012506, -0.02279297, -0.045780856, 0.044026613, -0.014777057, -0.00696215, 0.045610305, 0.06861038, 0.00459575, -0.011658403, -0.0008124031, 0.021708751, 0.053017106, -0.0039835926, 0.032989506, -0.012163967, -0.010665551, -0.03177128, 0.026557283, 0.0541866, 0.0148623325, -0.009014858, 0.0066454117, -0.038593337, 0.019016476, 0.03832533, 0.005171361, -0.014277585, 0.034061544, -0.043953523, -0.049947184, 0.00024193167, -0.00037022587, 0.008491022, 0.0178348, -0.028360255, -0.025095414, -0.010446271, 0.03757003, 0.025192872, -0.042857118, 0.023523904, 0.013534469, 0.039031897, -0.042881485, 0.0089234905, -0.010537637, 0.023134073, -0.029724665, -0.01626329, -0.008740757, 0.010196535, -0.047803108, 0.011579219, 0.03942173, -0.016604394, 0.017737342, 0.033160057, -0.022902612, -0.0070047877, -0.030918526, 0.0053236387, -0.0061489856, 0.059400603, -0.041517075, 0.00391659, 0.018090626, 0.02626491, -0.017444968, -0.003481075, -0.0002019587, 0.029724665, 0.02502232, 0.017091682, -0.042491652, 0.008076825, 0.021745298, -0.023804097, -0.02533906, -0.022208223, -0.018943382, 0.0073337085, 0.004483064, -0.0098188855, 0.02077072, 0.07806379, -0.025265966, -0.05097049, 0.013388282, -0.034889936, -0.024608124, -0.005929705, -0.00025144903, -0.011426941, 0.020064149, 0.020758538, -0.041858178, 0.03557214, 0.005003855, -0.025607068, -0.000982193, -0.01876065, -0.0010354904, 0.061593406, 0.039153717, -0.0075590797, 0.024364479, -0.021465106, 0.019345397, -0.013948665, 0.013095908, -0.011506125, 0.0016613529, -0.0047571645, -0.007485986, -0.046048865, -0.008521477, 0.030041404, -0.014009575, -0.0033592526, -0.02213513, 0.019406307, -0.016482571, -0.0010179784, -0.009593514, 0.006815963, -0.0115731275, -0.023816278, 0.015776, -0.04726709, -0.0028125746, -0.00060340157, -0.02371882, 0.012304062, -0.05423533, -0.015313076, -0.0019902734, 0.0013073066, 0.019223575, -0.015483627, -0.00091671356, 0.017152594, -0.0074311662, -0.021903668, 0.014143581, 0.03844715, 0.00077281083, -0.07299598, 0.0006665969, 0.025412152, 0.022062037, -0.059595518, 0.04444081, -0.035279766, -0.0012395428, 0.020271247, 0.024595942, 0.02403556, -0.059254415, -0.012273607, -0.009983346, -0.0024075152, 0.005116541, 0.019893598, -0.0060606645, -0.026045628, -0.01593437, -0.058718394, -0.011536581, 0.035279766, -0.019284485, 0.010050348, -0.009179317, 0.038544606, -0.020636715, 0.013960847, 0.00041381546, -0.014387225, -0.0031856557, -0.0050708572, 0.017335327, -0.021014364, 0.010135624, -0.013912118, -0.031015983, -0.011171114, 0.008058552, 0.038642064, 0.010379269, 0.0013111136, 0.0040597315, 0.018675374, 0.010848285, 0.02039307, 0.005421097, 0.01659221, -0.00021471198, 0.03323315, -0.02453503, 0.017639883, 0.0233899, 0.0005908386, -0.0037247199, 0.038422786, 0.036424898, -0.0025932943, -0.0015113591, 0.0038434966, -0.04029885, -0.004154144, -0.022049854, 0.028628264, -0.06398112, -0.049776632, -0.00388918, -0.0023557406, -0.033306245, 0.030479964, 0.017566789, 0.02017379, -0.015471444, 0.014935426, 0.029870853, 0.006292127, -0.009276776, 0.035645235, 0.005661696, 0.0028948048, 0.017152594, 0.031089077, 0.022866065, 0.01690895, 0.06437095, -0.018638827, 0.018504823, -0.03708274, -0.015715089, -0.021988943, 0.0006981946, -0.049094427, 0.008661573, 0.0441728, 0.030553058, 0.016604394, 0.048095483, 0.00051508035, -0.0018136309, 0.0021151414, 0.04461136, -0.01288881, -0.04105415, 0.0015006997, 0.019649953, -0.0015311553, -0.0032161113, -0.018322088, -0.030114496, 0.0059479787, 0.0018364727, 0.01984487, -0.025290329, -0.009112315, -0.008417928, 0.0017466287, -0.0016278517, 0.025436517, 0.0031019028, 0.0011649267, -0.016080556, 0.04042067, -0.05389423, 0.0109274695, 0.016080556, 0.01544708, 0.055404827, -0.037107103, 0.0023679228, -0.027458768, 0.014703964, 0.033160057, -0.028189704, -0.0019780912, -0.043271314, -0.018845925, -0.017006407, -0.034183364, 0.016226744, -0.0030623106, 0.013156819, -0.04134652, -0.018090626, -0.003736902, 0.015641997, 0.02480304, 0.00013600329, 0.03703401, -0.008576297, -0.025972536, 0.03708274, -0.053553127, 0.026898386, -0.0062373066, 0.01621456, -0.01381466, -0.015776, 0.028287161, 0.001841041, -0.007303253, -0.0050434475, -0.019820504, 0.022159494, 0.016238926, -0.013400463, 0.016506935, 0.0047602104, -0.0043155584, 0.032404758, 0.01207869, 0.0050982675, -0.015946552, -0.0047815293, 0.032404758, -0.05238363, -0.021842755, 0.024023376, -0.03164946, -0.009556967, 0.0013537514, -0.035474684, 0.0094595095, -0.027117666, 0.0024044695, 0.023755368, 0.011085838, -0.022500597, 0.04987409, 3.9568487e-05, -0.028140973, 0.0312109, -0.019978873, 0.019783957, 0.04741328, 0.004945989, -0.017883528, -0.0032952959, -0.019235756, 0.00690733, -0.000927373, -0.019771775, -0.0028140973, -0.014752693, 0.008503203, -0.024230475, 0.00059464556, -0.0022658966, -0.020368705, -0.019053023, 0.0065845004, -0.019893598, -0.00380695, -0.00380695, 0.021976762, 0.011372121, 0.0025080186, -0.025095414, -0.04651179, 0.036790363, 0.0026405004, 0.032039292, 0.029237377, -0.017225686, -0.01555672, 0.0045165652, -0.0043429686, 0.046268146, -0.017798252, 0.000927373, -0.023523904, 0.012304062, -0.0029983537, 0.005667787, 0.0043064216, 0.017920075, -0.021355467, 0.033111326, 0.0017268325, -0.003965319, 0.021635657, -0.024742128, -0.03459756, 0.00380695, -0.01054982, 0.00061139616, -0.009039222, 0.034938663, -0.008040278, 0.004498292, -0.036668543, 0.0036181253, 0.01251116, -0.033208787, -0.037716214, -0.04246729, 0.038276598, 0.011268572, 0.039641008, -0.012559889, -0.05530737, -0.035547774, 0.0017253098, -0.019735228, 0.004720618, -0.0097823385, 0.021221463, 0.011384303, 0.031308357, 0.02072199, 0.051262867, -0.018212449, 0.013071544, 0.005113495, 0.008588479, -0.010038165, 0.01643384, -0.00067421084, 0.025533974, 0.03644926, 0.0338179, 0.03968974, -0.006298218, 0.01555672, 0.018139355, -0.0040810504, 0.026727835, 0.012523343, 0.01745715, -0.016762761, 0.022914793, -0.023536088, -0.034159, 0.015057248, 0.021781845, 0.022610238, -0.0017679476, 0.049947184, 0.0068220543, 0.013169001, -0.013887754, -0.002789733, 0.0023344217, 0.0012463954, 0.010019892, 0.007961093, -0.053699315, 0.01897993, -0.025217237, 0.00021033398, 0.034037177, -0.0077479044, 0.046414334, -0.0115000345, 0.014350679, -0.014837968, 0.018468276, 0.0053662765, -0.06573536, -0.034621924, -0.005612967, 0.03050433, -0.027556226, -0.010257446, 0.016543481, 0.018906835, -0.017055135, 0.0019293622, 0.007845363, 0.018687556, 0.00010431043, -0.017993169, -0.025680162, -0.011274663, 0.011335574, 0.011274663, -0.01745715, -0.022658966, -0.0148257855, 0.020624531, 0.023085345, -0.015179071, 0.02594817, -0.039178085, -0.012383247, -0.019357579, 0.013692837, 0.01871192, 0.038593337, -0.011219843, 0.014399407, -0.0070717903, -0.014082669, -0.024997957, 0.002518678, -0.04585395, -0.018200267, -0.0063104, 0.018297724, -0.05111668, 0.033842262, -0.0097092455, -0.0071936124, -0.02577762, -0.019637771, 0.018407365, 0.013229912, -0.0008367676, -0.018748468, 0.009008766, -0.002783642, -0.009161044, -0.027142031, -0.017920075, 0.0019126117, 0.00843011, -0.004900306, -0.026191816, 0.010598549, 0.0030973344, 0.036644176, 0.025046686, -0.011457397, 0.025801985, 0.017652066, 0.03393972, -0.04034758, 0.04926498, -0.038276598, -0.017347509, -0.0052566365, -0.018809378, -0.005134814, -0.027531862, -0.052724734, 0.010574184, -0.023731003, 0.048558407, -0.034621924, 0.023207167, 0.004863759, -0.027824236, 0.009240229, -0.04312513, 0.009106224, 0.060765013, 0.005902295, 0.0038374055, -0.004519611, 0.005591648, 0.0015836912, 0.032161113, 0.0015220186, -0.043149494, 0.0033866626, -0.010190444, 0.010080803, -0.007894091, -0.00042028728, 0.009593514, -0.016056191, 0.02279297, 0.028457712, 0.019138299, 0.0037825855, 0.0027440495, 0.015861277, -0.01593437, -0.018346453, 0.002395333, -0.034573197, 0.036692906, 0.010421907, 0.015459263, 0.02072199, 0.021392014, 0.0019278395, -0.0575489, -0.036912188, 0.0036363986, -0.0071387924, 0.039933383, 0.023255896, -0.070023514, -0.024340115, -0.008040278, 0.031162169, 0.018675374, 0.0025004048, -0.0020435706, -0.0142532205, 0.029456656, 0.00013695503, -0.008996584, -0.001397912, 0.00399882, -0.037886765, -0.00478762, -0.009215864, 0.022878246, 0.0017237869, -0.044099707, -0.009288958, -0.0005314502, -0.0044647907, 0.023219349, -0.035742693, 0.0031247446, -0.028043516, -0.027994787, 0.005067812, 0.0086006615, -0.028262796, -0.0005318309, 0.003523713, 0.04117597, -0.015678544, -0.036400534, -0.007619991, 0.03654672, 0.043929156, -0.00031521547, -0.0037734488, -0.0042028725, 0.026459824, -0.015739454, -0.020222519, -0.0016491708, 0.040445037, 0.04697472, -0.019430673, 0.0051957252, -0.006718505, -0.017956622, -0.0005462973, 0.01136603, 0.020965634, -0.009112315, 0.004041458, 0.0061002565, -0.024608124, 0.018590098, 0.04882642, 0.0030607877, 0.0076809023, 0.021221463, 0.01240152, -0.007985458, -0.010951834, -0.029237377, -0.02061235, 0.009971163, 0.01908957, -0.028725721, 0.0356696, 0.019662134, -0.07850236, -0.030285047, -0.0124989785, 0.019601224, 0.03291641, 0.0071875216, 0.015532356, -0.0049063973, 0.012523343, -0.00084742706, -0.0030790612, -0.025607068, -0.02083163, 0.0015235414, -0.021294555, 0.049338073, -0.025631433, -0.027970422, 0.002131892, -0.022171676, -0.0046018413, 0.009538693, 0.01984487, 0.008838215, 0.0049185795, 0.032672767, -0.043539327, -0.021513836, 0.029797759, -0.010074712, -0.018090626, -0.013400463, 0.013449193, -0.005585557, 0.008290014, -0.0028628265, -0.00679769, 0.034816843, 0.01576382, 4.7824808e-05, -0.022074219, 0.009550876, -0.010848285, 0.009593514, -0.034695018, 0.022524962, -0.0072910707, 0.0037734488, 0.037131466, -0.01930885, -0.055404827, -0.019771775, 0.008722484, 0.0065662274, 0.012681711, -0.010598549, 0.010817829, 0.028628264, -0.0025765437, -0.038520243, 0.015593267, -0.009751883, -0.012090873, 0.016409477, 0.0026069994, -0.03291641, 0.030333778, 0.01054982, 0.029943945, 0.0065723183, -0.01924794, 0.0015791229, -0.00617335, 0.021258008, -0.026581647, -0.001286749, -0.0022202132, 0.0074555306, -0.04351496, 0.023341171, 0.032380395, -0.04660925, -0.022549326, -0.005710425, 0.04025012, 0.013790295, 0.018041898, -0.003919636, 0.044245895, 0.016933313, 0.0041724173, 0.012937538, 0.0010149329, -0.0077539957, -0.0015821684, 0.00057256524, -0.008436201, -0.019162664, -0.029870853, -0.033428065, -0.016726214, 0.0063652205, 0.024230475, -0.029602842, -0.0016156696, 0.007906274, 0.038983166, 0.024766494, -0.0045561576, -0.03998211, 0.006298218, 0.011835046, 0.014167945, -0.024754312, 0.007863636, 0.028457712, 0.037594393, 0.017018588, -0.045610305, 0.031357087, 0.0029709437, -0.012377156, 0.0106411865, -0.011329483, 0.0050434475, 0.024778675, 0.03437828, -0.014752693, 0.00386177, -0.011244208, 0.0020405252, -0.0042851027, -0.022805152, -0.048168577, 0.026021264, 0.028384618, 0.021282373, -0.0007834703, 0.01266953, -0.021294555, 0.010897013, -0.0015098363, -0.01555672, -0.021745298, -0.028165339, 0.035255402, 0.030065767, 0.01626329, 0.0038983168, 0.00039135446, -0.014643053, -0.0064261314, 0.0075956266, -0.0071509746, 0.017566789, 0.02409647, 0.037789308, -0.0009220433, -0.018090626, 0.0062799444, 0.018785015, -0.002830848, 0.029066823, 0.018468276, -0.03813041, -0.01714041, -0.021806208, 0.0050708572, -0.056574322, 0.05326075, 0.0189312, 0.0026496372, -0.012559889, 0.017067319, 0.01604401, 0.02855517, 0.0092097735, 0.030479964, 0.010373177, 0.005622104, 0.011877684, 0.018919019, 0.033964086, 0.010427997, 0.023000069, -0.009252411, -0.0077296314, 0.011914231, 0.007735722, -0.0057743816, 0.00941078, -0.00456834, -0.0062860358, 0.020490527, 0.0054789623, 0.0044647907, -0.05482008, -0.00037936255, 0.009520421, -0.026508553, -0.043100763, 0.012255333, -0.019930145, -0.038106047, 0.038154773, 0.0107142795, 0.0068829656, -0.0026679104, 0.009879797, 0.024120836, 0.0064626783, -0.015507991, 0.033842262, -0.031259626, -0.024425391, -0.0040932326, -0.012961904, -0.02262242, -0.036790363, 0.015617631, 0.030358141, -0.0233899, -0.0012433499, -0.0062494893, -0.030260684, -0.001280658, 0.034621924, 0.0069256034, 0.058182377, -0.00040962783, 0.0034414828, 0.029675936, 0.015288711, -0.0022537145, -0.01751806, -0.01038536, -0.02453503, 0.00679769, -0.001764902, 0.0055185547, 0.007528624, 0.0022323953, -0.030431235, -0.015702907, -0.0050495383, -0.030333778, -0.0071205194, 0.0030988574, -0.017505879, 0.018955566, -0.0070291525, 0.0064626783, 0.017530244, -0.025875077, -0.0089234905, -0.00032282935, -0.012523343, 0.0057195616, 0.0015745545, -0.03520667, -0.0054698256, 0.026825292, 0.0032861591, 0.0016019646, -0.03333061, -0.013193366, 0.042540383, 0.010811738, 0.006657594, 0.0028354162, -0.0050008097, -0.011299027, -0.022317864, 0.0012037576, 0.014326314, -0.004245511, 0.033915356, -0.01908957, 0.021404196, -0.005509418, 0.06880529, 0.0013796387, 0.008290014, -0.010184352, -0.009855432, 0.022488415, 0.012474613, 0.0062129423, 0.034500103, -0.03579142, -0.014728328, 0.013863389, -0.02029561, 0.013315188, 0.019540312, -0.015325258, 0.031893104, 0.008661573, 0.01751806, 0.021026546, 0.040566858, -0.022110766, 0.009751883, 0.023950284, 0.04453827, 0.0070352433, 0.015715089, -0.0497279, -0.007906274, 0.013644109, 0.0045165652, -0.0037825855, 0.021940215, -0.022756424, 0.008984402, -0.013778113, -0.021684388, 0.004997764, 0.00077128806, 0.011554855, -0.020307794, -0.034159, -0.03925118, -0.018334271, 0.0023633544, -0.004662752, -0.019016476, -0.032039292, 0.0501421, 0.026557283, -0.007461622, -0.032161113, 0.02480304, -0.008844306, 0.021733116, -0.00057332666, 0.024973592, -0.010647277, -0.011225934, -0.0062494893, 0.008497112, 0.0022506688, 0.039909016, -0.008046369, -0.027361311, -0.000927373, -0.009697063, -0.015836911, -0.00024878417, 0.014898879, 0.013790295, 0.018029716, 0.006051528, 0.014472501, -0.0014435954, 0.018845925, -0.051798884, -0.01277917, -0.011329483, 0.021014364, 0.046925988, -0.015641997, -0.008296105, -0.027434405, 0.022074219, -0.001259339, -0.018663192, 0.01626329, 0.01723787, 0.01240152, 0.014643053, 0.004312513, 0.015325258, 0.019503767, 0.005743926, 0.01033663, -0.006444405, 0.0126208, 0.042662203, 0.023901554, -0.052773464, 0.041468345, 0.044952463, -0.04003084, 0.014703964, 0.008277832, -0.008229103, -0.011682768, 0.00679769, 0.013315188, -0.035864513, -0.026045628, -0.021489471, -0.027239488, 0.031478908, -0.013668473, -0.018456094, -0.03262404, 0.002374014, 0.018383, -0.02665474, -0.035109214, -0.006292127, -0.008466656, -0.009447327, 0.0040018656, -0.024376662, -0.007857544, 0.021599112, -0.03186874, -0.005841384, -0.0003317757, 0.005987571, -0.0028354162, 0.009745792, 0.026776563, 0.029237377, -0.0103914505, -0.0043307864, 0.006657594, -0.045829587, 0.0039074533, -0.007711358, 0.0077844514, -0.0009601128, -0.0049398984, -0.019991055, 0.0063956757, 0.013607562, 0.009873705, -0.0045165652, -0.0062159877, 0.0024196974, -0.016982043, -0.03942173, 0.013229912, -0.003176519, 0.008015914, 0.017042954, 0.008131645, -0.016360749, 0.0043155584, -0.05296838, -0.0015296325, 0.0059753885, 0.008545841, 0.0003747942, 0.025826348, -0.023097526, 0.016555663, 0.016226744, 0.005558147, 0.029359197, 0.028969366, -0.029407928, 0.0021714843, 0.05004464, -0.03138145, -0.009130589, -0.02105091, -0.07762523, 0.02279297, -0.0087833945, 0.023791915, 0.005841384, -0.00035575946, -0.015130342, 0.00060340157, 0.021294555, 0.005238363, -0.008229103, 0.0109274695, -0.00029123167]"
../../../gradio,../../../gradio/gradio/components,dropdown.pyi,"""""""gr.Dropdown() component.""""""

from __future__ import annotations

import warnings
from typing import Any, Callable, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import FormComponent
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Dropdown(FormComponent):
    """"""
    Creates a dropdown of choices from which a single entry or multiple entries can be selected (as an input component) or displayed (as an output component).

    Demos: sentence_builder
    """"""

    EVENTS = [
        Events.change,
        Events.input,
        Events.select,
        Events.focus,
        Events.blur,
        Events.key_up,
    ]

    def __init__(
        self,
        choices: list[str | int | float | tuple[str, str | int | float]] | None = None,
        *,
        value: str | int | float | list[str | int | float] | Callable | None = None,
        type: Literal[""value"", ""index""] = ""value"",
        multiselect: bool | None = None,
        allow_custom_value: bool = False,
        max_choices: int | None = None,
        filterable: bool = True,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            choices: A list of string options to choose from. An option can also be a tuple of the form (name, value), where name is the displayed name of the dropdown choice and value is the value to be passed to the function, or returned by the function.
            value: default value(s) selected in dropdown. If None, no value is selected by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            type: Type of value to be returned by component. ""value"" returns the string of the choice selected, ""index"" returns the index of the choice selected.
            multiselect: if True, multiple choices can be selected.
            allow_custom_value: If True, allows user to enter a custom value that is not in the list of choices.
            max_choices: maximum number of choices that can be selected. If None, no limit is enforced.
            filterable: If True, user will be able to type into the dropdown and filter the choices by typing. Can only be set to False if `allow_custom_value` is False.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, choices in this dropdown will be selectable; if False, selection will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.choices = (
            # Although we expect choices to be a list of tuples, it can be a list of tuples if the Gradio app
            # is loaded with gr.load() since Python tuples are converted to lists in JSON.
            [tuple(c) if isinstance(c, (tuple, list)) else (str(c), c) for c in choices]
            if choices
            else []
        )
        valid_types = [""value"", ""index""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.multiselect = multiselect
        if multiselect and isinstance(value, str):
            value = [value]
        if not multiselect and max_choices is not None:
            warnings.warn(
                ""The `max_choices` parameter is ignored when `multiselect` is False.""
            )
        if not filterable and allow_custom_value:
            filterable = True
            warnings.warn(
                ""The `filterable` parameter cannot be set to False when `allow_custom_value` is True. Setting `filterable` to True.""
            )
        self.max_choices = max_choices
        self.allow_custom_value = allow_custom_value
        self.filterable = filterable
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def api_info(self) -> dict[str, Any]:
        if self.multiselect:
            json_type = {
                ""type"": ""array"",
                ""items"": {""type"": ""string"", ""enum"": [c[1] for c in self.choices]},
            }
        else:
            json_type = {
                ""type"": ""string"",
                ""enum"": [c[1] for c in self.choices],
            }
        return json_type

    def example_payload(self) -> Any:
        if self.multiselect:
            return [self.choices[0][1]] if self.choices else []
        else:
            return self.choices[0][1] if self.choices else None

    def example_value(self) -> Any:
        if self.multiselect:
            return [self.choices[0][1]] if self.choices else []
        else:
            return self.choices[0][1] if self.choices else None

    def preprocess(
        self, payload: str | int | float | list[str | int | float] | None
    ) -> str | int | float | list[str | int | float] | list[int | None] | None:
        """"""
        Parameters:
            payload: the value of the selected dropdown choice(s)
        Returns:
            Passes the value of the selected dropdown choice as a `str | int | float` or its index as an `int` into the function, depending on `type`. Or, if `multiselect` is True, passes the values of the selected dropdown choices as a list of correspoding values/indices instead.
        """"""
        if self.type == ""value"":
            return payload
        elif self.type == ""index"":
            choice_values = [value for _, value in self.choices]
            if payload is None:
                return None
            elif self.multiselect:
                if not isinstance(payload, list):
                    raise TypeError(""Multiselect dropdown payload must be a list"")
                return [
                    choice_values.index(choice) if choice in choice_values else None
                    for choice in payload
                ]
            else:
                return (
                    choice_values.index(payload) if payload in choice_values else None
                )
        else:
            raise ValueError(
                f""Unknown type: {self.type}. Please choose from: 'value', 'index'.""
            )

    def _warn_if_invalid_choice(self, value):
        if self.allow_custom_value or value in [value for _, value in self.choices]:
            return
        warnings.warn(
            f""The value passed into gr.Dropdown() is not in the list of choices. Please update the list of choices to include: {value} or set allow_custom_value=True.""
        )

    def postprocess(
        self, value: str | int | float | list[str | int | float] | None
    ) -> str | int | float | list[str | int | float] | None:
        """"""
        Parameters:
            value: Expects a `str | int | float` corresponding to the value of the dropdown entry to be selected. Or, if `multiselect` is True, expects a `list` of values corresponding to the selected dropdown entries.
        Returns:
            Returns the values of the selected dropdown entry or entries.
        """"""
        if value is None:
            return None
        if self.multiselect:
            if not isinstance(value, list):
                value = [value]
            [self._warn_if_invalid_choice(_y) for _y in value]
        else:
            self._warn_if_invalid_choice(value)
        return value

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def focus(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def blur(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def key_up(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Dropdown` component for Gradio, which creates a dropdown menu with selectable options. The component can be used for both input and output purposes. It allows customization of various parameters such as choices, default value, type of value to return, multiselect option, custom value input, maximum choices, filterable option, label, info, and more.

The component supports events like change, input, select, focus, blur, and key_up. These events can be associated with functions to be triggered when the corresponding event occurs. The `Dropdown` component also provides methods for preprocessing and postprocessing the selected values, as well as warning if an invalid choice is selected.

Overall, the `Dropdown` component provides a flexible and customizable way to create dropdown menus in Gradio interfaces.","[-0.043245938, 0.033515025, 0.025170939, -0.008482768, 0.010950167, -0.018514162, -0.017554939, 0.030995619, -0.0048105614, -0.027574774, -0.005197718, -0.018340807, -0.044008695, -0.009072171, 0.048446544, -0.006003812, -0.024107704, -0.01635302, -0.027389864, 0.0555656, 0.0086734565, -0.039570842, 0.0076160002, 0.06832442, -0.014388346, -0.04946355, -0.025217166, 0.09319488, -0.00631007, 0.015520923, -0.011221754, -0.03913168, -0.0154862525, -0.030487115, -0.008945044, -0.064487524, 0.062222376, 0.04544175, -0.015428468, -0.021010453, -0.044517197, -0.035826404, -0.021646082, 0.031804603, -0.03647359, 0.029932383, -0.030510228, 0.0214265, 0.030117294, 0.03520233, -0.07604443, -0.030071067, -0.0061945007, -0.034324005, -0.011452893, 0.01164936, -0.07202263, 0.012204091, 0.010060285, -0.047105942, -0.0036288681, 0.0068936935, 0.020374823, 0.029331423, 0.027621003, 0.0051746042, -0.022119915, 0.02621106, 0.017716736, -0.009713578, 0.022443509, -0.022235485, -0.015185772, -0.03259047, 0.02803705, 0.0039958, -0.014769725, -0.07576707, 0.03460137, 0.031203642, -0.021438058, 0.0033515024, -0.08214648, -0.025563873, -0.0031088074, 0.013371339, -0.027412977, 0.015567151, -0.011210198, -0.054872185, -0.046666782, -0.031781487, 0.0047816695, 0.051173974, -0.0120769655, 0.015440024, -0.0096904645, -0.004226938, -0.001411387, 0.055842962, 0.03289095, -0.0346476, -0.01605254, -0.06883293, 0.01661883, -0.039339703, 0.016457032, 0.029192742, -0.0025670775, 0.0187453, -0.009488218, -0.016225895, -0.08598337, 0.0430148, 0.0031376996, -0.0652734, 0.006107824, -0.027251182, -0.022720875, -0.025448304, -0.006743454, -0.044262946, -0.0027115387, -0.037791077, 0.033815503, -0.01374116, -0.025517646, -0.02803705, -0.044517197, -0.0019473385, -0.005417299, 0.031157415, -0.019843206, -0.06439507, -0.007928036, 0.046759237, -0.094951525, 0.007795132, -0.055242006, 0.009673129, 0.024824232, -0.036982097, 0.008413427, 0.012319661, -0.038068444, -0.04708283, -0.0187453, 0.03143478, -0.079835095, 0.025633214, -0.02229327, -0.0031694812, -0.048169177, -0.018502604, 0.009164626, 0.005373961, 0.06823196, -0.013232656, 0.019392487, -0.017254459, -0.022235485, 0.027574774, 0.007217287, -0.015197329, -0.02247818, -0.018005658, -0.047013488, 0.050804153, -0.042575635, 0.024246385, 0.016607272, -0.0068763583, -0.02366854, 0.053901404, -0.009759806, 0.012319661, 0.0007074993, 0.007789354, 0.006130938, -0.014122537, 0.012631697, -0.020444164, 0.014596371, 0.030510228, -0.013683375, -0.06259219, -0.030556455, -0.05274571, -0.03908545, 0.007928036, 0.023021353, 0.0036317573, -0.007893366, -0.030047951, -0.029955497, -0.0072635147, 0.004729663, -0.0011975842, 0.01049367, -0.0026161943, 0.048261635, -0.005125487, 0.019438714, 0.0038513385, -0.009366871, 0.04460965, -0.019172905, 0.025818124, 0.033145204, -0.035687722, 0.020894883, -0.026164832, 0.0032937177, 0.007754683, -0.034300894, -0.015220444, 0.014353676, 0.034416463, 0.020501949, -0.01586763, -0.031827714, -0.0047325525, 0.025147824, -0.059125125, 0.049925826, -0.023032911, 0.040449165, -0.035341013, 0.04118881, 0.0033370561, 0.039177906, -0.034855623, 0.016953979, 0.015590264, 0.028499328, -0.02755166, 0.02949322, -0.04107324, 0.058385484, 0.0036693173, -0.038276467, -0.04629696, 0.003345724, -0.014134094, 0.013833615, 0.013718046, -0.014249664, -0.013637148, -0.010158519, 0.046042707, -0.01710422, 0.021380274, 0.021299375, -0.008985493, 0.005111041, -0.027921481, 0.009268638, 0.017300686, 0.0020686858, 0.003860006, -0.0033110532, -0.057044882, -0.010002501, 0.07058957, 0.010620795, 0.04932487, 0.018768413, 0.02378411, -0.022212371, -0.011643581, 0.006564322, -0.026534652, 0.056628834, 0.025864353, 0.015093317, -0.026234174, 0.04345396, 0.043939352, -0.003207041, 1.63309e-05, -0.061898783, -0.020501949, 0.0062638423, -0.004599648, -0.006668334, 0.013683375, 0.047660675, -0.0075062094, 0.010383879, -0.056443922, -0.009759806, -0.010066064, 0.04622762, -0.034555145, -0.0074542034, 0.0020080123, 0.03587263, 0.0089797145, 0.023992134, -0.016156552, 0.018548831, 0.009499775, 0.010014058, -0.060511954, 0.013879842, -0.023714768, 0.018722186, 0.02609549, -0.0582468, -0.017485596, 0.014688826, 0.03245179, 0.021715423, -0.0041200365, -0.079881325, 0.021380274, 0.03901611, 0.02602615, 0.0083671985, -0.042436954, 0.011845827, 0.029770587, 0.016849967, -0.024778003, -0.03185083, -0.052098528, -0.0430148, -0.033399455, -0.0011694143, -0.022374168, 0.03684341, -0.0055877636, -0.021149136, 0.046042707, 0.015763618, -0.0050879274, -0.028614895, 0.029354539, -0.06074309, 0.017797634, -0.0047585554, 0.005532868, 0.013394453, -0.008072498, 0.038299583, -0.010580346, -0.064487524, 0.028776692, -0.019207576, -0.0037473263, -0.02512471, -0.015601821, 0.0052179424, -0.017578052, 0.030071067, -0.026557768, -0.04946355, -0.061991237, -0.07239245, -0.026511539, -0.01862973, 0.021299375, -0.031781487, 0.016884638, -0.011608911, -0.0046545435, -0.042182703, -0.0071132747, -0.014700383, -0.020952668, 0.022709318, -0.013694932, -0.027436092, 0.012389001, -0.05242212, -0.0128397215, 0.014307448, -0.035572153, 0.014064753, -0.015601821, 0.032428674, -0.007067047, -0.042644978, 0.00028892263, -0.014619485, -0.0077835754, 0.01045322, 0.022709318, 0.02318315, -0.01635302, -0.018433264, -0.026419085, 0.024408182, -0.019496499, 0.009938938, 0.0075813294, -0.028869148, 0.0122849895, 0.017150447, 0.017705178, 0.014538586, -0.015116432, -0.04246007, 0.052514575, -0.0054750834, -0.020409493, 0.03434712, 0.046412528, -0.0055155326, -0.009153068, 0.03210508, 0.024385069, 0.04331528, -0.028730465, 0.04495636, 0.00963268, 0.0100429505, -0.028060164, -0.004761445, 0.03420844, 0.008141839, -0.054456133, -0.0029325646, -0.039108567, 0.01750871, 0.021310933, 0.005662883, 0.033214543, 0.022339497, -0.019531168, -0.018987995, -0.0069341427, 0.039154794, 0.017046435, 0.023217821, -0.015208887, 0.055611826, 0.014446131, 0.055057094, 0.0025035145, -0.015648048, 0.037652396, 0.027898367, 0.015728947, -0.020975782, 0.009962052, 0.01082882, -0.007933815, -0.045557316, -0.022732431, -0.014480801, 0.058385484, -0.040171802, -0.0015789621, 0.012666368, 0.016896194, 0.009199296, 0.0062407283, 0.023691654, -0.032567356, -0.021264704, 0.021137578, -0.0095344465, 0.021345602, 0.0009816146, -0.021299375, 0.029377652, 0.02035171, -0.0031983734, -0.0017710957, -0.011192862, 0.03760617, 0.024708662, 0.05667506, -0.031041846, 0.020652188, 0.0354797, 0.0054750834, -0.005238167, 0.022501294, -0.02366854, 0.028892262, -0.00044494082, -0.047614448, 0.02554076, 0.06402525, -0.0019646739, -0.0064834235, -0.020917997, 0.0043251715, 0.0031348104, -0.011580018, -0.0032214872, -0.010158519, 0.030625798, 0.0022001457, -0.0679546, -0.0044609653, -0.014850622, -0.04107324, 0.0073617483, -0.024616206, 0.0015486252, 0.078725636, 0.008228516, 0.0055993204, 0.020109015, -0.012897505, -0.012666368, -0.022605306, -0.03809156, -0.0142149925, -0.0044407407, 0.007026598, 0.0214265, -0.035179216, -0.036381137, -0.007246179, -0.04969469, 0.014815952, -0.03670473, 0.017254459, -0.022952013, -0.006974592, 0.010921275, -0.00041677087, -0.026187945, -0.05496464, 0.037675507, -0.008147618, -0.0065585435, -0.0036202003, 0.0062927348, 0.06323938, -0.054687273, -0.015440024, 0.0024139485, 0.008332528, 0.024523752, -0.049787145, 0.013082416, -0.0040564737, 0.025563873, -0.0059806984, 0.003741548, 0.020143684, 0.01661883, -0.03864629, 0.008609894, -0.0032157088, 0.013614033, -0.05806189, 0.01930003, -0.03282161, 0.012978404, 0.014353676, 0.005203496, 0.021438058, -0.01568272, -0.045950253, -0.0039813537, -0.024246385, 0.02199279, 0.05510332, -0.0039495723, -0.026465312, -0.020397937, -0.0071826163, -0.057923205, 0.02773657, -0.010794149, 0.022778658, 0.0035595265, 0.052098528, 0.028638009, 0.027158726, -0.007824024, -0.011331545, 0.0041200365, -0.0041373717, 0.014735053, -0.041535515, 0.009187739, -0.009811812, -0.040148687, 0.0010112291, 0.011568462, 0.02688136, 0.0034555146, 0.0034930743, -0.010372322, 0.02030548, -0.012504571, 0.050434332, -0.005477973, 0.015012419, 0.00011764568, 0.03890054, -0.010505226, -0.006107824, 0.015578708, -0.0067550107, 0.0069803703, -0.016734397, 0.0221777, -0.0012950957, 0.0153360125, 0.011972954, -0.03245179, 0.018005658, -0.021495843, 0.02803705, -0.027204953, -0.02281333, -0.03143478, -0.02314848, -0.04775313, 0.015613378, 0.013278884, -0.008032049, -0.0023287162, -0.014769725, 0.02012057, -0.016584158, -0.0035941973, 0.037351917, 0.037513714, -0.0049896934, 0.037814192, 0.0034555146, 0.012932177, 0.0012199758, 0.039177906, -0.024338841, 0.011152413, -0.0058102338, -0.0006995539, -0.03587263, -0.015728947, -0.06097423, -0.0074773175, 0.010736365, -0.0024052807, 0.014769725, 0.020964226, 0.021495843, -0.027528547, 0.015451581, 0.06374788, 0.0074137542, 0.018837754, 0.025979921, 0.0083671985, 0.0059575844, -0.0068070167, -0.0044667437, -0.0035017421, -0.018132783, 0.0050272536, 0.033029635, -0.02247818, -0.02224704, 0.016896194, 0.0015977421, -0.005951806, 0.02117225, 0.01374116, -0.0013333779, 0.0022218148, 0.012342774, -0.039409045, 0.006656777, -0.0018491048, 0.009915824, 0.021218477, -0.044933245, 0.046921033, -0.024962913, 0.0069168075, 0.0179941, -0.049278643, 0.030579569, -0.032914065, -0.031689033, 0.014342119, -0.05454859, -0.0002603915, 0.0036722065, 0.015035533, -0.022131473, 0.0060384828, -0.003244601, 0.035525925, 0.0138914, 0.013325111, 0.055426914, 0.013244213, 0.010025615, 0.029054059, -0.040079344, 0.0291234, 0.027759684, -0.0036808741, -0.010788371, -0.002763545, -0.0070439335, 0.021576742, 0.013325111, 0.007881809, -0.039154794, 0.012019181, 0.031088073, -9.128149e-05, -0.017970987, -0.012747265, 0.0035017421, -0.0018693294, 0.0053855176, 0.010314537, -0.009667351, -0.039825093, 0.0011484674, -0.0423445, -0.016387692, 0.01019319, -0.053161763, 0.01568272, -0.0014352232, -0.03719012, 0.012146307, -0.02224704, 0.016225895, 0.0039524613, 0.0014308892, 0.0033110532, 0.021796321, -0.005298841, -0.014122537, 0.011244868, -0.037791077, 0.016572602, 0.018121226, -0.015763618, -0.020594405, -0.008488546, 0.0007930926, 0.029955497, 0.022223927, -0.024061475, 0.024778003, -0.026603995, 0.006922586, -0.007887588, -0.0047209957, -0.021935005, -0.0014503915, -0.020825543, -0.04035671, -0.036982097, -0.0006894416, 0.04872391, 0.017485596, -0.017832303, -0.0016930866, -0.007795132, -0.05011074, 0.021750094, -0.029007832, 0.018641287, 0.026650222, 0.031157415, -0.020478835, -0.003886009, 0.01960051, 0.041789766, -0.009268638, -0.029169627, -0.039917547, 0.02530962, 0.018259909, 0.03460137, 0.0035335235, 0.047521994, -0.010869269, 0.05260703, 0.0030885828, -0.010742143, 0.0041344827, -0.023992134, -0.047429536, 0.015832959, 0.018259909, -0.015093317, -0.005992255, 0.031342324, 0.009401542, 0.028499328, -0.093102425, -0.019970331, 0.008783247, -0.021900333, -0.020097457, -0.048816364, 0.039825093, 0.038276467, 0.031388555, -0.028476212, -0.031203642, -0.015578708, 0.024084589, -0.00042688317, -0.010620795, 0.006333184, 0.010776813, 0.01601787, -0.011256425, 0.023448959, 0.006171387, -0.020224582, -0.024708662, -0.02986304, -0.006223393, -0.013406009, -0.0021900334, 0.0072404006, 0.0128397215, 0.04849277, 0.031134302, 0.013024632, -0.018791527, 0.009309087, 0.025979921, -0.023206264, 0.03136544, -0.019588953, 0.0052439454, -0.026118604, 0.039293475, -0.006327405, -0.031527236, -0.006708783, 0.022535965, 0.012989961, 0.0036288681, 0.023945907, 0.013694932, 0.018537275, 0.026372856, 0.02549453, 0.0229289, 0.0067030047, 0.010164298, 0.0038397815, -0.021530513, 0.062638424, 0.0006851078, -0.011603132, 0.012065409, 0.008731241, 0.051497567, 0.0048221187, -0.0070034843, -0.02366854, 0.03913168, -0.007448425, -0.059032667, -0.013868285, 0.0008913263, 0.0277828, -0.018652843, -0.016584158, -0.017520268, -0.005177493, -0.006529651, -0.020259254, -0.006119381, 0.008973937, 0.026557768, -0.01123909, -0.03471694, 0.005203496, -0.0024934022, 0.02229327, -0.0076333354, -0.019369373, -0.011406665, -0.018722186, -0.005928692, -0.012019181, 0.018387035, -0.003651982, -0.0020773537, -0.031920172, -0.0015616268, -0.0027909924, 0.031272985, -0.01844482, 0.01310553, 0.01108885, -0.015590264, -0.016295236, 0.023876565, -0.051774934, -0.035410356, -0.02549453, 0.004790337, -0.013429123, -0.0050012507, -0.02718184, -0.020582847, -0.0060847104, -0.01593697, 0.0017292019, 0.013648705, 0.014064753, -0.004371399, 0.0050272536, 0.025887467, 0.010389658, -0.011591575, 0.022778658, 0.012088522, 0.01743937, -0.009476662, -0.040287368, -0.002382167, 0.0027245402, 0.036011316, 0.0076911203, 0.0058275694, 0.044771448, 0.006258064, 0.024361955, -0.042922344, 0.0102972025, -0.013510021, 0.008384534, 0.0029614568, 0.006286956, 0.0086619, -0.017716736, -0.003894677, -0.006818574, -0.0075466586, 0.003334167, -0.03938593, 0.018433264, 0.0014063308, -0.011025287, -0.0022608195, 0.0129437335, 0.028013937, 0.09809501, 0.026788905, -0.028661124, 0.011938282, 0.010695916, 0.009118398, 0.005108152, 0.019334702, -0.030695138, 0.007592886, 0.01687308, 0.021865664, 0.02247818, -0.045395523, 0.04521061, -0.011695587, 0.012134749, 0.0025309622, 0.021218477, 0.023645427, 0.05588919, 0.002382167, -0.01377583, 0.0037848863, 0.007933815, -0.031111188, 0.04659744, 0.0031983734, 0.039917547, 0.026488425, -0.0065585435, 0.011845827, -0.043708213, -0.009124177, -0.0040709195, 0.01680374, 0.04532618, 0.022986684, -0.04421672, -0.0129437335, 0.023136923, 0.008719685, 0.015243557, 0.037767965, -0.019161347, -0.0040940335, 0.0128397215, -0.0159832, -0.007511988, -0.010424328, 0.0015962975, -0.02524028, 0.027528547, 0.0034035083, 0.07086694, -0.024454411, -0.00843654, -0.006604771, -0.030602684, 0.0173238, 0.030510228, 0.014284334, 0.014168765, -0.049602237, 0.005607988, -0.0054461914, -0.007720012, -0.012504571, 0.0021495842, 0.040680304, 0.00679546, 0.0046661003, -0.028314417, 0.0056917756, 0.011059958, 0.015809845, 0.0010596237, -0.007038155, -0.013382896, 0.02180788, -0.032544244, -0.04472522, 0.0076160002, 0.020259254, 0.028429985, 0.015809845, -0.0034150654, 0.0101469625, -0.020132128, -0.029400766, -0.0004034082, 0.0024298392, -0.014203436, -0.020964226, -0.00492902, -0.031665917, 0.010366543, 0.024454411, 0.019773863, -0.022767102, 0.02602615, 0.021438058, 0.010412771, -0.0020672414, -0.022096802, -0.0033832837, 0.0039842427, 0.013036189, -0.020790871, 0.010880826, 0.040888328, -0.013683375, -0.0021972565, -0.0062407283, 0.025656328, 0.020929554, 0.037398145, -0.005405742, -0.0014272777, 0.011903612, -0.00036277846, 0.009459326, -0.016665056, -0.019727636, -0.008043606, -0.0024038362, 0.051266428, -0.0025598544, -0.0060500395, -0.016907752, -0.016110325, 0.020213027, -9.561533e-05, 0.021287818, -0.021391831, 0.011857384, 0.041697312, -0.025378963, -0.042575635, -0.0067376755, 0.0027274296, -0.021310933, -0.009482441, -0.0044176267, -0.002827108, 0.012458343, 0.023541415, 0.0033630594, 0.022085246, 0.009667351, -0.021449614, -0.018421706, 0.008708128, -0.014423017, 0.018202124, -0.0035335235, 0.019508054, -0.004957912, -0.0028213293, 0.042413842, -0.017023321, -0.024477525, -0.01571739, -0.016422361, 0.010066064, 0.03975575, 0.030741366, -0.01911512, 0.0098927105, 0.01198451, -0.021484286, -0.012389001, 0.033769276, -0.02530962, 0.024153931, -0.011476006, -0.0024890683, 0.010788371, -0.021576742, 0.012562355, -0.0009873931, -0.01575206, -0.013764273, 0.003562416, 0.010170076, 0.0057668956, -0.0120307375, -0.0035364127, -0.007407976, -0.024593093, 0.00039004552, 0.061806325, -0.025194053, -0.0097366925, 0.007956929, 0.04209025, -0.016098768, -0.011366216, 0.01392607, 0.055149548, 0.010447442, -0.016734397, 0.013706489, 0.007650671, -0.010181633, 0.008627229, 0.017601166, -0.0034150654, 0.008789026, -0.018433264, -0.022374168, -0.042044017, 0.027621003, 0.011880498, -0.026395971, -0.010551454, 0.02748232, 0.047660675, 0.034532033, 0.00032124584, -0.014677269, 0.013798944, 0.00089854933, 0.04361576, -0.01926536, 0.0043367282, 0.0009823369, 0.04294546, 0.013301997, -0.037236348, -0.0014554476, 0.0015471806, -0.010360765, 0.016364576, -0.0039582397, -0.024708662, 0.008476989, 0.0032850502, -0.006107824, 0.022697762, -0.0043482855, 0.014307448, -0.0045418637, 0.0020253474, -0.015509366, 0.01620278, 0.020109015, -7.904742e-05, -0.0042818333, 0.0021553626, -0.047429536, -0.030579569, -0.011545348, -0.024015248, -0.0023836116, -0.020698417, 0.028083278, 0.0128397215, 0.016722841, 0.030186635, 0.01295529, 0.016907752, -0.015116432, 0.0036577603, -0.000643214, -0.0059142457, 0.019288475, 0.003793554, 0.011597354, 0.005304619, 0.013313554, 0.043823782, -0.023437403, 0.0036808741, 0.012088522, -0.02254752, -0.0121809775, -0.0059980336, -0.0045014145, -0.05357781, 0.012412116, -0.009430435, 0.0067550107, -0.030903162, 0.021068238, 0.024454411, 0.015648048, 0.013024632, 0.038392037, 0.005633991, 0.0021120242, 0.018433264, 0.010886604, 0.046181392, 0.017427811, 0.017185118, 0.016225895, -0.0026855357, 0.0138914, 0.009424656, -0.007928036, 0.0029238968, -0.025263393, -0.012354331, -0.0063909683, -0.021414945, 0.005518422, -0.046181392, 0.026303515, 0.023992134, 0.011025287, -0.040795874, 0.012527685, -0.017196674, -0.02005123, 0.020952668, 0.026580881, -0.02060596, 0.001256091, 0.00940732, 0.011042623, -0.022767102, 0.0029990168, 0.03700521, -0.02766723, -0.0063389624, 0.0072924066, -0.021414945, -0.030810708, -0.03987132, -0.020467278, 0.016341463, -0.015844516, 0.012261876, 0.03259047, -0.03363059, -0.00024088923, 0.039362818, 0.0041835993, 0.05806189, -0.00055148103, -0.018074999, -0.007754683, -0.008136061, 0.02882292, -0.02609549, 0.011655139, 0.0065065376, -0.023067582, -0.00056917756, -0.0117996, 0.03363059, 0.012608583, -0.013001517, -0.006437196, -0.016422361, 0.018144341, 0.01493152, 0.0024399515, -0.001934337, -0.012365888, -0.009702021, 0.0042067133, -0.018225238, -0.026719563, 0.0054201884, -0.004856789, 0.05061924, -0.005119709, 0.0027057603, -0.0042298273, -0.020894883, 0.007887588, 0.026072377, 0.011395108, -0.02748232, -0.011383551, 0.050942834, -0.011603132, 0.013752717, -0.0049954723, -0.014330562, -0.011325766, 0.025586987, 0.01990099, 0.020028116, 0.004304947, 0.058154345, 0.0012979849, 0.03416221, 0.04289923, 0.045187496, -0.011406665, 0.019542726, 0.008765913, 0.0048770136, -0.004039138, 0.004801894, 0.015440024, 0.0042587193, -0.029030945, -0.004200935, 0.019438714, 0.002934009, 0.0256101, 0.02094111, 0.019820092, 0.021703867, 0.021137578, 0.020074343, 0.024569979, 0.030995619, -0.025771897, 0.023495188, 0.034994308, 0.02314848, -0.009326422, 0.020490391, -0.016549487, -0.01295529, 0.014943078, -0.0025237391, 0.0048105614, 0.026141718, -0.017751405, 0.013140201, 0.0025974144, -0.04634319, 0.010857712, -0.033445682, -0.017092662, -0.014619485, 0.0033283886, -0.012793493, -0.049417324, -0.007639114, 0.0048683463, -0.026141718, -0.00339773, 0.048261635, 0.051266428, -0.022709318, -0.040148687, 0.009771363, 0.008858368, 0.030880049, -0.001114519, 0.043430846, 0.008430762, -0.01899955, -0.015544036, -0.005316176, 0.0256101, 0.03536413, -0.0038773415, -0.03543347, -0.0059084673, -0.00018147953, -0.020074343, -0.0066452203, 0.025194053, 0.019612066, -0.0040189135, 0.0010430106, 0.020501949, 0.0056686616, 0.012701038, -0.039640184, -0.014919964, -0.0013608255, 0.039293475, 0.03386173, -0.0033399453, -0.005246835, 0.018514162, 0.0028169956, -0.021680754, -0.0043656207, 0.02505537, -0.00029668742, 0.024962913, 0.0005131988, -0.028984716, -0.022004347, 0.039362818, 0.03367682, 0.023876565, -0.0028921154, -0.0007930926, 0.035572153, 0.03494808, -0.015197329, 0.03240556, 0.005610877, -0.0049261306, -0.003677985, 0.009719357, -0.010794149, -0.019727636, -0.009389985, 0.016849967, -0.026973816, -0.030672025, -0.0017869864, -0.04886259, 0.03106496, 0.0007205008, 0.0051919394, 0.0010379545, 0.018883983, 0.025448304, -0.0073155207, -0.004510082, -0.029146513, 0.008008935, -0.028175734, 0.0018158787, -0.02023614, -0.013359781, 0.04398558, 0.000445302, -0.015243557, -0.01579829, 0.005347958, -0.017635837, 0.0032677148, 0.0214265, 0.039362818, 0.022420395, 0.007922258, 0.014087867, -0.0052843946, 0.00081042794, 0.026187945, -0.0047990046, -0.0027881032, -0.007824024, -0.01471194, 0.021888778, -0.0003562777, 0.02986304, -0.008581001, -0.0151279885, 0.002094689, -0.030487115, -0.035225447, -0.018756857, 0.03124987, -0.012550798, 0.030533342, -0.0038744523, -0.0043136147, 0.007639114, -0.01668817, 0.021310933, 0.030325318, -0.030648911, -0.004931909, 0.018017214, 0.0038108893, 0.03150412, 0.0014316116, -0.044655878, 0.007754683, 0.017820748, 0.013845172, -0.015463138, 0.008939266, -0.0354797, 0.0053941854, -0.02542519, -0.055242006, -0.008396091, 0.0064603095, -0.006859023, 0.0018043218, -0.026904475, -0.020779315, 0.009765584, 0.007928036, 0.010002501, 0.00013507133, -0.0039177905, -0.008563667]"
../../../gradio,../../../gradio/gradio/components,logout_button.pyi,"""""""Predefined button to sign out from Hugging Face in a Gradio Space.""""""
from __future__ import annotations

from typing import Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components import Button

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class LogoutButton(Button):
    """"""
    Creates a Button to log out a user from a Space using OAuth.

    Note: `LogoutButton` component is deprecated. Please use `gr.LoginButton` instead
          which handles both the login and logout processes.
    """"""

    is_template = True

    def __init__(
        self,
        value: str = ""Logout"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str
        | None = ""https://huggingface.co/front/assets/huggingface_logo-noborder.svg"",
        # Link to logout page (which will delete the session cookie and redirect to landing page).
        link: str | None = ""/logout"",
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = 0,
        min_width: int | None = None,
    ):
        warnings.warn(
            ""The `gr.LogoutButton` component is deprecated. Please use `gr.LoginButton` instead which handles both the login and logout processes.""
        )
        super().__init__(
            value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )","This code defines a `LogoutButton` class that inherits from the `Button` class in the Gradio library. The `LogoutButton` class creates a button that allows a user to log out from a Space using OAuth. The button has various customizable parameters such as the button label, appearance, icon, link to the logout page, visibility, interactivity, and styling options. The class also includes a deprecation warning recommending the use of `gr.LoginButton` instead, which handles both login and logout processes.","[-0.03856367, 0.035126623, 0.023601057, 0.023738539, 0.016211405, 0.0016010911, 0.015111551, 0.010717859, 0.021825248, -0.034026768, 0.025571631, 0.0032623305, -0.042229854, 0.028275441, 0.010706401, 0.052609734, -0.006215327, -0.0059861904, 0.024609257, 0.037761692, -0.075935826, -0.0044423835, 0.004768903, 0.06301253, 0.008924866, -0.021997102, 0.00052629784, -0.00041638393, -0.011743245, 0.017196693, -0.01082097, -0.032124933, -0.017540397, 0.023692712, 0.015604194, -0.02424264, 0.0096237315, 0.028917024, 0.03982392, -0.048072834, -0.08542208, -0.03198745, 0.027794255, 0.058154836, -0.007166243, 0.0011728923, 0.0029558605, 0.023406291, 0.04610226, -0.0074011083, -0.085926175, -0.021676311, -0.0068454524, 0.005851573, -0.04058007, 0.0018789191, -0.038907375, 0.0048720143, -0.019774478, -0.0189725, -0.054809444, 0.008426494, 0.0199807, -0.013645077, 0.033958025, 0.025273753, -0.035974428, -0.0004700878, 0.039869748, 0.0072922683, 0.053617936, -0.0044194697, -0.043513015, -0.025777854, 0.00093802746, -0.015776046, 0.010328326, 0.0009852869, 0.051189087, -0.021069098, -0.013759646, 0.033843458, -0.031277128, -0.0018302276, -0.03982392, 0.027152672, -0.03762421, -0.02138989, -0.015443798, -0.023967676, -0.0032365527, -0.01006482, -0.026556917, 0.026854794, 0.0015051402, 0.008048419, -0.011084477, -0.04129039, 0.036593094, 0.008816026, 0.025892422, -0.052563906, -0.0011184724, -0.027977563, 0.02412807, -0.04094669, 0.02142426, 0.021573199, -0.009257114, -0.008844668, -0.027931737, 0.042504817, -0.018422572, 0.02889411, -0.038976114, -0.07611914, 0.026969364, -0.013473225, 0.032651946, -0.037945, -0.010597562, -0.0145730795, 0.024403034, -0.03393511, 0.03863241, -0.02113784, -0.016509283, -0.0033024293, -0.04999758, 0.020805592, 0.06351663, 0.029169073, -0.012785816, -0.06200433, -0.00862126, 0.04310057, -0.037601296, -0.024517603, -0.015386514, 0.022317892, -0.030039791, -0.07039072, -0.008901952, -0.035653636, -0.033018567, -0.010253857, 0.026350694, 0.011359441, -0.07822719, -0.033453926, 0.017792447, -0.004035666, -0.023463575, 0.043604672, -0.016463455, 0.012843099, 0.05315966, 0.0008427926, -0.001738573, 0.054946925, 0.010013264, 0.012671247, 0.051922325, 0.035859857, 0.00046471742, -0.008065604, 0.005928906, 0.0022154632, -0.037532553, 0.055680163, 0.028092131, 0.0015395107, -0.02531958, 0.014000239, -0.007458392, 0.0034284545, -0.0058343876, 0.029512778, -0.0072407126, -0.008747285, 0.022443919, -0.03311022, 0.022821993, -0.05215146, -0.07561503, -0.019671366, 0.014309573, -0.05233477, 0.017540397, 0.04649179, 0.006261154, -0.0065132044, -0.014229375, -0.009875782, 0.0052529536, -0.022787623, -0.014813673, -0.027106846, 0.002447464, -0.023509402, -0.04190906, 0.020610826, -0.012533765, -0.06704533, -0.019820305, 0.061729368, 0.021596113, -0.017735163, -0.008615531, 0.015237575, 0.022821993, -0.002822675, -0.011330798, -0.04133622, -0.041198738, -0.012820186, 0.018193437, 0.038105395, 0.03040641, 0.014550166, -0.028481664, 0.04392546, 0.025938248, -0.016325973, 0.06809936, 0.0006784588, 0.05018089, 0.0062038703, -0.009251385, 0.044910748, 0.028596232, 0.015420885, 0.022042928, -0.040534243, 0.02525084, -0.056184262, 0.034691263, -0.019316206, 0.0147220185, 0.0017858325, -0.08189338, -0.0051297927, -0.015890615, 0.0015753133, 0.0032336884, -0.00999035, -0.010190845, -0.010992822, 0.027931737, 0.04497949, -0.06846598, 0.033614323, 0.047981177, -0.006942835, -0.025113357, 0.02726724, 0.033637233, -0.0064616487, 0.0002459637, -0.02232935, 0.035516154, -0.04014471, 0.01212132, 0.058246493, -0.029512778, 0.02531958, 0.017735163, -0.018697536, -0.003308158, 0.053755417, -0.043650497, -0.016188491, 0.019316206, 0.012453567, 0.027358895, 0.014687648, 0.016131207, 0.011880727, -0.017975757, 0.009010792, -0.014149177, 0.01861734, 0.025777854, 0.027542204, -0.015592737, 0.042436074, 0.022707425, 0.013771102, 0.008426494, -0.017013384, -0.0079453075, -0.0029444038, -0.019121438, 0.0018903759, -0.012132776, 0.0024589207, 0.07346115, -0.016165579, 0.0037320603, -0.0054333988, 0.0071146875, 0.023142785, -0.02164194, -0.03787626, 0.025800766, -0.03606608, 0.014595994, 0.074652664, -0.03982392, 0.04518571, 0.00222692, 0.0005524337, 0.04743125, 0.0033711705, -0.046010606, 0.0017485977, -0.0058229305, 0.0076130596, 0.004313494, -0.044635784, 0.029146159, -0.009646646, -0.010832427, 0.0012609666, 0.02138989, -0.043627586, -0.033522666, -0.007120416, 0.009875782, -0.00075973064, 0.036386874, -0.048072834, 0.0011249168, 0.05215146, 0.06764109, 0.012843099, -0.020610826, 0.0446587, -0.03203328, 0.018880846, -0.0799228, 0.0051813484, -0.022123126, 0.00692565, -0.0018760549, 0.013645077, -0.06498311, 0.026465263, -0.04454413, 0.0029229221, -0.022386633, -0.04044259, -0.018491313, -0.039067768, 0.030314757, -0.032147847, -0.013370113, -0.052472252, -0.03393511, 0.023830194, 0.0047259396, 0.013324286, 0.006066388, -0.013920041, 0.013977325, 0.0017686471, -0.024013503, -0.052930526, 0.031895798, -0.037211765, 0.024609257, 0.038838632, -0.031804144, 0.012465024, -0.04151953, 0.0009444719, -0.019854676, -0.027496377, 0.002851317, -0.016497826, 0.013519052, -0.0042934446, -0.018101782, -0.009245656, 0.0349204, -0.023429204, 0.009910152, 0.015031353, 0.0122473445, 0.016967556, -0.033705976, -0.01312952, 0.023830194, -0.0020522035, 0.04032802, -0.01558128, 0.010832427, -0.026167385, 0.0048662857, -0.0045684082, -0.046079345, 0.0043192226, 0.03498914, 0.018078867, -0.0184684, -0.04862276, 0.056367572, 0.012029665, -0.007721899, -0.016360344, 0.038334534, 0.0062038703, 0.02424264, -0.057559084, 0.038861547, 0.011370897, -0.03519536, -0.045896035, 0.022650141, 0.069061734, -0.0025419828, -0.0062897964, 0.019132895, -0.068557635, 0.017437287, 0.028252527, -0.014905328, -0.021733595, 0.0426423, -0.07126144, -0.024173899, 0.021825248, -0.006215327, -0.0061236722, -0.020106725, -0.021218037, -0.08143511, -0.0028556134, 0.026717313, 0.019453688, -0.03423299, -0.022478288, 0.045071144, 0.05407621, -0.009131089, -0.0068511805, -0.0055307816, -0.031804144, -0.016360344, -0.027175587, -0.0027295882, -0.0070917737, -0.015821874, 0.048897725, 0.019934874, -0.048760243, 0.007590146, -0.003795073, -0.0008399284, -0.05325132, 0.009159731, -0.0058716224, -0.027244328, 0.072911225, -0.0063642655, -0.030956337, -0.015214662, 0.019969244, 0.0055995225, -0.05233477, 0.041748665, -0.034645434, 0.051051605, 0.0045139887, -0.04775204, 0.04307766, 0.016887357, 0.017231062, 0.022489745, 0.023452118, -0.015672935, 0.028802454, 0.021573199, -0.034760002, -0.0066850567, 0.031575006, 0.0399614, -0.0148595, -0.07304871, 0.00514125, -0.0013225471, -0.006261154, -0.0024632171, -0.009978893, -0.015100094, -0.016692592, -0.016784247, -0.022478288, 0.05215146, -0.04058007, 0.020095268, -0.027931737, -0.02016401, 0.07698985, -0.011645861, 0.0005492115, -0.006020561, -0.030543892, -0.0014571648, -0.038472015, -0.03015436, -0.03336227, -0.015810417, -0.006576217, 0.008437951, -0.011445367, -0.03856367, 0.055634335, 0.0017600545, 0.011479737, -0.037555467, 0.051968154, 0.0065819453, 0.0027166994, -0.02088579, 0.061362747, 0.00044144574, -0.018857932, 0.01759768, -0.006547575, -0.0140460655, -0.040625896, 0.016875902, 0.014515796, -0.01731126, -0.0036318132, -0.022844907, 0.002544847, -0.00732091, -0.03611191, 0.02889411, 0.020965988, 0.005854437, 0.006438735, -0.0011220527, 0.0030417866, -0.0014707698, -0.058246493, 0.06282922, -0.0053073736, 0.0277026, -0.028160872, 0.027633859, -0.035791118, -0.045598157, -0.021939818, -0.0061179437, 0.014916784, -0.017975757, 0.0058458443, -0.00930867, -0.00037735913, -0.012820186, 0.029925223, -0.023715625, -0.014515796, -0.017952843, 0.015661478, -0.021561742, 0.022168955, -0.011044378, 0.013874213, -0.0026909215, 0.0523806, -0.011869269, 0.011474009, -0.00042891485, -0.04076338, 0.0023729946, -0.016383259, 0.0038781348, -0.031322956, -0.0015094365, -0.012980581, -0.076852374, -0.020794135, 0.008386395, -0.021149296, -0.030268928, -0.0049207057, -0.031208389, 0.009984622, 0.013874213, 0.022879276, -0.0030618361, 0.019923417, 0.027427636, 0.005696906, 0.013931498, 0.021882534, -0.031185474, -0.049722616, 0.016921729, 0.017563311, 0.028367095, -0.037670035, -0.011571392, -0.0047774953, -0.039411474, 0.032766517, -0.015993726, 0.01017366, 0.0058945357, -0.0313917, -0.025136271, 0.014653278, -0.01312952, 0.004061444, 0.0095148925, 0.004413741, 0.009938794, 0.018651709, 0.033270616, -0.023692712, 0.009102446, 0.04289435, -0.008793112, -0.011582849, -0.0015352144, 0.018101782, 0.033774715, -0.0043621855, 0.02196273, -0.01569585, 0.00431063, -0.018674623, 0.020610826, -0.0006505328, 0.008523877, -0.03624939, 0.0069485637, -0.033774715, -0.011319342, -0.0011299292, 0.002961589, 0.04058007, -0.011032921, 0.032743603, 0.033453926, 0.011370897, 0.0011900775, 0.026098644, 0.017483113, -0.010345512, -0.009921609, 0.010924081, 0.0027754155, 0.00934304, 0.007968221, 0.025777854, -0.017872645, 0.02023275, -0.028092131, 0.009761214, -0.0107865995, 0.03964061, -0.021836706, 0.00074039726, -0.036913887, -0.019350575, -0.024105158, 0.008036962, 0.017357089, 0.01861734, 0.04793535, 0.003351121, -0.028802454, -0.043696325, -0.0044423835, -0.01428666, -0.0456669, 0.013576336, -0.009933067, -0.0029988235, 0.024105158, -0.048164487, 0.044750355, 0.016715506, 0.005255818, -0.026465263, -0.004135913, 0.0002280624, 0.0075615034, -0.006897008, -0.004299173, 0.0046657915, 0.013461768, -0.016910272, 0.0029128974, -0.01648637, 0.034691263, 0.009314397, 0.028160872, 0.006902736, 0.004631421, 0.017116494, -0.037784606, -0.0034341828, -0.045758553, -0.012224431, -0.045300283, 0.0023486488, 0.00027621686, 0.038907375, -0.012751445, 0.025479976, -0.0044423835, -0.0027023782, 0.024609257, -0.018903758, -0.02506753, 0.03267486, -0.05861311, -0.02218041, 0.020209838, -0.014229375, -0.03574529, 0.0028842555, -0.05132657, -0.006553303, -0.051372398, 0.007716171, 0.016131207, 0.018915216, -0.0038351717, 0.03851784, -0.008478049, -0.012602506, 0.02928364, -0.025915336, -0.020977445, 0.056367572, 0.0025878102, -0.01922455, 0.021080555, 0.0013662262, 0.0053532007, 0.0074870344, -0.009045162, 0.010500179, 0.012785816, 0.0066506863, -0.02001507, -0.0076989857, -0.043146398, -0.016005183, -0.004800409, -0.008340567, -0.033774715, 0.0035888501, -0.0013533373, 0.041794494, 0.006902736, 0.009251385, -0.018880846, -0.05283887, 0.000653397, 0.008993607, 0.034439214, 0.054122034, 0.005467769, -0.0220773, -0.008237456, -0.0036976899, 0.045300283, -0.01677279, 0.0076187877, -0.04502532, 0.04623974, -0.022547029, 0.0034341828, 0.024425948, 0.035561983, 0.0041559627, 0.03228533, -0.03934273, 0.001960549, 0.012316085, -0.0076016025, -0.006392908, 0.02092016, 0.005450584, -0.0028198108, -0.009211286, 0.04108417, 0.010322598, -0.022753252, -0.0569175, -0.0134503115, 0.0043077655, -0.01507718, -0.020794135, 0.013587793, 0.04126748, 0.008793112, 0.020152552, -0.025846595, 0.0070173047, -0.016715506, -0.016474912, 0.008701458, -0.021470089, -0.051143263, 0.033705976, 0.017838275, 0.019396402, -0.004104407, 0.0019376354, -0.017517483, -0.03498914, -0.013152434, 0.0032651948, -0.0037607024, 3.12825e-05, -0.0021581792, -0.011330798, -0.009371682, 0.022317892, 0.01067776, 0.031208389, 0.0048605576, -0.0016812889, 0.015489626, 0.029100332, -0.024677997, 0.0010525957, -0.020095268, 0.025777854, -0.0134503115, 0.005576609, -0.03058972, 0.008581161, 0.0016712642, 0.013690905, 0.016497826, -0.027610945, 0.008157259, 0.00901652, -0.014343943, 0.018812105, 0.0055536954, -0.010883982, -0.02132115, 0.0035630723, 0.012006751, -0.03737216, -0.0062210555, 0.049768444, -0.016658222, -0.017563311, -0.024952963, -0.0012559543, -0.030704288, -0.0034427755, 0.01569585, -0.03739507, -0.024196811, 0.012602506, 0.013794016, 0.009577905, -0.008208814, 0.022569943, 0.019934874, 0.00019172278, -0.009996079, 0.0069199214, 0.007469849, -0.017483113, -0.008140073, 0.03524119, 0.047064632, -0.022042928, 0.005642486, 0.020473344, 0.015478169, -0.0441546, -0.001738573, -0.011857812, -0.0021209444, 0.059667137, -0.04743125, -0.0031821327, 0.0016082516, -0.02738181, 0.008363482, 0.029558605, -0.026648572, -0.002086574, 0.008707186, -0.019568255, 0.049539305, 0.020301491, -0.047293767, 0.0053474726, -0.011399539, -0.021332607, -0.03349975, -0.012705618, -0.039296906, 0.0039039126, 0.00055852014, -0.032995652, 0.012992038, 0.035470325, 0.0076588867, 0.017448742, 0.030979251, -0.013862757, 0.051189087, -0.0054534483, 0.018353831, -0.0138971275, -0.04502532, -0.007297997, -0.032835256, -0.0144241415, 0.06718282, 0.0043879636, -0.0049207057, 0.00041781605, -0.023257352, -0.01410335, 0.005605251, 0.0049207057, 0.024219725, -0.030773029, 0.020278579, -0.0070975022, -0.026029903, -0.032995652, 0.018010126, -0.04573564, 0.028390009, 0.022936562, 0.022707425, -0.04756873, 0.0067079705, 0.016142664, 0.0083520245, -0.013175347, 0.014011695, 0.009165459, 0.059438, -0.0049865823, -0.03015436, -0.008552519, 0.025961163, 0.017632052, 0.020049442, -0.026350694, -0.054992754, 0.027427636, 0.010906897, -0.036157735, 0.02095453, -0.020484801, 0.033224788, -0.018010126, 0.041404963, 0.02185962, 0.005038138, 0.021985644, 0.0016855852, 0.02456343, -0.00081987894, 0.011811986, 0.011880727, 0.0046887053, 0.033201877, -0.024357207, 0.009789856, 0.035561983, 0.015856244, -0.009033705, -0.004299173, -0.017517483, 0.03210202, -0.009675288, 0.02232935, 0.002964453, -0.04862276, -0.024173899, -0.04014471, 0.04353593, -0.00988151, 0.02857332, -0.0031534908, -0.0031076635, 0.021939818, -0.01262542, 0.018537141, 0.002241241, -0.0043793707, -0.03920525, 0.023314636, 0.0056138434, 0.012384826, -0.028596232, -0.059575483, 0.0033912198, 0.009589361, 0.000820595, 0.0130722355, -0.013118063, -0.01868608, -0.02286782, -0.0016941779, 0.035974428, -0.011554207, 0.043444276, -0.0101507455, -0.006679328, 0.009257114, -0.022260608, -0.014710561, -0.022226239, 0.04454413, 0.025777854, 0.0033539853, -0.00999035, -0.0071834284, 0.023715625, -0.03851784, -0.017975757, -0.018880846, 0.03679932, 0.04536902, -0.021366976, -0.012086949, -0.010391339, -0.017563311, -0.023601057, 0.009635189, 0.025663285, -0.01157712, -0.015466712, 0.027633859, 0.0054477197, -0.014996982, 0.019052697, -0.00058501406, 0.018136151, 0.008942051, -0.010546006, -0.026465263, 0.024517603, -0.025205012, -0.028298354, 0.022501202, -0.014905328, -0.042252768, 0.026098644, 0.032651946, -0.021951275, -0.014229375, 0.017677879, -0.008059875, 0.019877588, 0.024219725, -0.012132776, -0.011090205, -0.006175228, -0.022478288, -0.00912536, 0.003339664, -0.013461768, 0.013152434, 0.017139409, 0.0025749211, -0.012533765, -0.0026536868, 0.014183547, 0.030314757, 0.007372466, -0.014676191, 0.038838632, -0.0174602, 0.007653158, 0.037990827, -0.019362032, -0.031139648, -0.008306197, 0.0072407126, 0.014848043, 0.0018230671, -0.012178604, 0.0051240646, 0.023074044, 0.02337192, 0.00222692, 0.009887239, 0.010649118, 0.03505788, -0.019579712, 0.020118183, 0.041061256, 0.021745052, -0.0012108431, -0.0029043048, -0.026534004, -0.011525565, -0.003726332, -0.013324286, -0.01677279, -0.019488057, -0.0036375416, -0.019889046, 0.013519052, -0.013622164, -0.023131328, 0.012304628, -0.009354496, 0.02138989, 0.02456343, 0.030200187, -0.036913887, 0.022168955, -0.007343824, -0.006719427, 0.0025391185, -0.020255664, -0.008329111, 0.008128616, -0.029993964, -0.012843099, -0.013415941, -0.00952062, -0.012270258, -0.006398636, -0.034966227, -0.013175347, 0.025411235, -0.002252698, 0.010385611, 0.006146586, 0.018296547, 0.00046256927, 0.04779787, -0.010706401, 0.021046186, -0.017826818, 0.022913648, -0.00508683, 0.020748308, 0.04014471, -0.018640252, 0.015879158, 0.017895559, -0.020553542, -0.006089302, -0.03574529, 0.004932163, -0.017540397, -0.019430773, 0.025938248, 0.010213759, 0.017654965, 0.0022011423, 0.011474009, 0.030658461, -0.00085210125, 0.014389771, -0.02348649, -0.0020249935, 0.0523806, 0.009726844, -0.021997102, -0.009961708, 0.0022555622, 0.01579896, 0.02651109, -0.025777854, 0.015707305, 0.05609261, 0.009801312, -0.0049894466, 0.0047087544, 0.006352809, -0.009858597, 0.023898935, 0.014893871, 0.017299803, 0.018880846, -0.021527372, 0.003866678, -0.03393511, 0.024930049, 0.010631933, -0.016784247, 0.0046256925, 0.011078749, -0.021069098, -0.01774662, -0.009681016, 0.021527372, 0.04848528, -0.009652374, -0.02387602, 0.031827055, 0.022340806, 0.017620595, -0.005396164, 0.0036260847, 0.020255664, -0.0037234677, -0.009073804, 0.019923417, -0.030383497, 0.021183668, -0.017677879, -0.010672031, -0.026442349, -0.03333936, -0.011731788, -0.012992038, 0.010230944, 0.037601296, -0.017082125, 0.0021925496, -0.014893871, 0.028298354, -0.021825248, 0.015970813, -0.010162203, 0.008947779, 0.0035659363, -0.02997105, 0.03285817, -0.01749457, -0.03297274, 0.05421369, -0.0052615465, -0.026808968, -0.015993726, 0.00067559455, 0.016360344, 0.006352809, 0.0024288467, 0.01579896, -0.012281715, 0.012064035, -0.005035274, 0.004826187, -0.004949348, -0.016108295, -0.040625896, 0.0037120108, 0.008455136, 0.026442349, -0.028985765, 0.04108417, 0.02896285, -0.02694645, 0.02038169, 0.021871077, -0.01291184, -0.01976302, -0.0055680163, 0.0039984314, 0.012808729, -0.025594544, 0.0041702837, 0.018365288, -0.001960549, -0.0074870344, 0.037715863, 0.005255818, -0.0033768988, 0.021366976, -0.018605882, -0.013186804, -0.0090279775, -0.005247225, 0.004184605, -0.006146586, -0.045575246, 0.020691024, -0.03636396, -0.0070001194, 0.017345631, 0.011370897, 0.021493, -0.005969005, 0.011010008, 3.911431e-05, -0.012407741, -0.0076989857, -0.0059346347, 0.032010365, -0.014584537, -0.009423237, 0.0096638305, -0.051601533, 0.027106846, -0.035516154, -0.030795943, -0.0261903, 0.021195125, 0.0074068364, 0.0225814, -0.004955076, -0.014206462, 0.009314397, -0.0035344302, -0.0014650413, 0.006742341, 0.00055279175, -0.01082097, -0.024082243, 0.021939818, -0.0027467734, 0.016979013, -0.0003437047, 0.014813673, -0.021687767, -0.021240951, 0.0012573864, -0.00069886626, -0.0010790896, 0.030177273, -0.03235407, -0.018594425, -0.022375178, -0.006415821, -0.007939579, -0.009245656, 0.032124933, -0.012579593, -0.011170403, 0.047522906, -0.0027109708, 0.026854794, 0.020106725, 0.043604672, -0.041634098, 0.039296906, 0.018330919, 0.0138513, 0.0074011083, 0.022042928, -0.013553423, 0.0091368165, -0.011221959, -0.0067079705, 0.01569585, 0.0019834626, 0.026281953, -0.008724371, 0.0041330494, 0.036088996, 0.0112907, 0.021790879, 0.037028454, 0.051922325, -0.02997105, 0.01806741, 0.038174137, 0.007297997, -0.0016956099, 0.0032881084, -0.025938248, -0.0065189325, -0.029260729, 0.0033854914, 0.014595994, 0.003379763, -0.02939821, 0.014550166, 0.023131328, -0.022386633, -0.031620834, -0.017334174, 0.01904124, -0.021034729, 0.008323383, -0.0399614, -0.018273633, 0.004044259, -0.02431138, -0.045116972, -0.013370113, 0.033453926, 0.011525565, 0.028435837, -0.009154002, -0.0055995225, 0.015111551, 0.045300283, 0.027038105, 0.0066277725, -0.0174602, -0.00041423578, -0.009744029, -0.033705976, -0.0017156594, 0.016325973, -0.01092981, -0.02575494, 0.00431063, 0.029948138, -0.015787503, 0.018136151, -0.006702242, 0.009801312, -0.0037091468, -0.01803304, -0.00879884, -0.0032623305, -0.025136271, -0.014974069, 0.02543415, -0.027862996, 0.010941267, 0.030543892, -0.0042934446, -0.0006881255, -0.03819705, 0.008002591, 0.008214543, -0.034645434, -0.009377411, 0.015375057, 0.029627346, 0.0065017473, -0.024494689, -0.032949824, 0.014309573, -0.014550166, -0.012258802, 0.018582968, 0.03272069, 0.037807517, 0.010609019, 0.017173778, 0.028092131, -0.004104407, 0.009211286, 0.001223016, 0.012992038, -0.0152490325, -0.011714602, -0.016956098, 0.044750355, -0.036409784, 0.017838275, -0.0153979715, -0.017334174, 0.06182102, -0.027129758, -0.03553907, -0.01460745, -0.015959356, 0.0056568068, 0.009383138, -0.015340687, -0.03246864, 0.012052579, 0.0025262297, -0.03315605, 0.0040986785, 0.011554207, 0.0072120707, 0.0012058307, -0.013862757, -0.0069371066, 0.01922455, 0.006415821, 0.013920041, 0.03217076, 0.044910748, 0.00031900094, -0.017047754, 0.011708874, -0.03178123, -0.005851573, -0.0024660814, -0.0040385304, -0.019923417, 0.005049595, 0.001807314, 0.008615531, -0.017803904, 0.03311022, -0.0040843575, -0.025365409, 0.0070745884, -0.010425709, 8.328574e-05, -0.015993726, -0.006352809, 0.018078867, 0.0292149, 0.010861069, -0.025984077, -0.045506503, 0.013519052, -0.010912624, 0.000208729, -0.026534004, 0.003772159, -0.024838394, -0.030543892, -0.013083693, 0.0007704714, -0.019533884, 0.034576695, 0.0059174495, 0.009377411, -0.04999758, 0.0087301, -0.029444037, 0.024838394, 0.0014442758, -0.018147608, -0.012808729, 0.016394714, 0.0039411476, 0.006438735, -0.010116375, 0.019384947, -0.009348768, -0.008959237, -0.0046571987, 0.023532316, 0.02344066, -0.0584298]"
../../../gradio,../../../gradio/gradio/components,base.pyi,"""""""Contains all of the components that can be used with Gradio Interface / Blocks.
Along with the docs for each component, you can find the names of example demos that use
each component. These demos are located in the `demo` directory.""""""

from __future__ import annotations

import abc
import hashlib
import json
import sys
import warnings
from abc import ABC, abstractmethod
from enum import Enum
from pathlib import Path
from typing import TYPE_CHECKING, Any, Callable

from gradio_client.documentation import set_documentation_group
from PIL import Image as _Image  # using _ to minimize namespace pollution

from gradio import utils
from gradio.blocks import Block, BlockContext
from gradio.component_meta import ComponentMeta
from gradio.data_classes import GradioDataModel
from gradio.events import EventListener
from gradio.layouts import Form
from gradio.processing_utils import move_files_to_cache

if TYPE_CHECKING:
    from typing import TypedDict

    class DataframeData(TypedDict):
        headers: list[str]
        data: list[list[str | int | bool]]


set_documentation_group(""component"")
_Image.init()  # fixes https://github.com/gradio-app/gradio/issues/2843


class _Keywords(Enum):
    NO_VALUE = ""NO_VALUE""  # Used as a sentinel to determine if nothing is provided as a argument for `value` in `Component.update()`
    FINISHED_ITERATING = ""FINISHED_ITERATING""  # Used to skip processing of a component's value (needed for generators + state)

from gradio.events import Dependency

class ComponentBase(ABC, metaclass=ComponentMeta):
    EVENTS: list[EventListener | str] = []

    @abstractmethod
    def preprocess(self, payload: Any) -> Any:
        """"""
        Any preprocessing needed to be performed on function input.
        Parameters:
            payload: The input data received by the component from the frontend.
        Returns:
            The preprocessed input data sent to the user's function in the backend.
        """"""
        return payload

    @abstractmethod
    def postprocess(self, value):
        """"""
        Any postprocessing needed to be performed on function output.
        Parameters:
            value: The output data received by the component from the user's function in the backend.
        Returns:
            The postprocessed output data sent to the frontend.
        """"""
        return value

    @abstractmethod
    def process_example(self, value):
        """"""
        Process the input data in a way that can be displayed by the examples dataset component in the front-end.

        For example, only return the name of a file as opposed to a full path. Or get the head of a dataframe.
        The return value must be able to be json-serializable to put in the config.
        """"""
        pass

    @abstractmethod
    def api_info(self) -> dict[str, list[str]]:
        """"""
        The typing information for this component as a dictionary whose values are a list of 2 strings: [Python type, language-agnostic description].
        Keys of the dictionary are: raw_input, raw_output, serialized_input, serialized_output
        """"""
        pass

    @abstractmethod
    def example_inputs(self) -> Any:
        """"""
        Deprecated and replaced by `example_payload()` and `example_value()`.
        """"""
        pass

    @abstractmethod
    def flag(self, payload: Any | GradioDataModel, flag_dir: str | Path = """") -> str:
        """"""
        Write the component's value to a format that can be stored in a csv or jsonl format for flagging.
        """"""
        pass

    @abstractmethod
    def read_from_flag(self, payload: Any) -> GradioDataModel | Any:
        """"""
        Convert the data from the csv or jsonl file into the component state.
        """"""
        return payload

    @property
    @abstractmethod
    def skip_api(self):
        """"""Whether this component should be skipped from the api return value""""""

    @classmethod
    def has_event(cls, event: str | EventListener) -> bool:
        return event in cls.EVENTS

    @classmethod
    def get_component_class_id(cls) -> str:
        module_name = cls.__module__
        module_path = sys.modules[module_name].__file__
        module_hash = hashlib.md5(f""{cls.__name__}_{module_path}"".encode()).hexdigest()
        return module_hash


def server(fn):
    fn._is_server_fn = True
    return fn


class Component(ComponentBase, Block):
    """"""
    A base class for defining methods that all input/output components should have.
    """"""

    def __init__(
        self,
        value: Any = None,
        *,
        label: str | None = None,
        info: str | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int | None = None,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        load_fn: Callable | None = None,
        every: float | None = None,
    ):
        self.server_fns = [
            value
            for value in self.__class__.__dict__.values()
            if callable(value) and getattr(value, ""_is_server_fn"", False)
        ]

        # Svelte components expect elem_classes to be a list
        # If we don't do this, returning a new component for an
        # update will break the frontend
        if not elem_classes:
            elem_classes = []

        # This gets overridden when `select` is called
        self._selectable = False
        if not hasattr(self, ""data_model""):
            self.data_model: type[GradioDataModel] | None = None

        Block.__init__(
            self,
            elem_id=elem_id,
            elem_classes=elem_classes,
            visible=visible,
            render=render,
        )
        if isinstance(self, StreamingInput):
            self.check_streamable()

        self.label = label
        self.info = info
        if not container:
            if show_label:
                warnings.warn(""show_label has no effect when container is False."")
            show_label = False
        if show_label is None:
            show_label = True
        self.show_label = show_label
        self.container = container
        if scale is not None and scale != round(scale):
            warnings.warn(
                f""'scale' value should be an integer. Using {scale} will cause issues.""
            )
        self.scale = scale
        self.min_width = min_width
        self.interactive = interactive

        # load_event is set in the Blocks.attach_load_events method
        self.load_event: None | dict[str, Any] = None
        self.load_event_to_attach: None | tuple[Callable, float | None] = None
        load_fn, initial_value = self.get_load_fn_and_initial_value(value)
        initial_value = self.postprocess(initial_value)
        self.value = move_files_to_cache(
            initial_value,
            self,  # type: ignore
            postprocess=True,
            keep_in_cache=True,
        )
        if client_utils.is_file_obj(self.value):
            self.keep_in_cache.add(self.value[""path""])

        if callable(load_fn):
            self.attach_load_event(load_fn, every)

        self.component_class_id = self.__class__.get_component_class_id()

    TEMPLATE_DIR = ""./templates/""
    FRONTEND_DIR = ""../../frontend/""

    def get_config(self):
        config = super().get_config()
        if self.info:
            config[""info""] = self.info
        if len(self.server_fns):
            config[""server_fns""] = [fn.__name__ for fn in self.server_fns]
        config.pop(""render"", None)
        return config

    @property
    def skip_api(self):
        return False

    @staticmethod
    def get_load_fn_and_initial_value(value):
        if callable(value):
            initial_value = value()
            load_fn = value
        else:
            initial_value = value
            load_fn = None
        return load_fn, initial_value

    def attach_load_event(self, callable: Callable, every: float | None):
        """"""Add a load event that runs `callable`, optionally every `every` seconds.""""""
        self.load_event_to_attach = (callable, every)

    def process_example(self, value):
        """"""
        Process the input data in a way that can be displayed by the examples dataset component in the front-end.
        By default, this calls the `.postprocess()` method of the component. However, if the `.postprocess()` method is
        computationally intensive, or returns a large payload, a custom implementation may be appropriate.

        For example,  the `process_example()` method of the `gr.Audio()` component only returns the name of the file, not
        the processed audio file. The `.process_example()` method of the `gr.Dataframe()` returns the head of a dataframe
        instead of the full dataframe.

        The return value of this method must be json-serializable to put in the config.
        """"""
        return self.postprocess(value)

    def as_example(self, value):
        """"""Deprecated and replaced by `process_example()`.""""""
        return self.process_example(value)

    def example_inputs(self) -> Any:
        """"""Deprecated and replaced by `example_payload()` and `example_value()`.""""""
        return self.example_payload()

    def example_payload(self) -> Any:
        """"""
        An example input data for this component, e.g. what is passed to this component's preprocess() method.
        This is used to generate the docs for the View API page for Gradio apps using this component.
        """"""
        raise NotImplementedError()

    def example_value(self) -> Any:
        """"""
        An example output data for this component, e.g. what is passed to this component's postprocess() method.
        This is used to generate an example value if this component is used as a template for a custom component.
        """"""
        raise NotImplementedError()

    def api_info(self) -> dict[str, Any]:
        """"""
        The typing information for this component as a dictionary whose values are a list of 2 strings: [Python type, language-agnostic description].
        Keys of the dictionary are: raw_input, raw_output, serialized_input, serialized_output
        """"""
        if self.data_model is not None:
            return self.data_model.model_json_schema()
        raise NotImplementedError(
            f""The api_info method has not been implemented for {self.get_block_name()}""
        )

    def flag(self, payload: Any, flag_dir: str | Path = """") -> str:
        """"""
        Write the component's value to a format that can be stored in a csv or jsonl format for flagging.
        """"""
        if self.data_model:
            payload = self.data_model.from_json(payload)
            Path(flag_dir).mkdir(exist_ok=True)
            payload = payload.copy_to_dir(flag_dir).model_dump()
        if not isinstance(payload, str):
            payload = json.dumps(payload)
        return payload

    def read_from_flag(self, payload: Any):
        """"""
        Convert the data from the csv or jsonl file into the component state.
        """"""
        if self.data_model:
            return self.data_model.from_json(json.loads(payload))
        return payload


class FormComponent(Component):
    def get_expected_parent(self) -> type[Form] | None:
        if getattr(self, ""container"", None) is False:
            return None
        return Form

    def preprocess(self, payload: Any) -> Any:
        return payload

    def postprocess(self, value):
        return value


class StreamingOutput(metaclass=abc.ABCMeta):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.streaming: bool

    @abc.abstractmethod
    def stream_output(
        self, value, output_id: str, first_chunk: bool
    ) -> tuple[bytes, Any]:
        pass


class StreamingInput(metaclass=abc.ABCMeta):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

    @abc.abstractmethod
    def check_streamable(self):
        """"""Used to check if streaming is supported given the input.""""""
        pass


def component(cls_name: str, render: bool) -> Component:
    obj = utils.component_or_layout_class(cls_name)(render=render)
    if isinstance(obj, BlockContext):
        raise ValueError(f""Invalid component: {obj.__class__}"")
    assert isinstance(obj, Component)
    return obj


def get_component_instance(
    comp: str | dict | Component, render: bool = False, unrender: bool = False
) -> Component:
    """"""
    Returns a component instance from a string, dict, or Component object.
    Parameters:
        comp: the component to instantiate. If a string, must be the name of a component, e.g. ""dropdown"". If a dict, must have a ""name"" key, e.g. {""name"": ""dropdown"", ""choices"": [""a"", ""b""]}. If a Component object, will be returned as is.
        render: whether to render the component. If True, renders the component (if not already rendered). If False, does not do anything.
        unrender: whether to unrender the component. If True, unrenders the the component (if already rendered) -- this is useful when constructing an Interface or ChatInterface inside of a Blocks. If False, does not do anything.
    """"""
    if isinstance(comp, str):
        component_obj = component(comp, render=render)
    elif isinstance(comp, dict):
        name = comp.pop(""name"")
        component_cls = utils.component_or_layout_class(name)
        component_obj = component_cls(**comp, render=render)
        if isinstance(component_obj, BlockContext):
            raise ValueError(f""Invalid component: {name}"")
    elif isinstance(comp, Component):
        component_obj = comp
    else:
        raise ValueError(
            f""Component must provided as a `str` or `dict` or `Component` but is {comp}""
        )

    if render and not component_obj.is_rendered:
        component_obj.render()
    elif unrender and component_obj.is_rendered:
        component_obj.unrender()
    assert isinstance(component_obj, Component)
    return component_obj","This code defines a base class `ComponentBase` and a subclass `Component` for defining methods that all input/output components should have. The `Component` class includes methods for preprocessing, postprocessing, processing examples, and generating API information for a component. It also includes methods for flagging data, reading data from a flag file, and getting example inputs and outputs. Additionally, there are classes for streaming input and output components, as well as a `FormComponent` class. The code also provides functions for creating component instances and getting component instances from strings, dictionaries, or existing component objects.","[-0.05297095, 0.026171323, 0.036393363, 0.025977997, 0.0013766829, -0.0147772515, 0.023633936, 0.011835093, 0.0065730377, 0.0026098825, 0.034049302, -0.03902741, -0.025398023, -0.019888273, -0.010403282, -0.009025844, 0.042048108, 0.041202314, -0.0026113929, 0.02984449, 0.031221928, -0.040815663, -0.016879657, 0.031995226, 0.008246504, -0.035958383, -0.03958322, 0.03897908, -0.026098825, 0.00905001, 0.03656252, -0.02634048, -0.031173598, 0.04772702, 0.020576991, -0.02203901, -0.021374455, 0.0052650757, -0.005669849, -0.011381988, -0.00836129, -0.0068811486, 0.0076604886, 0.012270073, -0.05833571, -0.009273541, -0.011792803, 0.0069959355, -0.033372667, 0.020975724, -0.064087115, -0.023537274, 0.024044752, -0.017942943, -0.023694351, 0.028587881, -0.09004095, 0.040429015, 0.019719113, -0.0087177325, 0.041129816, 0.02317479, -0.044488832, 0.042023942, -0.032986015, 0.0063374233, -0.00093490584, -0.0064461683, -0.0058571324, 0.0076302816, 0.032696027, -0.016480925, 0.00017925951, -0.013617304, 0.007207384, -0.00874794, -0.016782995, 0.06640701, 8.7977816e-05, 0.015610964, 0.008911057, 0.00805922, 0.015804289, -0.033420995, -0.053550925, 0.0008979023, -0.022812307, 0.036272533, -0.029433675, -0.06602036, -0.06703532, -0.00032944483, -0.05379258, 0.05084438, -0.016166773, 0.024963044, -0.070998475, -0.035402574, -0.0218336, 0.022594817, 0.06950021, -0.01121887, -0.03088361, 0.0147651695, 0.07510662, -0.038737424, -0.055387508, -0.0060806638, -0.061573897, 0.017024651, -0.017942943, 0.004521984, -0.01268693, 0.022232333, -0.043933023, -0.009515197, -0.012100914, 0.0129769165, -0.010971173, 0.026872125, 0.024358904, 0.03487093, -0.050796047, -0.02875704, 0.030931942, -0.005929629, -0.0052348687, -0.019960769, -0.000684188, -0.044851314, -0.020335335, -0.0035674437, -0.01590095, -0.025881335, -0.0027352415, 0.031221928, -0.01672258, -0.027572926, -0.022763977, -0.014922245, 0.041782286, -0.008210256, 0.0147289205, -0.0122157, 0.0014876935, -0.0092675, -0.04741287, 0.012940668, -0.048355326, 0.0006392551, 0.010711393, 0.0030342906, -0.056257468, -0.03214022, 0.023537274, -0.028177066, 0.02334395, -0.0025086892, 0.016493008, -0.026026329, 0.03668335, 0.00045990117, 0.030980272, 0.03438762, 0.00476364, -0.026002163, -0.007279881, -0.031995226, -0.053502593, 0.008451912, 0.038737424, 0.01524848, -0.010868469, -0.030980272, 0.024370987, -0.042289764, -0.06268551, -0.026533807, -0.047920343, -0.038930748, 0.0025222823, -0.02126571, -0.058094054, -0.025156368, 9.350003e-05, -0.0147893345, 0.015163901, -0.012336528, -0.010650979, 0.00385441, 0.013532724, 0.013399814, 0.021749021, 0.02875704, 0.03651419, 0.013653552, 0.031294424, -0.029022861, 0.03487093, -0.025905501, 0.024890548, -0.0034013053, 0.027524594, 0.008832519, -0.008560657, -0.021193214, -0.009998509, 0.022594817, -0.0076725716, 0.00080350554, -0.011460526, -0.01268693, 0.04088816, 0.014342272, -0.052342646, -0.02810457, -0.038350776, 0.047195375, -0.026195489, 0.0049176957, -0.024358904, 0.005990043, 0.045237966, -0.027790416, -0.024914712, 0.0148135, 0.0064884583, -0.0095333215, -0.011744471, -0.025059706, 0.025349693, -0.021857766, 0.03740832, -0.013750215, -0.012831923, -0.028612046, -0.016045945, -0.039728213, 0.019429127, -0.02031117, -0.0289262, 0.011351781, 0.0075698677, 0.011684057, 0.012445274, 0.056402463, -0.021108633, -0.06263718, -0.010922842, 0.032333545, 0.016613835, 0.008898974, 0.03508842, 0.013158158, -0.015478054, -0.01347231, 0.035450906, 0.027282938, 0.03663502, 0.0028832557, -0.087672725, -0.048162, -0.04741287, -0.0056154765, 0.014583928, 0.035595898, 0.0244314, 0.035281748, -0.009297707, -0.024612643, -0.007962558, 0.0039269067, 0.059785645, -0.03443595, -0.019767445, -0.02473347, 0.025494687, 0.049829423, 0.03591005, 0.0075819506, 0.011738431, -0.003993362, 0.019936603, 0.08293627, 0.0012120549, 0.04678456, 0.010675144, -0.024842216, 0.0049358197, -0.0786348, 0.033251837, 0.051859334, 0.005518814, -0.043546375, 0.025712177, -0.011545106, 0.020117845, -0.0052227858, 0.06776029, 0.0015224315, -0.008929182, 0.009182921, -0.009599776, 0.016239269, 0.0030025733, -0.00974477, 0.024008503, -0.036175873, 0.0039208652, -0.06162223, 0.030206975, -0.019731196, 0.0030765804, -0.040380683, -0.022667313, 0.03975238, 0.04586627, 0.02832206, -0.014269775, -0.007932352, -0.012578184, -0.0060232705, 0.06268551, -0.03864076, 0.020250756, 0.029022861, -0.08399955, 0.00034832416, 0.004712288, -0.02689629, 0.028998695, -0.00046669776, 0.021736939, 0.0020283982, 0.014100616, -0.0032381876, -0.04154063, 0.04487548, -0.051424354, 0.050361067, -0.0555325, 0.026316317, -0.02650964, 0.035112586, 0.043546375, 0.015780123, -0.013399814, 0.04685706, 0.008500243, -0.017060898, -0.029095357, -0.019078726, 0.007775275, -0.034846764, 0.050989375, -0.016565505, -0.00883856, -0.036393363, 0.009938095, -0.008615029, -0.021749021, 0.031366922, 0.008844602, -0.0073161293, -0.00069966906, 0.010518068, -0.05466254, -0.04067067, -0.043473877, -0.018559165, 0.01347231, 0.029941153, 0.015308894, 0.016142607, -0.0466879, -0.03175357, 0.010729517, -0.028684543, -0.022099422, -0.011454484, 0.03165691, 0.012771509, 0.0196587, -0.02304188, 0.038350776, 0.036175873, 0.0578524, -0.0029361178, 0.008953347, 0.033155177, 0.00012422618, 0.002975387, 0.027887078, -0.03066612, 0.03953489, 0.035015926, -0.019465374, 0.0018683014, 0.018873317, 0.029409511, 0.029602835, -0.03963155, 0.0011516409, -0.0023334888, -0.031511914, -0.033034347, 0.0555325, 0.036224205, 0.03832661, 0.0034828642, 0.04236226, -0.029578669, 0.022377327, 0.016299684, 0.037166663, -0.015465971, -0.02074615, -0.017532129, -0.0018562186, 0.003996383, 0.029216185, -0.024552228, -0.024443483, -0.01896998, 0.0073644603, 0.03286519, 0.011037628, -0.062008876, -0.026533807, -0.018377922, -0.021108633, 0.029989485, -0.013834794, 0.031971063, -0.0065428307, -0.055484172, -0.0074188327, 0.029747829, 0.025567183, 0.03912407, 0.00078915723, 0.047799516, -0.01152094, -0.011647809, -0.053164274, -0.009901846, -0.015876785, -0.046591237, -0.014330189, -0.04777535, -0.04231393, 0.026122991, -0.03740832, 0.0144631, 0.018873317, -0.0437397, 0.031511914, 0.025784673, -0.01905456, 0.014257692, 0.013278986, 0.06099392, -0.03564423, 0.038133286, 0.005301324, 0.0071348874, 0.013871043, 0.027162112, 0.0076121576, -0.006808652, -0.010318702, 0.04547962, 0.04175812, -0.016396346, -0.009158755, 0.019429127, 0.004663957, 0.037601642, -0.044126347, 0.015707627, -0.038399104, -0.028515384, -0.010669104, -0.021664442, -0.03750498, 0.06756696, -0.072303414, -0.024685139, -0.0034617193, -0.015562633, -0.015441805, -0.021930264, 0.013798546, -0.010753683, 0.06640701, -0.0020993848, -0.05964065, 0.015888868, 0.004694164, -0.014910162, 0.05635413, 0.010536193, -0.018788738, 0.010077046, 0.006159202, -0.043473877, 0.035620064, 0.00896543, -0.0002922525, -0.023573523, -0.029892823, -0.018474586, 0.040984824, -0.02481805, 0.0035100505, 0.026847959, -0.02832206, 0.0018214806, -0.013121909, -0.015876785, 0.02451598, 0.048790306, -0.020999888, -0.032599367, -0.038664926, -0.00026393344, -0.007950475, -0.06718031, 0.008470036, 0.005322469, 0.0021084468, 0.013327317, 0.018728323, 0.022425657, -0.052825958, 0.027983742, 0.006796569, -0.0019740257, -0.014511431, -0.06814694, -0.025349693, 0.0029633043, -0.0041866866, -0.0325752, 0.01511557, 0.031995226, -0.01268693, -0.026847959, -0.011581354, 0.0600273, -0.018897483, -0.044126347, 0.048258662, -0.026243819, 0.010536193, 0.02325937, -0.008439829, 0.0103126615, -0.048693642, -0.037142497, 0.020709902, 0.0073886258, 0.0050777923, 0.0393174, 0.022703562, -0.004241059, -0.009907887, -0.03400097, 0.0045159427, 0.010554316, -0.013593138, -0.00072874327, -0.028201232, 0.004256163, -0.00402961, -0.037915796, 0.01030662, -0.045769606, -0.028612046, -0.033058513, 0.00766653, -0.027476264, -0.00067512586, -0.009207086, -0.014632259, 0.00014669262, 0.03006198, 0.042700578, 0.0087177325, 0.0044706324, -0.042048108, 0.019803692, 0.005361738, 0.0094427, 0.0025736343, 0.01407645, -0.029771995, 0.028418722, -0.048693642, -0.01260235, -0.0027624278, 0.006687824, -0.022727728, -0.0052831997, -0.011853217, -0.01771337, 0.024419319, 0.006639493, -0.036949173, 0.0034496365, -0.022522321, 0.054324225, -0.026485475, -0.02776625, 0.0019740257, 0.014257692, -0.010415365, 0.032599367, 0.030545292, 0.011883424, 0.014668507, 0.010717435, -0.013605221, 0.0007381829, 0.02278814, 0.026122991, -0.0071348874, -0.0007008018, 0.00966019, -0.015453888, -0.0008571229, 0.0436672, 0.016444677, 0.026219653, -0.022703562, 0.03027947, 0.0075698677, -0.0052378895, -0.011563229, -0.06737363, -0.051472686, 0.030327803, 0.024636809, -0.0036731681, 0.007726944, -0.006098788, -0.008234421, 0.015888868, 0.028007906, -0.02936118, -0.008234421, 0.023791013, 0.005678911, 0.009497073, 0.018861234, -0.035112586, -0.010717435, -0.0070744734, 0.0036308784, -0.005095917, -0.045141302, -0.015610964, -0.0066334517, -0.031463586, -0.017121313, 0.040936492, 0.015163901, -0.009321872, -0.02165236, 0.014861831, -0.038157452, -0.002451296, -0.0039178445, 0.017048817, 0.015792206, 0.0014907141, 0.01672258, -0.0045884396, -0.003954093, 0.05620914, -0.02282439, -0.010125378, -0.027258774, 0.00805922, -0.016782995, -0.052825958, -0.00033057758, 0.008210256, 0.0058148424, -0.0045038597, -0.005041544, -0.0054342346, -0.022232333, 0.00016274008, -0.0016039903, 0.008639195, 0.0043377215, 0.008403581, 0.012747344, -0.036876675, -0.017979192, -0.030424464, -0.021301959, -0.0045914603, -0.00441928, -0.0496361, -0.0051684133, 0.041854784, 0.014112699, -0.050602723, 0.0054493384, 0.01932038, -0.016251352, -0.024503898, -0.012747344, -0.014620176, -0.00034586986, 0.008470036, 0.0031505874, -0.01945329, -0.046059594, 0.011816968, -0.021954428, -0.01607011, -0.0045914603, -0.0071348874, 0.015659295, 0.021205297, -0.027814582, -0.0003479466, 0.004479694, 0.026219653, -0.02421391, -0.006808652, -0.005920567, 0.008796271, -0.019779528, -0.0013698863, 0.0013155137, 0.0057967184, -0.035185084, 0.008252545, 0.0059628566, -0.0007332743, -0.015490136, -0.021241544, -0.03066612, 0.0060474365, -0.032333545, -0.021410704, -0.0053949654, 0.008306918, -0.03027947, 0.009823308, 0.014197278, -0.007467164, -0.026316317, 0.004011486, 0.0027050346, 0.02919202, -0.010125378, 0.037045833, -0.016915906, -0.022763977, -0.042700578, -0.01511557, 0.018800821, -0.044247176, 0.014922245, 0.04400552, 0.0064280443, 0.016360097, -0.022014843, -0.0087298155, 0.02542219, -0.010391199, -0.033928473, -0.030786948, -0.012433191, 0.037045833, -0.01503099, -0.0042078313, 0.040767334, 0.016686333, 0.002421089, 0.014040202, 0.0060867053, 0.05219765, -0.012342569, -0.04313556, 0.02208734, 0.015453888, -0.0087781465, 0.012209659, 0.056160808, -0.018679993, 0.021761104, -0.07935976, 0.009460825, -0.008808354, 0.006440127, 0.00033057758, -0.035233416, 0.017773783, 0.038036622, -0.00085561257, -0.02750043, -0.02022659, 0.0047878055, 0.018015439, 0.016021779, 0.032889355, -0.023573523, 0.01910289, -0.018897483, -0.030376133, -0.0006037619, 0.047267873, 0.0095574865, -0.046832893, -0.0051563308, 0.019562036, -0.0015465971, 0.007920269, 0.00067550346, 0.009708522, 0.038447436, 0.009231252, 0.0016221146, 0.005443297, 0.0222565, 0.011889465, 0.021193214, 0.021024054, 0.011629685, 0.024842216, -0.033904307, 0.031415254, -0.014656424, -0.028563716, 0.014523514, 0.031560246, 0.007799441, -0.0065126237, 0.030134479, 0.0037366028, 0.014028119, 0.0004262959, -0.053260937, 0.002117509, 0.006343465, 0.01828126, 0.013689801, -0.049587768, -0.018849151, -0.0071650944, 0.036949173, 0.01611844, -0.022703562, 0.046397913, 0.010892635, 0.014451017, -0.044537164, 0.021809436, -0.0015360246, -0.048669476, 0.026437145, -0.032599367, 0.03001365, -0.0011093512, -0.0054191314, 0.036393363, 0.04630125, 0.0006392551, -0.013230654, -0.023621853, -0.017665038, -0.030158643, -0.030255305, 0.010300579, 0.0037366028, -0.026751297, 0.011925713, -0.020129928, 0.0020299086, -0.021640277, 0.01238486, 0.02126571, -0.0049660266, -0.006059519, -0.016009696, -0.025663845, 0.005772553, -0.024334738, 0.024721388, 0.009974343, -0.007249674, 0.029916987, 0.017858364, -0.00092961965, -0.017967109, -0.031826068, -0.006959687, -0.028660377, -0.009448742, -0.019344546, -0.032816857, 0.0129769165, -0.016142607, -0.043812197, -0.035233416, -0.040719002, 0.00018681126, 0.040284023, 0.0032442291, -0.017459631, 0.032816857, -0.02810457, 0.017942943, 0.004404177, -0.013653552, -0.012457356, 0.002750345, 0.004799888, 0.023839343, -0.0066938656, 0.0032804774, 0.026364647, 0.020287003, -0.030617788, 0.039486557, 0.019610368, 0.032285213, -0.036610853, -0.0070442664, -0.028491218, -0.020419914, -0.00762424, -0.030424464, 0.026992952, -0.026630469, -0.029554503, 0.007823606, -0.046156257, 0.034363452, -0.014414768, -0.004585419, -0.0035825472, 0.014112699, 0.008687526, -0.0028817453, -0.04400552, 0.0196587, -0.0003181172, -0.03400097, 0.015151818, 0.018655827, 0.009074175, 0.036151707, 0.015429722, -0.019501623, -0.00883856, 0.012264032, 0.0392449, 0.025108038, -0.007527578, 0.024624726, -0.017822115, -0.010064964, 0.037480813, 0.01793086, 0.0010746131, 0.055774156, 0.0311011, -0.015731793, -0.01590095, -0.016517173, 0.018933732, -0.014330189, -0.025615515, 0.019392878, 0.0003764544, -0.0049992544, 0.044682156, -0.013943539, -0.0130252475, 0.0018516876, 0.007515495, -0.0024890546, 0.03023114, -0.054324225, -0.0047727018, 0.0032804774, 0.033710983, 0.034266792, 0.0012656723, -0.014885997, -0.007424874, 0.053695917, 0.010258288, -0.026098825, 0.039728213, 0.031463586, -0.020734068, 0.017870447, -0.00049048575, 0.037964124, 0.0023893716, -0.0018818945, -0.011230953, 0.0074611227, -0.019078726, -0.0010247716, -0.013919374, 0.030786948, -0.016855491, -0.015973449, 0.012493605, -0.011073877, -0.013194406, 0.00042818385, -0.0054070484, 0.0060625398, -0.0196587, 0.024322655, -0.0045280256, 0.023899758, -0.013895208, 0.03214022, -0.0014197278, -0.008959388, 0.0017006526, -0.024938878, -0.007654447, 0.014861831, 0.045044642, -0.0030992355, 0.044633824, 0.037746634, 0.009448742, -0.016867574, -0.008222339, 0.015369308, 0.0014861831, 0.02498721, -0.005594332, -0.021930264, 0.015381391, 0.01060869, 0.047461197, -0.014257692, 0.0026023309, -0.018861234, -0.010530151, -0.00740675, -0.02936118, 0.012203618, -0.0011939306, 0.0016734664, 0.022425657, -0.0035372367, -0.0024225994, 0.009877681, -0.008911057, -0.021664442, -0.052439306, 0.029047027, -0.009098341, 0.016867574, 0.011224912, -0.0034496365, -0.00848816, -0.041588962, -0.01632385, -0.048234496, -0.015465971, -0.048451986, -0.03508842, 0.053599257, -0.019694947, -0.0016779974, 0.018933732, -0.024177663, 0.006440127, -0.00023920147, 0.0064461683, 0.0015133694, -0.0010761234, -0.009460825, -0.018994145, -0.017556293, 0.04187895, -0.0058964016, -0.02165236, -0.020540742, 0.023682268, 0.012988999, -0.006379713, 0.010934925, -8.632587e-05, 0.04531046, 0.0020374605, -0.028587881, 0.0054493384, -0.041371472, -0.014487265, -0.01992452, -0.009237293, -0.0074611227, -0.0027140966, 0.018982062, 0.030569458, 0.03373515, -0.024068918, -0.03656252, 0.024298491, 0.008500243, 0.014861831, 0.008294835, -0.0077027786, 0.02672713, -0.027403766, -0.026533807, 0.029216185, 0.0007627261, -3.908617e-06, 0.02222025, -0.0025600411, -0.03356599, 0.001767108, -0.032406043, -0.0073523778, 0.016275518, -0.008427746, -0.0051774755, 0.016275518, 0.02936118, -0.020939475, -0.0030871527, -0.012409025, -0.010010592, -0.020903226, 0.0044555287, 0.018861234, -0.019429127, -0.024503898, -0.05176267, 0.030956108, 0.013798546, -0.012844006, -0.010771807, 0.021688608, 0.023283536, 0.02052866, 0.030521126, -0.0062347194, 0.0022322955, -0.0077027786, 0.0023274473, 0.021773187, -0.030762782, -0.024914712, 0.008427746, -0.0035765057, -0.0021069364, 0.0044071977, -0.015985532, 0.009249375, 0.018329592, 0.0038090996, -0.016009696, -0.027186276, -0.0042289766, -2.0401507e-05, 0.016166773, 0.02629215, -0.02364602, 0.03842327, -0.0048029087, 0.0054342346, -0.02273981, -0.025784673, 0.010838263, -0.0112732425, -0.026630469, -0.006319299, -0.016360097, -0.006391796, 0.02914369, 0.03230938, -0.034895096, 0.00030131458, -0.0026944622, -0.019694947, 0.029167855, -0.013967705, -0.029771995, -0.00021050485, 0.019815775, 0.023501026, 0.015429722, 0.010693269, -0.029506173, 0.0047878055, 0.0622022, -0.007606116, 0.0022383367, -0.005651725, 0.0069234385, 0.01754421, -0.0019785569, 0.021144882, -0.017024651, -0.031270258, -0.05007108, -0.010324744, 0.042603917, 0.007678613, -0.011587395, 0.0060836845, -0.018559165, -0.0027941451, 0.03564423, 0.021289876, -0.034580946, 0.026992952, -0.0013147586, 0.016311767, -0.032551035, -0.016335933, 0.027862914, -0.024189746, -0.0007974641, -0.002430151, -0.01347231, -0.009068133, 0.004694164, 0.033276003, 0.021628194, 0.004014507, 0.019139139, -0.008029014, 0.0056064143, 0.020419914, -0.016879657, 0.03317934, 0.022123588, 0.0037517063, -0.01905456, -0.027210442, -0.0214832, -0.04712288, 0.0007831158, -0.008204214, 0.013786463, -0.00025449376, 0.007920269, -0.024793884, 0.010095171, -0.009575611, -0.001901529, 0.01932038, 0.02650964, -0.025494687, 0.007757151, 0.002759407, -0.016867574, 0.015272646, 0.022147754, 0.040936492, -0.013629387, -0.0081438, 0.028612046, 0.016480925, -0.029941153, 0.016408429, -0.027379602, -0.014293941, 0.012674847, -0.00974477, -0.021060303, 0.004682081, 0.024286408, -0.0028379452, -0.01905456, -0.029071191, 3.707434e-05, 0.002516241, 0.010554316, 0.045044642, -0.011418236, 0.044706322, 0.018003358, -0.026461309, 0.009382286, -0.002854559, 0.02776625, -0.02044408, 0.018547082, 0.024105165, -0.014861831, -0.04755786, -0.026267985, -0.008983554, 0.033034347, 0.02031117, -0.011116167, 0.035740893, -0.013194406, -0.026026329, -0.054904196, -0.010064964, 0.003981279, -0.016650084, -0.015743876, 0.003144546, -0.0006517155, -0.035837553, -0.008898974, 0.01030662, 0.03148775, 0.02230483, -0.004195749, 0.02104822, 0.017918777, 0.022498155, -0.046953723, -0.03789163, 0.014487265, 0.029554503, -0.014499348, 0.025301361, 0.010173709, -0.025688011, -0.01238486, -0.034750104, -0.029167855, 0.049176954, 0.0065065823, 0.015139735, -0.006168264, 0.016058028, 0.018474586, 0.020951558, -0.026026329, -0.0033106843, -0.018136267, 0.015876785, 0.01645676, -0.0077209026, -0.0034677607, 0.006177326, -0.025494687, -0.021688608, 0.0059175463, 0.021664442, 0.026002163, 0.009726645, -0.008180048, 0.014136864, -0.040574007, 0.028877867, 0.03820578, 0.0041685626, -0.016263435, 0.019646617, -0.009104382, 0.009327914, 0.029482007, 0.022051092, -0.01771337, -0.0057181804, 0.011768637, -0.03006198, -0.022328995, 0.014656424, -0.025470521, -0.026147157, -0.006705948, -0.045938767, 0.056499124, 0.010469737, 0.014269775, -0.0059054634, -0.022486072, 0.008470036, 0.014668507, -0.01377438, 0.008476077, -0.022353161, -0.0053134067, 0.013315234, 0.023899758, -0.0020933433, 0.0022806267, 0.0045793774, -0.010566399, 0.025833005, 0.03066612, 0.019259967, 0.009883722, 0.030303637, -0.007962558, -0.0086814845, 0.007805482, 0.03912407, 0.0075698677, -0.022280665, 0.011255119, -0.013907291, -0.041202314, 0.0068026106, 0.022751894, 0.005428193, -0.0041685626, -0.0064944993, 0.05872236, 0.01281984, 0.0022428678, -0.048838638, -0.003413388, -0.013194406, 0.0226069, -0.010977214, 0.013158158, 0.037021667, -0.0038211823, 0.023851426, -0.008022972, 0.01585262, 0.03201939, 0.037649974, 0.005274138, 0.0053134067, 0.0348226, 0.00011280417, 0.025325527, 0.006301175, 0.022184001, 0.016903823, 0.0053587174, 0.008433787, -0.0015224315, -0.031004438, 0.03576506, 0.0043467837, 0.004479694, -0.008905016, 0.004011486, 0.0040205484, -0.02542219, 0.015212232, 0.015780123, 0.0026823792, -0.03868909, -0.01468059, -0.0065307477, 0.00424408, -0.0032472496, 0.0069959355, -0.0029980422, -0.009696439, -0.020214507, 0.004153459, 0.005126124, 0.0037396234, 0.0046548946, 0.01932038, 0.023597687, 0.019296216, 0.011424278, 0.046953723, -0.021060303, -0.013979788, -0.014620176, -0.008457953, -0.01806377, -6.8060086e-05, -5.8431615e-05, 0.019634534, 0.006289092, 0.058964014, -0.014366437, -0.022280665, -0.007068432, 0.004621667, 0.0062347194, -0.04100899, -0.015405557, -0.006790528, -0.020625323, -0.0073040463, 0.02580884, -0.026823793, -0.0018154392, 0.0022927094, -0.033493493, -0.004573336, 0.00874794, 0.01948954, -0.038229946, 0.04192728, -0.002606862, -0.010028715, -0.016215105, -0.018426254, -0.017918777, -0.0033680776, 0.009696439, -0.0429664, 0.02118113, 0.00086089876, 0.0104939025, 0.009636025, -0.030811114, 0.022727728, 0.035330076, -0.026557973, -0.012131121, 0.032116055, -0.008379415, 0.0036943129, 0.008282753, -0.08424121, 0.019610368, 0.025228865, 0.008639195, 0.05374425, -0.0229573, -0.019900355, 0.016130524, -0.0104093235, 0.018426254, 0.0062045124, -0.005379862, 0.003703375]"
../../../gradio,../../../gradio/gradio/components,video.pyi,"""""""gr.Video() component.""""""

from __future__ import annotations

import tempfile
import warnings
from pathlib import Path
from typing import Any, Callable, Literal, Optional

from gradio_client import utils as client_utils
from gradio_client.documentation import document, set_documentation_group

import gradio as gr
from gradio import processing_utils, utils, wasm_utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events

if not wasm_utils.IS_WASM:
    # TODO: Support ffmpeg on Wasm
    from ffmpy import FFmpeg

set_documentation_group(""component"")


class VideoData(GradioModel):
    video: FileData
    subtitles: Optional[FileData] = None

from gradio.events import Dependency

@document()
class Video(Component):
    """"""
    Creates a video component that can be used to upload/record videos (as an input) or display videos (as an output).
    For the video to be playable in the browser it must have a compatible container and codec combination. Allowed
    combinations are .mp4 with h264 codec, .ogg with theora codec, and .webm with vp9 codec. If the component detects
    that the output video would not be playable in the browser it will attempt to convert it to a playable mp4 video.
    If the conversion fails, the original video is returned.

    Demos: video_identity_2
    """"""

    data_model = VideoData

    EVENTS = [
        Events.change,
        Events.clear,
        Events.start_recording,
        Events.stop_recording,
        Events.stop,
        Events.play,
        Events.pause,
        Events.end,
        Events.upload,
    ]

    def __init__(
        self,
        value: str
        | Path
        | tuple[str | Path, str | Path | None]
        | Callable
        | None = None,
        *,
        format: str | None = None,
        sources: list[Literal[""upload"", ""webcam""]] | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        mirror_webcam: bool = True,
        include_audio: bool | None = None,
        autoplay: bool = False,
        loop: bool = False,
        show_share_button: bool | None = None,
        show_download_button: bool | None = None,
        min_length: int | None = None,
        max_length: int | None = None,
    ):
        """"""
        Parameters:
            value: A path or URL for the default value that Video component is going to take. Can also be a tuple consisting of (video filepath, subtitle filepath). If a subtitle file is provided, it should be of type .srt or .vtt. Or can be callable, in which case the function will be called whenever the app loads to set the initial value of the component.
            format: Format of video format to be returned by component, such as 'avi' or 'mp4'. Use 'mp4' to ensure browser playability. If set to None, video will keep uploaded format.
            sources: A list of sources permitted for video. ""upload"" creates a box where user can drop an video file, ""webcam"" allows user to record a video from their webcam. If None, defaults to [""upload, ""webcam""].
            height: The height of the displayed video, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the displayed video, specified in pixels if a number is passed, or in CSS units if a string is passed.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to upload a video; if False, can only be used to display videos. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            mirror_webcam: If True webcam will be mirrored. Default is True.
            include_audio: Whether the component should record/retain the audio track for a video. By default, audio is excluded for webcam videos and included for uploaded videos.
            autoplay: Whether to automatically play the video when the component is used as an output. Note: browsers will not autoplay video files if the user has not interacted with the page yet.
            loop: Whether to replay video on loop when the component is used as an output.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            show_download_button: If True, will show a download icon in the corner of the component that allows user to download the output. If False, icon does not appear. By default, it will be True for output components and False for input components.
            min_length: The minimum length of video (in seconds) that the user can pass into the prediction function. If None, there is no minimum length.
            max_length: The maximum length of video (in seconds) that the user can pass into the prediction function. If None, there is no maximum length.
        """"""
        valid_sources: list[Literal[""upload"", ""webcam""]] = [""upload"", ""webcam""]
        if sources is None:
            self.sources = valid_sources
        elif isinstance(sources, str) and sources in valid_sources:
            self.sources = [sources]
        elif isinstance(sources, list):
            self.sources = sources
        else:
            raise ValueError(
                f""`sources` must be a list consisting of elements in {valid_sources}""
            )
        for source in self.sources:
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must a list consisting of elements in {valid_sources}""
                )
        self.format = format
        self.autoplay = autoplay
        self.loop = loop
        self.height = height
        self.width = width
        self.mirror_webcam = mirror_webcam
        self.include_audio = (
            include_audio if include_audio is not None else ""upload"" in self.sources
        )
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        self.show_download_button = show_download_button
        self.min_length = min_length
        self.max_length = max_length
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: VideoData | None) -> str | None:
        """"""
        Parameters:
            payload: An instance of VideoData containing the video and subtitle files.
        Returns:
            Passes the uploaded video as a `str` filepath or URL whose extension can be modified by `format`.
        """"""
        if payload is None:
            return None
        if not payload.video.path:
            raise ValueError(""Payload path missing"")
        file_name = Path(payload.video.path)
        uploaded_format = file_name.suffix.replace(""."", """")
        needs_formatting = self.format is not None and uploaded_format != self.format
        flip = self.sources == [""webcam""] and self.mirror_webcam

        if self.min_length is not None or self.max_length is not None:
            # With this if-clause, avoid unnecessary execution of `processing_utils.get_video_length`.
            # This is necessary for the Wasm-mode, because it uses ffprobe, which is not available in the browser.
            duration = processing_utils.get_video_length(file_name)
            if self.min_length is not None and duration < self.min_length:
                raise gr.Error(
                    f""Video is too short, and must be at least {self.min_length} seconds""
                )
            if self.max_length is not None and duration > self.max_length:
                raise gr.Error(
                    f""Video is too long, and must be at most {self.max_length} seconds""
                )

        if needs_formatting or flip:
            format = f"".{self.format if needs_formatting else uploaded_format}""
            output_options = [""-vf"", ""hflip"", ""-c:a"", ""copy""] if flip else []
            output_options += [""-an""] if not self.include_audio else []
            flip_suffix = ""_flip"" if flip else """"
            output_file_name = str(
                file_name.with_name(f""{file_name.stem}{flip_suffix}{format}"")
            )
            output_filepath = Path(output_file_name)
            if output_filepath.exists():
                return str(output_filepath.resolve())
            if wasm_utils.IS_WASM:
                raise wasm_utils.WasmUnsupportedError(
                    ""Video formatting is not supported in the Wasm mode.""
                )
            ff = FFmpeg(
                inputs={str(file_name): None},
                outputs={output_file_name: output_options},
            )
            ff.run()
            return str(output_filepath.resolve())
        elif not self.include_audio:
            output_file_name = str(file_name.with_name(f""muted_{file_name.name}""))
            if Path(output_file_name).exists():
                return output_file_name
            if wasm_utils.IS_WASM:
                raise wasm_utils.WasmUnsupportedError(
                    ""include_audio=False is not supported in the Wasm mode.""
                )
            ff = FFmpeg(
                inputs={str(file_name): None},
                outputs={output_file_name: [""-an""]},
            )
            ff.run()
            return output_file_name
        else:
            return str(file_name)

    def postprocess(
        self, value: str | Path | tuple[str | Path, str | Path | None] | None
    ) -> VideoData | None:
        """"""
        Parameters:
            value: Expects a {str} or {pathlib.Path} filepath to a video which is displayed, or a {Tuple[str | pathlib.Path, str | pathlib.Path | None]} where the first element is a filepath to a video and the second element is an optional filepath to a subtitle file.
        Returns:
            VideoData object containing the video and subtitle files.
        """"""
        if value is None or value == [None, None] or value == (None, None):
            return None
        if isinstance(value, (str, Path)):
            processed_files = (self._format_video(value), None)

        elif isinstance(value, (tuple, list)):
            if len(value) != 2:
                raise ValueError(
                    f""Expected lists of length 2 or tuples of length 2. Received: {value}""
                )

            if not (
                isinstance(value[0], (str, Path)) and isinstance(value[1], (str, Path))
            ):
                raise TypeError(
                    f""If a tuple is provided, both elements must be strings or Path objects. Received: {value}""
                )
            video = value[0]
            subtitle = value[1]
            processed_files = (
                self._format_video(video),
                self._format_subtitle(subtitle),
            )

        else:
            raise Exception(f""Cannot process type as video: {type(value)}"")
        if not processed_files[0]:
            raise ValueError(""Video data missing"")
        return VideoData(video=processed_files[0], subtitles=processed_files[1])

    def _format_video(self, video: str | Path | None) -> FileData | None:
        """"""
        Processes a video to ensure that it is in the correct format.
        """"""
        if video is None:
            return None
        video = str(video)
        returned_format = video.split(""."")[-1].lower()
        if self.format is None or returned_format == self.format:
            conversion_needed = False
        else:
            conversion_needed = True

        is_url = client_utils.is_http_url_like(video)

        # For cases where the video is a URL and does not need to be converted to another format, we can just return the URL
        if is_url and not (conversion_needed):
            return FileData(path=video)

        # For cases where the video needs to be converted to another format
        if is_url:
            video = processing_utils.save_url_to_cache(
                video, cache_dir=self.GRADIO_CACHE
            )
        if (
            processing_utils.ffmpeg_installed()
            and not processing_utils.video_is_playable(video)
        ):
            warnings.warn(
                ""Video does not have browser-compatible container or codec. Converting to mp4""
            )
            video = processing_utils.convert_video_to_playable_mp4(video)
        # Recalculate the format in case convert_video_to_playable_mp4 already made it the selected format
        returned_format = utils.get_extension_from_file_path_or_url(video).lower()
        if self.format is not None and returned_format != self.format:
            if wasm_utils.IS_WASM:
                raise wasm_utils.WasmUnsupportedError(
                    ""Returning a video in a different format is not supported in the Wasm mode.""
                )
            output_file_name = video[0 : video.rindex(""."") + 1] + self.format
            ff = FFmpeg(
                inputs={video: None},
                outputs={output_file_name: None},
                global_options=""-y"",
            )
            ff.run()
            video = output_file_name

        return FileData(path=video, orig_name=Path(video).name)

    def _format_subtitle(self, subtitle: str | Path | None) -> FileData | None:
        """"""
        Convert subtitle format to VTT and process the video to ensure it meets the HTML5 requirements.
        """"""

        def srt_to_vtt(srt_file_path, vtt_file_path):
            """"""Convert an SRT subtitle file to a VTT subtitle file""""""
            with open(srt_file_path, encoding=""utf-8"") as srt_file, open(
                vtt_file_path, ""w"", encoding=""utf-8""
            ) as vtt_file:
                vtt_file.write(""WEBVTT\n\n"")
                for subtitle_block in srt_file.read().strip().split(""\n\n""):
                    subtitle_lines = subtitle_block.split(""\n"")
                    subtitle_timing = subtitle_lines[1].replace("","", ""."")
                    subtitle_text = ""\n"".join(subtitle_lines[2:])
                    vtt_file.write(f""{subtitle_timing} --> {subtitle_timing}\n"")
                    vtt_file.write(f""{subtitle_text}\n\n"")

        if subtitle is None:
            return None

        valid_extensions = ("".srt"", "".vtt"")

        if Path(subtitle).suffix not in valid_extensions:
            raise ValueError(
                f""Invalid value for parameter `subtitle`: {subtitle}. Please choose a file with one of these extensions: {valid_extensions}""
            )

        # HTML5 only support vtt format
        if Path(subtitle).suffix == "".srt"":
            temp_file = tempfile.NamedTemporaryFile(
                delete=False, suffix="".vtt"", dir=self.GRADIO_CACHE
            )

            srt_to_vtt(subtitle, temp_file.name)
            subtitle = temp_file.name

        return FileData(path=str(subtitle))

    def example_payload(self) -> Any:
        return {
            ""video"": file(
                ""https://github.com/gradio-app/gradio/raw/main/demo/video_component/files/world.mp4""
            ),
        }

    def example_value(self) -> Any:
        return ""https://github.com/gradio-app/gradio/raw/main/demo/video_component/files/world.mp4""

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def clear(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def start_recording(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def stop_recording(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def stop(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def play(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def pause(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def end(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Video` component in Gradio, which allows users to upload/record videos as input or display videos as output. The component ensures that the video is in a compatible format for browser playback (e.g., .mp4 with h264 codec). If the video format is not compatible, the component attempts to convert it to a playable mp4 format. The component also supports features like setting video dimensions, autoplay, loop, and more.

The component provides methods for handling various events such as change, clear, start_recording, stop_recording, stop, play, pause, end, and upload. These methods allow users to define functions to be called when specific events occur, such as when a video is played, paused, or uploaded. The parameters for these event methods include the function to call, input and output components, API documentation settings, and event handling options.","[-0.05884871, 0.018737776, -0.018266309, -0.009701333, 0.013902221, -0.033534575, 0.030681597, -0.021119287, 0.015340799, -0.016972799, 0.046808176, -0.015800176, -0.046372976, -0.020490665, -0.009078755, -0.042166043, -0.031044265, -0.0076824883, 0.019922487, 0.027030753, -0.004684444, -0.025555909, -0.01239111, 0.040328532, 0.015788088, -0.07340373, -0.03053653, 0.102223635, -0.015389155, -0.01402311, -0.01837511, -0.029472709, -0.0135153765, -0.016017776, 0.00083639997, -0.06107306, 0.045188263, -0.009544177, -0.0161024, 0.0038744886, -0.0050047995, -0.03358293, -0.03467093, -0.00018227777, -0.016646398, 0.022521598, -0.037354663, 0.004624, 0.0031249775, 0.03087502, -0.05236906, -0.0024072, -0.027876975, 0.020055465, -0.0072231106, 0.033002663, -0.008317155, 0.009102933, -0.022013865, -0.027804442, 0.0015337777, -0.027659375, 0.013793421, 0.0033667553, 0.008450133, -0.014204443, -0.039192174, 0.025918577, 0.024637153, -0.007984711, 0.06537671, -0.027151642, 0.044051908, -0.055705596, -0.026764799, 0.005554844, 0.0008794666, -0.026764799, 0.021276442, -0.0008628444, 0.014627554, 0.014252799, -0.06305564, -0.009840355, -0.026111998, 0.037548088, -0.033873063, 0.021494042, 0.0031914664, -0.017117865, -0.040521953, 0.015643021, -0.042601243, 0.06735928, 0.00012485555, -0.0026338664, -0.0012345777, -0.021941332, 0.04293973, 0.053142752, 0.0060686218, -0.04567182, -0.027925331, -0.06184675, 0.050193064, -0.025265776, -0.00983431, 0.026813153, -0.019378487, -0.015788088, -0.007404444, -0.016888177, -0.04717084, 0.04632462, -0.00089911104, -0.049080886, 0.034936886, -0.017468443, -0.025942754, -0.016573865, -0.05609244, 0.026571376, -0.034864355, -0.03675022, 0.046929065, -0.021602843, 0.038104177, -0.023549154, -0.043544173, -0.014941866, 0.0012504443, 0.018242132, 0.02804622, -0.06943858, -0.022062222, 0.035081953, -0.06199182, -0.0046784, -0.03500942, 0.037548088, 0.02185671, -0.039095465, 0.019765332, -0.0024419555, -0.003170311, -0.042988084, -0.03728213, 0.008939733, -0.035372086, -0.040159285, -0.0048264884, 0.020913776, -0.04381013, -0.007295644, -0.01957191, -0.007350044, 0.031358577, 0.007555555, -0.0057633775, -0.004439644, -0.0062378664, 0.02674062, 0.033969775, 0.0064312886, -0.03000462, -0.001755911, 0.008468266, 0.033776354, -0.046252087, 0.06779449, 0.007966577, 6.847222e-06, -0.07248497, 0.033873063, 0.036846932, -0.03510613, 0.014833066, -0.03892622, 0.013104355, -0.007120355, -0.022267733, -0.019934576, -0.029061686, 0.0047025774, -0.015679289, 0.010523377, -0.00912711, -0.037789863, -0.025507554, -0.0020777776, -0.009985422, 0.03251911, 0.0027547553, 0.008178133, 0.026498843, -0.014156088, 0.016682666, -0.024165688, 0.025289955, -0.0108256, 0.04325404, -0.0052072885, 0.016235376, -0.036460087, -0.047702752, -0.029255109, 0.0015957332, 0.01966862, -0.0028529775, -0.006449422, 0.013829688, 0.0005058444, 0.047751106, -0.012360888, -0.053868085, 0.021070931, -0.031503644, 0.049612798, -0.025531732, -0.027901154, -0.052272353, -0.0007880444, 0.025676798, -0.024322843, 0.020829154, -0.015848532, 0.03870862, -0.00025575553, 0.029255109, -0.015244088, 0.045284975, 0.010450844, -0.025821865, -0.0029919997, 0.085057415, -0.07504782, 0.027393421, -0.0068362663, 0.041706663, 0.037088707, -0.012403199, -0.014276977, 0.0016637333, -0.0006826444, 0.025628442, 0.045720175, 0.0023769776, -0.040328532, 0.042432, 0.051256884, -0.0058751996, -0.037257954, 0.014204443, 0.012862577, 0.0029708443, -0.012729599, -0.012119111, 0.04946773, -0.0112910215, 0.013394488, 0.015643021, -0.051063463, -0.03643591, 0.01848391, -0.009580444, 0.047896173, -0.014530843, 0.0067335106, 0.014663821, 0.024407465, -0.0018601776, -0.018786132, 0.013418666, 0.02642631, 0.018580621, 0.010686577, 0.066633955, 0.04001422, 0.039844975, 0.041489065, 0.0042794663, 0.0068483553, -0.04219022, 0.06436124, -0.023005154, 0.013732977, 0.02369422, -0.013962666, 0.02294471, -0.03587982, 0.017891554, 0.011079466, 0.029496888, -0.054545064, 0.013684621, 0.023754666, 0.04804124, 0.010203022, 0.04042524, 0.005675733, -0.006534044, -0.010493155, -0.01629582, -0.018387198, -0.03152782, 0.02869902, -0.010348088, -0.0017166222, -0.013055999, -0.011375643, 0.044414576, 0.046010308, 0.0052344888, -0.0152078215, -0.06252373, 0.02162702, 0.040521953, 0.008661688, -0.023416176, -0.017226666, 0.0031551998, 0.0038805332, 0.0067455997, -0.03261582, -0.02468551, -0.036701865, -0.043640886, -0.03131022, 0.0031733331, -0.028022043, 0.042093508, -0.0012534666, -0.014095644, 0.014409955, 0.02261831, 0.002707911, -0.04153742, 0.0330752, -0.066392176, 0.02686151, -0.03218062, -0.050724976, 0.009157333, 0.024504175, 0.010608, 0.02218311, -0.03131022, -0.008516622, -0.021397332, -0.033510398, -0.017915731, -0.038732797, -0.018314665, -0.011248711, 0.07553137, 0.003403022, -0.037475552, -0.03650844, -0.087571904, -0.037040353, -0.047025774, 0.046638932, -0.020019198, 0.04023182, 0.002791022, -0.0017483555, -0.027973687, -0.012487821, 0.009302399, -0.044801418, 0.01848391, 0.018628977, 0.0050984886, 0.011786666, -0.039095465, -0.012572444, 0.0003785333, -0.0107349325, -0.040691197, -0.0065400884, 0.0075253327, 0.0076462217, 0.021070931, -0.040449418, -0.006491733, -0.02229191, -0.012717511, 0.053771373, 0.03479182, 0.009526044, -0.039651554, -0.025193242, -0.015534221, -0.03597653, 0.026474664, 0.0007147555, 0.044607997, -0.0033727998, 0.027659375, -0.012717511, -0.005010844, -0.0087765325, -0.027804442, 0.05009635, -0.01923342, -0.027925331, 0.045816887, 0.052127287, 0.014833066, -0.012765866, 0.015026488, 0.027852798, 0.044728886, -0.010608, 0.039724085, -0.02075662, -0.010493155, -0.033220265, 0.045188263, 0.05077333, 0.004941333, -0.018508088, -0.05053155, -0.027659375, 0.002354311, 0.040207643, -0.007863821, -0.019076265, 0.0071263993, -0.041827552, -0.029641954, 0.01217351, 0.018109154, 0.0041313777, 0.021010488, -0.032132264, 0.014833066, -0.0033546665, 0.021880887, 0.044317864, -0.052659195, 0.03718542, 0.017843198, 0.025193242, -0.037451375, 0.010172799, -0.0033395553, 0.017855288, -0.021010488, -0.035178665, -0.02860231, 0.01848391, -0.029182576, 0.003566222, 0.011272888, -0.036145777, 0.013926399, 0.017976176, -0.009695288, -0.015727643, -0.046252087, 0.029230932, -0.0123367105, 0.055028617, 0.011472355, 0.0035964441, 0.028408887, 0.013551643, -0.04073955, -0.02076871, 0.0041857776, 0.058558572, 0.021929244, 0.01870151, -0.032688353, 0.0027184887, 0.02250951, -0.023500798, -0.03305102, -0.017903643, -0.023065599, -0.00017925554, -0.01966862, -0.013853866, 0.005119644, 0.070260614, -0.037693154, -0.062136885, 0.0099793775, -0.03411484, 0.009985422, -0.021288533, -0.006793955, -0.011127821, 0.004373155, 0.020393955, -0.06673066, 0.004234133, 0.008716089, 0.017383821, 0.027030753, -0.008927644, -0.019426843, 0.06769777, 0.010027733, -0.021578666, 0.034574218, -0.006576355, -0.0011333333, 0.038249243, 0.0039772443, -0.040521953, -0.004095111, -0.00013071111, -0.0053735105, -0.049612798, -0.0041615996, 0.0051649776, -0.010541511, -0.002588533, -0.039313063, 0.040763732, 0.0053735105, 0.006334577, -0.014143999, 0.024528354, -0.008824889, -0.013708799, 0.0047811554, -0.04610702, -0.014555021, -0.00010199999, -0.016054044, 0.011025066, -0.0448256, -0.0026066664, -0.012179554, 0.012669154, -0.011720177, -0.036242485, 0.02065991, -0.008178133, 0.013007644, -0.010063999, 0.014845154, 0.04704995, -0.008782577, -0.047557686, -0.008395732, 0.016477155, 0.029738665, -0.07292017, 0.00972551, -0.056575995, -0.0029708443, 0.020732444, -0.0038986665, -0.0091331545, -0.047920354, -0.010257422, -0.0034513776, 0.0031521777, 0.016162843, 0.016731022, -0.0112064, -0.011677866, -0.0057663997, -0.052465774, -0.019596087, 0.035517152, -0.032785065, 0.008280888, 0.0068543996, 0.041924264, -0.011635555, 0.004871822, 0.006570311, -0.030947553, -0.013140622, -0.0049111107, 0.018459732, -0.035517152, 0.004983644, -0.038877863, -0.0037233776, -0.005418844, 0.006449422, 0.04632462, 0.03544462, -0.0040346663, 0.010251377, 0.011073422, -0.022038043, 0.036653508, -0.0025749332, 0.0393856, 0.013829688, 0.026111998, -0.05033813, 0.00999751, 0.015461688, -0.016767288, 0.009048533, 0.018870754, 0.041247286, -0.0032458664, 0.005050133, -0.011919644, -0.060782928, -0.0072110216, -0.0108256, 0.036919463, -0.03600071, -0.05120853, -0.024951465, -0.020865422, -0.035057776, 0.032736707, 0.030584887, 0.014047288, 0.015352888, -0.001647111, 0.018858666, -0.0059809773, 0.0202368, 0.034018133, -0.0072110216, -0.010777243, -0.0042855106, 0.010879999, 0.04337493, -0.0012436444, 0.047315907, -0.01879822, 0.02490311, -0.018169599, -0.022098487, -0.02327111, 0.01586062, -0.030294754, 0.0027592888, 0.03326862, 0.024854753, 0.011937777, 0.032905955, 0.0004242444, -0.0224128, 0.021324798, 0.03957902, -0.009362844, -0.027852798, -0.006017244, 0.028191287, 0.014446221, 0.0016017776, -0.011520711, -0.05304604, 0.00068831106, -0.006479644, 0.011145955, -0.027659375, -0.005189155, -0.026039464, -0.008728177, -0.015147377, 0.020672, 0.0024525332, 0.010517333, -0.022122664, 0.033993952, -0.06706915, 0.00052359997, -0.0072049773, 0.008504533, 0.03283342, -0.04078791, 0.0041071996, -0.013926399, 0.0047841775, 0.043229863, -0.015485866, -0.0058056884, -0.04325404, -0.0013267555, -0.01315271, -0.044728886, 0.0041706664, 0.012070755, 0.022642488, -0.03367964, -0.016549688, -0.006999466, -0.006144177, 0.022146843, -0.009308443, 0.033993952, 0.015074844, -0.022654576, 0.04912924, -0.050724976, 0.035396263, 0.004617955, 0.019886222, -0.02282382, -0.027393421, 0.008196266, -0.004672355, -0.0047297776, -0.002763822, -0.021445688, -0.0010781777, 0.0051528886, -0.021481954, 0.0015579554, 0.0010003555, 0.0010660888, 0.020635732, 0.012838399, 0.0025900442, -0.01761351, -0.013442843, 0.0448256, -0.07920639, -0.040957153, 0.00086737773, -0.035734754, -0.0052495995, 0.014216532, -0.045841064, 0.005322133, -0.02490311, 0.023392, 0.007918222, 0.03358293, -0.021784177, 0.050386485, -0.000113049995, -0.049709506, 0.010269511, -0.03164871, -0.0021064887, 0.03491271, 0.0011696, -0.021506133, 0.012669154, -0.03109262, 0.02425031, -0.00062597776, 0.0042824885, 0.024322843, -0.0020052444, 0.0079544885, -0.05435164, 0.014869332, 0.0071022217, -0.0003124222, -0.026063643, 0.0063043553, -0.051837154, -0.011260799, -0.008625422, 0.014966044, 0.01358791, -0.0082869325, -0.021421509, -0.04937102, 0.032446574, -0.008359466, 0.015534221, 0.03534791, -0.0026867553, -0.0021352, -0.017371733, -0.019934576, 0.07108266, -0.007821511, -0.025942754, -0.022799643, 0.024214042, 0.0087584, -0.010740977, -0.014748444, 0.051692087, -0.010275555, 0.022956798, 0.023718398, -0.0044759107, 0.009513955, -0.029545242, -0.04281884, 0.005594133, -0.01696071, 0.0048778662, -0.012197688, 0.03522702, -0.0031219553, 0.024443733, -0.05077333, -0.0051256884, 0.011744355, -0.01999502, -0.032688353, -0.038007464, 0.03382471, -0.0024751998, 0.02620871, -0.025483375, -0.037040353, -0.025700975, 0.023331555, -0.04361671, 0.002831822, -0.015352888, 0.007362133, -0.0020188442, 0.019716976, 0.015352888, 0.03358293, -0.014905599, -0.008800711, -0.00035756663, 0.01201031, -0.017855288, 0.030077154, -0.02695822, 0.0194752, 0.008190222, 0.030971732, 0.037693154, -0.011236621, 0.013853866, 0.018870754, 0.011581155, 0.0202368, 0.013019732, 0.0140714655, -0.021288533, 0.045405865, 0.0009965777, -0.020248888, 0.014796799, 0.029375998, -0.014808888, 0.0010615555, 0.051305242, -0.0038744886, -0.0005636444, -0.02707911, -0.003170311, -0.022461154, -0.011919644, 0.00033735554, -0.0025658666, -0.06431288, 0.018181687, -0.024951465, -0.013454933, 0.029158399, -0.019245509, 0.035396263, -0.022582043, 0.0020762666, -0.018628977, 0.015425421, 0.004083022, -0.06315235, -0.021107199, -0.0084440885, 0.04122311, -0.0006471333, -0.0049745776, -0.003131022, 0.022473242, -0.0033818665, -0.0142286215, 0.0037868442, 0.014833066, 0.0012504443, -0.0062318216, -0.00825671, 0.014772621, 0.005908444, 0.017540976, -0.021143464, -0.018774044, -0.016767288, -0.005189155, 0.009096888, -0.01652551, -0.0038472887, -0.031140976, 0.008516622, -0.028989153, 0.022569954, 0.0043882662, 0.032785065, -0.031213509, 0.029545242, -0.011284977, -0.005524622, -0.01901582, 0.012572444, -0.043205686, -0.012451555, -0.019849954, 0.009985422, -0.038442664, 0.010082133, -0.012657066, -0.008002844, -0.016718931, -0.019765332, 0.01913671, 0.015812265, 0.0149176875, -0.010879999, -0.00025367775, -0.006340622, 0.006534044, -0.0015390666, -0.0010713777, -0.0027245332, 0.018882843, -0.0023240887, -0.019596087, -0.0012844444, -0.018290488, 0.017444266, 0.028964976, -0.0170816, 0.01781902, 0.024298664, 0.025386665, -0.045357507, 0.061508264, -0.029932087, -0.049612798, 0.0097557325, -0.0070961774, -0.011278933, -0.0071022217, -0.052272353, 0.010475022, -0.014966044, 0.040401064, -0.034743465, 0.020031288, 0.008033066, -0.02260622, 0.013841777, -0.021808354, 0.030028798, 0.054109864, 0.004998755, -0.013128532, 0.020031288, -0.0029693332, 0.04035271, 0.029400175, -0.009108977, -0.03945813, 0.012995555, -0.010886043, 0.007047822, 0.0024812443, -0.011436088, 0.021216, -0.015896888, 0.009924977, 0.025797687, 0.021590754, 0.03749973, 0.0038351996, 0.012246043, -0.005727111, 0.0017241776, -0.010535466, -0.013745066, 0.020599466, -0.007307733, 0.028457243, 0.021046754, 0.015945243, -0.0022379553, -0.049419373, -0.019426843, 0.0027592888, -0.0034241776, 0.0149176875, 0.06731093, -0.07490275, -0.004246222, -0.0071807997, 0.016791465, 0.0056152884, 0.019064177, -0.009695288, -0.015824355, 0.025072353, -0.012379021, 0.0019387554, 0.0067455997, 0.0170816, -0.0204544, 0.0017876443, 0.010148621, 0.027441775, 0.013998932, -0.045841064, -0.03532373, 0.00010879999, -0.016888177, 0.011442132, -0.021324798, -0.004330844, -0.04165831, -0.020369776, 0.016731022, 0.012802132, -0.014264888, -0.024238221, -0.012572444, 0.025169065, -0.01783111, -0.021554487, 0.0016274665, 0.03022222, 0.025459198, 0.022001777, -0.02076871, -0.011430044, 0.027514309, -0.027369242, -0.0054248883, 0.012802132, 0.05057991, 0.019813688, -0.023440354, 0.0048113773, -0.0034876443, -0.006697244, -0.0101788435, 0.019305954, 0.030101331, -0.0058026663, 0.007555555, 0.010317866, -0.010722844, 0.01706951, 0.023005154, -0.0041132444, 0.007489066, 0.01587271, 0.019765332, -0.02804622, 0.0027048888, -0.03276089, -0.008927644, -0.014313243, 0.038200885, -0.024310755, 0.031334396, 0.025821865, -0.052659195, -0.035686396, 0.022400709, 0.03643591, 0.020817066, -0.0012413777, -0.004747911, 0.008782577, -0.0016017776, 0.010263466, -0.0069873775, -0.019862043, 0.0012398666, -0.01032391, -0.013648354, 0.044994842, -0.017371733, -0.027465954, -0.0020505777, -0.015280355, 0.003717333, 0.025241598, 0.023065599, 0.0044094217, 0.006932977, 0.018628977, -0.019583998, -0.009223822, 0.05140195, -0.006443377, -0.042141862, -0.018774044, -0.00020815554, 0.001715111, 0.030971732, 0.0041827555, -0.014760532, 0.0065823994, 0.018544354, -0.0073863105, -0.0022968887, -0.0030645332, 0.006401066, 0.0059386664, -0.0226304, 0.00086737773, -0.010879999, 0.020937955, 0.03065742, 0.009471644, -0.049274307, -0.024068976, 0.011351466, 0.007434666, -0.0060655996, -0.0045393775, -0.026039464, 0.025797687, 0.0011031111, -0.047436796, 0.012403199, 0.027538488, -0.0025522665, 0.02599111, 0.0031098665, -0.01781902, 0.025048176, 0.018084977, 0.0194752, 0.012143288, -0.010342044, 0.003947022, 0.0046542217, 0.023778843, -0.016005687, 0.0009852444, 0.0025431998, 0.004494044, -0.028457243, 0.02195342, 0.021373155, -0.023512887, -0.02816711, -0.0040769777, 0.029690308, 0.012379021, 0.031286042, -0.017383821, 0.06044444, 0.014639643, 0.0055578663, 0.016767288, -0.013285688, -0.008480355, -0.0059326217, 0.008202311, -0.019837866, -0.01179271, -0.021119287, -0.04325404, 0.0066488883, 0.007476977, 0.013720888, -0.03152782, -0.003826133, -0.005799644, 0.050289776, 0.033510398, -0.0028786664, -0.042359464, 0.023198577, -0.0122944, 0.02707911, -0.024927286, 0.005430933, 0.028650666, 0.04424533, 0.0071807997, -0.04238364, 0.03556551, 0.0022817776, 0.004312711, 0.008601244, -0.007313777, 0.005035022, -0.007900088, 0.0365568, -0.009326577, 0.033196088, -0.015304532, 0.0029572442, -0.008486399, 0.0035783108, -0.037789863, 0.0054671997, 0.042335287, 0.034501687, 0.00972551, 0.019112533, -0.020962132, 0.002248533, 0.002343733, -0.012107021, -0.021336887, -0.013624177, 0.03607324, 0.007839644, 0.005542755, 2.0098958e-06, 0.011665777, -0.010450844, -0.006534044, -0.008583111, -0.036992, 0.0226304, 0.007851733, 0.041585773, -0.007857777, -0.015679289, 0.00044615552, 0.03251911, -0.0067153773, 0.0038775108, 0.01586062, -0.03338951, -0.034453332, -0.0142286215, 0.025217421, -0.051063463, 0.056672707, 0.027441775, 0.017553065, 0.0015639999, 0.020176355, 0.019003732, 0.03793493, 0.0076945773, 0.041078042, 0.0025703998, 0.009296355, 0.011895466, 0.017129954, 0.020720353, 0.019185066, -0.007990755, -0.001606311, -0.011750399, 0.02380302, -0.0043640886, 0.0031189332, -0.00816, -0.012209777, -0.0180608, 0.020188443, 0.0070357327, 0.022908444, -0.055512175, -0.00073817774, 0.0029451554, -0.016114488, -0.03662933, 0.020672, -0.0075857774, -0.029327642, 0.046082843, 0.022775466, -0.004031644, -0.012995555, 0.01554631, 0.032905955, 0.005092444, -0.021929244, 0.03556551, -0.021373155, -0.01424071, -0.007362133, -0.012657066, -0.002668622, -0.028312176, 0.009320533, 0.02011591, -0.031479463, -0.007972621, -0.008033066, -0.025048176, -0.0075797327, 0.021107199, 0.012584533, 0.049225952, 0.007785244, -0.0064735995, 0.026450487, 0.0056576, 0.012475733, -0.034646753, 0.008716089, -0.0045786663, 0.033462044, 0.015377066, -0.006443377, 0.017903643, 0.018604798, -0.02283591, -0.010499199, -0.01456711, -0.01683982, -0.007742933, 0.011883377, -0.016731022, 0.003445333, -0.02848142, 0.005678755, 0.005092444, -0.015558399, -0.01781902, 0.0067758216, -0.016440887, 0.01957191, 0.01619911, -0.027538488, -0.020804977, 0.032374043, 0.0038231108, -0.015413333, -0.0072472882, 0.008033066, 0.043447465, 0.0035148442, 0.0039681774, 0.0017060443, -0.0045786663, -0.008184177, -0.026353776, 0.010747021, 0.016658489, 0.010601955, 0.019378487, -0.0016002666, 0.014156088, -0.017190399, 0.060057595, -0.0096288, 0.0070296885, -0.015727643, -0.0066247107, 0.020466488, -0.017323377, 0.017009066, 0.0051438217, -0.031987198, -0.015522133, 0.0008167555, -0.025023999, 0.002095911, 0.007676444, -0.009646933, 0.015824355, 0.025531732, 0.012560355, 0.016706843, 0.05444835, -0.010390399, 0.03172124, 0.01402311, 0.03034311, -0.009151288, 0.020889599, -0.044293687, 0.019269688, 0.009526044, 0.0014015555, -0.02857813, -0.002165422, -0.02391182, 0.022702932, -0.012777954, -0.024951465, -0.0072895996, -0.015969422, 0.0024782221, -0.027997864, -0.020720353, -0.032446574, 0.0027577777, -0.021276442, -0.0018873777, -0.016114488, -0.009719466, 0.043423288, 0.021469865, -0.007622044, -0.055608884, 0.012215821, 0.0003224333, 0.027345065, 0.00901831, 0.023186488, -0.02087751, -0.014434133, -0.0019855998, 0.023464533, 0.007936355, 0.022267733, 0.00027709999, -0.0075797327, -0.008135822, -0.01727502, -0.024395376, 0.024830576, 0.003457422, 0.015316621, 0.001109911, -0.009254044, 0.044100262, 0.00016782776, 0.0061472, -0.054399997, 8.306388e-05, -0.0021487998, 0.035710577, 0.056624353, -0.019753244, -0.004575644, -0.032301508, 0.0109585775, 0.006286222, -0.029230932, 0.029593598, 0.015582576, 0.0065521775, -0.026039464, -0.00055155554, -0.010608, 0.026474664, 0.0028892444, -0.00073817774, 0.006932977, -0.013225243, 0.017589333, 0.037814043, -0.042214397, 0.014422043, 0.026015287, -0.011176177, -0.012717511, 0.023718398, -0.0038533332, -0.014687999, -0.006074666, -0.0007910666, -0.028771553, -0.03534791, -0.01629582, -0.021058843, 0.011448177, -0.031189332, -0.0021563554, -0.019414755, -0.0044668443, 0.009163377, -0.012439466, -0.043955196, -0.0077066664, -0.011091555, -0.023730487, 0.0029028442, -0.0057482664, -0.0037656887, 0.042891376, -0.018604798, -0.013104355, -0.015522133, 0.021058843, 0.012790044, 0.0045242663, 0.034695107, 0.039941687, -0.011248711, -0.004557511, 0.0032639997, -0.019245509, 0.03012551, -0.014035199, 0.0059991106, -0.0117806215, -0.027780265, 0.0039258664, -0.01326151, -0.0018949332, 0.020285154, 0.0033607108, -0.0046360884, 0.010722844, -0.024854753, -0.008963911, 0.013225243, -0.005962844, 0.0057633775, 0.0016032888, 0.018749865, 0.003469511, 0.018024532, -0.011919644, -0.009254044, 0.020998398, 0.02294471, -0.031793777, 0.008534755, -0.007845689, 0.03295431, -0.0004431333, -0.011448177, 0.03043982, 0.03455004, -0.011835022, 0.0013766221, 0.04228693, -0.038249243, 0.0132494215, -0.02369422, -0.07794915, 0.010547555, 0.009368888, 0.022231465, 0.0102272, 0.026039464, -0.0052737775, 0.02098631, -0.009054577, -0.006089777, 0.0039953776, -0.0030312887, -0.00816]"
../../../gradio,../../../gradio/gradio/components,html.pyi,"""""""gr.HTML() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class HTML(Component):
    """"""
    Creates a component to display arbitrary HTML output. As this component does not accept user input, it is rarely used as an input component.

    Demos: blocks_scroll
    Guides: key-features
    """"""

    EVENTS = [Events.change]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default value. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Is used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: This parameter has no effect.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return ""<p>Hello</p>""

    def example_value(self) -> Any:
        return ""<p>Hello</p>""

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the HTML
        Returns:
            (Rarely used) passes the HTML as a `str`.
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a `str` consisting of valid HTML.
        Returns:
            Returns the HTML string.
        """"""
        return value

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `HTML` component in Gradio, which is used to display arbitrary HTML output. This component does not accept user input and is rarely used as an input component. It inherits from the `Component` class and provides methods for setting default values, example payloads, preprocessing, postprocessing, and API information. Additionally, it includes a method `change` for defining event listeners and handling event triggers. The `HTML` component is part of the Gradio library for building interfaces for machine learning models.","[-0.08451684, 0.013508839, 0.037432183, 0.023600057, 0.043112826, -0.0420275, -0.0051177717, 0.010876347, 0.018970104, -0.035169166, 0.035607915, 0.0026368215, -0.049278397, -0.020401811, 0.0011524367, -0.030781679, -0.013601207, -0.022064436, -0.013716667, 0.03895626, -0.01947813, -0.06553519, 0.01840435, 0.049416948, 0.0062521677, -0.011563336, -0.040411055, 0.071770035, 0.0029615532, 0.024200449, 0.0008738891, -0.04532966, 0.02164878, 0.011927035, 0.018369712, -0.039140996, 0.028310832, 0.048908923, -0.0024059012, 0.004690569, -0.0019325145, -0.017261295, 0.006315671, 0.015102189, -0.041196186, 0.0075741867, -0.024800843, 0.031335887, 0.0054901307, 0.045606762, 0.0008688377, -0.0020205528, -0.015460116, -0.010483783, -0.043597758, 0.01330101, -0.0652119, 0.0527422, -0.0020003472, -0.028241556, -0.01397068, -0.018820006, -0.016903367, 0.019466583, -0.015494754, -0.011384372, -0.0074760453, -0.017411392, 0.010021942, -0.0044134646, 0.026163273, -0.028957408, -0.013174004, -0.052095626, -0.030319838, 0.012134863, 0.0045953146, -0.031682268, 0.026948402, 0.023149762, -0.012850716, 0.004150793, -0.076342255, -0.047292482, -0.011470967, -0.0005971455, -0.0005765792, 0.024985578, -0.03350654, -0.07407924, -0.057776265, -0.022503186, -0.032559764, 0.02976563, -0.03930264, 0.03556173, -0.051218126, -0.0057528024, 0.03500752, 0.03445331, 0.034776602, -0.04715393, -0.015402385, -0.008382408, 0.025701432, -0.03657778, -0.009993077, 0.010449145, -0.015356202, -0.0057874406, -0.014952091, -0.023415321, -0.05985455, 0.016129784, -0.032675225, -0.043389928, 0.033968378, 0.017434483, -0.014340152, 0.00051812746, 0.016002778, 0.012204139, -0.04512183, -0.04124237, -0.0033021607, -0.015841134, 0.0056286827, -0.023692425, -0.045953143, -0.002525691, 0.034845877, 0.010454917, -0.044382885, -0.07491055, -0.011603747, 0.036970343, -0.042096775, -0.0053688977, -0.02512413, 0.02063273, 0.035446268, -0.022410817, 0.0076145977, -0.015402385, 4.825874e-05, -0.03909481, -0.00183293, -0.0010528524, -0.0050889067, -0.009929574, 0.005721051, 0.04248934, -0.054820485, 0.0011242933, 0.0022861112, 0.014086139, 0.04872419, -0.006373401, -0.023426866, -0.025054855, 0.016222153, 0.030088918, -0.0024780638, -0.01709965, -0.0056835264, -0.002045088, 0.004110382, 0.011915488, -0.0431821, 0.045537487, -0.010737795, -0.021729602, -0.030966416, 0.016418435, 0.00390544, -0.018531356, 0.040757436, -0.04399032, -0.017573036, 0.0017578809, 0.009877617, 0.05010971, -0.031682268, 0.01771159, -0.019743687, -0.01898165, 0.0015024253, -0.027895175, -0.048354715, -0.016499257, 0.0050311764, 0.0012123317, 0.0075799595, 0.006182892, -0.011499832, -0.0105588315, 0.04355157, -0.031382073, -0.0024953827, 0.012481243, 0.047292482, 0.021741148, 0.0027205301, -0.009658243, -0.035076797, 0.02239927, 0.014928998, 0.0009691437, 0.030758588, 0.006944929, -0.014363244, -0.0006267322, 0.009092487, -0.013716667, -0.06641269, 0.007782015, -0.017549945, 0.01619906, -0.001468509, -0.032790687, -0.0463688, 0.04364394, 0.004982106, -0.033090882, -0.007198941, -0.0141092315, 0.032906145, 0.0055247685, 0.022503186, 0.015783403, 0.061563358, -0.013220188, -0.004794483, 0.014190054, 0.024084989, -0.036554687, 0.038240407, -0.04274335, 0.035515547, 0.01771159, -0.04872419, -0.014640348, 0.019074019, -0.017676951, 0.026763665, 0.017723134, -0.015714128, -0.035261534, 0.03646232, 0.08096066, -0.03773238, -0.0012339804, 0.019755233, -0.0027060974, -0.0044654217, 0.0065234993, -0.02535505, 0.04987879, 0.022745652, -0.03648541, 0.014744262, -0.053665884, -0.015310017, 0.044636898, 0.0053977626, 0.013739759, 0.029349973, 0.0025011557, -0.026856033, -0.008590236, 0.011228501, 0.012331145, 0.03179773, 0.013820581, -0.02141786, -1.2605904e-05, 0.025285775, 0.04112691, -0.01579495, 0.026740573, -0.013324102, 0.0013876868, -0.002990418, 0.03297542, -0.046969194, 0.04054961, -0.010408733, -0.016591625, 0.009969985, -0.058330473, 0.055374693, 0.0086133275, 0.05260365, -0.031335887, -0.041034542, 0.037801657, 0.066782154, 0.02222608, 0.044636898, -0.03135898, -0.010073899, 0.0021388994, -0.0019743687, -0.017238202, -0.010079672, 0.0089539355, 0.02930379, 0.035376992, 0.009317635, -0.004765618, 0.024523739, 0.041173093, -0.024616105, 0.01634916, -0.090613134, 0.028818857, 0.034915153, 0.00017634736, -0.0034378262, -0.021798879, -0.009721746, 0.008596009, 0.031405162, -0.038032576, -0.028426291, -0.04669209, -0.01318555, -0.01596814, -0.023900254, -0.018796913, 0.022687921, -0.0041046087, 0.0037986392, 0.0109802615, 0.05329641, 0.016718632, -0.05943889, 0.0399954, -0.032675225, 0.020852106, -0.020332534, -0.015136827, 0.003567719, 0.033391077, 0.035307717, 0.00662164, -0.06862952, 0.022965025, -0.0132663725, -0.026925309, -0.023611603, -0.004860873, -0.00055853854, -0.053942986, 0.016834091, -0.0063098976, -0.009842979, -0.012296507, -0.026509654, -0.023807885, -0.0278259, -0.0009547112, 0.0052592102, 0.03269832, -0.013520385, 0.032144107, -0.026047813, -0.009490825, 0.010495328, -0.0031260839, 0.0049878787, 0.0080129355, -0.0037466823, -0.022618646, -0.053896803, 0.014132324, 0.0022529163, -0.03556173, -0.02510104, -0.020309443, 0.023565419, 0.0075799595, -0.0076723276, -0.026971493, 3.4750803e-05, -0.024408277, 0.011615292, 0.023415321, 0.0018617951, 0.008047573, 0.0045837685, 0.004964787, -0.056390744, -0.014975183, 0.019893786, -0.0014280978, 0.019027835, 0.05066392, 0.009646696, 0.027525702, -0.026324917, -0.037686195, -0.008359316, 0.011632611, -0.0049734465, -0.050063524, 0.0071238917, 0.036693238, 0.014836631, -0.036554687, 0.010847482, 0.023946438, 0.03149753, 0.002388582, -0.005504563, -0.018485172, 0.022941934, -0.06705926, 0.008139941, 0.042858813, 0.023403775, -0.05010971, 0.021464044, -0.03692416, 0.0035186484, 0.02533196, 0.016995735, 0.027779715, 0.00230776, -0.02249164, -0.007960978, 0.014143869, -0.005010971, 0.044267427, 0.011927035, -0.021960523, 0.020979112, 0.054266274, 0.022861112, 0.0025603292, 0.019374214, 0.0030712404, -0.016556988, 0.013739759, -0.066320315, -0.0047858236, -0.02237618, -0.002124467, -0.0284032, -0.05417391, -0.013855219, -0.023669332, -0.011505605, -0.005646002, 0.051033393, 0.014386336, 0.062440854, 0.029142145, -0.010957169, 0.012388875, -0.014928998, 0.03251358, -0.045606762, 0.016764816, -0.028103003, 0.012354237, 0.053850617, 0.0010117197, -0.0054150815, -0.0062059835, 0.001568815, 0.021440951, 0.04650735, -0.00857869, -0.022018252, 0.01283917, -0.01036255, 0.0028850609, -0.06701308, -0.02535505, -0.024084989, -0.016302975, -0.01744603, -0.049139846, 0.003940078, 0.10335994, -0.0005845171, -0.05842284, 0.038148038, -0.026301825, 0.025562879, -0.015540938, 0.008370861, -0.009531236, 0.0023669333, 0.030735495, -0.03479969, 0.006581229, -0.02784899, -0.051125757, 0.010882121, -0.018358165, -0.027410243, 0.050017342, -0.0065754564, -0.022145258, 0.033806734, -0.0029254719, -0.027756622, -0.037108894, -0.03170536, -0.032421213, 0.025539787, 0.0069737937, 0.014016864, -0.06909136, -0.021614142, 0.016302975, -0.02523959, 0.01652235, -0.022006707, 0.047292482, -0.03660087, -0.034730416, -0.010327911, 0.022272265, 0.017295932, -0.049647868, 0.037870932, -0.017515307, -0.020205528, -0.0054410603, 0.0015587122, 0.045191105, -0.025378143, -0.011522924, -0.03329871, -0.007770469, -0.0011105824, -0.024962487, 0.019778326, -0.007452953, 0.005290962, 0.005016744, 0.010812844, 0.040711254, -0.01301236, -0.033598907, -0.0031549488, 0.023392228, 0.051864706, -0.046622813, 0.029119052, -0.035885017, 0.0061771185, 0.0132663725, 0.027479518, -0.007966751, -0.067936756, -0.013693575, 0.0031636085, 0.008584463, 0.009490825, 0.04886274, 0.0057297107, -0.00880961, -0.011719206, -0.012689072, -0.023484597, 0.020297896, -0.02074819, 0.0007468829, 0.007452953, 0.0094965985, 0.026902217, -0.02567834, 0.011205409, -0.0063503087, 0.032813776, 0.0050773607, 0.0016712858, -0.023692425, -0.002164878, -0.005568066, -0.029142145, -0.0069737937, 0.025978535, 0.035400085, 0.0067197816, -0.010581924, -0.024477554, 0.016418435, 0.010547286, 0.026948402, -0.03341417, 0.020563455, -0.0007476045, 0.028103003, -0.053712066, 0.012296507, 0.0027984655, -0.02118694, -0.0023525008, 0.009987304, 0.026509654, -0.016914913, 0.016453072, 0.0032559766, -0.04251243, -0.0048926244, -0.011482513, 0.050987206, -0.04295118, -0.059623625, -0.022814928, 0.0044134646, -0.029280696, 0.02863412, 0.020471087, -0.018069515, 0.0027609412, -0.009271451, 0.02063273, -0.0036283357, -0.004055538, 0.004448103, 0.01895856, 0.009080942, 0.035607915, 0.021683417, 0.038217314, 0.0068410146, 0.027017677, -0.01817343, 0.0012642888, -0.018311981, -0.022814928, -0.032629043, -0.0016770589, -0.04269717, -0.0034320534, 0.04807761, 0.04689992, 0.018820006, 0.04399032, 0.009871843, -0.00035034944, 0.0075106835, 0.043944135, -0.013947587, -0.005342919, 0.021960523, -0.014051502, 0.004993652, 0.013832128, -0.0042229556, -0.047569588, -0.008988573, 0.019281847, 0.012481243, -0.0090751685, -0.0065639103, -0.00058163056, -0.015529391, -0.024385186, 0.008365089, 0.02147559, 0.006488861, -0.011603747, 0.028564844, -0.04295118, 0.012423513, 0.042350788, 0.013162458, 0.026093997, -0.03727054, -0.0030568077, -0.003270409, -0.017422939, 0.017965602, -0.03692416, 0.016002778, -0.04657663, -0.044336703, 0.0106512, -0.029072868, 0.012723709, 0.0052563236, 0.013462654, -0.0035994705, 0.008798065, 0.01059347, 0.0005776616, -0.0018776709, -0.0034060748, 0.05689877, 0.0026339348, 0.00880961, 0.04082671, -0.020540362, 0.0115922, 0.008087984, 0.0054814713, 0.0013833571, -0.000706111, 0.007833972, -0.013000814, 0.0039545107, 0.026625114, -0.03184391, -0.00061662943, 0.046045512, 0.0051495233, -0.0047858236, -0.004679023, 0.012689072, 0.037432183, 0.030989507, 0.019039381, -0.029419249, -0.014236238, -0.022503186, -0.05080247, -0.03509989, 0.03648541, -0.027248599, -0.019131748, 0.015298471, -0.022757197, -0.007816653, -0.009866071, 0.004009354, 0.018935466, -0.005865376, -0.011089948, 0.041611843, -0.020147799, -0.0333218, 0.008971254, -0.013312557, 0.00900012, 0.022457002, 0.016383797, -0.02431591, 0.011984765, -0.007903248, 0.025609063, 0.013312557, -0.0023525008, -0.026117088, -0.0013046998, 0.006459996, -0.021948976, -0.008509414, -0.04295118, -0.009225267, 0.0017001509, 0.012792986, -0.0061251614, 0.0064426768, -0.0014006761, 0.02283802, -0.009109806, -0.009271451, 0.0030163967, -0.0527422, 0.04671518, -0.020332534, -0.0037611148, 0.0568064, 0.00022514732, -0.005876922, -0.0006873488, -0.018796913, 0.034153115, -0.015864227, -0.026163273, -0.018554447, -0.00040122407, 0.016429981, 0.015725674, -0.011026446, 0.083223686, -0.01188085, 0.027548794, 1.661995e-05, -0.024985578, 0.015113735, 0.005781668, -0.04091908, -0.020090068, 0.0041363603, 0.024754658, -0.025562879, 0.04364394, 0.0333218, 0.0021619915, -0.062764145, -0.013785943, 0.00946196, -0.035076797, -0.021914339, -0.04923221, 0.01993997, 0.027317874, 0.06798294, -0.006511953, -0.04297427, 0.012019402, 0.04001849, 0.006742873, -0.007845518, -0.018069515, 0.035746466, 0.0061597996, -0.01562176, 0.019050926, 0.038009483, -0.02614018, 0.008278494, -0.05966981, -0.0046270657, -0.015760312, -0.014859723, 0.011349734, 0.05352733, 0.020424902, 0.024200449, 0.014397882, -0.0009287327, 0.008359316, -0.011927035, 0.003224225, 0.02512413, 0.012388875, 0.03489206, -0.0040006945, 0.03001964, -0.022999665, -0.043366835, 0.020043883, -0.017653858, 0.02022862, 0.00733172, 0.04770814, 0.011390145, 0.01886619, -0.020956019, -0.006511953, 0.035838835, -0.00068446225, 0.002084056, -0.017723134, -0.03976448, 0.067936756, 0.0007721398, 0.008757654, 0.033806734, -0.029488524, 0.022941934, -0.033598907, -0.0009128569, -0.04329756, 0.016268337, 0.002589194, -0.07652699, 0.01124582, -0.008607555, 0.056991134, -0.00064296875, -0.011984765, 0.019039381, 0.008134169, -0.006916064, -0.016337613, 0.014386336, 0.0032040195, 0.020263258, -0.044105783, -0.030712403, 0.009092487, 0.0034638047, 0.053942986, -0.013624299, -0.0063214437, -0.031959374, -0.00118491, -0.015483208, 0.0034955563, 0.004237388, 0.011095721, 0.015841134, -0.019258754, 0.022653284, 0.021464044, 0.036439225, -0.028818857, 0.01924721, 0.017088104, 0.006517726, -0.011869305, -0.017030373, -0.010974488, -0.048816554, -0.012319599, 0.0080418, -0.03523844, 0.015298471, 0.0038419368, -0.011776936, -0.043805584, -0.030481482, 0.02249164, 0.022814928, 0.007943659, -0.012273415, 0.018820006, -0.012331145, -0.0077935606, 0.024200449, -0.02930379, 0.015310017, 0.024939395, 0.00875188, -0.0050023114, 0.019593589, 0.005819192, 0.020413356, -0.003178041, 0.015598668, 0.03350654, 0.02199516, 0.012054041, -0.030920232, 0.032582857, -0.053388778, -0.024200449, 0.034707323, 0.0035071024, -0.030042734, -0.017757773, -0.054589562, 0.020736644, -0.034961335, 0.032444306, -0.020066977, 0.0077127386, -0.0034407128, -0.02976563, 0.026786758, -0.034176208, 0.027086955, 0.053896803, 0.051541414, -0.033922195, -0.019120203, 0.024916302, -0.011482513, 0.03576956, 0.0057239374, -0.06313361, 0.009733291, 0.0102875, 0.009259905, -0.015171465, -0.00045101624, 0.010460691, -0.030273654, 0.015945049, 0.026809849, 0.00039797675, 0.01715738, 0.0085729165, 0.016891822, -0.0025054854, -0.0020407583, -0.00053688977, -0.036323767, 0.03840205, 0.017434483, 0.023923345, 0.030527666, 0.0263711, 0.0024766205, -0.050987206, -0.034776602, -0.00077791285, -0.03685488, 0.025609063, 0.017192017, -0.06401111, -0.005166842, -0.01756149, 0.02590926, 0.021683417, 0.032629043, -0.02738715, 0.0054266276, 0.02988109, 0.0112804575, -0.04248934, 0.018900828, 0.017030373, -0.030435298, 0.020136252, 0.012931538, 0.06350309, -0.01921257, 0.0067486465, -0.010783979, 0.0057932134, 0.013335649, 0.03909481, -0.02074819, 0.04320519, 0.0015341769, -0.023496144, 0.021498682, -0.0117422985, 0.017192017, -0.006234849, -0.0027955791, 0.038171127, -0.0105588315, 0.007146984, -0.0040295594, 0.02324213, 0.026740573, -0.013531931, 0.023923345, 0.008688377, 0.020124706, -0.036877975, -0.02874958, -0.0138090355, 0.02477775, 0.017642312, -0.0118231205, -0.005917333, 0.03692416, -0.05297312, -0.024154266, 0.022884203, 0.029142145, -0.0076723276, -0.019605136, -0.023830976, -0.012619795, 0.018854644, 0.036623962, 0.0138090355, 0.017319024, 0.026994586, 0.019963061, -0.011736525, 0.01596814, -0.0064830882, -0.0025357937, 0.0034378262, 0.001283051, -0.016822545, 0.017977146, 0.031382073, -0.044914003, -0.027317874, -0.0031809274, 0.012227231, -0.0006602878, 0.018311981, -0.024731567, -0.023784794, 0.016175969, 0.012562065, 0.018877735, -0.013370287, 0.013843673, 0.0009691437, -0.0041825445, 0.016222153, -0.017203564, 0.0063098976, 0.029142145, -0.0207251, -0.009109806, -0.0044250106, 0.005784554, -0.00325309, 0.027086955, 0.015125281, -0.02045954, -0.008347769, 0.014478704, -0.01042028, -0.029904181, -0.011043765, 0.004061311, -0.01976678, 0.023380682, 0.016072053, -0.0030712404, 0.0060212472, 0.010281728, -0.020367172, 0.019547405, -0.022387724, 0.005917333, 0.027317874, -0.014859723, -0.0023727063, -0.024685383, -0.0070834807, 0.05080247, 0.010922532, -0.026856033, -0.027802806, 0.009548555, -0.005570953, 0.0034840102, 0.012538973, -0.02454683, 0.023288315, -0.008815384, -0.028795764, 0.0059115603, 0.020101614, 0.0067486465, 0.01022977, 0.0012267642, -0.025285775, 0.018265797, -0.0031693813, -0.0009720302, -0.020297896, -0.045745317, -0.001394903, -0.0077358307, 0.030412206, -0.018600632, 0.0023092031, -0.00064585527, 0.00025906373, -0.057222057, -0.011973219, 0.04602242, -0.024477554, -0.012827624, -0.046738274, 0.026348008, -0.0045953146, -0.0062579405, 0.010720476, 0.03685488, 0.019570498, 0.020032337, 0.040272504, 0.0047627315, 0.0052418914, -0.024061898, -0.0039862623, -0.0010153278, -0.004471195, -0.007372131, -0.016164422, -0.013589661, -0.0023683766, -0.0023799227, -0.0031809274, -0.028357016, 0.013093182, 0.006327217, 0.0020061203, -0.011961672, -0.015067551, -0.0038563693, 0.027779715, 0.0321672, -0.00032094316, 0.023149762, 0.022318449, 0.033160158, 0.023172854, -0.029742537, 0.012562065, -0.010968715, 0.0046299524, 0.010374095, 0.0019859148, 0.014224692, 0.025562879, 0.025193406, -0.007204714, 0.013231735, -0.008590236, -0.013624299, 0.021083025, 0.02306894, -0.025262684, -0.00052534376, 0.021602595, 0.0162337, 0.010033488, 0.011459421, -0.039140996, -0.0014013977, 0.025955444, -0.016476166, 0.00390544, -0.013624299, 0.03533081, -0.0035215348, 0.01188085, 0.0060962965, 0.021487135, 0.02738715, 0.019963061, -0.004098836, -0.0032502036, 0.0022745652, -0.03443022, 0.025632156, 0.020355627, 0.006454223, 0.02289575, 0.025932353, -0.027179321, 0.014420974, 0.013162458, -0.021856608, -0.03306779, -0.010639654, 0.013370287, -0.045629855, 0.02976563, 0.007170076, -0.00091069203, -0.026994586, 0.028357016, 0.032652132, 0.022687921, -0.0007649236, 0.0021403427, 0.023149762, -0.00015731447, 0.006558137, -0.0012989268, 0.049832605, 0.023600057, 0.011984765, -0.017065011, -0.04216605, -0.008746107, 0.009144445, 0.006581229, 0.023022756, 0.008474776, -0.027063861, 0.02060964, -0.0070430697, -0.0054381737, -0.034776602, -0.0135665685, 0.014617256, -0.0015659285, -0.064380586, 0.018565994, -0.03667015, -0.01846208, 0.040318687, 0.016395343, 0.00857869, -0.00016407971, -0.0031231972, 0.010143175, 0.024823934, 0.009352273, 0.03964902, -0.049832605, -0.040895987, -0.006511953, -0.02794136, -0.021394767, -0.03431476, -0.006529272, 0.026902217, -0.03877152, -0.002714757, -0.016072053, 0.00880961, -0.005755689, 0.034014564, 0.011580654, 0.061563358, 0.01318555, 0.004404805, 0.013543477, 2.5679738e-06, 0.030504575, -0.04126546, 0.00058704277, 0.0068525607, -0.03500752, -0.016187515, -0.017076558, -0.0031145378, -0.03752455, -0.016741723, -0.008844248, -0.022537824, -0.005957744, 0.019455036, 0.00027890844, -0.003974716, 0.015379294, -0.0018921033, 0.003206906, -0.0029961911, -0.029465433, -0.0005116328, -0.0016005664, 0.0094561875, -0.0019224117, 0.021510229, -0.033460356, -0.00313763, 0.015194557, 0.03747837, 0.024223542, -0.01982451, -0.010252862, 0.033137064, 0.00014216032, 0.004234501, 0.010760887, -0.0085325055, -0.009386911, -0.03408384, -0.0018314868, 0.016222153, -0.016741723, 0.02136013, -0.011961672, 0.006373401, 0.005057155, 0.0649348, -0.003299274, 0.020702006, -0.0067775114, -0.005137977, 0.019812964, 0.0333218, 0.0046819095, 0.010293273, -0.03976448, -0.0014937659, 0.0046645906, -0.025724525, 0.025424328, 0.020090068, 0.0023986849, 0.007689647, 0.04399032, 0.031959374, 0.040180136, 0.050525367, -0.014340152, 0.030643126, -0.0011473853, 0.0075510945, 0.024847027, -0.0019599362, -0.004364394, -0.0059866095, 0.038171127, -0.0048291213, -0.010073899, 0.01898165, 0.0122849615, 0.02373861, -0.024061898, -0.034868967, 0.007354812, -0.021325491, -0.004283572, -0.025516696, -0.019605136, -0.01619906, 0.0035128754, 0.007077708, 0.03057385, -0.020563455, -0.015656399, 0.03964902, 0.023553872, -0.00497056, -0.027710438, 0.007146984, 0.0016813886, 0.03636995, 0.007314401, 0.016961098, 0.0027349626, -0.012065587, -0.001838703, 0.01750376, 0.034407128, 0.04738485, 0.0031260839, -0.017607674, -0.002566102, 3.7592206e-05, -0.028680304, 0.011626838, 0.013543477, 0.020101614, 0.013624299, -0.026255641, 0.015356202, -0.0027652709, 0.018681454, -0.03489206, -0.02443137, -0.0013126377, 0.022018252, 0.0237617, -0.0082727205, -0.0030019642, -0.022145258, -0.006581229, -0.0207251, -0.030527666, 0.0050080842, 0.019685958, 0.0066966894, 0.025886169, 0.0053256, -0.00032671617, 0.045283474, -0.005140864, 0.025054855, 0.027571887, -0.008134169, 0.029465433, 0.0076550087, -0.021198485, 0.038586784, 0.019489676, -0.02727169, -0.003206906, -0.0141092315, -0.013982225, -0.016222153, 0.024962487, 0.022168351, -0.03182082, -0.025054855, -0.020043883, -0.026348008, 0.03479969, -0.011118813, -0.00044271754, -0.010443372, -0.00994112, -0.0050138575, -0.010870574, -0.020090068, 0.0020292124, -0.005446833, -0.024731567, 0.0058855815, 0.013393379, 0.0008457457, 0.031012598, -0.03667015, -0.028287739, 0.025031762, 0.010027715, 0.025816891, 0.002811455, 0.013924495, 0.041173093, 0.0148712685, 0.045837685, -0.01036255, -0.037386, 0.03329871, 0.023646241, 0.011176543, -0.013508839, 0.0030308291, -0.026925309, -0.011765391, -0.014074594, 0.0010261522, -0.00988339, -0.034961335, -0.016787907, -0.037386, 0.0062002107, -0.008428591, 0.02863412, -0.020644277, 0.0056806398, 0.0155524835, -0.024708474, 0.027317874, -0.026740573, -0.011211182, 1.0226793e-05, -0.007250898, -0.01947813, 0.012308053, -0.016048962, 0.017480668, -0.016395343, -0.010957169, 0.026163273, 0.029788721, 0.0076203705, 0.0047338665, 0.052511282, -0.02329986, 0.012308053, -0.00450006, -0.074679635, -0.016060509, 0.014224692, 0.024339002, 0.022884203, -0.027571887, -0.0231844, 0.018415896, 0.0024087876, -0.013832128, -0.0152522875, -0.00880961, -0.0005657548]"
../../../gradio,../../../gradio/gradio/components,dataframe.pyi,"""""""gr.Dataframe() component""""""

from __future__ import annotations

import warnings
from typing import Any, Callable, Dict, List, Literal, Optional

import numpy as np
import pandas as pd
import semantic_version
from gradio_client.documentation import document, set_documentation_group
from pandas.io.formats.style import Styler

from gradio.components import Component
from gradio.data_classes import GradioModel
from gradio.events import Events


class DataframeData(GradioModel):
    headers: List[str]
    data: List[List[Any]]
    metadata: Optional[Dict[str, Optional[List[Any]]]] = None


set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Dataframe(Component):
    """"""
    This component displays a table of value spreadsheet-like component. Can be used to display data as an output component, or as an input to collect data from the user.
    Demos: filter_records, matrix_transpose, tax_calculator, sort_records
    """"""

    EVENTS = [Events.change, Events.input, Events.select]

    data_model = DataframeData

    def __init__(
        self,
        value: pd.DataFrame
        | Styler
        | np.ndarray
        | pl.DataFrame
        | list
        | list[list]
        | dict
        | str
        | Callable
        | None = None,
        *,
        headers: list[str] | None = None,
        row_count: int | tuple[int, str] = (1, ""dynamic""),
        col_count: int | tuple[int, str] | None = None,
        datatype: str | list[str] = ""str"",
        type: Literal[""pandas"", ""numpy"", ""array"", ""polars""] = ""pandas"",
        latex_delimiters: list[dict[str, str | bool]] | None = None,
        label: str | None = None,
        show_label: bool | None = None,
        every: float | None = None,
        height: int = 500,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        wrap: bool = False,
        line_breaks: bool = True,
        column_widths: list[str | int] | None = None,
    ):
        """"""
        Parameters:
            value: Default value to display in the DataFrame. If a Styler is provided, it will be used to set the displayed value in the DataFrame (e.g. to set precision of numbers) if the `interactive` is False. If a Callable function is provided, the function will be called whenever the app loads to set the initial value of the component.
            headers: List of str header names. If None, no headers are shown.
            row_count: Limit number of rows for input and decide whether user can create new rows. The first element of the tuple is an `int`, the row count; the second should be 'fixed' or 'dynamic', the new row behaviour. If an `int` is passed the rows default to 'dynamic'
            col_count: Limit number of columns for input and decide whether user can create new columns. The first element of the tuple is an `int`, the number of columns; the second should be 'fixed' or 'dynamic', the new column behaviour. If an `int` is passed the columns default to 'dynamic'
            datatype: Datatype of values in sheet. Can be provided per column as a list of strings, or for the entire sheet as a single string. Valid datatypes are ""str"", ""number"", ""bool"", ""date"", and ""markdown"".
            type: Type of value to be returned by component. ""pandas"" for pandas dataframe, ""numpy"" for numpy array, ""polars"" for polars dataframe, or ""array"" for a Python list of lists.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            latex_delimiters: A list of dicts of the form {""left"": open delimiter (str), ""right"": close delimiter (str), ""display"": whether to display in newline (bool)} that will be used to render LaTeX expressions. If not provided, `latex_delimiters` is set to `[{ ""left"": ""$$"", ""right"": ""$$"", ""display"": True }]`, so only expressions enclosed in $$ delimiters will be rendered as LaTeX, and in a new line. Pass in an empty list to disable LaTeX rendering. For more information, see the [KaTeX documentation](https://katex.org/docs/autorender.html). Only applies to columns whose datatype is ""markdown"".
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            show_label: if True, will display label.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            height: The maximum height of the dataframe, specified in pixels if a number is passed, or in CSS units if a string is passed. If more rows are created than can fit in the height, a scrollbar will appear.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to edit the dataframe; if False, can only be used to display data. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            wrap: If True, the text in table cells will wrap when appropriate. If False and the `column_width` parameter is not set, the column widths will expand based on the cell contents and the table may need to be horizontally scrolled. If `column_width` is set, then any overflow text will be hidden.
            line_breaks: If True (default), will enable Github-flavored Markdown line breaks in chatbot messages. If False, single new lines will be ignored. Only applies for columns of type ""markdown.""
            column_widths: An optional list representing the width of each column. The elements of the list should be in the format ""100px"" (ints are also accepted and converted to pixel values) or ""10%"". If not provided, the column widths will be automatically determined based on the content of the cells. Setting this parameter will cause the browser to try to fit the table within the page width.
        """"""
        self.wrap = wrap
        self.row_count = self.__process_counts(row_count)
        self.col_count = self.__process_counts(
            col_count, len(headers) if headers else 3
        )
        self.__validate_headers(headers, self.col_count[0])

        self.headers = (
            headers
            if headers is not None
            else [str(i) for i in (range(1, self.col_count[0] + 1))]
        )
        self.datatype = datatype
        valid_types = [""pandas"", ""numpy"", ""array"", ""polars""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        if type == ""polars"" and not _is_polars_available():
            raise ImportError(
                ""Polars is not installed. Please install using `pip install polars`.""
            )
        self.type = type
        values = {
            ""str"": """",
            ""number"": 0,
            ""bool"": False,
            ""date"": ""01/01/1970"",
            ""markdown"": """",
            ""html"": """",
        }
        column_dtypes = (
            [datatype] * self.col_count[0] if isinstance(datatype, str) else datatype
        )
        self.empty_input = {
            ""headers"": self.headers,
            ""data"": [
                [values[c] for c in column_dtypes] for _ in range(self.row_count[0])
            ],
            ""metadata"": None,
        }

        if latex_delimiters is None:
            latex_delimiters = [{""left"": ""$$"", ""right"": ""$$"", ""display"": True}]
        self.latex_delimiters = latex_delimiters
        self.height = height
        self.line_breaks = line_breaks
        self.column_widths = [
            w if isinstance(w, str) else f""{w}px"" for w in (column_widths or [])
        ]
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: DataframeData
    ) -> pd.DataFrame | np.ndarray | pl.DataFrame | list[list]:
        """"""
        Parameters:
            payload: the uploaded spreadsheet data as an object with `headers` and `data` attributes
        Returns:
            Passes the uploaded spreadsheet data as a `pandas.DataFrame`, `numpy.array`, `polars.DataFrame`, or native 2D Python `list[list]` depending on `type`
        """"""
        import pandas as pd

        if self.type == ""pandas"":
            if payload.headers is not None:
                return pd.DataFrame(
                    [] if payload.data == [[]] else payload.data,
                    columns=payload.headers,
                )
            else:
                return pd.DataFrame(payload.data)
        if self.type == ""polars"":
            polars = _import_polars()
            if payload.headers is not None:
                return polars.DataFrame(
                    [] if payload.data == [[]] else payload.data, schema=payload.headers
                )
            else:
                return polars.DataFrame(payload.data)
        if self.type == ""numpy"":
            return np.array(payload.data)
        elif self.type == ""array"":
            return payload.data  # type: ignore
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(self.type)
                + "". Please choose from: 'pandas', 'numpy', 'array', 'polars'.""
            )

    def postprocess(
        self,
        value: pd.DataFrame
        | Styler
        | np.ndarray
        | pl.DataFrame
        | list
        | list[list]
        | dict
        | str
        | None,
    ) -> DataframeData:
        """"""
        Parameters:
            value: Expects data any of these formats: `pandas.DataFrame`, `pandas.Styler`, `numpy.array`, `polars.DataFrame`, `list[list]`, `list`, or a `dict` with keys 'data' (and optionally 'headers'), or `str` path to a csv, which is rendered as the spreadsheet.
        Returns:
            the uploaded spreadsheet data as an object with `headers` and `data` attributes
        """"""
        import pandas as pd
        from pandas.io.formats.style import Styler

        if value is None:
            return self.postprocess(self.empty_input)
        if isinstance(value, dict):
            if len(value) == 0:
                return DataframeData(headers=self.headers, data=[[]])
            return DataframeData(
                headers=value.get(""headers"", []), data=value.get(""data"", [[]])
            )
        if isinstance(value, (str, pd.DataFrame)):
            if isinstance(value, str):
                value = pd.read_csv(value)  # type: ignore
            if len(value) == 0:
                return DataframeData(
                    headers=list(value.columns),  # type: ignore
                    data=[[]],  # type: ignore
                )
            return DataframeData(
                headers=list(value.columns),  # type: ignore
                data=value.to_dict(orient=""split"")[""data""],  # type: ignore
            )
        elif isinstance(value, Styler):
            if semantic_version.Version(pd.__version__) < semantic_version.Version(
                ""1.5.0""
            ):
                raise ValueError(
                    ""Styler objects are only supported in pandas version 1.5.0 or higher. Please try: `pip install --upgrade pandas` to use this feature.""
                )
            if self.interactive:
                warnings.warn(
                    ""Cannot display Styler object in interactive mode. Will display as a regular pandas dataframe instead.""
                )
            df: pd.DataFrame = value.data  # type: ignore
            if len(df) == 0:
                return DataframeData(
                    headers=list(df.columns),
                    data=[[]],
                    metadata=self.__extract_metadata(value),  # type: ignore
                )
            return DataframeData(
                headers=list(df.columns),
                data=df.to_dict(orient=""split"")[""data""],  # type: ignore
                metadata=self.__extract_metadata(value),  # type: ignore
            )
        elif _is_polars_available() and isinstance(value, _import_polars().DataFrame):
            if len(value) == 0:
                return DataframeData(headers=list(value.to_dict().keys()), data=[[]])
            df_dict = value.to_dict()
            headers = list(df_dict.keys())
            data = list(zip(*df_dict.values()))
            return DataframeData(headers=headers, data=data)
        elif isinstance(value, (np.ndarray, list)):
            if len(value) == 0:
                return DataframeData(headers=self.headers, data=[[]])
            if isinstance(value, np.ndarray):
                value = value.tolist()
            if not isinstance(value, list):
                raise ValueError(""output cannot be converted to list"")

            _headers = self.headers
            if len(self.headers) < len(value[0]):
                _headers: list[str] = [
                    *self.headers,
                    *[str(i) for i in range(len(self.headers) + 1, len(value[0]) + 1)],
                ]
            elif len(self.headers) > len(value[0]):
                _headers = self.headers[: len(value[0])]

            return DataframeData(headers=_headers, data=value)
        else:
            raise ValueError(""Cannot process value as a Dataframe"")

    @staticmethod
    def __get_cell_style(cell_id: str, cell_styles: list[dict]) -> str:
        styles_for_cell = []
        for style in cell_styles:
            if cell_id in style.get(""selectors"", []):
                styles_for_cell.extend(style.get(""props"", []))
        styles_str = ""; "".join([f""{prop}: {value}"" for prop, value in styles_for_cell])
        return styles_str

    @staticmethod
    def __extract_metadata(df: Styler) -> dict[str, list[list]]:
        metadata = {""display_value"": [], ""styling"": []}
        style_data = df._compute()._translate(None, None)  # type: ignore
        cell_styles = style_data.get(""cellstyle"", [])
        for i in range(len(style_data[""body""])):
            metadata[""display_value""].append([])
            metadata[""styling""].append([])
            for j in range(len(style_data[""body""][i])):
                cell_type = style_data[""body""][i][j][""type""]
                if cell_type != ""td"":
                    continue
                display_value = style_data[""body""][i][j][""display_value""]
                cell_id = style_data[""body""][i][j][""id""]
                styles_str = Dataframe.__get_cell_style(cell_id, cell_styles)
                metadata[""display_value""][i].append(display_value)
                metadata[""styling""][i].append(styles_str)
        return metadata

    @staticmethod
    def __process_counts(count, default=3) -> tuple[int, str]:
        if count is None:
            return (default, ""dynamic"")
        if isinstance(count, (int, float)):
            return (int(count), ""dynamic"")
        else:
            return count

    @staticmethod
    def __validate_headers(headers: list[str] | None, col_count: int):
        if headers is not None and len(headers) != col_count:
            raise ValueError(
                f""The length of the headers list must be equal to the col_count int.\n""
                f""The column count is set to {col_count} but `headers` has {len(headers)} items. ""
                f""Check the values passed to `col_count` and `headers`.""
            )

    def process_example(
        self,
        value: pd.DataFrame
        | Styler
        | np.ndarray
        | pl.DataFrame
        | list
        | list[list]
        | dict
        | str
        | None,
    ):
        import pandas as pd

        if value is None:
            return """"
        value_df_data = self.postprocess(value)
        value_df = pd.DataFrame(value_df_data.data, columns=value_df_data.headers)
        return value_df.head(n=5).to_dict(orient=""split"")[""data""]

    def example_payload(self) -> Any:
        return {""headers"": [""a"", ""b""], ""data"": [[""foo"", ""bar""]]}

    def example_value(self) -> Any:
        return {""headers"": [""a"", ""b""], ""data"": [[""foo"", ""bar""]]}

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Dataframe` component in Gradio, which is used to display a table of values in a spreadsheet-like format. It can be used to display data as an output component or to collect data from the user as an input. The component allows customization of various parameters such as headers, row count, column count, datatype, type of value to be returned, label, height, scale, interactive mode, visibility, styling, and more. The component supports different types of data formats including pandas DataFrame, Styler, numpy array, polars DataFrame, list of lists, dictionary, and string. It provides methods for preprocessing and postprocessing data, handling examples, and defining event triggers like `change`, `input`, and `select`.","[-0.056575507, 0.0042871907, 0.015706858, -0.013736621, 0.028067615, -0.0160921, -0.02417117, -0.0018560397, -0.013043186, -0.033218846, 0.0077928905, -0.0011061942, -0.02285034, -0.016785534, 0.006119841, -0.019548267, -0.0037671141, -0.0034286517, -0.018128376, 0.063399784, -0.00624642, -0.0012926237, -0.011766384, 0.04182625, 0.037467513, 0.006829786, -0.019174034, 0.068066716, -0.018997923, -0.013043186, -0.05261302, -0.030533161, 0.016521368, 0.0027352166, -0.0019289606, -0.0857218, 0.009157747, 0.030907396, -0.02626248, -0.027825462, -0.0294765, -0.0170497, -0.016411299, 0.04327916, 0.016213175, 0.016994664, -0.03958084, 0.010880328, 0.049354974, 0.043719437, -0.037291404, 0.017038694, -0.025425956, -0.014683215, -0.0060978266, 0.046229012, -0.07898557, 0.028221712, 0.0024407818, -0.046361096, 0.019218061, 0.03092941, -0.015013422, 0.04592082, -0.021188296, 2.4937526e-06, -0.026680743, 0.012140619, -0.0002569425, 0.014110856, 0.045304433, -0.018524626, 0.031369686, -0.05868883, -0.021056214, -0.03911855, -0.008128601, -0.041496042, 0.027737407, -0.0047109565, 0.0046091424, -0.01462818, -0.07515517, 0.011667322, 0.005404392, -0.033967316, -0.01725883, 0.013351379, -0.031809963, -0.035508282, -0.026416577, -0.0076498007, -0.05521065, 0.04680137, -0.0076718144, 0.03779772, -0.026922897, -0.012624923, 0.006136351, 0.001996378, 0.039602853, -5.64534e-05, -0.05331746, -0.03612467, 0.02388499, -0.017060706, 0.0013366514, 0.0010917477, -0.040021118, 0.0003787064, -0.0138356825, -0.020450834, -0.03830404, 0.015739879, -0.02320256, -0.011513226, -0.008623912, -0.025602067, -0.017291851, 0.0065876343, -0.0138026625, 0.049663167, -0.0032883137, -0.036763072, 0.013263323, -0.015750885, -0.01811737, -0.0622991, -0.03310878, 4.4672568e-05, -0.0063950135, -0.004625653, 0.018755771, -0.07048824, -0.04101174, 0.050499693, -0.05648745, 0.0019592296, -0.019581288, 0.011348122, 0.010098837, 0.0024971922, 0.049178865, -0.028111642, -0.03559634, -0.022784298, -0.017567024, 0.030445106, -0.072513506, -0.016873589, 0.012327736, 0.06265132, -0.026086371, -0.01356051, 0.019416185, 0.015530746, 0.03953681, -0.011480205, -0.0058886954, -0.05371371, 0.0069893864, 0.026438592, 0.023466727, -0.009047678, -0.018106364, -0.016367272, -0.03200809, 0.011865446, -0.037467513, 0.036785085, 0.0059712473, 0.0011653564, -0.01034099, 0.006741731, 0.0055447295, -0.0075232214, 0.008601898, 0.020781042, 0.004752232, -0.0355303, -0.039184593, -0.023818947, -0.039360702, 0.023554781, 0.025183804, -0.01886584, -0.03018094, -0.045480542, 0.0005716713, 0.012415792, 0.011458191, 0.022674229, -0.00015332278, 0.061946876, -0.0042156456, -0.01751199, 0.019052956, 0.005954737, -0.004355984, 0.008678947, 0.036961194, -0.02285034, -0.0313917, 0.008205649, -0.0326685, 0.014209918, -0.03335093, -0.006213399, 0.00328281, -0.049310945, 0.011111474, -0.0326685, 0.0011626047, 0.004364239, -0.05424204, -0.012228674, -0.012360757, -0.004837536, 0.005938227, 0.0007367749, -0.01996653, 0.011931488, -0.023004437, -0.030775314, 0.011953502, -0.013780648, 0.03225024, -0.0025370922, 0.014705229, -0.025337901, 0.050587747, -0.053845793, 0.021144269, 0.02591026, 0.034671757, -0.052480936, -0.012790027, -0.059173137, 0.06445645, 0.05516662, -0.0140228, 0.014099848, 0.017589038, -0.016378278, 0.032822598, 0.044049643, -0.016884597, -0.055254675, 0.0101979, 0.08316819, 0.003959735, -0.016268209, -0.0040560453, -0.009102712, -0.034693774, -0.033086766, -0.002812265, 0.030268995, 0.03057719, -0.019922502, -0.031942047, -0.032580446, -0.047681924, 0.05798439, -0.022090863, 0.039712925, 0.028639974, 0.0010202028, -0.017710114, -0.028067615, 0.010159376, 0.025051722, 0.042662773, 0.034671757, 0.0026953164, -0.017357893, 0.055694953, 0.035045993, 0.042728815, 0.017941259, -0.011590274, -0.0035194587, -0.00096585613, 0.054506205, -0.02626248, 0.032448363, 0.042332567, 0.0104070315, 0.005982254, -0.060053688, 0.012977144, 0.008194643, 0.041782223, -0.013373393, 0.0076112766, 0.0018629191, 0.024149155, 0.0068518, 0.007594766, -0.026856855, -0.014837312, 0.0044495426, -0.0062244064, -0.025888247, -0.025954287, -0.006802269, -0.025712136, 0.009955748, 0.016928624, -0.0025137025, 0.01523356, 0.018348515, 0.025007695, -0.013824676, -0.09360274, 0.03509002, 0.07841321, -0.011898467, 0.012757006, -0.050103445, -0.03295468, 0.010263941, 0.04074757, -0.0321842, -0.026900882, -0.064896725, -0.044798113, -0.0035304655, 0.004633908, -0.03830404, 0.039602853, 0.023620823, -0.0355303, 0.043169092, 0.018106364, -0.021760656, -0.037357446, 0.024215197, -0.075771555, 0.011931488, -0.0052145226, -0.0246995, -0.0150684565, 0.017600045, -0.002367861, -0.019559275, -0.046933454, 0.021045208, -0.03335093, -0.057500087, -0.018887853, -0.012801033, -0.01808435, -0.008145112, 0.033218846, -0.018271467, -0.018568654, -0.052304827, -0.044093672, -0.023048464, -0.02555804, 0.026812827, 0.005291571, 0.009421913, -0.04374145, 0.011689336, -0.05388982, 0.0019564778, -0.0021477228, -0.0046724323, 0.031611837, -0.048430394, -0.031347673, -0.005398888, -0.02417117, -0.0104730725, 0.021914752, 0.013615545, -0.03480384, -0.0076222834, 0.018062335, 0.031303644, -0.010093334, -0.028375808, 0.0023637335, 0.029630596, 0.016037064, 0.05164441, 0.010225417, 0.0068187793, -0.018821811, -0.018821811, -0.0050494187, -0.0023554782, 0.03434155, -0.008998147, 0.010891335, 0.039140563, 0.04851845, 0.009196271, -0.00076360424, -0.024215197, -0.01066019, 0.014154883, -0.007814905, -0.010346493, 0.045788735, 0.03883237, -0.00043064525, -0.026152413, -0.006439041, -0.020626945, 0.022288987, -0.006824283, 0.03826001, -0.02619644, -0.03832605, -0.010599652, -0.00239813, 0.073614195, 0.0027462235, -0.019317122, -0.018634694, -0.04512832, -0.010467569, 0.053405516, -0.007545235, -0.00039246504, -0.028419835, -0.019339137, -0.015750885, 0.03299871, 0.06300354, 0.015706858, 0.0059107095, 0.0038524177, 0.017732129, 0.013494468, 0.04552457, 0.038524177, -0.0042651766, 0.04211243, 0.019977538, 0.03929466, -0.050631776, 0.00085372326, 0.021210311, 0.013956759, -0.030136913, -0.04680137, 0.020637952, 0.023334645, -0.050763857, -0.017710114, 0.009697085, -0.03242635, 0.028265739, -0.0010793649, 0.04517235, 0.0125038475, 0.011634301, 0.010374011, -0.06392812, 0.05111608, -0.011546246, -0.030621218, 0.03271253, -0.01619116, 0.012239682, -0.00015538657, -0.034011345, 0.04327916, 0.035508282, 0.032910652, 0.003679059, 0.036080644, 0.045348458, 0.002033526, -0.04587679, 0.0070389174, 0.00032779947, -0.004130342, -0.017203797, -7.90584e-06, 0.027891504, 0.07634391, -0.017038694, -0.058468692, 0.01324131, -0.025536025, -0.004782501, -0.0030956927, 0.024325266, -0.0076608076, 0.021969788, 0.019251082, -0.07484697, 0.022222947, -0.023158533, -0.0635759, 0.02050587, 0.017897232, 0.0023334643, 0.06608547, 0.03099545, 0.0044165216, 0.01779817, -0.007082945, -0.026966924, -0.0014556636, -0.022630202, 0.017027685, 0.016719492, 0.011502218, 0.017071715, -0.03046712, -0.014639187, 0.021089235, -0.03669703, 0.0049310946, -0.009443927, 0.011920481, -0.034253497, -0.016224181, 0.013197282, -0.0023554782, 0.0139017245, -0.050543718, 0.01826046, -0.029762678, -0.008139608, -0.0007034102, -0.016664458, 0.02908025, -0.058644805, -0.009730106, -0.008728478, 0.014463076, -0.00081451115, -0.026526647, 0.026790813, 0.0077323527, -0.01206357, -0.006037289, 0.018106364, 0.014639187, -0.020197675, -0.019548267, -0.0040890663, 0.021485483, 0.059217162, -0.07286573, 0.017809177, -0.028750043, 0.015343629, 0.025051722, 0.021936767, 0.0173689, -0.0280456, -0.018040322, -0.018502612, 0.008255181, 0.016048072, 0.02712102, -0.020990172, 0.0044467906, 0.001884933, -0.029344415, -0.039734937, 0.028816083, -0.025359916, 0.010594148, -0.0009961252, 0.02096816, -0.035332173, 0.024787556, 0.0013985652, -0.00080900773, 0.0016097602, -0.005630033, 0.019361151, 0.00042032628, -0.016400293, -0.014749256, -0.041496042, 0.0092072785, 0.026328523, 0.01324131, 0.011199528, -0.042904925, -0.018975908, 0.017335879, -0.0194382, 0.024193183, 0.017754141, 0.0014873084, -0.0046779355, 0.022630202, -0.008409278, 0.00051629276, 0.018524626, -0.014606167, -0.013351379, -0.0003205762, 0.0042954455, 0.024457349, 0.036036614, 0.029806705, -0.030731287, 0.010043804, -0.015563767, 0.041738193, -0.060890213, -0.05160038, -0.013824676, 0.0012747375, -0.034869883, 0.024655472, 0.028706014, -0.016224181, -0.02463346, 0.018238446, 0.006207896, -0.02359881, 0.004507329, 0.047946088, 0.017313866, -0.010913349, -0.010649183, 0.027341159, 0.0002598662, -0.0023816195, 0.046537206, 0.008838546, 0.014496097, 0.026548661, 0.009036671, -0.0203958, 0.0035910036, -0.033945303, 0.0033571068, 0.004757736, 0.027187062, 0.02331263, 0.037709665, -0.01128208, -0.0044467906, 0.01964733, 0.03295468, 0.007005897, 0.0073526143, 0.0009005026, 0.0020183916, 0.008167125, -0.010907846, 0.008645926, -0.030445106, -0.019030944, 0.008370753, 0.013142248, -0.0044908184, -0.008183636, -0.014881339, -0.013362386, -0.005850171, 0.031611837, 0.0061913854, -0.010973887, 0.030907396, 0.043675408, -0.018183412, 0.015464705, 0.0052557983, 0.027319144, -0.0024118887, -0.02723109, 0.012283709, -0.025469985, 0.008822037, 0.023554781, -0.018920874, -0.0069178413, -0.025469985, 0.006829786, -0.0029746168, -0.013351379, 0.0125038475, 0.011623294, 0.026394565, -0.027010951, 0.005938227, -0.0036653003, -0.008833043, 0.016840568, 0.013318358, 0.017754141, 0.026790813, 0.009421913, 0.03172191, -0.031017466, -0.0065821307, -0.0010126355, -0.0010243304, -0.02480957, -0.0077873874, -0.0018808054, -0.006890324, 0.016521368, 0.004958612, -0.025932275, 0.020648958, 0.020483855, -0.017445948, -0.00044199615, -0.015464705, -0.0069453586, 0.016532375, 0.022982422, 0.0101373615, 0.008838546, -0.03531016, -0.011755377, -0.040571462, -0.02815567, 0.01979042, -0.027539283, -0.020781042, -0.0032057618, -0.040879656, -0.006521593, 0.017809177, 0.01384669, 0.051248163, 0.0052640536, -0.0005864618, 0.013109227, 0.01953726, -0.0044467906, 0.009278823, -0.0124708265, -0.0005819902, -0.011876454, -0.0005159488, -0.021309374, -0.013252317, -0.023290617, 0.00793598, 0.016070085, -0.005503454, -0.0197574, -0.0036625485, 0.0053273435, 0.017952267, -0.0016923121, -0.017126748, -0.028243724, -0.01583894, -0.018359521, -0.03456169, -0.0059602405, -0.0014336497, 0.017952267, -0.009790644, 0.02897018, -0.016323244, -0.042508677, 0.029564554, -0.011568259, -0.023907004, 0.010258438, -0.004155108, 0.0064060204, 0.011579267, -0.007358118, 0.07163295, -0.007187511, -0.0031617342, -0.008860561, 0.009339361, 0.023951031, -0.014474084, 0.006747234, 0.034187455, 0.009036671, 0.05199663, -0.014099848, 0.01993351, 0.019163026, 0.0069508622, -0.041099794, -0.011326108, -0.0054374123, -0.0020183916, 0.004080811, 0.03570641, -0.0015904981, 0.013516483, -0.048078172, -0.026130399, 0.034209467, -0.017269839, -0.0151675185, -0.042266525, 0.04680137, 0.04310305, 0.032536417, -0.01034099, -0.050543718, -0.033020724, -0.018953895, 0.0049558603, 0.0058171507, -0.008976134, 0.03392329, 0.0077928905, 0.011953502, 0.008029539, 0.038392093, 0.0011660443, -0.012404785, -0.032976694, -0.016741507, -0.034869883, -0.0056355367, -0.005120964, 0.025954287, 0.0019289606, 0.04021924, 0.0059602405, -0.013758634, 0.016884597, 0.019339137, -0.0007842422, 0.02879407, 0.01868973, 0.031435728, 0.0027874995, 0.0068462966, -0.0024641715, -0.020417813, 0.011843433, 0.040637504, 0.01776515, -0.03438558, 0.033505026, -0.00056066434, 0.012041557, 0.008530353, -0.005712585, -0.018381536, -0.022465099, 0.015783906, -0.011480205, -0.0535376, 0.031765934, -0.002065171, 0.01313124, 0.020836076, 0.014353007, 0.07264559, -0.007044421, 0.005118212, -0.026064357, 0.022630202, -0.033042736, -0.05758814, -0.024325266, 0.0046229013, 0.043433256, -0.015112484, -0.0036928174, -0.023686865, 0.026966924, 0.0016537879, -0.03460572, -0.008877071, 0.009119223, 0.023620823, -0.01324131, -0.049707193, 0.0012362133, 0.0026361544, 0.04926692, -0.016532375, -0.0057180887, -0.020131635, 0.0075617456, -0.00068380416, 0.007462683, 0.011116977, -0.013747628, 0.023224575, -0.005572247, 0.006026282, 0.017148763, 0.04495221, -0.018557645, 0.025337901, 0.0006487196, 0.005894199, 0.0054374123, 0.004344977, -0.013395406, -0.011876454, -0.02285034, -0.011865446, -0.022630202, -0.0035112035, -0.04662526, -0.011403156, -0.033438984, -0.030687258, -0.0022247713, 0.013637559, 0.009031167, -0.017688101, -0.007022407, 0.00282052, -0.011799405, 0.018073343, -0.011381143, 0.011920481, 0.045568597, -0.0064115236, -0.01907497, 0.0033818723, 0.021661595, 0.03225024, 0.013912731, 0.01126557, 0.038568202, 0.015024429, 0.028772056, -0.0194382, 0.012338744, -0.054726344, -0.019977538, -0.0009218285, -0.01979042, -0.020659966, -0.026724773, 0.005349357, -0.0059987647, -0.022178918, 0.024479363, -0.0004715772, 0.028177684, -0.00836525, -0.016873589, -0.008882575, -0.0021669848, 0.031061493, 0.11772989, 0.0023857472, -0.025822205, -0.010263941, -0.005170495, -0.0076828217, 0.0012988151, -0.00388819, -0.05987758, -0.035882518, -0.0038221488, -0.00715449, 0.018337509, -0.024149155, 0.04512832, -0.0113701355, 0.008304711, 0.01907497, 0.023004437, 0.029520527, 0.02630651, -0.0034011344, -0.008695457, -0.012382771, -0.009086202, -0.053581625, 0.03612467, 0.059173137, 0.014176897, 0.016246196, 0.008310216, 0.023862977, -0.07735655, -0.045304433, 0.0025824958, 0.008656933, 0.04431381, 0.015343629, -0.03438558, 0.038105913, -0.0112710735, 0.015938003, 0.032690514, 0.019801427, 0.018755771, 0.034869883, 0.017522996, -7.206085e-05, -0.025007695, -0.010990397, 0.037291404, -0.027627338, 0.012404785, 0.011177515, 0.040351324, -0.030621218, -0.022740271, -0.009928231, -0.0010449683, 0.0037616107, 0.030863369, 0.026812827, 0.011920481, -0.029740665, -0.0050494187, -0.016158141, -0.013142248, -0.046977483, -0.025073735, 0.0014529118, 0.03526613, 0.01740192, 0.0075727524, -0.015189532, 0.014330993, 0.011953502, 0.02463346, 0.0034506656, 0.0050439155, 0.011590274, -0.007374628, -0.014441063, 0.048914697, 0.034649745, 0.02253114, 0.00091013365, -0.024039086, -0.0017927501, -0.030313024, -0.026042344, 0.007957994, 0.027319144, 0.011111474, -0.028639974, 0.006571124, -0.03242635, 0.00013251285, 0.019823441, -0.0031424721, -0.023378672, 0.04171618, 0.0013139496, -0.0061308476, 0.017478969, -0.026856855, 0.005440164, 0.04200236, 0.016367272, -0.009955748, 0.022894368, 0.01217364, -0.036653, -0.059129108, -0.0038249004, 0.02256416, 0.016917616, 0.010115348, 0.01473825, -0.01889886, 0.0006972188, 0.019482227, -0.02850789, -0.043917563, -0.019493233, -0.0064830687, -0.0016936879, 0.023334645, -0.007886449, -0.014859325, -0.0023403438, -0.037929803, 0.0016166396, -0.0036240243, 0.04171618, -0.0022247713, -0.006158365, 0.035464257, -0.028926153, -0.031611837, 0.022586174, -0.0030241478, -0.044754088, -0.008194643, 0.015079464, -0.0010105717, 0.0010215786, 0.0039459765, 0.013109227, -0.012052564, -0.00060090836, -0.0071765035, -0.028067615, -0.024479363, -0.0018835571, 0.022784298, -0.0023320885, -0.014088842, -0.007231538, -0.0035112035, 0.032316282, -0.012382771, -0.014870333, -0.003194755, 0.010781266, -0.00028549167, 0.026526647, 0.0011976891, 0.01633425, 0.012239682, -0.018766778, 0.003214017, 0.02157354, 0.0075342283, -0.008662436, 0.029498512, 0.0026567923, -0.011469197, 0.02010962, -0.011634301, 0.008002022, -3.5127512e-05, -0.010973887, -0.008755995, 0.028772056, 0.006752738, -0.030775314, -0.016026057, -0.017952267, -0.020120626, -0.04922289, -0.0069343518, 0.032404337, -0.01964733, -0.038039874, 0.017291851, 0.03018094, 0.02253114, -0.013736621, 0.012261695, 0.03922862, 0.028661987, -0.005602516, 0.00791947, -0.011964508, -0.008057056, -0.0036432864, 0.013527489, -0.0010257062, -0.030224968, -0.006681193, -0.017038694, -0.008040546, -0.011254563, 0.018194418, -0.03335093, -0.002510951, 0.006163868, 0.04200236, 0.003263548, 0.022432078, -0.016862582, 0.0065931375, -0.0194382, 0.014143877, 0.0026072613, 0.019768406, -0.01034099, 0.061594654, 0.0126359295, -0.06454451, 0.010984894, 0.009124726, -0.015882967, 0.011199528, -0.008480823, -0.011755377, 0.011678329, 0.029608581, -2.9860537e-05, -0.00809558, 0.0040340316, -0.00051526085, -0.0079414835, -0.0015134498, -0.026460607, 0.040175214, -0.012019543, 0.021771664, -0.007820408, 0.019262088, -0.018018307, 0.011436177, 0.00031490074, -0.011997529, -0.0026622957, -0.02050587, 0.021562532, 0.01313124, 0.0018931881, -0.0046504186, -0.017820183, 0.008954119, -0.022454092, 0.014154883, -0.03352704, 0.034627732, 0.013032178, -0.0025659853, 0.009542989, -0.002417392, 0.0009768631, 0.032536417, -0.031589825, 0.02036278, 0.0031342169, -0.010638176, -0.0173689, 0.0007202645, 0.017148763, -0.05419801, 0.029762678, 0.012723985, 0.016840568, -0.037269387, 0.008013029, 0.04776998, 0.01477127, 0.004067052, 0.046317067, 0.0013634807, 0.001864295, 0.019339137, 0.026350537, 0.073306, 0.008326726, 0.0016028809, 0.007627787, -0.017093727, 0.0045293425, 0.010665693, 0.020472849, 0.003698321, 0.0056795646, -0.015926994, -0.0018615433, -0.01551974, 0.018480597, -0.052172743, -0.005701578, 0.02954254, 0.0055639916, -0.046052903, 0.004565115, -0.02025271, -0.0063509857, 0.053581625, 0.004600887, 0.008420284, -0.015684843, 0.033615097, -0.019669345, 0.016004045, -0.017732129, 0.033659123, -0.04834234, -0.02665873, 0.0054869433, 0.0034616725, -0.009625541, -0.035684396, -0.013813669, 0.024567418, -0.021969788, 0.030136913, 0.012712978, -0.041958332, 0.02434728, 0.027605325, -0.017853204, 0.07885349, -0.008255181, -0.0072700623, 0.011078453, 0.0152665805, 0.012734992, -0.030026844, -0.010467569, 0.010858314, 0.010148369, -0.0026746786, -0.026548661, 0.020318752, -0.0021284607, -0.0035442242, -0.0026278992, -0.030445106, -0.022762286, -0.010374011, -0.019008929, 0.0057401024, 0.008535857, -0.026548661, -0.0069288486, -0.033042736, -0.023862977, -0.020043578, 0.0016469086, 0.02092413, -0.0020211434, 0.03733543, -0.030709272, 0.0085743815, 0.014991408, 0.043257147, 0.010621666, -0.014364014, 0.0004605703, 0.052657045, -0.00013139496, 0.04043938, 0.026328523, -0.028551918, -0.012679958, -0.026922897, 0.006824283, 0.016642444, -0.0015244567, 0.02256416, 0.014375022, 0.003546976, 0.029564554, 0.041407987, 0.026746785, 0.008194643, 0.007858932, 0.005663054, 0.023246588, 0.0041661146, 0.027451228, 0.016147133, -0.04385152, -0.031237604, 0.009091706, 0.0016276465, 0.0140668275, 0.027561296, 0.0012616668, 0.023818947, 0.04118785, 0.04074757, 0.02412714, 0.038964454, 0.015156512, 0.034297526, -0.005674061, 0.056751616, 0.025271859, -0.015365643, -0.014463076, -0.014661201, 0.0040973215, 0.0021422193, -0.005266805, 0.032162186, -0.006439041, 0.0027971305, -0.01612512, -0.032074127, 0.0020417813, -0.025712136, 0.0031562308, -0.0038744314, 0.009708093, -0.012911103, -0.03434155, -0.014727242, 0.019922502, -0.008530353, -0.035045993, 0.06634964, 0.028023588, -0.00029202702, -0.0015932498, 0.040483408, 0.025073735, 0.033791207, -0.0060978266, 0.017324872, -0.004325715, -0.010731735, -0.02057191, -0.0051952605, 0.017611053, 0.048738588, 0.02580019, -0.027429214, -0.015079464, 0.009664065, -0.0074351663, 0.0033708655, 0.004713708, -0.01669748, -0.007666311, -0.008645926, 0.033615097, 0.008755995, -0.00028600762, -0.050059415, 0.007462683, 0.0080075255, 0.02573415, 0.029916774, 0.018502612, 0.0041661146, -0.0013332117, -0.00594373, 0.0064830687, -0.010896838, 0.0197574, 0.021111248, 0.008260684, 0.005987758, 0.0057345987, 0.0094054025, 0.02637255, -0.004507329, 0.027561296, 0.009994272, 0.0069893864, 0.035970572, 0.02509575, -0.012019543, 0.011304094, 0.0039377213, -0.041914303, 0.010241928, -0.01142517, -0.030555176, -0.040593475, -0.007814905, -0.024501376, -0.022167912, -0.022277981, -0.01783119, -0.029124277, 0.05543079, 0.02085809, -0.0038909419, -0.021375414, 0.0025425956, 0.005261302, -0.010742742, -0.018172404, -0.008502836, -0.011898467, -0.025051722, 0.018524626, -0.017412927, 0.0033488516, 0.045480542, -0.010594148, -0.0313917, -0.019196047, 0.0031369687, -0.006642669, 0.036564946, 0.03577245, 0.01430898, 0.0018078845, 0.025293874, -0.007363621, -0.022982422, 0.027451228, 0.0022316505, 0.013406414, -0.02573415, 0.012206661, -0.027825462, -0.0041165836, -0.0037038245, 0.024919638, 0.024325266, -0.03900848, 0.0006831162, 0.0024504128, -0.024479363, 0.012415792, 0.025271859, -0.015057449, 0.012151626, -0.01619116, -0.0033323413, 0.022652216, -0.047637895, 0.0029553548, 0.022410063, -0.017181782, -0.00941641, 0.013604538, 0.0017652328, 0.013318358, 0.020560903, -0.03784175, 0.0060703093, -0.019416185, 0.025668109, -0.008794519, 0.021331387, -0.030158928, -0.0058776885, -0.015497725, -0.06560117, -0.0030021342, 0.03773168, -0.00063530495, 0.010979391, 0.012217668, -0.009691582, 0.0152665805, 0.0069068344, -0.017027685, -0.0022082608, 0.023554781, 0.0044688047]"
../../../gradio,../../../gradio/gradio/components,plot.py,"""""""gr.Plot() component.""""""

from __future__ import annotations

import json
from types import ModuleType
from typing import Any, Literal

from gradio_client.documentation import document

from gradio import processing_utils
from gradio.components.base import Component
from gradio.data_classes import GradioModel
from gradio.events import Events


class PlotData(GradioModel):
    type: Literal[""altair"", ""bokeh"", ""plotly"", ""matplotlib""]
    plot: str


class AltairPlotData(PlotData):
    chart: Literal[""bar"", ""line"", ""scatter""]
    type: Literal[""altair""] = ""altair""


@document()
class Plot(Component):
    """"""
    Creates a plot component to display various kinds of plots (matplotlib, plotly, altair, or bokeh plots are supported). As this component does
    not accept user input, it is rarely used as an input component.

    Demos: blocks_kinematics, stock_forecast
    Guides: plot-component-for-maps
    """"""

    data_model = PlotData
    EVENTS = [Events.change, Events.clear]

    def __init__(
        self,
        value: Any | None = None,
        *,
        format: str = ""png"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Optionally, supply a default plot object to display, must be a matplotlib, plotly, altair, or bokeh figure, or a callable. If callable, the function will be called whenever the app loads to set the initial value of the component.
            format: File format in which to send matplotlib plots to the front end, such as 'jpg' or 'png'.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.format = format
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def get_config(self):
        try:
            import bokeh  # type: ignore

            bokeh_version = bokeh.__version__
        except ImportError:
            bokeh_version = None

        config = super().get_config()
        config[""bokeh_version""] = bokeh_version
        return config

    def preprocess(self, payload: PlotData | None) -> PlotData | None:
        """"""
        Parameters:
            payload: The data to display in the plot.
        Returns:
            (Rarely used) passes the data displayed in the plot as an PlotData dataclass, which includes the plot information as a JSON string, as well as the type of chart and the plotting library.
        """"""
        return payload

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        return None

    def postprocess(self, value: Any) -> PlotData | None:
        """"""
        Parameters:
            value: Expects plot data in one of these formats: a matplotlib.Figure, bokeh.Model, plotly.Figure, or altair.Chart object.
        Returns:
            PlotData: A dataclass containing the plot data as a JSON string, as well as the type of chart and the plotting library.
        """"""
        import matplotlib.figure

        if value is None:
            return None
        if isinstance(value, (ModuleType, matplotlib.figure.Figure)):  # type: ignore
            dtype = ""matplotlib""
            out_y = processing_utils.encode_plot_to_base64(value, self.format)
        elif ""bokeh"" in value.__module__:
            dtype = ""bokeh""
            from bokeh.embed import json_item  # type: ignore

            out_y = json.dumps(json_item(value))
        else:
            is_altair = ""altair"" in value.__module__
            dtype = ""altair"" if is_altair else ""plotly""
            out_y = value.to_json()
        return PlotData(type=dtype, plot=out_y)


class AltairPlot:
    @staticmethod
    def create_legend(position, title):
        if position == ""none"":
            legend = None
        else:
            position = {""orient"": position} if position else {}
            legend = {""title"": title, **position}

        return legend

    @staticmethod
    def create_scale(limit):
        import altair as alt

        return alt.Scale(domain=limit) if limit else alt.Undefined
","This code defines a `Plot` component that can display various kinds of plots such as matplotlib, plotly, altair, or bokeh plots. The component does not accept user input and is typically used to display plots. It includes parameters for customization such as format, label, scale, and visibility. The component can preprocess and postprocess plot data in different formats (matplotlib.Figure, bokeh.Model, plotly.Figure, or altair.Chart object) and return the data as a JSON string along with the type of chart and plotting library. Additionally, there is an `AltairPlot` class that provides static methods for creating legends and scales for Altair plots.","[-0.07481233, -0.0029511482, 0.00019668324, 0.006777564, 0.027547888, -0.030012459, -0.049014974, -0.026304089, -0.0075722146, -0.003443486, 0.01839213, -0.019152232, -0.013785461, -0.004753508, -0.0062074885, -0.0144649455, -0.01978565, 0.028146757, -0.018898865, -0.00034226122, 0.009622183, -0.03378993, -0.030910758, -0.005075975, -0.024622653, 0.0060232216, -0.038511764, 0.028423157, -0.009403366, 0.053207044, -0.034365762, -0.023885585, -0.006812114, 0.0211331, 0.01576633, -0.058228314, 0.0043014786, -0.04608974, 0.024369286, -0.030565258, -0.008908149, 0.005608621, -0.0013013844, 0.015167463, -0.010952359, 0.025520954, -0.04569817, 0.021524668, -0.015547513, 0.06444732, -0.028054623, 0.0078083063, -0.0052343295, -0.015063812, -0.031786025, 0.05380591, -0.045444805, 0.047632974, 0.019705033, -0.008361107, 0.027432723, 0.004779421, 0.0009796373, 0.052838508, -0.03917973, 0.00592533, -0.060347382, -0.013175078, -0.02075305, 0.03484946, 0.048738573, 0.0025235917, -0.015248079, -0.024254119, -0.009892825, -0.020453617, -0.004393612, 0.0053293416, 0.007842856, -0.01652643, -0.025682187, 0.037567396, -0.014752862, 0.013336311, -0.0072785392, -0.07702353, -0.041598234, 0.008050157, -0.005582709, -0.018991, -0.011568501, -0.02515242, -0.039317932, 0.059195716, 0.009144241, 0.0798336, -0.021582251, 0.01618093, 0.011021459, 0.030795591, 0.043809436, -0.014660728, -0.04431617, -0.028630456, 0.042565636, -0.010336217, -0.024277152, -0.008792982, 0.044753805, 0.034826428, -0.043233603, -0.0026963418, -0.018069664, 0.0412297, -0.06136085, -0.034688227, 0.02906809, -2.487782e-05, 0.014177028, -0.0012826698, -0.027616989, -0.0017447764, 0.06868546, -0.006080805, 0.02446142, -0.010802642, -0.035425294, -0.052193575, -0.022399934, 0.011775801, -0.0010588143, -0.032730393, -0.04438527, -0.041483067, -0.015651163, 0.028952925, -0.018645499, -0.013589677, -0.02934449, 0.0061614215, 0.029736057, 0.03309893, 0.023125486, -0.030357959, 0.029252358, 0.0024213812, -0.00088174554, -0.034596097, -0.03236186, 0.040746, -0.0046095494, 0.07352246, -0.0070136557, -0.0071115475, 0.0009652414, 0.035125863, 0.068270855, -0.054266576, -0.01631913, -0.01022105, 0.009662491, -0.0010724905, -0.011954309, -0.006696947, -0.034112394, 0.011487884, -0.014511012, -0.009340025, -0.04878464, -0.013198111, -0.010618376, 0.006950314, -0.04604367, -0.04721837, 0.029045057, -0.013543611, 0.014902579, -0.014384328, 0.0065529887, 0.0011336728, -0.0035672905, -0.007595248, -0.039548267, -0.03378993, -0.0065817805, 0.04933744, -0.0052458458, 0.040699933, 0.011413026, 0.043556068, 0.013152044, 0.015144429, -0.038580865, -0.006760289, 0.009103932, -0.0441319, 0.038788166, 0.017827814, -0.001829712, 0.0032851319, -0.006748772, 0.024415353, -0.017240465, 0.011804593, 0.011568501, 0.05463511, -0.011493643, -0.026142854, 0.010952359, -0.02397772, -0.017067714, 0.013324794, 0.033006795, 0.0024415352, -0.02605072, -0.022376902, -0.0403314, -0.0042525325, -0.043924604, 0.0020643643, -0.05537218, 0.024208054, 0.018242415, -0.037958965, 0.0089023905, 0.0035528946, 0.072739325, -0.03111806, 0.032384895, 0.011510918, 0.00022583482, -0.009230616, 0.017712647, 0.035885964, -0.042565636, -0.06776412, -0.0021564977, -0.013877595, -0.011804593, 0.0005081733, -0.0024948, -0.0045749997, -0.006944556, -0.00047002433, 0.06721132, 0.01773568, -0.007842856, -0.07697746, -0.00038796803, 0.058873247, 0.009155758, 0.018887348, -0.00040488315, -0.01971655, -0.0420589, -0.04300327, 0.01739018, 0.021651352, 0.008798741, -0.058735047, -0.033237126, -0.032338828, -0.05131831, 0.024161987, 0.0129217105, -0.00013577081, 0.009967683, 0.017205914, -0.05744518, -0.010054058, 0.010624134, -0.005965638, 0.031210192, -0.054911513, -0.017033163, 0.011977343, 0.05689238, 0.06435519, 0.0004998957, 0.036530897, -0.0032908903, 0.026902955, -0.013382378, 0.03277646, -0.033237126, 0.0018196348, 0.0018354702, -0.0207185, 0.0037400406, -0.049705975, 0.054450843, 0.0033830237, 0.002394029, 0.00014791731, 0.015478413, 0.02339037, 0.029574824, 0.008355348, 0.052516043, -0.011217242, -0.0067660473, -0.027663056, -0.012944744, -0.05030484, 0.043533035, -0.013267211, 0.011770043, 0.06481586, 0.018403647, -0.021904718, 0.03510283, -0.026949022, 0.010618376, -2.1256365e-05, -0.052469976, 0.005122042, 0.041390933, 0.022469034, 0.003696853, -0.03346746, -0.053990178, -0.02116765, 0.0062765884, 0.0008723882, -0.029114157, -0.034503963, -0.03378993, -0.01229981, -0.028975956, 0.021950785, 0.016445814, -0.020534234, -0.04604367, 0.02968999, 0.01593908, 0.021847134, -0.0144649455, -0.02968999, -0.0381202, 0.023217618, -0.0428881, 5.380447e-05, 0.0010897655, 0.04459257, 0.030795591, 0.01566268, -0.010745059, -0.0021780913, 0.028699556, -0.009247891, -0.03627753, -0.02858439, -0.007157614, 0.006184455, 0.012668343, -0.029298425, -0.041460034, -0.024622653, -0.028906858, 0.005893659, 0.007975298, -0.013520578, -0.046619505, -0.028492257, 0.013428444, 0.0029165982, -0.07154159, -0.05380591, 0.007992573, 0.009489741, 0.0023637977, 0.006645122, -0.044892002, 0.0019132078, 0.0032419444, -0.034135427, 0.018933415, -0.040792067, -0.035079796, -0.02837709, -0.010526242, -0.012034927, 0.015789364, -0.039410066, -0.010405317, -0.019198298, 0.024714787, -0.005145075, -0.010595342, 0.03372083, 0.030680425, -0.028768657, -0.0374983, 0.006126872, 0.035885964, -0.013048394, 0.032615226, 0.031716924, 0.019486215, -0.02570522, -0.06412485, -0.010606859, 0.02370132, 0.036945496, -0.030173691, -0.00019182464, 0.032177594, 0.019923849, 0.032246694, 0.034388795, 0.038649965, -0.027018122, 0.015823914, -0.05002844, 0.047586907, -0.025405787, 0.028561357, -0.035056762, 0.0035845654, 0.02830799, -0.01015195, -0.075549394, 0.01697558, -0.0140273115, -0.023298236, 0.036231462, 0.066566385, -0.05656991, 0.00088750385, -0.066888854, 0.031993326, 0.04300327, 0.020626366, -0.016134864, -0.037774697, -0.05495758, -0.0050673373, -0.009558842, 0.028561357, 0.022284769, -0.015317179, 0.018161798, 0.011038734, -0.0064781304, -0.054727245, -0.03408936, 0.0055740713, -0.009201824, -0.022123534, 0.0020499683, -0.013313278, 0.0416443, -0.037774697, -0.015155946, 0.010105884, -0.004822608, 0.025451854, -0.0003561172, 0.018357582, 0.030519191, 0.032868594, 0.069514655, -0.042128, 0.06403272, -0.015167463, 0.004790937, 0.041782502, 0.010416834, 0.020453617, -0.044224035, -0.015178979, 0.011148143, 0.048876774, -0.021213718, -0.0404005, -0.014487978, 0.03378993, 0.015743297, -0.035494395, -0.013900628, 0.023194585, 0.015167463, -0.042819, 0.01209251, 0.023816487, 0.07531906, -0.00769314, -0.049890243, -0.015639646, -0.0067545306, -0.06343385, -0.013509061, -0.027271489, -0.009334266, 0.028469224, -0.029943358, -0.094252475, -0.0072324728, -0.006489647, -0.0068524224, 0.038580865, -0.0041402453, 0.013336311, 0.0052890335, 0.0037486781, 0.0022644664, 0.028469224, -0.0033599902, -0.034066327, 0.017090747, -0.051778976, 0.008942699, 0.044799868, -0.0083726235, -0.028676523, 0.0036335113, -0.0144649455, 0.026557455, 0.007117306, -0.021052483, -0.026165888, 0.006011705, 4.912582e-05, -0.021950785, 0.0036047196, 0.02453052, -0.00633993, -0.06647425, 0.00063593645, -0.027709123, -0.0062477966, -0.034987662, -0.029551791, 0.01233436, -0.040630832, 0.029229324, -0.018449714, 0.032753427, -0.0025624605, -0.023609186, 0.022515101, -0.0067084637, 0.0027539253, -0.014879545, -0.0016195326, 0.031924225, -0.01226526, -0.019140715, 0.017551415, 0.048508238, 0.081399865, -0.043671235, -0.013301761, 0.0039818906, -0.011510918, 0.032338828, -0.040515665, 0.020637883, -0.020534234, -0.015547513, -0.0017548535, 0.042726867, 0.00568348, 0.039225798, 0.03987073, 0.010578067, -0.003558653, -0.006184455, -0.03455003, 0.013152044, -0.023401886, -0.015040779, -0.018069664, -0.019106166, -0.005706513, -0.013912145, 0.043394834, -0.031716924, -0.009386091, -0.015374763, -0.019670483, 0.025382753, -0.021190684, -0.03104896, -0.015685713, 0.0027021002, -0.005283275, 0.0077564814, 0.013048394, 0.00200966, -0.030242791, 0.00025210725, -0.043786403, 0.011631843, -0.014223095, -0.0061786966, -0.007802548, -0.0009688404, -0.030173691, -0.028054623, 0.016860414, 0.0056143794, -0.01042835, 0.018219382, -0.030726492, -0.018633982, 0.041321833, 0.041621268, -0.05689238, -0.003288011, -0.014706795, 0.027363623, -0.0024472936, -0.042565636, -0.029390557, 0.040792067, -0.02383952, 0.010526242, 0.020280866, -0.032868594, 0.00029781405, 0.027732156, -0.015881496, 0.016100314, 0.009178791, 0.023655253, 0.02879169, 0.014349778, -0.0044396785, 0.027363623, -0.010036783, 0.022492068, 0.04535267, 0.029505724, 0.049659908, -0.015363246, 0.005467542, -0.023505535, 0.031809058, -0.0153517295, -0.007324606, 0.024991186, 0.024576588, 0.017194398, 0.003714128, -0.03222366, -0.032039393, 0.020142667, 0.050811574, -0.006149905, 0.021455567, 0.032523092, 0.026787788, 0.029091123, -0.01243801, -0.014234612, 0.010318941, -0.0002567859, -0.00016078359, -0.005398442, -0.018518815, 0.002504877, -0.005810163, -0.01964745, -0.0374983, 0.031440526, 0.0388112, -0.0010494571, 0.050396975, 0.014729829, -0.0153056625, 0.040423535, -0.009524291, 0.025474887, 0.0040135616, -0.025474887, -0.037221897, -0.0199584, -0.020695467, 0.019797167, -0.026810821, 0.0022227184, -0.040469598, 0.0061614215, 0.023436436, -0.021017933, 0.025405787, 0.006524197, -0.004071145, -0.04431617, -0.0006571703, 0.019566832, -0.0011531072, 0.01625003, -0.013347828, 0.01701013, 0.022399934, -0.0023306874, 0.007664348, -0.016871931, -0.0023465226, 0.004410887, 0.018196348, -0.046481304, 0.034826428, 0.009766141, 0.014384328, 0.00072267145, 0.043947637, -0.02941359, -0.03045009, 0.010675958, -0.026281055, 0.0012581969, -0.014476462, 0.03855783, 0.036807295, 0.019313466, -0.028054623, 0.014752862, -0.050535176, 0.007681623, -0.061406918, -0.013693328, 0.0405387, 0.011361201, -0.0024544916, 0.02734059, 0.013048394, -0.02487602, 0.028008556, -0.008199873, 0.029114157, -0.008643266, -0.0016699181, 0.018150281, 0.0012430812, 0.006760289, -0.0025941313, 0.008228665, 0.015017746, 0.023194585, 0.0032160317, -0.036507864, 0.0134514775, -0.022572685, -0.030519191, -0.014660728, 0.016687663, -0.010065575, 0.022077467, 0.0067545306, 0.015317179, -0.01673373, -0.06817872, 0.006414789, -0.022112017, -0.033006795, -0.020396033, 0.027202388, -0.011528193, 0.018380616, 0.009731592, -0.010935084, -0.021236751, -0.048416108, 0.044615604, -0.0021752121, -0.010094367, -0.01562813, -0.02304487, -0.01742473, 0.0068351473, -0.061729383, 0.022918185, -0.00814229, -0.007842856, 0.007048206, -0.0025063166, -0.01022105, 0.011009943, -0.008032882, 0.0017894035, -0.0035730489, 0.016894965, 0.030519191, -0.022860602, -0.017470798, -0.014223095, -0.026626555, -0.029666958, -0.024783887, 0.04383247, 0.0065817805, 0.038028065, -0.026603522, 0.024369286, -0.05716878, -0.028077656, -0.0403314, 0.004952171, -0.023275202, -0.0140273115, 0.005332221, 0.0190601, 0.028561357, -0.03676123, -0.010336217, -0.016607046, -0.031509627, 0.01766658, 0.033928126, -0.024691753, 0.019117683, -0.004615308, -0.033352293, -0.008856324, 0.00031023045, -0.0028978835, -0.023551602, -0.013532095, -0.009599149, -0.01638823, 0.008908149, 0.012518627, 0.002383952, 0.019969916, 0.004635462, -0.007048206, -0.01593908, -0.0221005, -0.0075894897, 0.027893389, 0.03169389, 0.009708558, 0.013416927, -0.02611982, -0.009570357, 0.002196806, -0.031348392, 0.011603051, 0.040515665, -0.032523092, -0.023252169, 0.04622794, -0.021593768, 0.013267211, -0.0059080548, -0.01597363, 0.020730017, 0.025382753, 0.018622465, 0.014718312, -0.04910711, -0.012771994, 0.0015086846, 0.0036018405, 0.011044492, 0.008758432, 0.059057515, -0.024346253, -0.03429666, -0.010042542, -0.018703083, -0.0026905835, -0.07633253, -0.006230522, -0.019520765, 0.02342492, 0.0032995278, 0.0043504243, -0.0042410158, -0.021847134, 0.013912145, -0.0053926837, -0.021110067, 0.010612617, 0.03176299, -7.661289e-05, 0.006777564, 0.009967683, 0.008539615, 0.020971866, -0.008971491, 0.013462994, -0.0068812137, -0.007877407, -0.02453052, 0.03187816, 0.012380427, -0.010658683, 0.0404005, -0.0071979226, 0.010998426, 0.0001514263, 0.016238512, 0.005075975, -0.0031469318, 0.0010307425, 0.014937129, 0.006610572, -0.008781466, 0.011654876, -0.0030317649, -0.017344113, -0.021547701, -0.012771994, -0.038028065, -0.04542177, -0.021547701, -0.02535972, -0.012011893, 0.007462806, 0.04300327, -0.009224857, -0.007595248, 0.025820388, 0.0076528313, 0.025636122, 0.008130773, 0.02549792, 0.0033628694, 0.020499684, 0.01680283, -0.018265449, 0.039018497, 0.0007089954, 0.02865349, -0.00029295546, -0.015317179, 0.024922088, 0.047172304, -0.015190496, -0.02948269, 0.0011703823, -0.030910758, 0.0072785392, 0.0028820483, 0.033997227, 0.022572685, -0.018991, 0.01576633, 0.024300186, 0.0035356195, 0.013877595, -0.025267588, 0.013244177, 0.042151034, 0.02611982, 0.037682563, 0.026142854, -0.03388206, 0.05551038, -0.005182504, -0.0208567, -0.006743014, -0.008505065, -0.0033599902, 0.0059368466, 0.009103932, -0.026764756, 0.0038868783, 0.01937105, 0.011361201, 0.034596097, -0.021294335, 0.044799868, -0.025889488, -0.005150833, 0.026327122, 0.013935178, -0.017033163, 0.0076125227, 0.040377468, -0.018276965, -0.013785461, 0.007929231, -0.019278916, -0.0012747521, 0.017758714, 0.02844619, 0.049014974, -0.004431041, 0.013750911, -0.048416108, -0.025981622, 0.002324929, -0.0011034416, 0.0055481587, 0.03169389, -0.022319319, 0.0022889394, 0.015512963, 0.0076873815, 0.019232849, 0.009368816, 0.020453617, 0.015109879, 0.018726116, -0.016434297, -0.013566644, 0.0448229, 0.0047448706, -0.038396597, -0.013992761, 0.007963781, 0.02130585, -0.018898865, -0.0010472977, -0.0010955238, 0.013439961, -0.015823914, 0.022135051, 0.0024717667, 0.009328508, -0.057399113, -0.010814159, -0.00023843118, -0.019555315, -0.025520954, -0.017632032, 0.0013496105, -0.008706607, -0.0035471362, -0.016468847, 0.0067199804, 0.020914285, -0.033214092, 0.026442287, 0.036392696, -0.007721931, -0.018772181, -0.030265825, -0.00062549947, 0.017378664, 0.044293135, -0.016203964, -0.0051537124, 0.012841093, 0.027179355, -0.03772863, -0.005435871, -0.004120091, 0.027939456, 0.007566456, -0.017551415, 0.004174795, -0.0036335113, 0.0053005503, 0.019244365, 0.013509061, -0.014948646, -0.039847698, 0.021513151, 0.012426494, 0.014511012, -0.006846664, -0.021536184, 0.037290998, 0.025958588, -0.01652643, -0.025797354, 0.031624794, -0.022584202, -0.021052483, -0.01254166, 0.007664348, -0.017056197, 0.010906292, 0.027939456, -0.020522717, 0.011401509, 0.004171916, -0.030035492, -0.02740969, -0.023056386, 0.011614568, -0.010244084, 0.029897291, -0.03270736, -0.010088609, 0.00595988, 0.031071993, -0.021271301, 0.023793453, -0.008309281, -0.0037400406, 0.032868594, -0.0031901193, 0.012518627, -0.028837757, -0.0011034416, -0.022261735, -0.032799494, 0.010693233, 0.017758714, 0.014223095, 0.05574071, -0.029505724, -0.026603522, 0.030427057, 0.0073649143, -0.009230616, -0.028261922, -0.020453617, 0.0028115085, 0.023505535, 0.0026704292, 0.001517322, 0.004477108, 0.031739958, 0.06311139, 0.016503397, 0.01271441, -0.020799117, 0.006984864, -0.009483983, -0.009334266, 0.041874636, -0.014787412, -0.0065932972, 0.0007071959, 0.007647073, -0.0089657325, 0.029160224, -0.021616802, 0.0040394743, -0.011977343, 0.035425294, 0.0011127988, -0.011931276, -0.0025034375, -0.0052458458, -0.0082171485, -0.0015619491, -0.0044857454, 0.025843421, -0.023528568, -0.008113498, 0.016399747, -0.006944556, -0.020891251, -0.009800691, 0.011136626, -0.013509061, -0.018403647, 0.01566268, 0.03531013, 0.019163748, -0.0021924872, -0.007998331, 0.05297671, 0.04947564, 0.011320893, 0.042911135, -0.019682, 0.0023724353, 0.015823914, 0.020488167, -0.022895152, -0.018541848, 0.0037573155, 0.0063111386, -0.0054761795, -0.004160399, 0.022814535, -0.022261735, -0.008234424, 0.005366771, 0.041344866, 0.024945121, -0.0025667793, -0.0047563873, 0.014891062, 0.026350155, -0.038834233, 0.015271112, 0.020119634, -0.0047995746, 0.013105977, -0.007462806, -0.0055481587, 0.0079522645, 0.0009652414, -0.028630456, 0.009777658, -0.013393894, -0.042128, 0.022503585, 0.024254119, -0.0011077602, 0.029183257, -0.006961831, -0.038511764, 0.008706607, 0.007750723, -0.022676336, -0.0015849825, 0.038028065, 0.0069100056, 0.013670295, -0.0017836452, -0.026833855, -0.007894682, 0.0067890803, -0.0073533976, 0.011476368, 0.006627847, 0.020384517, 0.0008752674, 0.014764379, 0.021386467, -0.019578349, -0.012806544, -0.0034636403, 0.019140715, 0.024507487, 0.007220956, 0.012737444, -0.003529861, 0.014868028, 0.007917715, 0.033214092, 0.029229324, -0.018207865, 0.040769033, 0.01868005, -0.034987662, -0.04602064, 0.016088797, 0.0011063206, -0.027087223, -0.021835618, -0.024783887, 0.026327122, -0.028699556, 0.02577432, 0.028676523, -0.008533857, -0.0051191626, -0.0052717584, -0.011603051, 0.01049745, -0.033421393, 0.024645686, 0.06495405, 0.023160035, -0.0021780913, -0.028215857, -0.027133288, 0.013647261, -0.008125015, 0.022572685, -0.011908243, -0.0083726235, -0.022826051, -0.021397984, -0.026787788, -0.018910382, -0.011418784, -0.010549275, 0.0053034294, 0.02206595, -0.009086657, -0.008568407, -0.01593908, -0.053345244, 0.045606036, -0.004102816, -0.00074714434, -0.016100314, 0.03045009, 0.030795591, 0.03139446, -0.020015983, 0.009858275, -0.008309281, -0.018622465, 0.0045721205, 0.009207582, 0.004310116, -0.015743297, 0.029114157, 0.020373, -0.024161987, -0.016365197, -0.0014453429, -0.060761984, 0.027893389, 0.0006874016, -0.031855125, 0.036047198, 0.0038408116, -0.017493831, 0.032753427, -0.0073649143, 0.027732156, -0.053990178, -0.012115543, 0.01808118, -0.020108117, -0.021674383, -0.04979811, -0.021985335, 0.03731403, 0.0014244688, -0.005332221, 0.0054301126, -0.010762334, 0.014948646, -0.03360566, 0.021236751, -0.005824559, -0.022422967, -0.017447764, 0.00093572994, 0.031025926, -0.0049032248, -0.008925424, 0.013555128, -0.020280866, 0.019106166, -0.031141091, 0.0051738666, 0.028883824, -0.0039646155, -0.016203964, -0.008015607, 0.0029741817, 0.05394411, -0.0004376337, 0.022492068, 0.03579383, -0.027317556, -0.018818248, -0.013313278, -0.013152044, 0.06859332, -0.010140433, -0.009397607, -0.002820146, 0.007341881, 0.025889488, 0.024369286, -0.0139812445, 0.037544362, 0.0067084637, 0.018023599, 0.005027029, 0.03388206, -0.018127248, 0.0012574771, -0.044799868, -0.034066327, -0.0006075047, -0.0015964992, 0.01999295, 0.004736233, 0.00048981863, -0.00866054, 0.022019885, 0.035678662, -0.014223095, 0.03250006, 0.025198488, 0.016814347, -0.027709123, 0.032384895, 0.01978565, 0.016779797, -0.011764284, -0.0007529027, 0.02075305, 0.021835618, -0.042819, 0.017309563, -0.02747879, -0.020833667, -0.015685713, -0.015985146, 0.0205803, -0.027294522, -0.0027251334, 0.018726116, 0.00045094985, 0.045675136, 0.021282818, 0.00069999794, 0.0021392226, -0.042911135, -0.03132536, 0.01937105, 0.0052919127, 0.0004948572, 0.010549275, -0.0007550621, -0.026258022, 0.022146568, 0.001694391, 0.01566268, -0.016722213, -0.0014028751, 0.009282441, -0.008361107, 0.014476462, 0.006627847, 0.040930267, 0.02810069, -0.01739018, -0.011775801, 0.014015795, -0.018587915, 0.0008637507, 0.001014907, -0.0200966, -0.032661293, 0.02671869, 0.027294522, 0.020246316, -0.032937694, 0.02404682, 0.014868028, -0.0044511952, -0.0011322332, 0.015029262, -0.018161798, 0.024000753, 0.026419254, 0.026833855, -0.0034319696, 0.009368816, 0.005913813, 0.005432992, 0.012530143, 0.030634359, -0.010796884, 0.008401415, -0.009846758, 0.018161798, 0.020465134, 0.014971679, 0.047264438, -0.042703833, -0.023183068, 0.023056386, 0.022365386, 0.015512963, -0.030864691, -0.018000565, -0.009679766, -0.027202388, 0.0015504325, -0.006886972, -0.021075517, -0.034043293, -0.049153175, -0.0012797907, 0.04666557, -0.015501446, 0.011643359, -0.025590055, 0.008499307, -0.024277152, -0.018415164, -0.018553365, 0.010796884, -0.007860132, -0.0014259084, -0.018645499, 0.015927562, 0.0003035724, 0.05210144, 0.008096224, -0.018553365, 0.014534045, -0.0045260536, 0.0009652414, 0.022330835, 0.029851224, 0.027801257, 0.010641409, 0.008879357, -0.015040779, -0.016572496, 0.016480364, 0.004808212, -0.009622183, -0.030680425, 0.0005545999, -0.02453052, 0.0010436988, 0.0076988977, 0.035908997, -0.016480364, -0.015374763, -0.018219382, -0.0107565755, -0.0027625626, 0.0036997322, -0.015282629, -0.040423535, 0.018944932, -0.009386091, -0.017712647, 0.020868218, -0.0109120505, -0.0043878537, 0.022330835, 0.016365197, -0.032246694, 0.0374292, -0.0063053803, -0.0099619245, -0.009063624, -0.01971655, 0.022492068, -0.025636122, 0.03339836, -0.011510918, -0.0049579293, -0.026925988, -0.0017966015, -0.020868218, -0.055832844, -0.010583825, -0.022422967, -0.032062426, 0.019923849, -0.007894682, -0.019140715, 0.00023627181, -0.0011934156, 0.0042669284, -0.03077256, 0.017585965, -0.0056662047]"
../../../gradio,../../../gradio/gradio/components,model3d.py,"""""""gr.Model3D() component.""""""

from __future__ import annotations

from pathlib import Path
from typing import Callable

from gradio_client import file
from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.data_classes import FileData
from gradio.events import Events


@document()
class Model3D(Component):
    """"""
    Creates a component allows users to upload or view 3D Model files (.obj, .glb, .stl, .gltf, .splat, or .ply).

    Guides: how-to-use-3D-model-component
    """"""

    EVENTS = [Events.change, Events.upload, Events.edit, Events.clear]

    data_model = FileData

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        clear_color: tuple[float, float, float, float] | None = None,
        camera_position: tuple[
            int | float | None, int | float | None, int | float | None
        ] = (
            None,
            None,
            None,
        ),
        zoom_speed: float = 1,
        pan_speed: float = 1,
        height: int | str | None = None,
        label: str | None = None,
        show_label: bool | None = None,
        every: float | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: path to (.obj, .glb, .stl, .gltf, .splat, or .ply) file to show in model3D viewer. If callable, the function will be called whenever the app loads to set the initial value of the component.
            clear_color: background color of scene, should be a tuple of 4 floats between 0 and 1 representing RGBA values.
            camera_position: initial camera position of scene, provided as a tuple of `(alpha, beta, radius)`. Each value is optional. If provided, `alpha` and `beta` should be in degrees reflecting the angular position along the longitudinal and latitudinal axes, respectively. Radius corresponds to the distance from the center of the object to the camera.
            zoom_speed: the speed of zooming in and out of the scene when the cursor wheel is rotated or when screen is pinched on a mobile device. Should be a positive float, increase this value to make zooming faster, decrease to make it slower. Affects the wheelPrecision property of the camera.
            pan_speed: the speed of panning the scene when the cursor is dragged or when the screen is dragged on a mobile device. Should be a positive float, increase this value to make panning faster, decrease to make it slower. Affects the panSensibility property of the camera.
            height: The height of the model3D component, specified in pixels if a number is passed, or in CSS units if a string is passed.
            interactive: if True, will allow users to upload a file; if False, can only be used to display files. If not provided, this is inferred based on whether the component is used as an input or output.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            show_label: if True, will display label.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.clear_color = clear_color or [0, 0, 0, 0]
        self.camera_position = camera_position
        self.height = height
        self.zoom_speed = zoom_speed
        self.pan_speed = pan_speed
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: FileData | None) -> str | None:
        """"""
        Parameters:
            payload: the uploaded file as an instance of `FileData`.
        Returns:
            Passes the uploaded file as a {str} filepath to the function.
        """"""
        if payload is None:
            return payload
        return payload.path

    def postprocess(self, value: str | Path | None) -> FileData | None:
        """"""
        Parameters:
            value: Expects function to return a {str} or {pathlib.Path} filepath of type (.obj, .glb, .stl, or .gltf)
        Returns:
            The uploaded file as an instance of `FileData`.
        """"""
        if value is None:
            return value
        return FileData(path=str(value), orig_name=Path(value).name)

    def process_example(self, input_data: str | Path | None) -> str:
        return Path(input_data).name if input_data else """"

    def example_payload(self):
        return file(
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/demo/model3D/files/Fox.gltf""
        )

    def example_value(self):
        return ""https://raw.githubusercontent.com/gradio-app/gradio/main/demo/model3D/files/Fox.gltf""
","The code defines a `Model3D` component that allows users to upload or view 3D model files such as .obj, .glb, .stl, .gltf, .splat, or .ply. The component provides parameters for customizing the appearance and behavior of the 3D model viewer, such as setting the background color, initial camera position, zoom speed, pan speed, height, label, and visibility. It includes methods for preprocessing and postprocessing the uploaded files, as well as generating example data for demonstration purposes.","[-0.060005985, 0.051795144, 0.013855797, -0.015108906, -0.021064153, -0.05933766, -0.01878469, -0.020646451, -0.018199906, -0.005883642, 0.015347593, -0.03809449, 0.0101382425, -0.027305827, -0.037139744, 0.009977129, 0.048000015, -0.05618699, 0.039526615, 0.038810555, 0.046830446, 0.0061402307, -0.0066593755, 0.012948786, -0.04525511, 0.013163604, -0.021720544, 0.026255602, -0.022412738, -0.014679269, -0.046830446, -0.03532572, -0.054420702, 0.0015499756, -0.019297868, -0.017734466, 0.000430756, 0.035659883, -0.005012433, -0.02206664, -0.018152168, 0.023057193, 0.011200401, 0.023773255, 0.006211837, 0.038547996, -0.022579819, 0.011755349, -0.03117256, 0.035588276, -0.012996524, -0.006695179, 0.0061342632, -0.025467934, -0.0029209359, 0.005233219, -0.008950774, -0.0031208363, -0.028857294, -0.004916958, 0.013473898, 0.0068861283, -0.041412245, 0.03339235, -0.0026956745, -0.012507214, -0.033487827, 0.008724021, -0.010597716, 0.007649928, -0.014285435, -0.008676283, -0.01512084, -0.0069517675, -0.013664847, -0.016552964, -0.0105201425, 0.042390864, 0.025969177, -0.030337155, 0.0040905033, 0.019787177, 0.021720544, 0.01859374, -0.04527898, -0.00836599, -0.012364002, 0.0029940337, -0.046138253, -0.011474892, -0.06864647, 0.0058359043, -0.023331683, 0.06220191, 0.049456008, 0.018772755, -0.0381661, -0.047594246, 0.02556341, 0.030146206, -0.0071904548, 0.017412238, -0.015156643, -0.05317953, 0.06745303, 0.011301843, 0.018438594, -0.009332674, 0.017233223, 0.0076141246, -0.032246653, 0.010818502, 0.009863753, 0.047880672, -0.02744904, -0.014512188, 0.0038070623, 0.02518151, -0.001328444, -0.03346396, -0.03441871, 0.037975147, 0.025993047, -0.039550483, 0.029835911, -0.017101945, -0.009714573, -0.0451119, -0.015431134, -0.008342121, -0.028737951, -0.0051407274, 0.05036302, -0.0740408, -0.01673198, -0.014130288, -0.05728495, -0.03210344, -0.036208864, 0.04193736, -0.012519148, -0.02001393, 0.014679269, -0.018522134, -0.0155385425, -0.020192945, -0.013772257, 0.053465955, -0.02742517, -0.00093386404, -0.012471411, 0.0043291906, 0.04110195, -0.015920443, -0.010854305, -0.018092496, 0.07108108, -0.020825466, 0.015526609, -0.030504236, -0.022018902, 0.003153656, 0.032175045, -0.0059075104, -0.01681552, 0.043870725, -0.014357041, -0.022496277, -0.031387378, -0.034538053, 0.03926406, 0.030504236, -0.026351077, -0.036710106, 0.035826962, 0.017185485, 0.009117855, -0.06162906, -0.0027821988, -0.03234213, 0.0067309816, 0.025682753, -0.03943114, -0.03043263, 0.0056718066, 0.03437097, -0.040934872, 0.0078110415, -0.021947296, 0.041985095, -0.02479961, 0.01990652, -0.009022379, 0.0068503255, -0.002561413, -0.031148693, 0.015872706, 0.021278972, 0.06072205, 0.013796126, 0.02518151, 0.032031834, -0.0027926413, -0.040171072, -0.014667334, -0.009517656, 0.026494289, 0.056616627, -0.039502747, 0.025682753, -0.010782698, 0.019047245, 0.025897572, -0.022329196, -0.057619113, -0.019655898, -0.019942323, 0.025396328, -0.00493486, 0.021040285, -0.040099464, 0.030193944, 0.045135766, -0.021553462, 0.0083958255, -0.03210344, 0.016445555, -0.026398815, 0.06267928, -0.039359536, 0.032246653, -0.019858783, -0.0042993547, -0.00059858296, 0.030838398, -0.055089027, -0.008049729, -0.028403789, 0.020920942, 0.019381408, 0.0040755854, -0.0056002005, -0.011272008, -0.005991051, 0.0728951, 0.04334561, -0.00667131, -0.030361025, -0.041078083, 0.030289417, 0.023498764, -0.012805574, -0.03133964, -0.048930895, 0.005298858, 0.02047937, -0.042892106, 0.05446844, -0.011516662, -0.036686238, -0.018546002, -0.024680266, 0.00063513196, 0.0005993289, -0.009434115, 0.06850325, 0.0010233718, -0.0061342632, -1.687011e-06, -0.004728992, 0.047021396, -0.0103232255, 0.031649936, -0.02113576, -0.018820493, 0.030838398, 0.023641976, 0.048286438, 0.04055297, 0.011898561, 0.0066593755, 0.025253115, 0.01111686, 0.03499156, -0.04809549, 0.023904532, -5.1839896e-05, -0.0026613632, -0.006939833, -0.044419706, 0.048143227, -0.0339652, -0.017519647, -0.023809057, 0.0053525628, 0.038547996, -0.011427154, -0.018904034, -0.014691203, -0.014416712, -0.0149656935, -0.0033774253, -0.006933866, 0.0071725533, -0.031291906, 0.031506725, 0.007297864, 0.006510196, 0.015813034, -0.027186483, 0.013712585, -0.013378423, -0.035922438, -0.034108415, -0.056855313, -0.01681552, 0.009225264, 0.09261067, -0.025253115, 0.047307823, 0.023152668, -0.012011938, 0.0076379934, -0.060769785, -0.015634017, -0.01999006, -0.039359536, 0.020228747, -0.014643465, -0.058096487, 0.015455002, -0.00999503, -0.032079574, -0.0319841, 0.0683123, -0.022460474, -0.009099953, 0.058860287, -0.018856296, 0.008246646, -0.073706634, -0.0362566, -0.011194434, 0.053131793, -0.0021645953, 0.023343617, -0.015431134, 0.033010453, 0.043632038, -0.04470613, -0.021899559, -0.04038589, 0.006677277, 0.035110902, 0.04642468, 0.011570367, -0.037473906, -0.016385883, -0.0075842887, 0.006283443, 0.0018587773, 0.026494289, -0.015550477, 0.0025405278, -0.012948786, 0.019453015, -0.06721434, -0.03043263, -0.027472908, -0.031626068, -0.021016417, 0.022185983, -0.019238196, -0.0109080095, -0.0005776978, 0.00047550985, 0.019262064, 0.019596227, -0.0177464, -0.039956253, 0.050315283, -0.0045052227, 0.024728004, -0.06010146, -0.01662457, -0.02209051, 0.016278474, 0.0035057196, -0.014034813, 0.0011024369, 0.028427657, -0.01588464, -0.01222079, -0.0035713587, 0.04940827, 0.016206868, 0.07680957, 0.008121335, 0.016326211, -0.004800598, -0.0007425413, -0.009875687, -0.020670319, -0.011325712, -0.01241174, -0.035206378, 0.020467436, 0.02534859, 0.023033325, 0.00099279, 0.04375138, -0.068169095, 0.02386873, -0.019309802, -0.0072799623, -0.014643465, 0.0039204387, -0.03081453, 0.022627555, 0.07342021, -0.010657388, -0.006701146, 0.013700651, -0.013629044, -0.015132775, 0.03890603, 0.047856804, -0.02928693, 0.028857294, -0.06902836, -0.008938839, 0.0128413765, -0.0048065656, 0.037450038, -0.028523132, -0.069076106, 0.01802089, -0.027711594, 0.024000008, 0.033129796, -0.03773646, -0.006939833, -0.011898561, -0.03308206, 0.047880672, -0.03589857, -0.022687227, 0.027019402, -0.020718057, -0.01230433, -0.037688725, 0.035516668, -0.041269034, -0.012686229, 0.04776133, -0.023832927, 0.0087777255, -0.032365996, 0.04453905, 0.008735955, 0.02217405, 0.036686238, 0.01484635, 0.015848836, -0.0064684255, -0.0013015916, 0.0067250147, 0.024942823, -0.029716568, -0.04191349, 0.0012471412, 0.011552465, 0.044204887, 0.008222777, -0.032962717, -0.03193636, -0.002298857, -0.032580815, -0.021553462, 0.007924418, 0.04675884, 0.025253115, -0.029573355, -0.022842374, -0.0048513194, 0.12020292, -0.0012322231, -0.042032834, -0.014703138, 0.01821184, -0.031387378, -0.011612137, 0.020192945, -0.010848338, 0.03172154, 0.010054702, -0.07733469, -0.03456192, -0.015610149, 0.011266041, 0.03475287, -0.005883642, -0.034108415, -0.0033267043, -0.019047245, -0.009237198, -0.0008562907, -0.002750871, 0.011092992, 0.024895085, -0.009672803, 0.0012247642, 0.04356043, 0.017018404, 0.019023377, -0.035397325, -0.020467436, 0.039311796, -0.01878469, 0.011546498, -0.0064326227, 0.037903544, 0.0063431147, -0.033320747, -0.02151766, -0.0017364501, -0.021839887, -0.07151071, -0.018820493, -0.028475394, 0.014297369, -0.06587769, 0.0051854816, -0.041436113, -0.02518151, -0.0018930886, 0.018390857, -0.00034646952, 0.0128413765, -0.036495287, 0.013450029, 0.0035385392, 0.0050810557, 0.008759824, -0.0037473906, 0.03310593, -0.017555451, -0.023820993, 0.0071188486, 0.035612144, 0.03420389, -0.027639989, -0.011092992, -0.004773746, 0.017937351, 0.04754651, -0.029048244, 0.026255602, -0.0053167595, -0.00022246402, -0.0112958765, 0.026900059, 0.03324914, 0.023773255, 0.041292902, -0.022520145, -0.012817508, -0.027950281, -0.017149681, 0.01946495, -0.030910004, 0.027114877, -0.004642468, 0.027377432, -0.027878676, 0.0027628054, 0.015264053, -0.0017573352, -0.014357041, -0.041340638, 0.016015917, -0.008437596, 0.004824467, 0.0054003, -0.035564408, 0.015657887, 0.014261566, 0.02321234, -0.009290903, 0.034084547, 0.011940332, -0.055089027, -0.018295381, 0.005880658, 0.0018065645, 0.00079736474, 0.011815021, -0.0027135762, -0.031673804, -0.010591749, 0.0007667829, -0.003980111, -0.014070616, 0.03231826, -0.007876681, 0.007089013, 0.017328698, -0.014201894, -0.050315283, -0.0027642972, -0.013271013, 0.05995825, -0.015681755, -0.06630733, -0.0026747894, -0.022532081, -0.008115368, -0.0041173557, 0.05690305, 0.003261065, -0.019954259, 0.03833318, 0.06649828, -0.0078050746, -0.00013043887, 0.02857087, 0.00906415, -0.025491804, -0.030575842, 0.009452017, -0.027138745, -0.013975141, 0.04623373, 0.010090506, 0.02149379, 0.022424672, -0.00041695687, -0.025897572, 0.0076618623, -0.042939845, -0.019500751, 0.02094481, 0.04566088, -0.03437097, 0.01747191, 0.007226258, -0.048214834, 0.022508211, -0.01241174, -0.029477881, -0.0038995536, -0.0015872705, -0.01709001, 0.0017826958, 0.0063431147, -0.002386873, -0.016660374, 0.028045757, 0.0080079585, 0.04258181, -0.028117362, -0.0050691213, -0.02704327, 0.0008503235, -0.027592251, 0.02950175, -0.0030850333, -0.019154655, -0.019596227, 0.032151178, -0.020574845, 0.007912484, 7.5289056e-05, 0.026064653, 0.017650925, -0.00570761, 0.00044530098, -0.050601706, 0.020574845, 0.035397325, 0.023498764, -0.004767779, -0.032914978, 0.017901547, 0.017985087, -0.019190459, -0.024537053, 0.009452017, -0.0143809095, -0.036543027, -0.007966189, -0.006736949, 0.009690704, -0.007906517, -0.0103232255, 0.018104432, -0.016290408, -0.033511695, 0.022711096, -0.026923927, 0.01211338, -0.00038712096, -0.04582796, -0.0679304, 0.005991051, -0.013987076, -0.014512188, 0.020718057, 0.058144227, -0.009034314, 0.0031148691, 0.023713583, -0.006969669, 0.009511689, 0.004335158, -0.0048722043, -0.01060965, 0.029859781, 0.013664847, 0.036208864, -0.0432024, -0.009989063, -0.021374447, -0.037044268, -0.0007238938, -0.014929891, -0.03723522, 0.0048274505, -0.020813532, -0.027735464, 0.032986585, 0.03737843, -0.0021556446, -0.016779717, -0.009702639, 0.0047826967, 0.0052570878, 0.0038189967, 0.02346296, 0.012011938, -0.008920938, 0.013879666, -0.0370204, 0.023140734, 0.027353564, -0.03606565, 0.008383892, 0.0013858781, 0.002298857, -0.010949779, 0.014130288, 0.0077692713, -0.007876681, -0.01304426, -0.029764306, -0.012364002, 0.0035206375, -0.032079574, -0.009923425, -0.005406267, 0.036566895, 0.0319841, 0.019870717, -0.009314772, -0.0044574854, -0.018832428, 0.010985583, 0.0147747435, 0.022878177, -0.027353564, -0.0036817514, 0.014512188, -0.013772257, 0.0013515668, 0.046854317, -0.017078076, -0.010287423, 0.008031827, 0.02780707, -0.01637395, -0.010018899, 0.006892096, 0.057046264, -0.040362023, 0.01060965, -0.0006903284, 0.0124475425, -0.0004796123, -0.0030537057, -0.032819502, -0.0085927425, 0.0024286432, -0.015132775, 0.010794633, 0.01010244, -0.034800608, 0.028379919, -0.047856804, -0.04002786, 0.019059181, -0.0074172076, -0.025062166, -0.0141899595, 0.0097503755, 0.0040547005, 0.046448547, -0.009314772, -0.022078576, -0.03563601, 0.008891102, -0.0056598727, 0.026709108, -0.045493796, 0.010764797, -0.021553462, -0.03776033, 0.0043172566, 0.05050623, 0.0036936859, -0.027258089, 0.018748887, -0.021338644, -0.03585083, -0.017865743, 0.011110893, 0.028594738, 0.01060965, -0.0055494797, 0.014822481, 0.008735955, 0.03661463, -0.034705132, -0.0035982109, 0.013378423, 0.023307815, 0.013688716, -0.03420389, 0.01173148, -0.009547492, -0.022878177, -0.031793147, 0.008885135, -0.0067846864, 0.008903036, 0.031649936, -0.006808555, -0.046711102, 0.015228249, -0.025109904, 0.01558628, 0.004833418, -0.015013431, 0.0004568624, -0.009505722, 0.019536555, -0.02534859, 0.00030693694, -0.041030347, -0.022627555, -0.0181283, 0.0003990553, -0.0028045757, -0.0101382425, 0.0033386385, 0.030504236, -0.07313379, -0.03102935, -0.030862268, 0.06258381, 0.013378423, 0.016672308, 0.034633525, -0.0033804087, 0.020049732, 0.044300362, -0.0027613137, -0.01662457, -0.01230433, 0.02151766, 0.0074888137, -0.023546502, 0.009308805, 0.009273001, -0.007918451, -0.00486027, -0.0072501265, -0.0025957243, 0.027711594, 0.013020392, 0.010424668, 0.0016454505, -0.01276977, -0.009619098, -0.009153658, -0.0092551, 0.019453015, 0.005274989, 0.042104438, -0.024083547, -0.01215515, 0.02170861, 0.012041774, -0.0063311807, 0.012543017, -0.038571868, -0.023057193, -0.0145718595, -0.0017051224, -0.018295381, -0.04640081, -0.021768281, -0.035015427, 0.016111393, 0.070126325, -0.0027971168, 0.008729988, -0.007208356, 0.0033923432, 0.0075365514, -0.033416223, 0.0017931383, 0.0036877187, 0.030361025, 0.009702639, 0.0040248646, -0.0020825467, 0.033487827, 0.002913477, 0.030551974, 0.018963706, 0.025038296, -0.01848633, 0.011373449, -0.034705132, 0.02592144, -0.049456008, -0.0017752368, 0.015061168, 0.0019438097, 0.003466933, -0.008151171, 0.022508211, 0.01599205, -0.005773249, -0.0124475425, 0.003714571, 0.006050723, 0.05146098, 0.0062655415, -0.015490806, 0.009213329, 0.02647042, 0.016278474, -0.044371966, -0.04222378, -0.026732977, 0.01878469, 0.0074410765, 0.016875193, -0.039168585, -0.06105621, 0.0005288415, 0.0023659877, 0.036996532, -0.0066534085, -0.037879672, 0.043154664, -0.00821681, -0.01188066, 0.039168585, -0.01014421, 0.036137257, 0.028785687, -0.002964198, -0.016409751, 0.0023689715, 0.004824467, -0.0012232724, 0.028093494, 0.0047707623, 0.0074649453, 0.033845857, 0.012208855, -0.011850825, -0.039240193, -0.030886136, 0.04301145, 0.008515169, -0.004773746, 0.021016417, -0.04229539, 0.027854808, -0.0028836408, 0.0020556943, 0.016827455, -0.004460469, 0.008604677, 0.010311292, 0.015741426, -0.0366385, -0.042557944, -0.04527898, 0.0061700665, -0.015741426, -0.0019945307, -0.032031834, 0.028117362, -0.0143809095, -0.007954254, -0.020956745, -0.002576331, -0.01006067, 0.009213329, -0.0024405776, 0.00995326, -0.08998511, -0.021625068, 0.018820493, -0.014619597, -0.04998112, -0.028403789, -0.0037115875, -0.024871215, -0.022042772, -0.021386381, 0.017794138, 0.04544606, 0.009326706, 0.037044268, 0.018772755, -0.007494781, -0.0029283948, -0.025635015, -0.01599205, -0.0046305335, 0.0293108, 0.018629543, 0.0057404293, 0.016230736, -0.00756042, -0.04508803, 0.005683741, 0.012614624, 0.027830938, -0.008413727, -0.0024793642, -0.0068264566, -0.028881162, -0.0023809057, -0.0013493291, -0.0070770783, 0.04640081, 0.003401294, 0.039669827, 0.016576832, -0.005728495, -0.013987076, -0.018032825, 0.047832932, 0.023832927, -0.009273001, -0.02444158, 0.017066142, -0.021505725, 0.017101945, 0.01654103, 0.024358038, -0.010502241, 0.031817015, 0.014559925, -0.012471411, 0.00455296, 0.039598223, 0.007960222, -0.037975147, 0.03666237, 0.013414226, -0.044634525, 0.034800608, 0.001401542, -0.014094485, 0.0031178528, -0.0066832444, -0.0016096474, 0.029740436, 0.022711096, -0.013509701, 0.009989063, 0.03850026, -0.010663355, -0.039144717, 0.05575735, -0.012877179, -0.021302842, -0.013354554, 0.024262564, -0.010919943, 0.02094481, -0.011486826, -0.0003584039, -0.0032700158, 0.01550274, -0.024728004, 0.008897069, -0.013091998, -0.01613526, -0.002794133, 0.0027314778, 0.00096519175, -0.0057255113, 0.028356051, -0.00018843243, 0.04566088, -0.020228747, 0.021637004, -0.003225262, -0.00045574355, 0.0013381407, 0.011087025, -0.010937845, 0.0030343123, -0.009040281, -0.042868238, 0.013629044, 0.02370165, -0.02047937, 0.016445555, 0.016218802, -0.007900549, 0.009147691, -0.013951273, -0.03303432, -0.016934864, -0.03310593, -0.008879167, 0.007876681, 0.0020631533, 0.0026270521, -0.014416712, -0.02244854, 0.012889114, -0.030886136, 0.0054898076, 0.01935754, -0.006504229, 0.00624764, -0.007936353, 0.029740436, 0.0028150182, -0.02037196, -0.009744409, 0.047474902, 0.017376436, 0.044825476, 0.04446744, -0.00967877, 0.005770265, 0.008533071, 0.00086225785, -0.020658385, -0.031268034, 0.03329688, -0.013485832, -0.017197419, -0.03339235, 0.00551666, -0.005612135, 0.0050004986, 0.015347593, 0.04246247, 0.0031805083, 0.006808555, -0.014786677, 0.046448547, 0.027210351, -0.02132671, 0.013796126, -0.010579814, -0.0025375444, 0.025897572, 0.01615913, -0.022293393, 0.013736454, 0.0027329696, -0.0017483844, 0.013545504, -0.029215325, -0.009159625, -0.0011561416, 0.03962209, 0.014607662, 0.002306316, -0.022770768, -0.0045499764, -0.009607163, 0.0055285944, -0.02359424, 0.004096471, 0.032962717, 0.0055375453, 0.007906517, 0.008043761, -0.017531581, 0.014643465, 0.016576832, -0.0073157656, -0.016767783, -0.022388868, -0.0074649453, -0.04322627, 0.04733169, 0.021971166, 0.015514675, -0.036304336, 0.0037324727, 0.020169076, 0.0416748, 0.039335664, 0.010000997, 0.00093237223, -0.009732475, 0.02179215, -0.00024353563, 0.016385883, 0.0047260085, 0.010687224, 0.01626654, 0.01122427, 0.005334661, 0.03585083, 0.01635008, -0.042534076, 0.0019825962, -0.012865245, -0.0037115875, -0.004027848, 0.01897564, 0.030122336, 0.020145208, 0.026064653, 0.0072680283, -0.0089806095, 0.042199913, -0.00401293, -0.047880672, 0.05069718, 0.00039830944, -0.009905523, -0.034275495, -0.0044843378, 0.040457495, 0.014834415, 0.017507713, -0.010442569, -0.014631531, -0.007870713, -0.0319841, -0.010663355, 0.01241174, 0.0020601698, -0.012543017, -0.022054706, -0.004905024, -0.027305827, 0.032795634, 0.0070174066, -0.04191349, 0.0381661, 0.00028456, 0.0039592255, -0.0076439604, 0.008509202, 0.0077334684, 0.005606168, -0.010896075, 0.025611147, -0.0070233736, -0.029215325, -0.010728993, 0.007691698, -0.019655898, -0.021947296, 0.005970166, 0.0041710604, -0.049694695, -0.0101322755, 0.020777728, -0.043655906, 0.0056479382, 0.024632528, -0.030361025, -0.007554453, -0.00030003738, -0.007500748, 0.016409751, -0.034824476, 0.015359527, -0.005582299, -0.013485832, -0.00033714582, -0.04418102, 0.013187473, -0.015419199, 0.01637395, -0.0055375453, -0.03928793, -0.024775742, 0.026422683, -0.0060328213, -0.016182998, -0.016003983, -0.0018692198, -0.00023663607, -0.023033325, 0.010740928, -0.0030328205, 0.017448042, -0.03133964, 0.0039681764, 0.0050959736, 0.0025196427, 0.018271513, -0.018414725, 0.021923428, 0.02113576, -0.009135757, -0.03079066, 0.001839384, -0.015574346, 0.036137257, -0.019381408, 0.024537053, 0.01550274, 0.0011054205, -0.003923422, -0.041985095, -0.023653911, 0.0354928, -0.008145204, -0.0029806076, 0.021123825, 0.017782204, -0.0040905033, 0.037139744, -0.013247144, 0.020885138, 0.0011591251, 0.003058181, -0.002553954, 0.017173551, -0.010812534, 0.03754551, -0.020025864, 0.027353564, 0.049121846, -0.012471411, 0.004863254, 0.018247643, -0.04262955, -0.0145718595, 0.02329588, -0.00883143, 0.03246147, 0.017137747, 0.04771359, 0.042748895, -0.0052153175, 0.028666344, 0.0451119, 0.0052958746, -0.019930389, 0.022925915, 0.024847347, -0.0082048755, -0.010931878, -0.003035804, 0.008891102, -0.0042963712, -0.03346396, 0.02647042, 0.0319841, 0.030193944, 0.00017025117, -0.031077085, 0.027162613, 0.0064863274, -0.018653411, -0.0014328697, 0.010036801, -0.026637502, -0.022520145, 0.02009747, 0.04530285, 0.020789664, -0.0032282458, -0.010621585, 0.01230433, 0.0047110906, 0.044228755, 0.0024465448, 0.006277476, 0.012781705, 0.009732475, -0.026398815, 0.022544015, 0.026589764, 0.010549978, 0.0181283, -0.02499056, 0.028332181, -0.018820493, 0.022842374, 0.03064745, -0.023200406, -0.00054040295, -0.0107230265, 0.026900059, -0.0039592255, -0.0073694703, -0.04193736, 0.03191249, -0.014249631, 0.019476883, 0.019417211, -0.0061044274, 0.02179215, 0.0143928435, 0.01586077, -0.009947293, -0.019202393, 0.0069816033, 0.0107230265, 0.029907517, 0.00073097984, 0.015550477, -0.01840279, 0.046257596, 0.0146554, 0.0013642471, 0.021720544, -0.0035653915, 0.005716561, 0.0065280977, -0.043727513, 0.0054032835, -0.031649936, 0.04305919, 0.001839384, -0.045923434, 0.011683743, -0.02444158, 0.010603683, 0.003108902, -0.0032580816, -0.039407272, -0.038762815, -0.0034281462, 0.008121335, -0.018390857, -0.0366385, 0.0030343123, -0.03289111, -0.024632528, -0.014977627, -0.00035336908, 0.012387871, 0.0327479, -0.006939833, 0.018164104, 0.009422181, 0.011445056, 0.04831031, 0.015944311, -0.0020661368, -0.03303432, 0.022209853, 0.0024554955, 0.00204376, 0.027329694, -0.0003444183, -0.005850822, 0.005343612, -0.00455296, -0.023415223, 0.04921732, -0.021947296, -0.0014477876, -0.030838398, -0.015096972, 0.005525611, 0.015132775, -0.001320985, 0.036996532, -0.015192446, -0.02608852, -0.01999006, -0.009147691, -0.00072725036, 0.022496277, 0.0049527613, -0.008222777, 0.0001342616, -0.011803087, -0.004896073, 0.008473399, -0.013891601, -0.018641477, -0.00045723535, 0.0005523373, -0.025420196, 0.009159625, 0.0169826, 0.018605674, -0.014727006, -0.01878469, 0.018546002, -0.0055703647, -0.00079065165, -0.009756343, 0.013282948, -0.021720544, -0.0036668335, -0.017304828, -0.042056702, -0.021183498, -0.007852812, -0.0040755854, -0.009481853, -0.020920942, -0.031077085, 0.030933874, -0.016767783, 0.03570762, 0.01361711, 0.0029015425, 0.0107051255]"
../../../gradio,../../../gradio/gradio/components,login_button.py,"""""""Predefined button to sign in with Hugging Face in a Gradio Space.""""""
from __future__ import annotations

import json
import warnings
from typing import Literal

from gradio_client.documentation import document

from gradio.components import Button
from gradio.context import Context
from gradio.routes import Request


@document()
class LoginButton(Button):
    """"""
    Creates a button that redirects the user to Sign with Hugging Face using OAuth.
    """"""

    is_template = True

    def __init__(
        self,
        value: str = ""Sign in with Hugging Face"",
        logout_value: str = ""Logout ({})"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str
        | None = ""https://huggingface.co/front/assets/huggingface_logo-noborder.svg"",
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = 0,
        min_width: int | None = None,
        signed_in_value: str = ""Signed in as {}"",
    ):
        """"""
        Parameters:
            logout_value: The text to display when the user is signed in. The string should contain a placeholder for the username with a call-to-action to logout, e.g. ""Logout ({})"".
        """"""
        if signed_in_value != ""Signed in as {}"":
            warnings.warn(
                ""The `signed_in_value` parameter is deprecated. Please use `logout_value` instead.""
            )
        self.logout_value = logout_value
        super().__init__(
            value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )
        if Context.root_block:
            self.activate()
        else:
            warnings.warn(
                ""LoginButton created outside of a Blocks context. May not work unless you call its `activate()` method manually.""
            )

    def activate(self):
        # Taken from https://cmgdo.com/external-link-in-gradio-button/
        # Taking `self` as input to check if user is logged in
        # ('self' value will be either ""Sign in with Hugging Face"" or ""Signed in as ..."")
        _js = _js_handle_redirect.replace(
            ""BUTTON_DEFAULT_VALUE"", json.dumps(self.value)
        )
        self.click(fn=None, inputs=[self], outputs=None, js=_js)

        self.attach_load_event(self._check_login_status, None)

    def _check_login_status(self, request: Request) -> LoginButton:
        # Each time the page is refreshed or loaded, check if the user is logged in and adapt label
        session = getattr(request, ""session"", None) or getattr(
            request.request, ""session"", None
        )
        if session is None or ""oauth_info"" not in session:
            return LoginButton(value=self.value, interactive=True)  # type: ignore
        else:
            username = session[""oauth_info""][""userinfo""][""preferred_username""]
            logout_text = self.logout_value.format(username)
            return LoginButton(logout_text, interactive=True)


# JS code to redirects to /login/huggingface if user is not logged in.
# If user is logged in, redirect to /logout page. Always happens
# on the same tab.
_js_handle_redirect = """"""
(buttonValue) => {
    uri = buttonValue === BUTTON_DEFAULT_VALUE ? '/login/huggingface' : '/logout';
    window.parent?.postMessage({ type: ""SET_SCROLLING"", enabled: true }, ""*"");
    setTimeout(() => {
        window.location.assign(uri + window.location.search);
    }, 500);
}
""""""
","This code defines a custom `LoginButton` class that inherits from the `Button` class in Gradio. The `LoginButton` class creates a button that redirects the user to sign in with Hugging Face using OAuth. The button has various customizable parameters such as the text displayed on the button, the variant, size, icon, link, and more.

The `activate` method of the `LoginButton` class sets up functionality to check the login status of the user and update the button label accordingly. If the user is not logged in, clicking the button will redirect them to the Hugging Face login page. If the user is logged in, clicking the button will redirect them to the logout page.

Additionally, there is JavaScript code included in the `_js_handle_redirect` variable that handles the redirection logic based on the user's login status.","[-0.04418708, 0.014365346, 0.015820066, 0.034822326, 0.038640965, -0.03368583, -0.00414538, 0.016899738, 0.009523861, -0.04286874, 0.025275737, 0.025480306, -0.025753066, 0.038368203, -0.023730097, 0.025707606, -0.024389267, -0.0023752828, 0.0011471537, 0.029821733, -0.060370825, -0.038140904, 0.028503394, 0.058506966, -0.016751993, -0.030730931, -0.015910985, -0.0058870646, 0.02018422, -0.0049920715, -0.03082185, -0.023866478, -0.038890995, 0.036117937, -0.0072849584, -0.0062109665, -0.006500774, 0.018127158, 0.03293574, -0.0071031186, -0.085373804, -0.035776988, -0.0052676727, 0.06296204, -0.027821494, -0.010626265, -0.0019334689, 0.0049721827, 0.017888494, 0.023661908, -0.07073569, -0.02129799, -0.033503987, 0.012092349, -0.038481854, 0.027730575, -0.029048912, 0.022366298, -0.044300728, -0.0146153765, -0.037527196, -0.0027148118, -0.009052214, -0.0073645134, 0.029708082, 0.037231706, -0.046732835, -0.006693979, 0.05496109, 0.0100693805, 0.09269285, 0.0021792366, -0.0014831311, -0.030208142, -0.01571778, -0.0009901747, -0.017240688, 0.01567232, 0.03393586, -0.046914674, -0.024366537, -0.0002844799, -0.04457349, -0.039845653, -0.03254933, 0.0055319085, -0.04152767, -0.01122861, -0.03377675, -0.040277522, 0.01574051, 0.017604368, -0.03270844, 0.05255171, -0.0075747655, -0.0059666196, -0.018979533, -0.048369396, 0.03211746, 0.047323816, 0.058006905, -0.05682495, 0.016138285, -0.019502321, 0.05414281, -0.038913723, 0.013308402, 0.06159824, 0.0069667385, -0.027321434, -0.01592235, 0.012331014, -0.009842081, -0.005304609, -0.009046531, -0.03914102, -0.016524695, -0.011319529, -0.004847168, -0.04323242, -0.018593123, -0.03050363, 0.04416435, -0.05318815, 0.03202654, -0.03357218, 0.012819708, 0.005708066, -0.045619067, 0.014444902, 0.0063473466, 0.041754972, -0.05032417, -0.06432584, -0.030230872, 0.04509628, -0.021218436, -0.03164013, -0.038254555, 0.00075861305, -0.020286506, -0.07241771, -0.024139237, -0.04589183, 0.014399442, -0.03416316, 0.020025112, 0.03364037, -0.08250982, -0.034526836, -0.022343569, 0.015842795, -0.0053727985, 0.025093896, -0.007557718, 0.015206356, 0.053915508, 0.003136737, -0.015888255, 0.049642272, 0.011796859, -7.618094e-05, 0.05446103, 0.03216292, -0.009245419, -0.013137927, 0.012069618, 0.00057144585, -0.02138891, 0.056961328, 0.029185293, -0.0016550266, -0.017115675, 0.007660003, 0.006949691, -0.019718256, 0.003329942, 0.013137927, 0.0002617499, 0.013558432, -0.0019846114, -0.04345972, -0.009063579, -0.04264144, -0.06168916, -0.01571778, 0.024616567, -0.03236749, 0.026912294, 0.016706534, 0.015774606, -0.004710788, 0.010126205, -0.041323103, 0.009449989, -0.0029605797, 0.01644514, -0.026184935, 0.010194396, -0.0061996016, -0.039118294, -0.0030827534, 0.0023909097, -0.05155159, -0.014092587, 0.047642037, 0.02211627, -0.0033981318, 0.00081969984, 0.020468347, -0.012240093, -0.009467036, 0.012876533, -0.020047842, -0.030389981, -0.010444425, 0.027685113, 0.009069261, 0.016036, 0.017047483, -0.018763598, 0.013978937, 0.02147983, -0.023059564, 0.050687853, 0.015126801, 0.024957517, 0.015797336, -0.031412832, 0.048642155, 0.061461862, -0.015342736, 0.035413306, -0.05286993, 0.035890635, -0.020513806, 0.026730455, -0.020241046, 0.024116507, 0.0037674939, -0.0695992, -0.0024363697, 0.006375759, 0.0044721235, 0.019786447, -0.023752827, 0.0010704399, 0.002457679, 0.028367013, 0.026025826, -0.038572773, 0.014660836, 0.051960733, -0.009467036, -0.037322626, 0.024366537, 0.017683923, 0.022218553, -0.024207428, -0.025230277, 0.021150244, -0.024593838, -0.016615614, 0.044596218, 0.0030230873, -0.014410807, -0.00104771, 0.012353743, -0.020752471, 0.04530085, -0.0115866065, -0.003685098, 0.047642037, 0.008807867, 0.058052365, -0.0019348895, 0.052688092, 0.009387481, 0.009251101, 0.022309475, -0.027866954, 0.005074468, 0.04100488, 0.026253125, -0.03534512, 0.034299538, 0.0019533576, -0.007444068, -0.038868263, 0.022366298, -0.03223111, -0.04432346, -0.011609336, -0.013240213, -0.024343807, 0.036254317, 0.034549568, -0.012137809, 0.00066059, 0.01733161, 0.020320602, 0.006182554, -0.023934668, -0.006671249, 0.04227776, -0.01524045, 0.017899858, 0.05250625, 0.014604012, 0.01733161, -0.030003572, -0.007171308, 0.04300512, 0.024161967, -0.02050244, 0.0018681202, -0.014092587, 0.010859247, -0.015024516, -0.0133993225, -0.006983786, 0.013626622, -0.003665209, 0.013944842, 0.02188897, -0.049051296, -0.009796621, 0.019354576, 0.0030969596, 0.013387958, 0.046641916, -0.027457815, 0.0016962247, 0.0028824455, 0.05346091, 0.003710669, -0.02250268, 0.013831192, -0.05282447, 0.0345723, -0.084010005, -0.006745121, 0.0031850382, -0.0023085135, -0.025616687, 0.03416316, -0.05173343, 0.0115809245, -0.05409735, 0.0048301206, -0.014194871, -0.031412832, 0.008631709, -0.03218565, 0.01708158, -0.036799837, -0.024798406, -0.039641082, -0.024343807, 0.00039919524, -0.014729027, 0.021536656, -0.0027133913, 0.02186624, -0.0056995424, 0.0010846462, -0.0073474655, -0.047505654, 0.074099734, -0.033413067, 0.03393586, 0.04195954, -0.013581162, 0.018047603, -0.069871955, -0.025593957, 0.026480425, -0.042005002, -0.008535107, 0.007131531, 0.043323338, 0.018536298, -0.026935024, -0.034185886, 0.047460195, -0.012842438, 0.058552425, -0.013444782, 0.008762407, 0.023775557, -0.0021820778, -0.030026302, 0.01524045, -0.015172261, 0.013478877, -0.019593243, 0.036367968, -0.033663098, 0.019445498, 0.0086999, -0.024230158, -0.011097912, -0.002521607, -0.009972778, 0.01676336, -0.036890756, 0.021513924, 0.007807748, -0.011097912, -0.008688535, 0.0334358, 0.012569678, 0.047096517, -0.05546115, 0.05405189, 0.015433656, -0.0045800908, -0.039322864, 0.014729027, 0.044255268, -0.0073133707, -0.0018056127, -0.0060973167, -0.06764442, -0.0046028206, 0.006051857, 0.058416046, -0.017808938, 0.020684281, -0.045187198, -0.036027018, 0.05364275, -0.017547544, 0.018490838, -0.001578313, -0.036845297, -0.034208618, 0.020138761, 0.029503513, 0.014263062, -0.003960699, 0.027094135, -0.015899621, 0.047051057, 0.005259149, 0.028162444, -0.011512734, -0.05336999, -0.0429142, -0.040277522, -0.011399085, 0.013285672, -0.027526004, 0.025707606, 0.023548258, -0.009052214, 0.013001548, 0.03079912, -0.024366537, -0.059688926, -0.034390457, 0.012933358, -0.029776271, 0.05687041, -0.012024159, -0.014376712, -0.0088590095, 0.017865764, 0.028457934, -0.068508156, 0.005722272, -0.01088766, 0.021047961, 0.027139595, -0.037959065, 0.033844937, -0.0036367965, 0.019354576, 0.008705582, -0.008626027, -0.0052080066, 0.049324054, 0.012558313, -0.037527196, 0.031753782, 0.06887183, 0.008023682, -0.005537591, -0.026207665, -0.026775915, 0.015479116, -0.010950168, -0.017217958, -0.009751161, -0.012774248, -0.0059211594, -0.024980247, -0.019650066, 0.03466322, -0.039300133, 0.011717304, 0.004798867, 0.0037049865, 0.082055226, -0.015308641, 0.0033810844, 0.010842199, -0.02127526, -0.029594433, 0.02311639, -0.03393586, -0.012433298, -0.012376473, 0.019002263, 0.020320602, -0.011808224, -0.01605873, 0.03157194, -0.004560202, 0.0144676315, -0.049324054, 0.05168797, -0.007830477, 0.0050261663, -0.0072849584, 0.048823994, -0.0026636694, -0.023434607, -0.003756129, 0.0067962636, -0.009711384, -0.011239975, 0.023548258, 0.025593957, -0.024411997, -0.00797254, -0.03445865, 0.008796502, -0.022923183, -0.06659884, 0.022582235, 0.003585654, 0.015297276, 0.016115556, 0.015876891, 0.026616804, 5.171958e-05, -0.039754733, 0.062007383, -0.008637392, 0.04091396, -0.0338904, 0.029594433, -0.026548615, -0.012205998, -0.02127526, -0.00069965713, 0.004227776, -0.0007234526, 0.0068644537, -0.0012941882, 0.0009184332, -0.0038811439, 0.029162563, -0.03266298, -0.030526362, 0.012751518, -0.0046738517, -0.028116984, 0.025889445, -0.0046255505, 0.016479235, 0.0028597154, 0.069871955, -0.0028043112, 0.0118877785, -0.0067735338, -0.036231585, 0.008785137, 0.0061598243, -0.012365108, -0.04339153, -0.017217958, -0.03127645, -0.035936095, -0.014649471, 0.0009766788, -0.0060007144, 0.0029009136, 0.007353148, -0.015467751, 0.01070582, 0.001319049, 0.03368583, -0.024116507, 0.03173105, 0.017638464, 0.024957517, 0.004446552, 0.028457934, -0.018854517, -0.060507204, 0.058461506, -0.0002505625, 0.039800193, -0.036527075, -0.0063700764, -0.008995389, -0.004526107, 0.03445865, -0.010688772, -0.00085024326, 0.012615139, -0.04195954, -0.04120945, 0.027389625, -0.0035401941, 0.011546829, 0.00031306993, -0.0077338754, 0.011796859, 0.011404767, 0.046869215, -0.013478877, 0.011188832, 0.027957873, 0.0021522448, -0.00086231856, -0.0037191927, 0.003756129, -0.014331251, 0.024843866, 0.021025231, -0.0207752, -0.010353506, -0.021832144, 0.035163276, -0.012535583, 0.026639536, -0.026548615, 0.03148102, -0.017047483, -0.0039777462, -0.00039173698, 0.007279276, 0.03423135, -0.0022161729, 0.037868146, 0.015751876, 0.0049608178, 0.0009972778, 0.004250506, 0.029185293, -0.0042760773, -0.009779573, 0.009273832, -0.0152177205, 0.005858652, 0.013910747, 0.014058492, -0.0228209, 0.030003572, -0.040300254, 0.01079674, -0.020002382, 0.024957517, -0.024411997, 0.023025468, -0.014138047, -0.022752708, -0.034504108, 0.028935263, 0.035845175, -0.0034521155, 0.03216292, 0.014217602, 0.0016322966, -0.024161967, -0.01560413, -0.027798764, -0.02136618, 0.0118877785, -0.0006364394, -0.022082174, 0.038618233, -0.03166286, 0.017843034, 0.01009211, 0.012603773, -0.024571108, -0.0212298, -0.007870255, -0.020366061, -0.009779573, 0.006063222, 0.001687701, -0.006711026, -0.016933834, -0.008989707, -0.022366298, 0.028639773, 0.0036481617, 0.036549807, -0.007711145, -0.009137452, 0.018513568, -0.03314031, -0.0019988175, -0.021047961, -0.0063928063, -0.039686542, -0.029026182, -0.020604726, 0.03125372, 0.019013627, 0.018365823, -0.0044863294, -0.005503496, 0.04411889, -0.013524338, -0.023639178, 0.039550163, -0.05618851, -0.026525885, 0.02188897, -0.03223111, -0.036322504, 0.03227657, -0.05041509, 0.008285077, -0.062052842, 0.0036140666, 0.024821136, 0.0076656854, -0.029935382, 0.05541569, -0.0019647225, -0.013240213, -0.00048194657, -0.016388314, -0.006631471, 0.010165983, -0.013581162, -0.027866954, 0.038777344, -0.006233697, -0.00248325, -0.0016862802, -0.020707011, 0.02177532, 0.003585654, 0.006233697, -0.046596456, -0.0018652789, -0.009995508, 0.0018695408, 0.009790938, -0.007387243, -0.056506727, 0.025366656, 0.011609336, 0.04134583, 0.00441814, 0.00883628, -0.024934787, -0.045141738, 0.011518417, 0.024161967, 0.039913844, 0.04275509, 0.023889208, -0.025889445, -0.012069618, -0.021854874, 0.06855362, -0.049505893, 0.010404647, -0.0072963233, 0.030708201, -0.02129799, 0.00071670464, 0.011183149, 0.019127278, -0.007807748, 0.05032417, 0.0054154173, 0.01104677, 0.0071031186, -0.006205284, 0.017388433, 0.022661788, -8.492666e-05, -0.008387363, -0.017854398, 0.036868025, 0.009506813, 0.00776797, -0.06468952, -0.029389862, 0.0048926277, -0.008262347, -0.0008935723, 0.004205046, 0.046869215, 0.0058103506, 0.020422885, -0.025957637, 0.0077338754, -0.005344386, -0.008233935, 0.020832026, -9.615847e-05, -0.037686303, 0.02022968, 0.015570035, 0.0050346903, 0.009228371, -0.028026063, -0.010802423, -0.028730692, -0.005881382, 0.01111496, -0.014876771, 0.009870493, -0.016342854, 0.013490242, -0.021423005, 0.030094491, -0.0019050563, 0.019456862, -0.007398608, 0.005804668, 0.0017587321, 0.02097977, -0.02209354, 0.011899143, -0.017070213, 0.008535107, -0.010416013, -0.007421338, -0.012410568, -0.014388077, 0.0073247356, 0.00822257, 0.013751637, -0.008535107, -0.002699185, 0.00396354, 0.0023426085, -0.018070333, 0.0035458766, -0.014024397, -0.01630876, -0.019615972, 0.029298943, -0.01578597, 0.0061086817, 0.023298228, -0.039231945, -0.0061996016, -0.018308997, 0.020400155, -0.014774486, -0.013058373, 0.036027018, -0.042686902, -0.011524099, 0.013058373, 0.00076997804, -0.011620701, 0.0007770811, 0.012331014, 0.018093063, -0.0019561988, -0.034776866, 0.026389506, 0.017172499, 0.028412474, 0.007159943, -0.020127397, 0.04509628, -0.013047008, -0.016024634, 0.0057279547, 0.02118434, -0.036708917, 0.006892866, -0.01664971, -0.012365108, 0.06496228, -0.04207319, 0.018206714, -0.027639654, -0.046732835, 0.013512973, 0.038254555, -0.027480545, 0.021741224, 0.002952056, -0.0024264252, 0.039754733, -0.0036680503, -0.03264025, -0.023093658, -0.037436277, -0.027980603, -0.020411521, -0.026935024, -0.00822257, -0.0051540225, -0.007250863, -0.057279546, 0.030980961, 0.022593599, 0.01567232, 0.0031878795, -0.010950168, 0.0019078976, 0.029435322, 0.017422529, 0.025798526, -0.039913844, -0.04198227, -0.005477925, -0.019240927, 0.02143437, 0.0131038325, -0.009273832, -0.00867717, 0.001034214, -0.019218197, -0.014081222, 0.006603059, 0.0120468885, 0.0014078381, -0.030435441, -0.005514861, -0.013387958, -0.028367013, 0.014285792, 0.025207546, -0.049505893, 0.024480186, 0.00073091086, -0.0013027119, -0.036913484, -0.0055517973, 0.013944842, 0.016092826, -0.039572895, 0.0014746074, 0.048414856, 0.044596218, -0.014888136, -0.059825305, -0.013763002, 0.029571703, 0.029185293, 0.035549685, -0.009114722, -0.04273236, 0.044005238, 0.0030031984, 0.0015982016, 0.03436773, -0.017797573, 0.022082174, -0.026412236, 0.023127753, 0.0081089195, -0.019581877, 0.04568726, 0.026298586, 0.021741224, 0.021684399, 0.007983905, 0.019229563, 0.007671368, 0.034140427, -0.024912057, 0.007750923, 0.045960017, 0.04157313, -0.012080983, -0.035526957, -0.0059495717, 0.009836398, -0.01608146, 0.0012238673, -0.0016578678, -0.04248233, -0.029117104, -0.027753305, 0.011177467, 0.012581043, -0.007841842, 0.0044295047, -0.013944842, 0.028253363, -0.010711502, -0.011399085, 0.013524338, 0.0076770503, -0.03129918, 0.019627336, 0.0007991008, 0.035026897, -0.036367968, -0.034299538, -0.022445854, 0.040141143, 0.001792827, 0.03173105, -0.022968644, -0.014683566, -0.01553594, 0.0018553345, 0.033503987, -0.025889445, 0.032731168, 0.0017246371, -0.018229444, 0.008182792, -0.0088590095, -0.023389148, -0.007728193, 0.026162205, 0.023752827, 0.010836517, -0.0020513807, -0.007512258, 0.043914318, -0.04539177, -0.008961294, -0.014967691, 0.018104428, 0.03309485, -0.014399442, 0.00068332, -0.035617877, -0.0347996, -0.020081935, 0.009586369, 0.013308402, -0.04080031, -0.014808581, 0.03186743, -0.006273474, -0.014604012, 0.041800432, -0.007199721, 0.015729146, 0.0007401449, -0.008773772, 0.00044430007, 0.023320958, -0.029753542, -0.006296204, 0.019070452, 0.008415774, -0.0422323, 0.019763717, 0.023775557, -0.025207546, -0.0073133707, -0.0033327832, 0.03082185, 0.020638822, 0.035140548, -0.009677288, -0.007091753, -0.008648757, -0.01542229, 0.009359069, -0.027435085, -0.024502916, -0.005293244, 0.0030543408, -0.0063246167, -0.018593123, 0.008205523, 0.011257022, 0.022491314, 0.019138642, -0.0011301062, 0.05368821, -0.003997635, 0.01678609, -0.00075719244, -0.008620344, -0.048823994, 0.018979533, -0.0144676315, 0.014342616, -0.005276196, 0.009910271, 0.021991255, 0.038731884, 0.030980961, -0.0031964032, -0.008035048, 0.006375759, 0.034981437, 0.033026658, -0.0052676727, 0.049915034, 0.0035828128, 0.012080983, 0.0077225105, -0.016115556, -0.020025112, 0.0010391863, 0.0068644537, -0.01635422, 0.010620583, 0.0052818786, -0.01569505, 0.0147631215, 0.025298467, -0.024457457, 0.022854993, -0.0016905422, 0.004043095, 0.015910985, 0.026730455, -0.037436277, 0.0061768717, -0.019695526, -0.010308045, 0.0067053437, 0.020309236, -0.04100488, 0.019195467, -0.013467512, 0.0011840898, -0.00064993533, -0.023616448, 0.012115079, 0.010165983, -0.0027304387, -0.016899738, 0.010268268, -0.011728669, 0.0060007144, 0.009796621, 0.015683684, -0.011035405, 0.041709512, 0.013183388, 0.040277522, -0.018149888, -0.00039670916, 0.0010747018, 0.03045817, 0.038959183, -0.0069894684, -0.013569797, 0.0053614336, -0.016592884, -0.0083987275, -0.020729741, 0.0038214778, -0.023843748, -0.047005598, 0.028776154, 0.017899858, 0.012842438, 0.00134391, 0.01072855, 0.039959304, 0.006870136, 0.0002970879, -0.02277544, 0.012978818, 0.038459126, 0.020286506, -0.012933358, -0.01569505, 0.05100607, 0.030003572, 0.049642272, -0.041800432, 0.011041087, 0.033458527, 0.004778978, 0.010148936, -0.010938803, 0.0029889923, -0.023457337, 0.023730097, 0.001291347, 0.0029463735, -0.006273474, -0.025957637, -0.010586488, -0.03470868, -0.016933834, 0.0064269016, -0.006915596, 0.015149531, 0.011291117, 0.013637987, -0.024298348, 0.00037717557, 0.037140787, 0.04016387, 0.0015271704, -0.010802423, 0.027185054, 0.008324855, -0.002366759, -0.009728431, -0.0063587115, 0.0027943668, -0.012751518, -0.024980247, 0.013115197, -0.019877367, -0.0135470675, 0.006409854, -0.000826803, -0.007353148, -0.006296204, -0.011660479, -0.0014973374, -0.0067678513, 0.025821256, -0.021627575, 0.022729978, -0.027116865, 0.0051852763, -0.016092826, 0.0082566645, 0.030253602, -0.007864573, -0.010802423, -0.008574884, 0.03475414, -0.013967572, -0.0027148118, 0.071553975, 0.0013595369, -0.013353863, 0.0028639773, 0.015172261, 0.029367132, -0.0015427973, -0.011762764, -0.034526836, 0.023036834, 0.0029080166, -0.032435678, 0.015899621, -0.005134134, -0.027821494, -0.037254434, -0.0060689044, 0.00049118063, 0.025071166, -0.020763835, 0.050642394, 0.036322504, -0.033617638, 0.0040061586, 0.025525765, -0.01576324, -0.028094254, -0.011086547, -0.011359307, -0.0017217959, -0.011637749, 0.017854398, 0.0066769314, -0.0033100531, -0.025957637, 0.041459482, 0.009211324, -0.00831349, 0.033799477, -0.023059564, -0.003321418, -0.027366895, -0.009762526, -0.0057592085, -0.018672677, -0.0449599, 0.018740868, -0.023889208, -0.022866359, 0.014672201, -0.0072281333, 0.018899977, 0.003525988, 0.002355394, 0.04380067, -0.021343451, 0.01095585, -0.001630876, 0.012706058, -0.018945437, -0.014865406, -0.014388077, -0.026730455, 0.01592235, 0.014035762, -0.029594433, -0.036299776, 0.0023752828, 0.004310172, 0.012353743, -0.012990183, -0.019400036, -0.022957278, -0.0022204348, -0.02018422, -0.011382037, 0.013524338, -0.0032361806, -0.031026421, 0.049869575, -0.00079625956, 0.008182792, -0.0069212783, 0.014740392, 0.0030600233, -0.007978222, 0.011319529, -0.0023696003, -0.017877128, 0.02277544, -0.035481498, -0.007637273, -0.018604487, -0.009910271, 0.0046596457, -0.009989826, 0.020729741, -0.014047127, 0.005662606, 0.046823755, -0.0019022151, 0.022695884, 0.014888136, 0.026094016, -0.011603654, 0.023127753, 0.0082566645, 0.019672796, 0.020468347, 0.008773772, 0.0070576584, -0.009484083, -0.015956445, -0.034344997, 0.022866359, -0.01594508, 0.034094967, -0.018468108, 0.028207904, 0.029230753, 0.001421334, 0.03534512, 0.031503752, 0.038663693, -0.03329942, 0.039277405, 0.003525988, -0.0049238815, -0.006858771, -0.0038555725, -0.044937167, 0.009722749, 0.012876533, -0.0064723613, 0.018036239, 0.007819112, -0.02163894, 0.016320124, 0.01011484, -0.026980484, -0.015104071, -0.03282209, 0.015229085, -0.054597408, 0.018695407, -0.020832026, -0.0114388615, -0.050733313, -0.015433656, -0.038209096, 0.020763835, 0.03416316, 0.0038754614, 0.027526004, -0.007853208, -0.028048795, 0.020922946, 0.0334358, 0.04050482, 0.018002143, -0.018183984, -0.018956803, -0.019706892, 0.014865406, 0.0124901235, 0.002827041, -0.029026182, -0.04445984, -0.022945914, 0.018661313, -0.011944604, 0.014501726, -0.0071769906, 0.019002263, 0.015592765, -0.035595145, -0.016842915, 0.00528472, -0.004668169, -0.037186246, 0.00776797, 0.0011272649, 0.007870255, 0.026775915, -0.009518178, -0.029799001, -0.017661193, 0.017774843, 0.00822257, -0.038640965, 0.0035487178, 0.027230514, 0.019729622, -0.01079674, -0.027457815, -0.028026063, 0.028526124, -0.0024903533, 0.0025940589, 0.01054671, 0.020070571, 0.018024873, 0.035254195, 0.006205284, -0.0056682886, -0.016001904, 0.017422529, -0.003031611, 0.015638225, -0.005676812, -0.004307331, -0.011132007, 0.041664053, -0.024502916, 0.019445498, -0.0109785795, -0.029480783, 0.04311877, -0.023150483, -0.020922946, -0.014285792, -0.0034407505, -0.0012210261, -0.011990064, -0.011609336, -0.007444068, 0.015331371, -0.00091630226, -0.01567232, -0.0031338958, -0.0055177025, 0.033503987, 0.0072963233, -0.022309475, 0.015751876, 0.023105023, 0.009501131, 0.020422885, 0.021445734, 0.08441914, 0.0032106095, 0.0025969, 0.03198108, -0.025821256, 0.014433537, -0.008569202, -0.007660003, -0.024139237, -0.013376593, -0.018718138, -0.011393402, -0.008415774, 0.027866954, 0.014331251, -0.036549807, 0.027412355, -0.01011484, 0.011097912, 0.0045516784, -0.002672193, 0.007887303, 0.0109728975, 0.010836517, 0.009182911, -0.034776866, -0.013115197, -0.01728615, -0.0057989857, -0.04334607, 0.013876652, -0.047642037, -0.023480069, 0.03182197, -0.00079981115, -0.005315974, 0.034640487, 0.010120523, 0.018183984, -0.05164251, 0.017183864, -0.04252779, 0.059961684, -0.009967096, -0.012456029, -0.0046738517, 0.025934907, -0.026662266, -0.0028213586, -0.023184579, 0.03386767, -0.014490361, 0.00076571613, -0.014729027, 0.007273593, -0.0064609963, -0.056506727]"
../../../gradio,../../../gradio/gradio/components,checkboxgroup.pyi,"""""""gr.CheckboxGroup() component""""""

from __future__ import annotations

from typing import Any, Callable, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import FormComponent
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class CheckboxGroup(FormComponent):
    """"""
    Creates a set of checkboxes. Can be used as an input to pass a set of values to a function or as an output to display values, a subset of which are selected.
    Demos: sentence_builder
    """"""

    EVENTS = [Events.change, Events.input, Events.select]

    def __init__(
        self,
        choices: list[str | int | float | tuple[str, str | int | float]] | None = None,
        *,
        value: list[str | float | int] | str | float | int | Callable | None = None,
        type: Literal[""value"", ""index""] = ""value"",
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            choices: A list of string or numeric options to select from. An option can also be a tuple of the form (name, value), where name is the displayed name of the checkbox button and value is the value to be passed to the function, or returned by the function.
            value: Default selected list of options. If a single choice is selected, it can be passed in as a string or numeric type. If callable, the function will be called whenever the app loads to set the initial value of the component.
            type: Type of value to be returned by component. ""value"" returns the list of strings of the choices selected, ""index"" returns the list of indices of the choices selected.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: Additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: If True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If True, choices in this checkbox group will be checkable; if False, checking will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.choices = (
            # Although we expect choices to be a list of tuples, it can be a list of tuples if the Gradio app
            # is loaded with gr.load() since Python tuples are converted to lists in JSON.
            [tuple(c) if isinstance(c, (tuple, list)) else (str(c), c) for c in choices]
            if choices
            else []
        )
        valid_types = [""value"", ""index""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return [self.choices[0][1]] if self.choices else None

    def example_value(self) -> Any:
        return [self.choices[0][1]] if self.choices else None

    def api_info(self) -> dict[str, Any]:
        return {
            ""items"": {""enum"": [c[1] for c in self.choices], ""type"": ""string""},
            ""title"": ""Checkbox Group"",
            ""type"": ""array"",
        }

    def preprocess(
        self, payload: list[str | int | float]
    ) -> list[str | int | float] | list[int | None]:
        """"""
        Parameters:
            payload: the list of checked checkboxes' values
        Returns:
            Passes the list of checked checkboxes as a `list[str | int | float]` or their indices as a `list[int]` into the function, depending on `type`.
        """"""
        if self.type == ""value"":
            return payload
        elif self.type == ""index"":
            choice_values = [value for _, value in self.choices]
            return [
                choice_values.index(choice) if choice in choice_values else None
                for choice in payload
            ]
        else:
            raise ValueError(
                f""Unknown type: {self.type}. Please choose from: 'value', 'index'.""
            )

    def postprocess(
        self, value: list[str | int | float] | str | int | float | None
    ) -> list[str | int | float]:
        """"""
        Parameters:
            value: Expects a `list[str | int | float]` of values or a single `str | int | float` value, the checkboxes with these values are checked.
        Returns:
            the list of checked checkboxes' values
        """"""
        if value is None:
            return []
        if not isinstance(value, list):
            value = [value]
        return value

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `CheckboxGroup` component in Gradio, which creates a set of checkboxes that can be used as input to pass a set of values to a function or as output to display values, with a subset of checkboxes selected. The component allows customization of choices, default selected values, type of value to be returned, label, info, appearance settings, and event handling methods like `change`, `input`, and `select`. The component provides methods for preprocessing and postprocessing data, generating example payloads and values, and defining API information.","[-0.027038807, 0.003566142, 0.003634153, 0.015459196, 0.002664257, 0.015825864, 0.0121118715, 0.00594357, -0.0010046407, -0.031154951, 0.016854899, -0.01295166, -0.0024557884, 0.013957039, 0.010077456, -0.007108628, -0.023632344, 0.0107575655, -0.010769394, 0.047217377, -0.014016179, -0.025099015, -8.3211824e-05, 0.03401733, -0.020840935, -0.044142094, -0.044023816, 0.020355988, 0.007552178, -0.006777444, -0.05966043, -0.03150979, 0.03401733, -0.01856996, -0.026683968, -0.03247969, 0.022579651, 0.05492923, -0.027133431, -0.021325884, -0.052610945, 0.019078564, -0.006233356, 0.031628072, 0.020450613, 0.047051784, -0.0138979, 0.0277958, -0.017753828, 0.005573945, -0.051428143, 0.035862494, -0.04653135, -0.024673207, 0.023868904, 0.035247438, -0.083552994, 0.018700067, 0.01933878, 0.00934412, 0.016180703, -0.005032814, 0.012159184, 0.027299024, 0.010195736, -0.0066295937, 0.001543554, -0.0012811202, 0.02460224, 0.023963528, 0.047099095, 0.02590332, -0.024767831, -0.006041151, 0.007368844, -0.004438457, 0.026731279, -0.051286206, 0.055733535, 0.025619447, -0.011153804, 0.004586307, -0.035294753, -0.019942008, -0.01667748, 0.011360793, -0.007948416, 0.0045685647, -0.061079793, -0.05019803, -0.03986036, -0.012809724, -0.024578584, 0.07645619, 0.00529303, -0.0105387475, -0.036997985, 0.0072209937, 0.007836049, -0.00023970181, 0.047241032, -0.03938724, -0.030894736, -0.04135069, 0.038866807, -0.040522728, -0.032503344, 0.0408066, -0.0070317457, -0.0019619695, 0.011780688, -0.0027958434, -0.09159603, 0.029215159, -0.030634519, -0.020474268, 0.00795433, -0.06339808, -0.014217256, -0.009900036, -0.020675344, -0.039600145, 0.022461371, -0.048873294, 0.008291428, -0.024862455, -0.016275328, -0.030185055, -0.028197952, 0.00090705976, -0.0008501375, 0.01707963, 0.022153843, -0.037045296, -0.0009920734, 0.030918391, -0.051238894, -0.017505439, -0.041516278, 7.54497e-05, 0.021136636, -0.01484414, 0.044023816, -0.034253888, -0.023360299, -0.011094664, -0.0072801337, 0.029357096, -0.049866848, 0.016949523, -0.00949197, 0.033946358, -0.025004392, 0.004604049, 0.00086418324, 0.049866848, 0.029262472, 0.0059228707, -0.014524784, -0.030468928, 0.010769394, 0.004737114, 0.055023856, -0.012017248, -0.008462934, -0.022224812, -0.0017756785, 0.024507616, -0.0091312155, 0.046625976, -0.00153764, 0.0067064757, 0.004941147, 0.04329048, -0.011124234, -0.008025298, 0.016712964, -0.014501127, -0.006960778, 0.00037812637, 0.018534476, 0.012987143, -0.028032359, 0.008031212, -0.026400095, -0.009444658, 0.010284446, -0.0654325, -0.04004961, -0.028481824, 0.022496855, -0.006558626, 0.008941968, 0.0212904, 0.0074398117, -0.046673287, 0.022272123, -0.009279066, 0.031154951, -0.027133431, 0.05729483, -0.006404862, 0.00020181524, -0.008740892, -0.03470335, 0.0015627745, -0.034821633, 0.008226374, 0.016346296, -0.03150979, -0.00065719325, -0.042296927, 0.0031787748, -0.0019338779, -0.055922784, 0.029735591, -0.014323708, 0.004994373, -0.026234504, 0.0110296095, -0.02826892, -0.011402192, 0.029404407, -0.034987222, 0.02318288, -0.00464249, -0.007498952, -0.009450572, 0.010562404, -0.004657275, 0.033449583, -0.016606512, 0.028647415, -0.004822867, 0.009468314, -0.013022628, 0.028316231, -0.018155979, 0.034040984, -0.0012641174, -0.038653903, -0.003974208, 0.03200657, -0.030705487, 0.009012936, 0.03936358, -0.02211836, -0.024318367, 0.009882294, 0.042793702, 0.004961846, 0.047808774, 0.035294753, 0.001549468, 0.011023696, 0.037352823, 0.002557805, 0.06604755, 0.014217256, 0.017422644, -0.030965703, -0.045845326, -0.033662487, 0.027109776, -0.038653903, 0.05705827, 0.02613988, 0.021491475, -0.0023670786, -0.028339887, -0.05175933, 0.013874244, 0.07475296, 0.008557558, 0.024093635, -0.00331184, 0.030256024, 0.032361407, -0.024412991, 0.014666719, -0.05724752, -0.003279313, 0.026045255, 0.029759247, 0.025406543, 0.020237708, 0.046460383, 0.00618013, 0.019539855, -0.013282844, 0.03247969, 0.03512916, 0.039529175, 0.00046794524, -0.008658096, 0.007989814, 0.031628072, -0.014915108, 0.012703272, 0.00056293886, 0.003444905, 0.022106532, -0.02862376, -0.006126904, -0.0032320009, -0.014323708, 0.006144646, 0.021597927, -0.03257431, 0.0055443747, 0.059518494, 0.055922784, -0.00662368, -0.02495708, -0.08341105, 0.01573124, 0.024176432, 0.002167481, 0.018534476, -0.018735552, 0.0078301355, 0.026045255, 0.022733416, 0.0038677559, -0.04352704, -0.018912971, -0.069028206, -0.015506508, 0.033709798, -0.06226259, 0.031651728, -0.0021423465, -0.005384697, 0.043101232, 0.024862455, -0.029286128, -0.048045333, 0.042959295, -0.058288384, 0.022816211, -0.013046284, 0.00016762494, 0.015837692, 0.033165712, 0.034230232, 0.006523142, -0.035223782, 0.025879664, -0.0094032595, -0.03619368, 0.009722616, -0.014181771, -0.028032359, 0.027772143, 0.014867796, -0.0154710235, -0.01502156, -0.030610863, -0.044331342, 0.024342023, -0.024389336, 0.044425968, -0.004074746, 0.03825175, -0.015896833, 0.003858885, -0.056679774, -0.014583924, -0.02341944, -0.012655959, 0.047264688, -0.030374303, 0.005553246, -0.014347364, -0.064297006, 0.0088591715, 0.046436727, 0.016180703, -0.0060056667, -0.029617311, 0.042131335, -0.023999011, -0.01502156, -0.037400134, 0.012029076, 0.01993018, -0.03541303, 0.058288384, -0.0029821345, -0.00081539276, -0.021124808, -0.009101646, 0.01821512, -0.04530124, 0.05412493, 0.015210807, -0.007297876, 0.050529215, 0.013271016, 0.01185757, -0.0070613157, -0.041942086, -0.031864632, 0.075746514, -0.035554968, -0.029120535, 0.003078237, 0.03531841, 0.018759208, -0.028954944, 0.024673207, 0.04109047, 0.042202305, -0.03169904, 0.0074693817, -0.016866729, -0.018238775, -0.014051664, -0.013732308, 0.044686183, 0.029167848, -0.01898394, -0.0048672217, -0.006115076, 0.024093635, 0.012171011, 0.012324776, 0.013909727, -0.002114255, -0.05724752, -0.04754856, 0.01513984, 0.027275367, 0.026163535, 0.036548518, -0.01963448, 0.035436686, 0.011011868, 0.022011908, 0.026163535, -0.020959215, 0.033662487, 0.017245224, 0.055922784, -0.012348432, -0.012691444, 0.00067234784, -0.035389375, -0.03328399, -0.053557184, -0.025714071, -0.004068832, -0.034040984, 0.018664584, 0.030256024, 0.02033233, 0.054739982, 0.023147395, 0.026873216, -0.021503303, -0.008244116, 0.026731279, 0.018664584, 0.06410776, 0.005535504, 0.015151667, 0.024271056, 0.007552178, -0.0024735304, 0.016109737, -0.029735591, 0.015636615, 0.019965664, 0.055023856, -0.030232368, 0.021160292, 0.0242474, 0.034395825, -0.012171011, 0.00041139263, -0.012017248, 0.0209947, 0.017493611, 0.006103248, 0.043668974, 0.0895143, 0.004462113, -0.0301614, 0.009527454, -0.0079839, -0.009160786, 0.019078564, -0.019291468, -0.01002423, 0.019066736, -0.021869972, -0.039434552, 0.031675383, 0.0017845494, -0.043101232, 0.028174296, -0.004586307, -0.00016328185, 0.06254646, 0.04499371, -0.01138445, 0.028529136, -0.0062747537, 0.007836049, -0.02748827, -0.03378077, -0.003847057, 0.023738796, 0.001454844, -0.004039262, -0.056206655, -0.018416196, 0.006836584, -0.043787256, 0.001445973, -0.04761953, 0.026802247, -0.019326951, -0.005363998, 0.00576615, 0.016062424, 0.0088591715, -0.055071168, 0.024271056, 0.008882828, -0.047406625, -0.00402152, 0.016369952, 0.016535543, -0.05459805, -0.02886032, -0.007291962, -0.009101646, 0.03690336, -0.014016179, 0.004157542, -0.01354306, -0.026660312, -0.0013616985, 0.011112406, 0.04239155, -0.0121237, -0.05237438, 0.027109776, 0.036264647, 0.032692593, -0.07546264, 0.0117333755, -0.018487163, 0.019598996, 0.020663517, 0.018428024, 0.04163456, -0.007640888, -0.027275367, -0.005881473, -0.0013203005, -0.012277463, 0.031533446, -0.043479726, -0.013696824, -0.015719412, 0.005881473, 0.0005252371, 0.024152776, -0.010337672, 0.04558511, -0.010775308, 0.043030262, 0.010473694, 0.0016958395, -0.01230112, -0.021337712, -0.0027721873, -0.000694895, -0.0010726517, -0.025974287, 0.01608608, 0.0091844415, -0.04818727, -0.020202223, 0.017055975, 0.0060559358, 0.018309744, -0.017812967, -0.019788243, 0.002211836, 0.003427163, 0.002637644, -0.014761344, 0.04475715, -0.039410897, 0.020083943, -0.028079672, 0.0022576696, 0.0010157295, 0.010745738, 0.0010327322, 0.00966939, 0.03590981, -0.008362396, 0.017588235, -0.009716702, -0.0204033, 0.009947347, -0.008096266, 0.04482812, -0.021952767, -0.034963567, 0.00080504327, -0.006913466, -0.025406543, 0.0057040527, 0.018191464, -0.018901143, -0.002507536, 0.009515625, 0.003645981, 0.005402439, 0.01780114, 0.045206614, 0.048021678, -0.021716207, 0.039718423, 0.04506468, -0.001806727, -0.029948495, 0.018972112, 0.015861347, -0.004166413, -0.018203292, 0.019457059, 0.0068957238, 0.00083757023, -0.0055946438, 0.040120576, 0.023159225, -0.011390364, -0.013401124, 0.03110764, -0.004172327, 0.019918352, 0.03224313, 0.05890344, -0.002900817, 0.019326951, 0.010136596, -0.00866401, -0.012797896, -0.005074212, 0.0006165345, -0.022224812, -0.014205428, 0.006156474, 0.004521253, -0.03978939, -0.021609755, 0.005801634, 0.0026065954, 0.013389296, 0.04215499, -0.00070487487, 0.0110828355, -0.047524903, 0.029215159, -0.02992484, 0.005361041, 2.4672468e-05, 0.028813008, 0.009308636, -0.003672594, -0.006233356, -0.011017782, 0.022319436, 0.022993632, -0.03730551, -3.3520366e-05, -0.02253234, -0.04707544, 0.016949523, -0.05275288, 0.024933424, 0.009917778, 0.027393648, -0.012454884, 0.013590372, 0.025643103, 0.0020506794, 0.036217336, -0.03224313, 0.041847464, 0.01993018, -0.0071973377, 0.028576447, -0.02170438, 0.03458507, 0.02211836, 0.008717236, -0.05161739, -0.038109817, 0.0070080897, -0.006753788, 0.029215159, -0.008025298, -0.019409748, -0.0017815925, 0.056017406, 0.02294632, 0.009870466, -0.00845702, -0.009651648, -0.009923692, 0.013271016, 0.02618719, -0.019291468, -0.040522728, 0.013282844, -0.042178646, -0.020178568, 0.019882867, -0.07172499, -0.03127323, -0.022792555, -0.051948573, -0.01502156, -0.003060495, 0.002300546, 0.01372048, 0.020131256, -0.024625896, 0.061174415, -0.0044355, -0.020971043, 0.018416196, -0.0071973377, 0.01927964, 0.049299102, 0.011065094, -0.015541992, -0.0021896583, -0.00638712, 0.03281087, -0.0026893914, -0.019066736, -0.0014829355, -0.006398948, 0.0070080897, -0.00452421, 0.004030391, -0.027914079, -0.030729143, -0.0121118715, -0.029167848, 0.003140334, 0.023100084, 0.010101112, 0.028245263, -0.019090392, 0.0009573287, -0.012206496, -0.020107599, 0.0003918025, -0.020024804, 0.019894695, 0.022437716, 0.012691444, -0.015932316, 0.00479034, 0.00328227, 0.046081886, -0.026589343, -0.010710253, -0.037613038, 0.00040584823, 0.03588615, -0.002912645, 0.00579572, 0.0034774318, 0.015222636, 0.016819416, 0.03411195, 0.01786028, 0.02613988, -0.0025090144, -0.038630247, 0.018416196, 0.001868824, -0.037660353, -0.03257431, 0.039600145, 0.029475376, -0.013886072, -0.053841054, -0.014028008, 0.026683968, -0.0437636, -0.03512916, -0.028174296, 0.039410897, 0.057436768, 0.004562651, -0.025406543, -0.057815265, -0.0050002867, 0.005523676, -0.016996836, 0.005928785, -0.006286582, 0.006883896, 0.021574272, 0.005609429, 0.004207811, 0.055496976, -0.016937695, -0.02992484, -0.026920527, -0.025950631, -0.00064647413, 0.011745204, 0.005473407, 0.0301614, -0.024696864, 0.021101153, 0.03936358, 0.00033635873, 0.002126083, 0.008953796, 0.0022074005, 0.03768401, -0.012928003, 0.015837692, 0.002640601, 0.04707544, -0.0091844415, -0.03465604, 0.01916136, -0.014418332, 0.03418292, 0.021526959, 0.0116801495, 0.0011044395, 0.018546304, 0.035578623, -0.000881186, 0.03004312, -0.005452708, 0.0134129515, 0.029853871, -0.018830176, 0.01502156, 0.00055406784, -0.011845741, 0.017221568, 0.00026150967, 0.052232448, 0.009101646, -0.052705567, -0.028671071, 0.033709798, -0.016180703, -0.058146447, -0.014300052, 0.011017782, 0.03087108, -0.012797896, 0.007457554, -0.008409708, 0.023608688, 0.0065172277, -0.0043497467, -0.0023582075, 0.023490408, -0.003344367, -0.0012670745, -0.044615217, 0.009426916, 0.026045255, 0.028410856, -0.008865085, -0.031013016, -0.023253847, -0.022449544, -0.013590372, 0.003956466, 0.00014239803, -0.013235532, 0.03624099, -0.009923692, -0.0090779895, -0.014181771, 0.016535543, -0.020438783, 0.011822086, 0.023703313, 0.0056803967, -0.051286206, 0.01838071, -0.011922624, 0.004861308, 0.004083617, -0.01218284, -0.037707664, -0.005257546, -0.021716207, -0.022851696, -0.0277958, -0.058808815, 0.0030205755, -0.0020122384, 0.022579651, 0.02815064, 0.0010844797, 0.018581787, 0.0027588808, 0.012525852, -0.02878935, 0.024318367, 0.018842004, -0.014997904, -0.03470335, 0.002667214, 0.014122631, 0.0030427529, -0.003920982, 0.0048110387, 0.028552791, 0.018404368, -0.0013823975, -0.02980656, 0.004311306, -0.056348592, -0.026565688, -0.004462113, -0.00774734, -0.017540924, -0.004092488, -0.021834487, -0.02495708, 0.0025622405, -0.010946814, -0.044260375, 0.01584952, -0.0006035976, -0.030823767, 0.014773171, 0.024554927, 0.024531271, 0.084641166, 0.020663517, -0.0183334, 0.0022428844, 0.006422604, 0.008078524, 0.016464576, -0.017186083, -0.05175933, -0.01968179, 0.018014044, -0.015754895, -0.0137914475, -0.014323708, 0.026636656, -0.021030184, -0.00984681, 0.029522687, 0.018487163, -0.003994907, 0.061552912, -0.003362109, 0.004932276, 0.015695756, 0.016003285, -0.033378616, 0.056112032, 0.018357055, 0.020391472, 0.019457059, 0.028316231, -0.030800112, -0.039718423, -0.017966732, 0.015352744, -0.001694361, 0.04196574, -0.007564006, -0.063303456, -0.005591687, 0.010041972, -0.00833874, 0.005417224, 0.018948456, -0.006777444, 0.03967111, 0.03217216, -0.01413446, -0.01709146, 0.013495748, 0.0120054195, 0.005674483, 0.0011731897, -0.011999506, 0.060038928, -0.019587168, -0.026329128, -0.006848412, -0.006783358, 0.029830215, 0.0025385844, -0.004249209, 0.02684956, -0.04452059, 0.007380672, 0.02389256, 0.01975276, -0.040711977, -0.03378077, -0.012023162, 0.04135069, 0.004683888, -0.00396238, -0.009391432, 0.025761385, 0.018475335, 0.008823688, 0.003850014, -0.040877566, 0.023726968, -0.030492583, -0.00254302, -0.009497884, -0.009598422, 0.01046778, 0.00712637, 0.009775842, 0.02377428, -0.022177499, -0.02618719, -0.009474228, 0.04269908, 0.01484414, -0.012655959, -0.0042699077, -0.013259187, 0.0045685647, -0.006103248, -0.00703766, 0.013081768, 0.0016514845, 0.026920527, -0.008208632, 0.001073391, -0.014122631, -0.020060288, -0.010166165, 0.030326992, -0.024140948, 0.025926976, 0.033331305, -0.040309824, -0.005230933, 0.0005792024, -0.033023775, 0.0272044, 0.013353812, -0.003270442, 0.010130682, 0.003270442, 0.013850587, -0.017872108, -0.022780728, -0.020355988, -0.009137129, -0.026542032, 0.02732268, -0.01786028, 0.012691444, -0.0011051787, -0.019847384, 0.03087108, 0.011313482, 0.0107575655, 0.0029082093, -0.006286582, 0.01780114, 0.001502156, -0.037068952, 0.00961025, -0.0066828197, -0.04158725, -0.017907592, -0.016180703, -0.00615056, 0.037116263, 0.005695182, 0.005585773, 0.023573203, -0.00076216675, 0.011076922, 0.004358618, 0.02980656, -0.00573658, 0.0183334, -0.011372622, 0.032976463, 0.020840935, -0.022319436, 0.05724752, 0.001463715, -0.019208672, -0.015683929, 0.001647049, -0.020852763, -0.016961351, 0.024200087, -0.03200657, 0.029049568, -0.018830176, -0.003403507, -0.019953836, 0.03363883, -0.025264608, 0.018936628, -0.02353772, -0.017186083, 0.013945212, -0.030610863, 0.0067360457, -0.009539282, -0.039884016, 0.004497597, 0.027180744, -0.0035158729, -0.004246252, 0.004834695, -0.01253768, 0.0042403378, 0.00030789763, 0.011691978, 0.06434432, -0.03595712, -0.007871534, -0.034372166, 0.023289332, 0.009172614, 0.0027012194, 0.001185757, 0.06245184, -0.0019590124, 0.003243829, 0.040215198, 0.022792555, -0.015151667, -0.011993592, 0.01383876, 6.385272e-05, -0.011822086, -0.03382808, -0.030185055, -0.022082876, 0.0009122345, 0.039647456, -0.022757072, -0.012608647, 0.017245224, 0.053509872, 0.0277958, -0.003323668, -0.027299024, 0.032952808, -0.0035454428, 0.013164564, -0.010680684, -0.02259148, -0.0027751445, 0.019244155, 0.026281815, -0.031178607, 0.005834161, -0.02980656, 0.0143355355, 0.037116263, -0.03938724, -0.003909154, 0.03363883, 0.00688981, 0.0068188417, -0.002492751, -0.01987104, 0.001179843, 0.02862376, -0.034277543, -0.023809765, 0.022981804, 0.008847344, 0.014950592, 0.03411195, 0.003140334, -0.04920448, -0.01756458, -0.006262926, -0.01247854, 0.0111892875, -0.006375292, 0.04501737, -0.0011827999, 0.004382274, -0.016748447, 0.00014138156, 0.008498418, -0.020415127, 0.026542032, -0.0009920734, 0.0038825409, 0.013211876, 0.020651687, 0.018309744, 0.013625856, -0.03647755, 0.03271625, -0.024140948, -0.00039882536, 0.0007033964, -0.019267812, -0.032668937, -0.018889315, 0.008882828, -0.046389416, 0.046862535, 0.0018407325, 0.016346296, -0.0016869685, 0.023218364, 0.03150979, 0.028056016, 0.030823767, 0.014501127, 0.0051629217, -0.013826932, 0.016665652, 0.0144419875, 0.036643144, 0.004426629, 0.029262472, -0.010065628, -0.02288718, -0.008734978, 0.002421783, 0.01797856, -0.003770175, 0.01324736, 0.010657028, 0.027133431, -0.017966732, 0.00751078, -0.055307727, 0.027157087, -0.012632304, -0.001546511, -0.022319436, 0.007238736, -0.02324202, 0.024318367, 0.021917284, -0.014051664, 0.005777978, -0.005091954, 0.015672099, -0.019894695, 0.021018356, 0.014477472, 0.059281934, -0.0289786, 0.0020802494, 0.018238775, -0.024862455, -0.006050022, -0.019078564, -0.030374303, 0.010047886, -0.0124903675, -0.016783932, 0.03974208, -0.033213023, -0.00694895, 0.05459805, 0.00934412, 0.058714192, -0.026305472, 0.0055680308, -0.004042219, -0.000958068, -0.015045215, -0.0248388, -0.015329088, 0.003684422, -0.01679576, -0.016358124, 0.00215861, 0.014524784, -0.012147356, -0.042911984, -0.015825864, -0.005550289, -0.014690376, 0.004604049, -0.0011347487, 0.001993018, 0.031840976, -0.007883362, 0.026281815, -0.011520471, -0.024744175, 0.015258119, 0.021834487, 0.027582895, -0.0120586455, 0.026612999, -0.014986075, -0.01573124, 0.010899502, 0.041137785, 0.022319436, 0.0047282428, 0.012667788, 0.05019803, 0.03460873, 0.014926936, -0.019457059, -0.0120054195, -0.004932276, 0.019267812, 0.036572177, 0.00756992, -0.024554927, 0.038701214, 0.006404862, 0.03224313, 0.02488611, 0.03690336, 0.0003461538, 0.0016899254, 0.014240912, 0.003808616, 0.012916176, -0.0009100167, 0.0103790695, 0.00937369, -0.05918731, -0.021420507, 0.029215159, 0.022212984, 0.016287155, 0.04250983, 0.025453856, 0.023395784, 0.036288302, 0.011254342, -0.00092036626, 0.03848831, -0.0128688635, -1.7245316e-05, 0.0140634915, 0.03832272, 0.0174463, 0.03564959, -0.013472091, -0.00659411, 0.019740932, 0.00019238981, -0.0001332498, 0.007268306, 0.005473407, 0.02033233, 0.003294098, -0.0360754, -0.0045922208, -0.02117212, -0.01413446, -0.03855928, -0.006931208, -0.025714071, -0.05109696, -0.018522648, 0.014855968, -0.031249575, -0.004447328, 0.05535504, 0.049299102, -0.029546343, -0.03744745, 0.02767752, -0.004944104, 0.005905129, 0.03359152, 0.007534436, -0.006363464, -0.015317259, -0.010254876, -0.0016248715, -0.0014807177, 0.033922702, -0.0198119, -0.036927015, -0.014347364, 0.011520471, 0.00304571, 0.02341944, 0.0015154625, 0.019409748, -0.019492544, -0.012324776, 0.024436647, -0.0014511477, -0.0008471805, -0.061884094, -0.007209166, 0.021077495, 0.032432377, 0.035791527, 0.007297876, 0.005674483, -0.010095198, -0.0012737277, 0.014418332, -0.006812928, 0.00822046, 0.008386052, 0.04664963, 0.003161033, 0.0022487985, 0.006186044, 0.038961433, 0.015352744, 0.009840895, -0.0022014864, 0.004905663, 0.012880692, 0.027369991, -0.022603307, 0.036737766, 0.016015112, -0.018108668, 0.008740892, 0.008415622, -0.023656, -0.032527, 0.022082876, 0.024129119, -0.011615096, -0.01874738, -0.004018563, -0.013495748, 0.013980696, 0.030492583, -0.020947387, -0.040451758, -0.0009632427, 0.021337712, -0.012372088, 0.024176432, -0.0026982625, -0.011260256, -0.022047391, 0.003323668, -0.039765734, -0.019610824, 0.0183334, -0.016192531, -0.033331305, -0.029025912, 0.013341984, -0.00863444, 0.015530163, -0.000641669, 0.048210926, -0.001454844, 0.00623927, -0.02016674, -0.022248467, 0.00058105047, -0.0027869726, 0.014016179, -0.007404328, -0.0001434145, -0.019125875, 0.00638712, -0.003595712, 0.032905497, 0.003938724, -0.013590372, -0.0023922129, -0.01040864, -0.032314096, 0.011195201, 0.03493991, -0.020379644, 0.027299024, 0.0027810584, 0.006883896, 0.02850548, -0.0141936, 0.038535625, 0.015530163, -0.027890423, -0.003166947, 0.014974248, -0.023762451, 0.001197585, -0.00224732, -0.029428063, 0.032787215, 0.029404407, 0.013921556, -0.022165671, 0.013531232, -0.019610824, -0.00041878512, -0.001756458, -0.06037011, -0.008031212, 0.01055649, 0.033213023, 0.003876627, -0.00694895, 0.022165671, -0.0019678834, 0.0007606882, -0.0018850875, -0.02488611, -0.00047977324, -0.012549507]"
../../../gradio,../../../gradio/gradio/components,annotated_image.py,"""""""gr.AnnotatedImage() component.""""""

from __future__ import annotations

from typing import Any, List

import gradio_client.utils as client_utils
import numpy as np
import PIL.Image
from gradio_client import file
from gradio_client.documentation import document

from gradio import processing_utils, utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events

PIL.Image.init()  # fixes https://github.com/gradio-app/gradio/issues/2843


class Annotation(GradioModel):
    image: FileData
    label: str


class AnnotatedImageData(GradioModel):
    image: FileData
    annotations: List[Annotation]


@document()
class AnnotatedImage(Component):
    """"""
    Creates a component to displays a base image and colored annotations on top of that image. Annotations can take the from of rectangles (e.g. object detection) or masks (e.g. image segmentation).
    As this component does not accept user input, it is rarely used as an input component.

    Demos: image_segmentation
    """"""

    EVENTS = [Events.select]

    data_model = AnnotatedImageData

    def __init__(
        self,
        value: tuple[
            np.ndarray | PIL.Image.Image | str,
            list[tuple[np.ndarray | tuple[int, int, int, int], str]],
        ]
        | None = None,
        *,
        format: str = ""png"",
        show_legend: bool = True,
        height: int | str | None = None,
        width: int | str | None = None,
        color_map: dict[str, str] | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Tuple of base image and list of (annotation, label) pairs.
            format: Format used to save images before it is returned to the front end, such as 'jpeg' or 'png'. This parameter only takes effect when the base image is returned from the prediction function as a numpy array or a PIL Image. The format should be supported by the PIL library.
            show_legend: If True, will show a legend of the annotations.
            height: The height of the image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            color_map: A dictionary mapping labels to colors. The colors must be specified as hex codes.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.format = format
        self.show_legend = show_legend
        self.height = height
        self.width = width
        self.color_map = color_map
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: AnnotatedImageData | None
    ) -> tuple[str, list[tuple[str, str]]] | None:
        """"""
        Parameters:
            payload: Dict of base image and list of annotations.
        Returns:
            Passes its value as a `tuple` consisting of a `str` filepath to a base image and `list` of annotations. Each annotation itself is `tuple` of a mask (as a `str` filepath to image) and a `str` label.
        """"""
        if payload is None:
            return None
        base_img = payload.image.path
        annotations = [(a.image.path, a.label) for a in payload.annotations]
        return (base_img, annotations)

    def postprocess(
        self,
        value: tuple[
            np.ndarray | PIL.Image.Image | str,
            list[tuple[np.ndarray | tuple[int, int, int, int], str]],
        ]
        | None,
    ) -> AnnotatedImageData | None:
        """"""
        Parameters:
            value: Expects a a tuple of a base image and list of annotations: a `tuple[Image, list[Annotation]]`. The `Image` itself can be `str` filepath, `numpy.ndarray`, or `PIL.Image`. Each `Annotation` is a `tuple[Mask, str]`. The `Mask` can be either a `tuple` of 4 `int`'s representing the bounding box coordinates (x1, y1, x2, y2), or 0-1 confidence mask in the form of a `numpy.ndarray` of the same shape as the image, while the second element of the `Annotation` tuple is a `str` label.
        Returns:
            Tuple of base image file and list of annotations, with each annotation a two-part tuple where the first element image path of the mask, and the second element is the label.
        """"""
        if value is None:
            return None
        base_img = value[0]
        if isinstance(base_img, str):
            if client_utils.is_http_url_like(base_img):
                base_img = processing_utils.save_url_to_cache(
                    base_img, cache_dir=self.GRADIO_CACHE
                )
            base_img_path = base_img
            base_img = np.array(PIL.Image.open(base_img))
        elif isinstance(base_img, np.ndarray):
            base_file = processing_utils.save_img_array_to_cache(
                base_img, cache_dir=self.GRADIO_CACHE, format=self.format
            )
            base_img_path = str(utils.abspath(base_file))
        elif isinstance(base_img, PIL.Image.Image):
            base_file = processing_utils.save_pil_to_cache(
                base_img, cache_dir=self.GRADIO_CACHE, format=self.format
            )
            base_img_path = str(utils.abspath(base_file))
            base_img = np.array(base_img)
        else:
            raise ValueError(
                ""AnnotatedImage only accepts filepaths, PIL images or numpy arrays for the base image.""
            )

        sections = []
        color_map = self.color_map or {}

        def hex_to_rgb(value):
            value = value.lstrip(""#"")
            lv = len(value)
            return [int(value[i : i + lv // 3], 16) for i in range(0, lv, lv // 3)]

        for mask, label in value[1]:
            mask_array = np.zeros((base_img.shape[0], base_img.shape[1]))
            if isinstance(mask, np.ndarray):
                mask_array = mask
            else:
                x1, y1, x2, y2 = mask
                border_width = 3
                mask_array[y1:y2, x1:x2] = 0.5
                mask_array[y1:y2, x1 : x1 + border_width] = 1
                mask_array[y1:y2, x2 - border_width : x2] = 1
                mask_array[y1 : y1 + border_width, x1:x2] = 1
                mask_array[y2 - border_width : y2, x1:x2] = 1

            if label in color_map:
                rgb_color = hex_to_rgb(color_map[label])
            else:
                rgb_color = [255, 0, 0]
            colored_mask = np.zeros((base_img.shape[0], base_img.shape[1], 4))
            solid_mask = np.copy(mask_array)
            solid_mask[solid_mask > 0] = 1

            colored_mask[:, :, 0] = rgb_color[0] * solid_mask
            colored_mask[:, :, 1] = rgb_color[1] * solid_mask
            colored_mask[:, :, 2] = rgb_color[2] * solid_mask
            colored_mask[:, :, 3] = mask_array * 255

            colored_mask_img = PIL.Image.fromarray((colored_mask).astype(np.uint8))

            # RGBA does not support transparency
            mask_file = processing_utils.save_pil_to_cache(
                colored_mask_img, cache_dir=self.GRADIO_CACHE, format=""png""
            )
            mask_file_path = str(utils.abspath(mask_file))
            sections.append(
                Annotation(image=FileData(path=mask_file_path), label=label)
            )

        return AnnotatedImageData(
            image=FileData(path=base_img_path),
            annotations=sections,
        )

    def example_payload(self) -> Any:
        return {
            ""image"": file(
                ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
            ),
            ""annotations"": [],
        }

    def example_value(self) -> Any:
        return (
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png"",
            [([0, 0, 100, 100], ""bus"")],
        )
","The code defines a Gradio component called `AnnotatedImage` that displays a base image with colored annotations on top of it. The annotations can be in the form of rectangles (e.g., object detection) or masks (e.g., image segmentation). This component is not meant for user input and is rarely used as an input component. It takes various parameters such as image format, legend display, image dimensions, color mapping for labels, and more.

The component preprocesses the input data by extracting the base image and annotations from the input payload. It then postprocesses the data by processing the base image and annotations to create colored masks based on the annotations. The output is a tuple containing the base image file path and a list of annotations, where each annotation consists of an image path for the mask and a label.

Additionally, the component provides methods for generating example payloads and values for demonstration purposes.","[-0.035939377, 0.04865678, 0.032912634, -0.011242183, -0.029453503, -0.038050465, -0.00069747, -0.0063110106, -0.022725997, -0.029936764, -0.0075604953, 0.0064127496, -0.0060216896, -0.06709701, 0.00038569496, -0.02965698, -0.022344476, -0.012456695, -0.048834823, 0.040848296, 0.03881351, -0.033751983, 0.0025673255, 0.0404159, 0.0058563636, -0.058754396, -0.043035686, 0.029071981, 0.008946693, 0.019241428, -0.04374786, -0.024099477, -0.006543103, -0.034108073, 0.024493717, -0.0069818534, 0.019597515, 0.02780024, -0.040797424, 0.009328214, -0.014218055, -0.053769175, -0.025409369, 0.046265908, -0.0126474565, 0.013696642, -0.005007477, 0.012469413, 0.003538617, 0.053057, -0.008469789, 0.019813713, -0.01816045, -0.00061997335, -0.008113703, 0.006015331, -0.052497435, 0.015286317, 0.009372725, -0.009607997, 0.025091434, -0.02843611, 0.0005909618, 0.026859153, -0.00025852094, -0.0053126947, -0.021823062, 0.0022700562, 0.011045064, 0.0015721888, 0.08006876, -0.0036657911, -0.0076685934, -0.018834472, -0.016697949, -0.013747511, -0.023209259, -0.00023904741, 0.008685986, -0.012310445, -0.0123867495, 0.034820247, -0.0369059, -0.019292299, -0.0049025584, -0.018618276, -0.012889086, 0.003529079, -0.056058306, -0.016659796, -0.025422087, 0.013251533, -0.031030461, 0.05285352, 0.002441741, 0.011967075, -0.0692844, -0.0018948929, 0.018338494, 0.04977591, 0.010014954, -0.03604112, -0.025943499, -0.06475701, 0.041967425, -0.035100028, 0.011445662, 0.04850417, 0.0068737557, -0.0027676246, 0.007935659, -0.014764903, -0.025981652, 0.018313058, -0.00782756, -0.022636974, -0.037160248, 0.0158586, 0.012749195, -0.021403387, -0.033319592, 0.013505881, -0.021835778, -0.017104905, 0.018300341, -0.030699808, 0.024926107, -0.023361867, -0.023489041, -0.028308935, -0.005716472, -0.020436864, 0.012507564, -0.06480788, -0.02902111, 0.052802652, -0.03797416, 0.00019175457, -0.068775706, -0.0059644612, 0.052700914, -0.014510555, 0.015413491, 0.024023172, -0.030241981, -0.04336634, -0.032607418, 0.05580396, -0.028283501, 0.008685986, -0.003700764, 0.04120438, -0.05206504, -0.04013612, -0.010688976, 0.011655498, 0.033065245, -0.044994168, -0.028766762, 0.0021460615, 0.0198773, 0.0363209, 0.025803609, -0.014052729, -0.039907206, 0.025727304, -0.026681108, -0.0077258213, -0.038686335, 0.02383241, -0.03131024, -0.011146802, -0.04517221, -0.0035354376, -0.0024401515, -0.0039582914, -0.047588516, -0.008298105, 0.0052300314, -0.015731426, -0.0036944053, 0.026655674, -0.041967425, 0.024531867, -0.041865688, -0.008507942, -0.016303709, 0.00019831199, -0.021606866, 0.02530763, 0.006123429, 0.011426586, 0.036804162, -0.003792965, 0.0111531615, -0.05203961, 0.029911328, -0.025142303, 0.022776866, -0.040543076, 0.069182664, 0.026350457, 0.05829657, -0.0017534117, -0.015795013, 0.014777621, -0.0016135203, -0.042908512, 0.012545717, -0.026579369, 0.02383241, -0.03431155, 0.016837839, -0.027240675, -0.032683723, -0.014625012, -0.03838112, 0.030420026, -0.0022112383, -0.0006867397, -0.038152207, 0.019126972, 0.034057204, -0.028105458, -0.003656253, 0.014370664, 0.005741907, -0.006244244, -0.001057134, -0.032022417, 0.032480244, -0.004982042, 0.00044351938, -0.0015920597, 0.032912634, -0.04557917, 0.004781743, -0.061857443, 0.05534613, 0.017092189, 0.0020220669, -0.0027644453, 0.04003438, -0.027393283, 0.002613426, 0.034286115, -0.006113891, -0.03553242, 0.038355682, 0.06445179, 0.010708053, 0.0011032346, -0.007802126, -0.01596034, -0.02319654, 0.04316286, -0.0173211, 0.018567406, -0.055091783, -0.007039082, 0.0010777998, -0.014637729, -0.026121544, -0.019711973, 0.019635668, 0.028130893, 0.009099301, -0.005636988, -2.6856817e-06, 0.00037575947, -0.016837839, -0.009035714, 0.026019804, 0.009067507, 0.01395099, 0.01434523, 0.022573387, 0.025231324, -0.0042348946, -0.015909469, -0.026808282, 0.023946868, -0.022306323, 0.037999596, -0.052446567, 0.011858977, 0.056719612, -0.028080024, -0.010708053, -0.05046265, 0.06831788, -0.009372725, 0.05109852, 0.008170931, 0.025447521, -0.010040388, 0.0041140793, -0.016621644, 0.052751783, -0.01791882, -0.0080946265, -0.018872624, -0.020385996, -0.029097416, -0.023260128, -0.003058535, -0.013238816, 0.018491102, -0.008717779, -0.008641475, 0.048097212, 0.014777621, 0.0007503267, -0.031005025, -0.0328872, 0.012100608, 0.057330046, 0.01517186, -0.013734794, 0.007751256, 0.021327082, -0.0051569063, 0.07111571, -0.05142917, -0.03235307, -0.028181762, -0.058550917, -0.035456117, 0.023501758, -0.04812265, 0.028054588, 0.042399816, -0.019152407, 0.015324469, 0.054837435, 0.0049248138, -0.062417008, 0.017117623, -0.0380759, 0.0037611716, -0.041738514, -0.063790485, 0.022687845, -0.03362481, 0.026019804, 0.0009172426, -0.052293956, 0.0276985, 0.014179903, -0.046087865, 0.0017947434, -0.0112549, -0.007013647, -0.039652858, 0.06541832, 0.003637177, -0.026401326, -0.03578677, -0.051073086, -0.0057927766, -0.053870913, -0.0017263873, 0.0058372873, 0.021568714, -0.024404693, -0.0153753385, -0.04008525, -0.0021985208, 0.045782648, -0.020398712, 0.007357017, 0.06068744, -0.037389163, -0.034718506, -0.06770745, 0.004288944, 0.02549839, -0.02986046, -0.043035686, 0.0015078069, 0.016456317, -0.019126972, 0.03049633, 0.0068101687, -0.01052365, 0.004530574, 0.008304464, 0.0062919343, 0.0069627776, 0.03382829, 0.005786418, -0.040746555, -0.050640695, 0.010949682, 0.0073633757, 0.053413086, 0.017702622, -0.0036435355, 0.038253944, 0.04685091, -0.023145672, -0.017193926, -0.012641097, 0.015693273, -0.034769375, -0.010892455, 0.025523825, 0.027316978, 0.012691967, 0.0012534589, 0.026859153, 0.03489655, 0.03797416, -0.031106764, 0.02795285, -0.009970443, -0.003465492, -0.0063237282, -0.02858872, 0.04707982, 0.0064858748, -0.016621644, -0.014586859, -0.04204373, -0.024404693, 0.033294156, 0.029733285, -0.0056656026, 0.009964084, -0.052751783, -0.0109560415, 0.047410473, 0.0023670264, 0.003738916, 0.023387302, -0.0339809, 0.02114904, 0.011706368, 0.032047853, 0.03792329, -0.016914144, 0.012310445, -0.006050304, -0.011184955, -0.05432874, 0.0097160945, -0.011172238, -0.009779682, -0.043493513, -0.043976776, -0.006206092, 0.020093495, -0.020487735, 0.027622197, 0.029911328, -0.016532622, -0.0022334936, 0.0057069343, 0.0019394038, -0.025650999, 0.0032000162, 0.0065494617, -0.0089403335, 0.04527395, -0.031539157, -0.023069367, -0.024646325, -0.019800995, 0.0062855757, -0.015031969, 0.025244042, 0.028359806, 0.0009744709, 0.0039710086, -0.021619583, -0.045401122, -0.0030331004, -0.04949613, -0.0013885814, 0.013734794, -0.024404693, 0.02154328, 0.009925932, -0.052497435, 0.011935282, 0.12574966, -0.033243287, -0.024989694, 0.0305472, -0.059008744, -0.009188322, -0.016329143, 0.011719085, -0.012959032, 0.0005412844, 0.007414245, -0.0345659, -0.008298105, 0.0030950976, -0.02795285, 0.050081126, -0.027011761, 0.0398309, -0.0063014724, 0.042908512, 0.00039642525, 0.027545892, 0.04390047, -0.0020157082, 0.03647351, -0.014218055, 0.0061647603, 0.012488488, -0.006129788, -0.009855987, -0.025663717, -0.026960893, 0.031208504, -0.039780032, 0.004393862, -0.014090881, -0.0016310068, -0.017867949, -0.01688871, 0.009334573, -0.009646149, -0.023985019, -0.023234693, 0.011051422, -0.029046545, -0.018096862, -0.0035608725, -0.042018294, 0.01620197, -0.06602875, -0.026197847, -0.007058158, -0.018669145, 0.005815032, -0.027367849, 0.004072748, 0.003107815, 0.024926107, -0.01390012, -0.017143058, 0.020424148, -0.0051123956, -0.046723735, 0.019266864, 0.044561777, 0.03431155, -0.049394388, 0.063078314, -0.031691764, 0.02030969, 0.025053281, -0.004616417, -0.0042698677, -0.008170931, -0.020195235, -0.0034273397, -0.0027088067, -0.015324469, 0.0099831605, -0.015527948, 0.033243287, 0.0066766357, -0.024709912, -0.0123867495, 0.021924801, -0.013137076, 0.015578818, 0.004393862, 0.061348747, 0.016901426, 0.010828868, 0.009607997, -0.022675127, 0.010269302, -0.00440658, -0.0028423392, -0.004327096, -0.026070673, -0.027011761, -0.014739469, -0.010701694, 0.010008595, 0.0019298657, 0.009474465, -0.026452195, 0.012870011, 0.019940887, -0.014357947, 0.012672891, -0.004508319, 0.0216323, 0.015324469, 0.0051219338, -0.008310822, 0.024837086, 0.029733285, -0.02599437, -0.03504916, 0.023158388, 0.011025988, -0.028232632, 0.012106966, -0.0070072883, -0.031971548, -0.0069182664, -0.026604805, 0.026757414, -0.057991352, -0.05310787, -0.025968933, 0.019292299, -0.0075350604, 0.04214547, 0.031844374, -0.010638107, 0.021161757, -0.025269477, 0.012399467, -0.019991755, 0.025625564, 0.041916557, 0.020080777, -0.02599437, -0.02975872, 0.019737408, -0.00782756, -0.01429436, 0.030954156, 0.009334573, 0.0127110435, -0.024417412, -0.023450889, -0.025472956, 0.01699045, -0.062467877, 0.015731426, 0.07040354, 0.027622197, -0.013963707, 0.052548304, 0.027495023, 0.009429953, 0.019266864, 0.023069367, -0.022522518, -0.02070393, -0.009747889, 0.003637177, 0.0019123793, -0.010313813, -0.007198049, -0.037312858, 0.004972504, 0.008641475, -0.00067958614, -0.03240394, -0.035125464, -0.023234693, -0.0068356036, -0.014574142, 0.025574695, -0.0011628474, 0.003936036, -0.014625012, 0.012533, -0.005226852, -0.018541971, 0.01845295, 0.021708604, 0.020500451, -0.0027914697, -0.015896752, -0.013760229, 0.0068737557, 0.020538604, -0.011604629, 0.011121368, -0.018287623, -0.028817633, -0.013480446, -0.023514476, 0.034108073, 0.024404693, 0.0035322583, -0.020360561, -0.017880667, 0.034286115, -0.026274152, 0.0020347843, 0.0063555217, 0.064095706, -0.0011628474, -0.0040504923, 0.015604252, -0.030292852, -0.004145873, -0.0005420793, -0.013378707, -0.0065621794, -0.005252287, -0.012876369, 0.007592289, 0.019902734, 0.027138935, 0.0013504291, 0.020246103, 0.025002412, -0.0005909618, 0.008387126, -0.003392367, -0.015489795, 0.027774805, 0.023120236, 0.0061075324, 0.0062569617, -0.016405448, 0.024646325, -0.05575309, -0.00371984, 0.0051537273, -0.05061526, -0.02848698, -0.00048485096, -0.018732732, -0.0007058158, -0.0075604953, -0.039271336, 0.024722628, -0.015922187, -0.03245481, 0.03436242, -0.010065824, -0.010650824, 0.006132967, -0.002491021, -0.008965768, 0.026986327, -0.020246103, -0.028537849, -0.007694028, -0.0014116316, 0.028410675, -0.017371971, -0.025485674, -0.005344488, -0.008043757, 0.009658867, -0.032607418, -0.0060344073, -0.010530009, 0.018491102, 0.0146631645, 0.004117259, -0.0016818764, -0.0008838594, 0.012863652, 0.018618276, -0.0042412537, -0.02236991, -0.03896612, -0.020449582, 0.010313813, 0.029046545, 0.046825472, 0.006530386, 0.025472956, -0.006632125, 0.005363564, -0.01395099, 0.03250568, 0.0026611164, 0.026833717, -0.038431987, -0.012329521, 0.016011208, 0.0023702057, 0.0009776503, 0.020614909, -0.007503267, 0.04097547, 0.03128481, -0.03131024, 0.021797627, -0.011509249, -0.03309068, -0.020856539, 0.007942017, 0.00081272144, -0.032760028, 0.033955462, 0.03420981, 0.007032723, -0.061552223, -0.041560467, 0.0210473, -0.045146775, -0.025943499, -0.03235307, 0.034769375, 0.033116113, 0.040314164, -0.018198602, -0.06897919, -0.0038438346, 0.0014283232, 0.007395169, 0.019979037, -0.019266864, 0.014497838, 0.035761334, -0.022687845, 0.018580124, 0.002163548, -0.029173719, -0.0029281818, -0.036142856, 0.01517186, -0.0039074216, 0.004854868, -0.008870387, 0.04659656, 0.016418166, -0.022535237, 0.010479139, -0.023082085, 0.03314155, 0.020589473, -0.0024926108, 0.018681863, 0.004527395, 0.014383381, 0.005989896, 0.030801548, -0.019432189, -0.012520282, 0.009245551, 0.007865713, 0.009932291, 0.031895243, 0.05453222, -0.038203076, 0.002799418, 0.0040314165, -0.029885894, -0.016558057, -0.01610023, -0.01903795, -0.0110196285, -0.036448073, 0.014548708, -0.053972654, 0.025129586, -0.024557304, 0.010860661, 0.07248919, -0.0050297324, 0.002471945, -0.01434523, 0.020169798, -0.0011286694, -0.04468895, -0.018491102, -0.03148829, 0.014586859, -0.0031141737, -0.007986528, -0.0007010468, -0.012761912, 0.027011761, -0.012399467, 0.008457072, 0.0072298427, 0.019292299, 0.0017486428, -0.015324469, 0.019508494, 0.015489795, 0.034286115, -0.013582185, -0.014548708, -0.037719812, 0.005144189, 0.007674952, -0.031208504, 0.014612295, -0.02795285, -0.0070645167, -0.03543068, 0.012876369, 0.030598069, 0.06765658, -0.026757414, 0.020042624, -0.0034146223, -0.024010455, -0.016125666, -0.018605558, -0.034820247, -0.04827526, -0.03303981, 0.0035640518, -0.045706343, 0.045655474, -0.0005496302, -0.025650999, -0.03675329, -0.04766482, 0.011076857, 0.014917512, 0.04405308, 0.014332511, 0.01360762, 0.00592313, -0.0024798934, -0.009270986, 0.044816125, -0.011458379, 0.034489594, -0.0016325965, -0.007121745, -0.007013647, 0.027622197, 0.01776621, -0.021797627, -0.03273459, 0.006797451, 0.019419473, 0.0024783036, 0.009118377, 0.017359253, -0.05183613, -0.008972127, -0.010135769, -0.0067783752, -0.0038883456, 0.017893385, -0.06724962, -0.00026925124, -0.014370664, 0.005516173, -0.015120991, 0.008991203, 0.020398712, 0.011967075, 0.0305472, -0.022560671, 0.010402835, 0.057940483, 0.01810958, -0.060382225, -0.020589473, 0.039703727, -0.008228159, -0.012304086, -0.0265285, -0.042501558, -0.010593596, 0.006187016, 0.009156529, -0.0070263646, -0.03461677, 0.021962954, -0.00646044, -0.03649894, 0.046901777, 0.019864582, 0.00856517, 0.022242736, 0.024023172, -0.0034146223, 0.038050465, 0.021505127, -0.055244394, 0.042272642, 0.0014036832, 0.039652858, 0.039576553, -0.0047308733, 0.0015539075, -0.060127877, -0.011750879, 0.028359806, -0.039144162, 0.00014267335, 0.0060312278, -0.034387853, -0.020246103, 0.009766964, -0.004037775, 0.016481753, -0.0029742823, 0.014421534, 0.0045591886, 0.010447346, -0.005687858, -0.041484166, 0.028410675, 0.04496873, -0.034921985, 0.0111531615, 0.008425279, 0.021759475, 0.010351965, -0.028359806, -0.0057101133, -0.0023177464, 0.041433293, 0.008132778, -0.039373077, 0.030623503, -0.009646149, -0.0068928315, 0.007185332, -0.018910777, -0.021034582, 0.0021794448, 0.003122122, 0.028232632, 0.010396476, 0.0076431585, -0.007935659, 0.026553934, 0.02673198, 0.009811476, 0.0073824516, -0.02642676, 0.020894691, 0.01424349, -0.033701114, 0.0055575045, 0.046978083, 0.008298105, 0.025053281, 0.025816325, -0.01575686, -0.03789786, -0.019406755, -0.019165125, 0.04718156, 0.013861968, -0.032632854, 0.027418718, -0.012850935, 0.021517843, 0.050055694, -0.025294913, -0.0047944603, -0.0033732909, 0.021568714, 0.00013283723, 0.013416858, -0.005961282, 0.0045146775, 0.0064254673, 0.021899365, -0.035023723, 0.005017015, 0.010256585, -0.016316427, -0.010231149, -0.008387126, 0.036193725, 0.02716437, 0.011490173, 0.009455388, -0.017499145, -0.0103774, 0.007846637, -0.0027135755, -0.025663717, 0.017944254, -0.0100467475, -0.039627425, 0.024048606, -0.03166633, -0.018936211, -0.0076368, 0.0028073664, -0.0050647054, 0.022408063, 0.013671207, 0.017550014, -0.030063938, 0.0045623677, -0.015795013, -0.029606111, 0.026579369, 0.020881973, -0.030903285, -0.022636974, 0.037033074, -0.014688599, 0.02001719, -0.009461747, -0.010797074, 0.017054036, 0.001135823, 0.014955664, 0.00025315577, -0.03520177, -0.0063459836, 0.019902734, -0.005363564, 0.032124158, -0.008329898, 0.03911873, 0.03192068, -0.00450514, -0.023043932, 0.000482069, 0.010860661, -0.011941641, 0.014739469, 0.016570775, 0.024188498, 0.050538953, -0.0059581026, -0.04356982, -0.008368051, 0.020564038, -0.032658286, 0.022929475, 0.01395099, -0.009353649, 0.003974188, 0.011248542, -0.0017518221, 0.010154845, 0.005217314, -0.019165125, -0.021619583, 0.0019298657, -0.021110887, 0.0043684277, -0.024976976, 0.00017168492, -0.03705851, -0.0032190923, 0.0057737003, -0.02570187, -0.0056020156, -0.007223484, 0.03314155, -0.01223414, 0.008062833, 0.008215441, 0.025765456, 0.014065446, -0.005862722, 0.026350457, 0.034108073, -0.014154468, 0.009601639, -0.013582185, -0.0068991906, -0.03209872, -0.0276985, -0.011057781, -0.01032653, 0.022853171, 0.027571326, 0.013963707, -0.0019918631, 0.017168492, 0.013671207, -0.016608927, -0.026274152, -0.015604252, 0.027927414, -0.017982407, 0.032658286, -0.02417578, -0.013238816, 0.0016802867, 0.026782848, 0.023527194, -0.009442671, 0.011496531, 0.010860661, -0.0064636194, 0.0082218, -0.03420981, 0.008437996, 0.029631546, 0.01855469, 0.0073442995, 0.0145995775, -0.0043111993, 0.005878619, 0.016062079, -0.03192068, -0.030648937, 0.020475017, 0.043137427, 0.008577888, 0.014319794, 0.011350281, -0.03156459, 0.0064191087, 0.0075096255, 0.0008266311, -0.01522273, -0.0024639966, 0.050666127, -0.0035131823, 0.0016532622, 0.008457072, 0.015718708, -0.025002412, -0.024112193, 0.045045037, 0.039856337, 0.010549085, -0.013340554, 0.037160248, -0.019457625, -0.0064890543, 0.016634362, 0.03627003, -0.0012979698, 0.032251332, 0.010612672, -0.03855916, -0.038635466, -0.027342414, 0.020258822, -0.06078918, 0.027393283, 0.039627425, -0.01635458, -0.030521763, 0.02780024, 0.028080024, 0.0024989694, 0.017702622, 0.041128077, 0.009442671, 0.00396465, 0.0006136146, -0.012005228, -0.004072748, 0.015884034, 0.024239367, 0.011814467, -0.03431155, 0.0014990637, -0.02070393, 0.03034372, -0.0042571505, 0.0046768244, -0.00083537435, 0.014955664, 0.010250226, 0.021034582, -0.049801346, 0.019699255, -0.020271538, 0.00949354, 0.010682617, 0.03853373, -0.033548504, -0.022891324, 0.030470895, 0.037796117, -0.0002700461, 0.003738916, 0.04018699, 0.012469413, 0.0051569063, -0.024633607, 0.01810958, -0.020055342, -0.020881973, 0.008081909, 0.022204584, -0.0058023147, -0.013531315, -0.019966321, 0.01835121, -0.013861968, -0.045070473, 0.023628933, -0.019495778, 0.00091008906, 0.013505881, 0.003225451, 0.074625716, 0.0071026688, 0.0027723936, 0.0048262537, -0.026960893, 0.01816045, -0.029911328, -0.013327837, -0.017995123, -0.012456695, -0.033853725, -0.041102644, -0.002902747, -0.0056020156, -0.030801548, -0.031615462, 0.015133708, -0.003284269, -0.015693273, -0.010606313, 0.022929475, 0.0035608725, -0.02446828, 0.006733864, -0.021517843, -0.038838945, -0.022458931, -0.018224036, 0.043824166, 0.014370664, -0.016799688, -0.034743942, 0.0056814994, 0.023463607, 0.015388056, -0.0048262537, -0.00949354, -0.01816045, 0.038737204, -0.01625284, 0.011102292, -0.012819141, 0.01919056, -0.0003296589, -0.023972303, 0.0021253957, 0.020347843, -0.018173167, 0.0076431585, 0.0043111993, 0.013480446, 0.04886026, 0.06231527, 0.01791882, 0.0019473522, 0.0068165273, -0.0064095706, 0.016583491, 0.043188296, -0.015057404, 0.011369357, -0.020144364, -0.021899365, -0.010103975, -0.016456317, 0.035990246, 0.008787724, -0.012068815, -0.006495413, 0.023908716, -0.02168317, -0.013289684, 0.027291544, -0.012768271, 0.028614154, 0.0060312278, 0.010135769, -0.017842514, 0.040339597, -0.027825676, 0.0055924775, 0.031971548, 0.010676259, -0.0130353365, 0.018605558, -0.004835792, -0.008348974, -0.018402081, -0.006708429, 0.01360762, -0.0082218, 0.003239758, -0.018821755, -0.012265934, -0.014230773, 0.012424901, -0.033548504, -0.0045591886, 0.0070009297, -0.02774937, 0.014357947, 0.021301648, -0.010084899, -0.017791646, 0.0207548, -0.0008457072, 0.004635493, 0.052548304, -0.004791281, -0.0037707095, -0.0072298427, -0.01824947, 0.017791646, 0.03319242, 0.035150897, 0.007986528, -0.027774805, 0.008596963, 0.02539665, -0.009627073, 0.0057037547, 0.027647631, 0.048478734, 0.017397406, 0.007916583, 0.014675882, -0.025040563, 0.024926107, -0.056414396, -0.02790198, 0.006956419, 0.036880463, 0.020106211, 0.0027183446, -0.00026468092, -0.01927958, 0.0025244043, -0.0056719612, -0.0021349338, 0.0040250574, 0.052344825, -0.006260141, 0.008577888, -0.016227406, -0.015095556, -0.024188498, 0.0030124346, 0.009086584, -0.008444355, -0.0099132145, 0.011210389, -0.0058659017, -0.03441329, -0.009995878, 0.0006469978, -0.0032365788, 0.016901426, 0.015667839, -0.014129033, -0.009449029, 0.03393003, 0.053514827, -0.0107589215, -0.017791646, -0.023234693, -0.034972854, 0.023870563, 0.019521212, -0.0015896752, -0.05099678, -0.0050519877, -0.0052904394, -0.04372243, -0.029275458, 0.008469789, 0.01395099, -0.0014251438, 0.020920126, -0.014650446, -0.02123806, 0.019635668, -0.024455564, -0.026007086, -0.041153513, 0.036600683, 0.018529255, 0.021454256, -0.0141417505, 0.022013823, 0.012564793, 0.009302779, 0.0050519877, -0.026452195, 0.018135015, 0.0126474565, -0.012049738, -0.044561777, 0.0028566464, -0.0027326518, -0.0042698677, -0.004463808, 0.0039169597, -0.033675678, 0.0005917566, -0.012704684, -0.015693273, 0.0017311563, 0.017639035, 0.02324741, -0.028970242, 0.02417578, -0.008088267, -0.014167186, 0.015159143, -0.03553242, -0.0026007087, 0.002926592, -0.011095933, -0.018071428, 0.0011151572, -0.0040059816, 0.012068815, 0.038482856, -0.011375716, 0.0073442995, 0.017333819, -0.020742083, 0.009118377, 0.035964813, -0.018809037, 0.02539665, -0.032073285, -0.08800442, -0.01395099, 0.014981099, -0.006644842, 0.031132199, -0.0305472, -0.0216323, -0.00035429886, 0.0025482494, -0.005296798, -0.007700387, 0.0023177464, -0.009474465]"
../../../gradio,../../../gradio/gradio/components,highlighted_text.py,"""""""gr.HighlightedText() component.""""""

from __future__ import annotations

from typing import Any, Callable, List, Union

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.data_classes import GradioModel, GradioRootModel
from gradio.events import Events


class HighlightedToken(GradioModel):
    token: str
    class_or_confidence: Union[str, float, None] = None


class HighlightedTextData(GradioRootModel):
    root: List[HighlightedToken]


@document()
class HighlightedText(Component):
    """"""
    Displays text that contains spans that are highlighted by category or numerical value.

    Demos: diff_texts
    Guides: named-entity-recognition
    """"""

    data_model = HighlightedTextData
    EVENTS = [Events.change, Events.select]

    def __init__(
        self,
        value: list[tuple[str, str | float | None]] | dict | Callable | None = None,
        *,
        color_map: dict[str, str]
        | None = None,  # Parameter moved to HighlightedText.style()
        show_legend: bool = False,
        combine_adjacent: bool = False,
        adjacent_separator: str = """",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        interactive: bool | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show. If callable, the function will be called whenever the app loads to set the initial value of the component.
            color_map: A dictionary mapping labels to colors. The colors may be specified as hex codes or by their names. For example: {""person"": ""red"", ""location"": ""#FFEE22""}
            show_legend: whether to show span categories in a separate legend or inline.
            combine_adjacent: If True, will merge the labels of adjacent tokens belonging to the same category.
            adjacent_separator: Specifies the separator to be used between tokens if combine_adjacent is True.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            interactive: If True, the component will be editable, and allow user to select spans of text and label them.
        """"""
        self.color_map = color_map
        self.show_legend = show_legend
        self.combine_adjacent = combine_adjacent
        self.adjacent_separator = adjacent_separator
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            interactive=interactive,
        )

    def example_payload(self) -> Any:
        return [
            {""token"": ""The"", ""class_or_confidence"": None},
            {""token"": ""quick"", ""class_or_confidence"": ""adj""},
        ]

    def example_value(self) -> Any:
        return [(""The"", None), (""quick"", ""adj""), (""brown"", ""adj""), (""fox"", ""noun"")]

    def preprocess(
        self, payload: HighlightedTextData | None
    ) -> list[tuple[str, str | float | None]] | None:
        """"""
        Parameters:
            payload: An instance of HighlightedTextData
        Returns:
            Passes the value as a list of tuples as a `list[tuple]` into the function. Each `tuple` consists of a `str` substring of the text (so the entire text is included) and `str | float | None` label, which is the category or confidence of that substring.
        """"""
        if payload is None:
            return None
        return payload.model_dump()  # type: ignore

    def postprocess(
        self, value: list[tuple[str, str | float | None]] | dict | None
    ) -> HighlightedTextData | None:
        """"""
        Parameters:
            value: Expects a list of (word, category) tuples, or a dictionary of two keys: ""text"", and ""entities"", which itself is a list of dictionaries, each of which have the keys: ""entity"" (or ""entity_group""), ""start"", and ""end""
        Returns:
            An instance of HighlightedTextData
        """"""
        if value is None:
            return None
        if isinstance(value, dict):
            try:
                text = value[""text""]
                entities = value[""entities""]
            except KeyError as ke:
                raise ValueError(
                    ""Expected a dictionary with keys 'text' and 'entities' ""
                    ""for the value of the HighlightedText component.""
                ) from ke
            if len(entities) == 0:
                value = [(text, None)]
            else:
                list_format = []
                index = 0
                entities = sorted(entities, key=lambda x: x[""start""])
                for entity in entities:
                    list_format.append((text[index : entity[""start""]], None))
                    entity_category = entity.get(""entity"") or entity.get(""entity_group"")
                    list_format.append(
                        (text[entity[""start""] : entity[""end""]], entity_category)
                    )
                    index = entity[""end""]
                list_format.append((text[index:], None))
                value = list_format
        if self.combine_adjacent:
            output = []
            running_text, running_category = None, None
            for text, category in value:
                if running_text is None:
                    running_text = text
                    running_category = category
                elif category == running_category:
                    running_text += self.adjacent_separator + text
                elif not text:
                    # Skip fully empty item, these get added in processing
                    # of dictionaries.
                    pass
                else:
                    output.append((running_text, running_category))
                    running_text = text
                    running_category = category
            if running_text is not None:
                output.append((running_text, running_category))
            return HighlightedTextData(
                root=[
                    HighlightedToken(token=o[0], class_or_confidence=o[1])
                    for o in output
                ]
            )
        else:
            return HighlightedTextData(
                root=[
                    HighlightedToken(token=o[0], class_or_confidence=o[1])
                    for o in value
                ]
            )
","This code defines a `HighlightedText` component that displays text with highlighted spans based on categories or numerical values. It allows users to specify parameters such as color mapping, legend display, combining adjacent tokens, and more. The component can be interactive, allowing users to select spans of text and label them. The `preprocess` method converts the input data into the required format, and the `postprocess` method processes the output data into the desired structure.","[-0.060267318, 0.0022933555, 0.034782313, 0.0116098365, -0.00945069, -0.04273458, -0.015869135, -0.001093584, 0.016211296, 0.012058184, 0.01762713, 0.029402146, -0.007557012, -0.0062945606, 0.06720491, 0.002358248, -0.022311179, 0.013426823, -0.016046114, 0.04367847, -0.014925246, -0.016789427, -0.0056839823, 0.06767685, -0.027962714, 0.014111143, -0.043135732, 0.05328254, 0.024729894, 0.008754572, 0.0042150547, -0.033106912, 0.02008124, 0.0018420586, -0.024446728, 0.029260563, 0.00074183784, 0.06309899, 0.039336577, 0.012388544, 0.011721923, 0.01745015, -0.040115286, 0.012376746, -0.000749212, 0.035726205, -0.017768713, 0.009899037, 0.023727013, 0.08721536, -0.014394309, 0.0238332, 0.004161961, -0.020152032, 0.014406107, -0.029520132, -0.03990291, 0.03652851, 0.0113856625, -0.0063830502, 0.045495454, -0.028906604, -0.04884626, 0.026428895, -0.020836351, -0.012329551, -0.043702066, 0.0032328202, -0.03506548, -0.024375936, 0.08070252, 0.0030233948, 0.013131857, 0.004477574, -0.005073404, -0.029496534, -0.05134757, 0.0315023, 0.01549158, -0.015727552, 0.019101955, -0.024116367, -0.029000994, -0.031101147, -0.00029570275, -0.008878457, 0.0036959157, 0.020423401, -0.06239107, -0.03905341, -0.011550843, 0.0071971547, -0.036198147, -0.006766505, 0.01234135, 0.035395842, -0.10543241, -0.013415024, -0.024210755, 0.017922094, 0.050026122, -0.014488698, -0.0071558594, -0.010335586, 0.054415207, -0.0015765898, 0.038345493, 0.019196345, -0.009928534, 0.02265334, -0.034168787, 0.044740345, -0.051536344, 0.06753527, 0.032870937, -0.06781843, 0.00038050528, -0.06361812, 0.018075477, -0.01336783, 0.008105648, -0.031431507, 0.009138026, 0.00051139615, -0.04861029, 0.0052975775, 0.015727552, -0.049601372, -0.026924437, -0.024729894, -0.02025822, -0.008082051, -0.013426823, -0.0125419265, -0.046415746, 0.04945979, -0.05710529, 0.033602454, -0.05559507, 0.043041345, -0.018087275, -0.009893138, 0.048279926, 0.016128706, -0.029236965, -0.03669369, -0.017851302, 0.04988454, -0.023030894, 0.03055841, -0.0050527565, 0.017320365, -0.033767633, 0.0017904397, 0.012589121, -0.013650997, 0.050167706, 0.037000455, -0.026027743, -0.049601372, 0.0036310235, -0.022948304, 0.0011997715, 0.022299381, 0.005881609, -0.019467713, 0.0022417367, 0.0021414484, -0.026948035, -0.001332506, 0.0059700985, -0.070414126, -0.015585969, -0.0014106717, 0.0024216655, 0.018311448, -0.024824284, 0.00579017, 0.0039938306, -0.004613258, -0.0018273103, 0.0374252, -0.050592456, 0.019621095, -0.01310826, -0.011049402, 0.0120817805, -0.0017801159, 0.003557282, 0.033059716, 0.000193571, -0.010052419, 0.006288661, 0.0076337033, -0.031431507, -0.020789158, 0.0765966, 0.029142577, -0.0035336849, 0.0033685043, 0.001974793, -0.002987999, -0.0077988836, 0.034097996, -0.0017093242, 0.04197947, -0.05304657, -0.004613258, 0.008666082, -0.060031347, 0.02716041, -0.0095450785, 0.036198147, 0.054462403, -0.04535387, -0.054839958, -0.019798074, 0.012695309, 0.0104712695, 0.015987122, -0.025296228, 0.009486086, 0.029567325, -0.031691078, -0.009946232, 0.0035218862, 0.0136745935, 0.019337928, -0.021237506, 0.008023057, 0.018677205, -0.021638658, 0.05601982, 0.010783933, 0.0054657077, -0.060125735, 0.0021591464, 0.0031708775, 0.06890391, 0.0023022045, -0.030888772, -0.024104567, 0.043536887, 0.0061352793, 0.033342883, 0.028552646, -0.02316068, -0.03506548, 0.0100052245, 0.055736654, 0.049506985, -0.0063122585, -0.01940872, -0.021815637, 0.0028906604, -0.013308836, -0.01855922, 0.049176622, 0.02546141, -0.03855787, -0.028835813, -0.05771882, -0.037330814, -0.016411873, -0.03872305, 0.0029865243, 0.010022922, 0.016435469, -0.021591464, -0.045755025, -0.0035690807, 0.00919702, 0.036056563, 0.00024721783, -0.009834144, -0.01166293, 0.03180906, 0.04603819, -0.009250114, 0.013816177, 0.006477439, 0.024895076, 0.026098534, 0.030110063, -0.022488158, -0.008778169, 0.01838224, -0.022311179, 0.00048226834, -0.046934888, 0.008713276, -0.020364407, 0.029307757, 0.013839774, 0.006801901, 0.069989376, 0.015373594, -9.770727e-05, -0.0012159946, -0.041389536, -0.0028464156, 0.0011680628, -0.0019408719, -0.02536702, 0.03515987, -0.00085687434, 0.0017756914, 0.0012366422, -0.022016214, -0.018240657, 0.024446728, -0.04299415, 0.03133712, -0.054179236, -0.01284869, -0.013521211, 0.056067012, 0.036670092, -0.011179186, 0.023113485, -0.0052238363, -0.006418446, 0.063287765, -5.8578273e-05, 0.0120817805, -0.034617133, -0.036198147, 0.028906604, 0.031714674, 0.02654688, 0.032281008, -0.017072594, -0.022676935, 0.017320365, 0.019939657, -0.06102243, -0.0020883547, 0.023538236, -0.060125735, -0.0014386935, -0.017674323, -0.049082235, 0.0026945085, -0.03872305, 0.032375395, 0.008801766, -0.04280537, 0.0024423131, -0.0060998835, -0.019455913, -0.03454634, -0.005386067, 0.04214465, -0.05823796, 0.0049229716, -0.030369632, -0.06347654, -0.012884086, -0.0109314155, 0.01965649, 0.014394309, 0.008011259, 0.0033596554, 0.019219942, -0.0053064264, -0.023868596, -0.053848874, -0.013002072, -0.025225436, -0.026523285, -0.0021075273, 0.004928871, 0.039454564, -0.03900622, -0.042592995, -0.0143589135, 0.005890458, -0.023550034, 0.0036841172, 0.0003489809, 0.028717827, -0.04603819, -0.026358103, -0.027962714, -0.013131857, 0.005908156, 0.04417401, -0.01055386, -0.032139424, 0.020482393, 0.028812215, -0.0014527043, -0.021910027, 0.025414214, 0.03369684, 0.040445648, -0.05049807, 0.034569938, 0.04861029, 0.023962986, 0.0040823203, -0.027679548, -0.013839774, 0.0005729702, 0.024446728, 0.018606415, 0.0037578584, 0.014465101, 0.008896155, -0.017981088, 0.03685887, -0.025225436, 0.03600937, 0.005285779, 0.029472938, 0.031266328, 0.01625849, -0.0071971547, -0.04894065, 0.0037755563, -0.012270559, -0.037094843, 0.03251698, -0.06163596, 0.0042150547, 0.032658562, 0.033578854, -0.04705287, -0.014311719, -0.011727822, 0.0031266327, 0.012648114, 0.07456724, 0.052716207, -0.01004062, -0.03471152, 0.01745015, 0.03669369, 0.04698208, -0.05432082, -0.00012978475, -0.0073741334, -0.0055011036, -0.032210216, 0.0054834057, -0.009668964, 0.0069729807, -0.055453487, -0.051961094, -0.07013096, -0.010105513, 0.064562015, -0.024588311, 0.0010522889, 0.014783663, 0.015703956, 0.005132397, 0.03669369, -0.0073505365, 0.021508873, 0.009757454, -0.001642957, -0.01839404, 0.035962176, -0.0332013, 0.0011894477, 0.023455644, 0.0043182927, 0.052999374, -0.005480456, 0.060503293, 0.04655733, 0.04410322, -0.011639332, 0.007031974, 0.01514942, 0.048799068, -0.0014106717, -0.0068549947, -0.011603937, 0.03784995, -0.031455103, -0.010984509, -0.00825903, 0.04155472, 0.09486086, -0.009745655, 0.00055564096, -0.0024924572, 0.00042143173, -0.0013760134, -0.016789427, -0.0074154288, -0.010772134, 0.0036074263, 0.0015765898, -0.04403243, -0.023703415, 0.024045575, -0.033602454, 0.052810594, -0.013804378, -0.011456454, 0.020152032, 0.014500497, -0.012494732, 0.031195534, -0.003982032, -0.018877782, 0.015633164, -0.012317752, -0.027632354, 0.02179204, -0.010258894, -0.017178781, -0.016541656, 0.0042946953, 0.01609331, -0.036622897, -0.022606144, -0.00085392466, 0.026594076, 0.002179794, -0.014193732, -0.036835272, -0.010135009, -0.008518599, -0.061069626, -0.045825817, -0.009645367, -0.017155185, -0.016400073, 0.022912908, 0.012990274, -0.04809115, 0.018004686, -0.039218593, -0.0014962117, 0.003855197, -0.01132667, 0.015196615, 0.01736756, 0.022452762, -0.002791847, -0.0049583674, 0.0060998835, 0.02569738, 0.0034776414, -0.024352338, 0.037165634, 0.013190851, -0.052102678, 0.04530668, -0.05677493, 0.0010530263, -0.0056131906, -0.0051441956, 0.029260563, -0.027939118, -0.01913735, 0.022393769, -0.0195739, -0.0013973983, 0.011409259, -0.009267812, 0.011291274, 0.026381701, 0.027113214, -0.0059583, 0.022287581, -0.014689274, -0.014252726, -0.00774579, 0.0055276505, 0.017261373, -0.027537964, -0.00842421, -0.026428895, 0.008725075, 0.016754031, -0.02017563, 0.027514368, 0.013415024, -0.036929663, -0.037094843, -0.007114564, 0.013603802, -0.0018686055, -0.018747997, -0.029732507, -0.008135145, -0.012636315, 0.002825768, 0.048563093, -0.028458256, -0.0349003, 0.019019365, -0.049129426, 0.0035336849, 2.9335226e-05, 0.02143808, -0.015597767, -0.0170254, 0.0008671981, -0.04094119, 0.031289924, -0.012600919, 0.020741964, -0.011126093, 0.004790237, -0.04407962, 0.0028301924, -0.012730705, -0.013320635, -0.0063299565, 0.016706837, 0.005250383, 0.0021842185, 0.030605605, -0.031714674, 0.0055040536, 0.009568675, -0.004920022, -0.024375936, 0.02349104, 0.0053418223, 0.029425742, -0.015739352, 0.06762966, -0.008666082, 0.0059789475, -0.017497344, 0.018181665, 0.008300325, -0.017733317, 0.010152707, 0.001566266, 0.0046752007, 0.026617672, -0.024069171, 0.013143656, 0.023089888, 0.013639198, 0.007910971, 0.050262094, 0.022440964, 0.010182204, 0.010341485, 0.024187159, 0.014819059, 0.025296228, 0.0027962716, 0.0019983903, -0.0019969153, 0.01310826, 0.013733586, 0.0043448396, -0.0012086205, 0.014571289, 0.00019135876, -0.014712871, 0.009462488, -0.010247096, 0.011196884, -0.041271552, 0.023184277, 0.01795749, -0.01669504, 0.017768713, 0.026688464, -0.051677927, 0.02935495, 0.021744845, -0.0020559086, 0.024777088, -0.006436144, -0.010429975, -0.04110637, -0.012789697, 0.023219673, -0.035867788, 0.020423401, -0.034263175, -0.032988925, -0.014842656, 0.0053506712, 0.040020898, 0.032988925, 0.017391156, -0.05177232, -0.0023125284, -0.008005359, -0.0005925116, 0.0005239322, 0.034853105, -0.00035782985, -0.017237775, 0.010636451, -0.011415159, -0.028835813, -0.0073505365, -0.0093032075, -0.0070260745, -0.023207873, 0.0038404488, 0.0037018151, -0.025650186, 0.024446728, 0.03173827, -0.009668964, 0.0055364994, 0.016789427, 0.002204866, -0.03454634, -0.007987661, 0.0048315325, 0.0032298705, 0.028104298, -0.009250114, -0.027561562, -0.02791552, -0.025343422, -0.03124273, -0.027632354, -0.0025145796, -0.010783933, 0.02340845, 0.011303072, 0.0052975775, 0.018193463, 0.010536162, -0.024918672, 0.017497344, -0.004070522, -0.013155455, 0.014748267, -0.011792715, -0.024989463, 0.0051117493, -0.0029127828, -0.00944479, -0.0025942202, 0.002486558, -0.0030101214, -0.008034856, -0.0111555895, -0.00014324255, -0.012471135, -0.017579935, -0.025744576, -0.02935495, 0.007509818, 0.009379898, -0.0022461612, -0.013438622, -0.013391427, -0.017509144, 0.0051618936, 0.0022786073, 0.006158876, -0.024753492, 0.029661715, -0.0068726926, 0.017166983, -0.018747997, 0.005430312, 0.03124273, 0.007462623, -0.014028552, 0.010512565, 0.03669369, -0.032729354, -0.0068313973, -0.017037198, 0.041861482, -0.050781235, -0.00749212, -0.034263175, 0.03180906, 0.007226651, -0.008300325, -0.018500227, -0.019349726, -0.011373864, 0.01421733, -0.005220887, 0.0023611975, 0.004616208, -0.011096597, -0.07211313, -0.0072325505, -0.007887374, 0.03225741, -0.0021001534, -9.378976e-06, -0.009663065, 0.021355491, -0.08315663, -0.01857102, -0.0032121725, -0.015161219, -0.0090790335, -0.039289385, 0.013627399, 0.045259483, -0.0012418041, -0.024777088, 0.014488698, -0.0072148526, -0.018795192, 0.021402685, -0.022688735, -0.019975053, 0.006076286, -0.027703146, -0.04143673, -0.02392759, -0.0037401605, -0.0027269546, -0.00089153275, -0.008636585, -0.037991535, -0.009220617, -0.0014313194, -0.004996713, 0.0046811, 0.06111682, 0.002493932, -0.009698461, -0.002766775, 0.026428895, 0.0013066964, 0.01549158, 0.009486086, -0.010276592, -0.0009446265, -0.0053241244, 0.025201838, -0.0037018151, -0.014040351, -0.002094254, 0.024080971, 0.010547961, 0.0034746919, 0.023986582, 0.0042504505, 0.00050144107, -0.021756643, 0.012246961, 0.055736654, 0.028245881, 0.019904261, 0.0036251242, -0.034569938, 0.0065482305, 0.0045070704, 0.050262094, -0.0031472803, -0.020918943, 0.046061788, -0.0143589135, 0.009952131, -0.008919752, -0.013568406, 0.02749077, -0.027254798, -0.02706602, 0.021426283, -0.002280082, -0.005209088, -0.022358373, 0.018995767, 0.0011393037, -0.008099749, -0.008483203, -0.020270018, 0.013072864, 0.046864096, -0.020388005, -0.0049406695, 0.025485005, 0.032658562, 0.029142577, 0.020199226, -0.022547152, -0.030062867, 0.004825633, 0.042852566, -0.004669301, -0.01488985, -0.0038168516, -0.0058344146, -0.024470326, 0.0027815232, 0.04025687, 0.031077549, -0.014252726, 0.060031347, 0.016671441, -0.02954373, -0.01923174, -0.06593066, -0.030534813, -0.01575115, -0.0052621816, -0.008831263, -0.031195534, 0.01225876, 0.00021643082, -0.046698913, -0.025956951, -0.0315023, 0.008801766, 0.031714674, 0.025980547, 0.015503379, -0.017037198, 0.0005844001, 0.01284869, 0.003958435, -0.025956951, -0.010872423, 0.034522746, -0.028458256, 0.013238044, -0.011568541, 0.014453302, 0.032729354, -0.008288526, -0.0015338198, 0.010483068, 0.030582007, -0.015361795, -0.014878052, 0.052810594, -0.024965867, 0.005651536, -0.004725345, -0.0015220211, 0.026405297, -0.00808795, -0.0067960015, -0.038911827, -0.029472938, -0.030747188, -0.034617133, 0.008465505, -0.0063712513, 0.034074396, -0.0025440762, -0.0059376527, -0.005138296, 0.028953798, 0.016765831, -0.052952178, -0.0068313973, 0.02654688, -0.027939118, 0.0077988836, 0.010943214, -0.023526436, -0.004126565, 0.020659372, -0.0053270743, 0.0075216163, -0.024729894, 0.03695326, -0.046085387, -0.030416826, 0.0074036303, -0.001068512, -0.01805188, 0.024989463, 0.03558462, -0.01029429, 0.016541656, 0.015137621, -0.027231202, 0.06550591, -0.0022845066, 0.014193732, 0.040658023, 0.0178749, 0.01864181, -0.015987122, -0.033224896, 0.020446997, 0.011521347, -0.0027947966, 0.032493383, -0.011084798, -0.013072864, -0.02050599, 0.038251106, 0.030180855, -0.0033685043, 0.000117617434, -0.039808523, -0.00012969258, 0.003943687, 0.010022922, 0.023774207, 0.06017293, -0.025909755, -0.022122402, 0.041908678, 0.030865174, -0.010606954, 0.039383773, -0.04306494, 0.0075039184, 0.012211565, -0.014429705, 0.027939118, 0.016907414, 0.013745385, -0.026830047, -0.011049402, -0.02008124, -0.025013061, -0.02035261, -0.004689949, 0.009916735, 0.039548952, 0.030511215, 0.0039377874, 0.033909217, 0.0055571473, -0.019208143, 0.016730435, -4.949887e-05, 0.032658562, 0.01820526, -0.03381483, 0.0024423131, -0.0013981358, 0.030110063, 0.03131352, 0.013474017, -0.008736874, -0.0034953393, 0.014028552, -0.022098804, 0.008318023, -0.001370114, -0.026098534, 0.003754909, -0.024281546, 0.00910853, 0.055783845, -0.011668829, -0.033767633, -0.011544944, 0.015114024, 0.004144263, 0.004569013, 0.008801766, -0.0016739283, 0.008211835, 0.04051644, -0.040304065, -0.0055659963, 0.016305685, -0.024375936, -0.0090849325, 0.006436144, 0.013002072, -0.011603937, 0.019113755, -0.0065246336, -0.0040882197, 0.0044067823, 0.025555797, -0.033413675, -0.024800686, 0.010677746, -0.008878457, -0.011780916, 0.049176622, -0.0020559086, 0.028930202, 0.039454564, 0.014760066, -0.008913853, 0.00587276, -0.00476664, 0.012659913, 0.013226246, -0.012128975, -0.02758516, -0.045047108, 0.015857337, -0.015633164, -0.035962176, -0.020871747, 0.0442684, 0.04120076, 0.044315595, -0.003796204, 0.007940467, 0.015633164, 0.01820526, 0.004392034, -0.00089153275, -0.046274163, 0.016636046, -0.023266867, 0.025673784, -0.00045314053, -0.044221204, 0.05134757, 0.022157798, -0.003344907, 0.033744037, -0.021650456, 0.035820592, -0.047572013, -0.0043094438, 0.039360177, 0.037590384, 0.006247366, 0.013391427, 0.000859824, 0.020553185, -0.018854184, -0.021969019, -0.000301049, 0.00023892193, -0.005911106, 0.023691617, 0.016034316, 0.0024570613, -0.03869945, -0.019963255, -0.02008124, 0.007161759, 0.0044067823, 4.076513e-05, 0.018099073, -0.004586711, -0.040374856, -0.0014881002, -0.0059258537, -0.0044716746, -0.017863102, -0.016411873, -0.01498424, 0.042616595, 0.008719176, -0.034499146, 0.017804109, 0.023290465, 0.019727282, -0.013556607, -0.005828515, 0.008453707, -0.007244349, 0.009468388, -0.002486558, 0.0009475762, -0.01498424, 0.0011960844, 0.020234622, -0.002493932, -0.02569738, 0.0059583, -0.052763402, -0.018158067, 0.010583357, 0.015090427, 0.0075039184, -0.041814286, 0.023538236, 0.026476089, 0.026499687, 0.016813025, -0.033413675, -0.004291746, -0.016612448, 0.021980818, -0.008807666, -0.04639215, 0.024163561, -0.0026192924, 0.004247501, 0.0357498, -0.02076556, -0.022499956, 0.022794923, 0.020128435, 0.008093849, -0.0016355829, 0.008707377, -0.015503379, -0.004648654, -0.013886969, -0.049648568, -0.018169865, 0.0034923898, 0.004970166, -0.010076016, 0.029166173, -0.017674323, -0.001999865, 0.009574575, 0.009946232, -0.0043182927, -0.003651671, 0.014630281, -0.009509683, -0.013745385, 0.004135414, -0.018948574, 0.0073564355, -0.0044244803, -0.019880664, 0.02510745, -0.018759796, -0.007722193, -0.0022004414, 0.026334506, 0.03211583, -0.0031974243, 0.033130508, 0.021638658, 0.055972625, 0.010890121, -0.03081798, -0.011951996, -0.013120059, -0.015349996, -0.020930741, -0.014583087, -0.0113856625, -0.002170945, 0.019550303, 0.02180384, 0.037590384, 0.036552105, 0.013709989, 0.009344502, -0.023880394, -0.026499687, -0.016883817, 0.021497075, 0.048893455, -0.028269479, 0.03369684, 0.008318023, -0.005583694, 0.013757184, -0.017662525, -0.0068078004, -0.042168245, -0.0037313115, -0.007981762, -0.029732507, -0.016706837, -0.004613258, 0.013485815, -0.002588321, -0.017674323, 0.021969019, -0.04195587, -0.010306089, -0.056822125, -0.02391579, -0.0036221745, -0.021084122, 0.032918133, -0.0017771663, 0.009804648, 0.0136745935, 0.013485815, -0.03072359, -0.01762713, -0.035348646, -0.015939927, 0.015951727, 0.0040498744, -0.007362335, -0.027632354, 0.008477304, -0.0003425285, -0.022771325, -0.02222859, 0.015939927, 0.01225876, 0.003548433, 0.02136729, -0.022865715, 0.069564626, 0.032729354, -0.0109255165, 0.0012963727, -0.021768443, 0.0020618078, -0.052291457, -0.00995803, 0.017568136, -0.008730974, -0.016211296, -0.005380168, -0.0706501, 0.021898227, 0.011297173, 0.022606144, 0.007079168, -0.009456589, -0.020093039, -0.030416826, 0.019373324, -0.036457717, -0.023573631, 0.0055453484, 0.022853915, 0.011586239, -0.035395842, -0.01855922, 0.0059641995, -0.01991606, 0.024753492, -0.022417367, -0.012777898, 0.046840496, 0.003524836, -0.018960372, 0.008500901, -0.049978927, 0.01642367, -0.025744576, 0.004129515, -0.022393769, -0.039289385, -0.00587571, -0.048987843, -0.016718635, 0.046722513, -0.018323248, 0.015196615, 0.0072148526, -0.011963795, 0.064467624, 0.014500497, 0.008270828, 0.008748672, 0.030228049, 0.0002746865, -0.0425694, 0.039289385, 0.011214582, 0.0029997977, -0.015821941, -0.022759527, -0.020730164, -0.014429705, 0.0039112405, 0.015326399, -0.01625849, 0.025744576, -0.0048138346, 0.026476089, -0.0020485343, 0.0027815232, 0.016777629, 0.03905341, -0.036575705, 0.015892733, 0.0017609431, -0.0022491107, -0.024399534, -0.047288846, 0.01284869, 0.004917072, -0.049082235, -0.023113485, -0.009138026, 0.004613258, -0.047807984, -0.017863102, 0.05063965, -0.00094093947, 0.018110873, -0.018547421, -0.013780781, 0.034782313, -0.010311988, -0.019208143, -0.012624517, -0.04247501, -0.015456184, 0.0046280064, 0.049601372, 0.0047459924, 0.020517789, 0.015633164, -0.0041413135, 0.018323248, 0.032304604, 0.026712062, -0.02034081, -0.04674611, -0.0099993255, 0.026074937, 0.02179204, -0.0039967806, 0.009415294, -0.006170675, -0.03473512, -0.042852566, -0.02859984, 0.017402956, 0.0024113418, 0.040044494, 0.00022675461, -0.009185221, 0.044575162, -0.008896155, 0.02391579, -0.031101147, -0.013922364, -0.011586239, 0.036811676, 0.0015094852, 0.016046114, -0.013190851, -0.006111682, -0.015090427, -0.007851978, -0.021733047, 0.011220482, 0.041672703, -0.017863102, -0.0039200895, -0.00024482125, -0.0013907616, -0.01472467, 0.0057252776, 0.028741423, 0.0023641472, -0.02494227, 0.027891923, -0.0026001194, -0.03055841, 0.021308297, -0.019455913, 0.01387517, -0.0006397061, -0.010270693, -0.036386926, -0.01387517, 0.017214177, 0.030251646, -0.018158067, -0.007456724, -0.009232416, -0.0044834735, 0.015255608, -0.015302802, -8.6784334e-05, -0.018040081, 7.0803208e-06, -0.005294628, -0.015184816, -0.0025352272, 0.015043233, 0.022405569, -0.009179322, 0.041908678, -0.010376881, 0.008229533, -0.0079345675, -0.030228049, -0.0083829155, 0.02162686, 0.0434189, -0.0049141226, 0.021862831, 0.033932813, 0.011432857, -0.004834482, 0.021591464, -0.03839269, -0.028670631, 0.016128706, 0.008860759, 0.000927666, -0.03676448, 0.013886969, -0.0026915588, 0.0079227695, 0.047359638, 0.018995767, -0.017096192, -0.022311179, 0.0012086205, -0.009946232, -0.008400613, -0.00621197, 0.039171398, -0.029402146, 0.047265247, -0.022122402, 0.029402146, -0.01949131, -0.022488158, -0.0068726926, 0.03303612, -0.016895615, -0.034333967, 0.005899307, -0.01973908, 0.006819599, 0.0076219044, -0.006442043, 0.02706602, 0.0034864903, 0.008465505, 0.021839235, 0.03277655, -0.012459336, -0.004274048, -0.0062001715, -0.048799068, -0.014524094, -0.0043890844, -0.029402146, 0.031077549, -0.0018214111, -0.02179204, 0.0033950512, 0.00067657675, 0.0065777274, 0.01387517, -0.00045424665, -0.022570748]"
../../../gradio,../../../gradio/gradio/components,clear_button.py,""""""" Predefined buttons with bound events that can be included in a gr.Blocks for convenience. """"""

from __future__ import annotations

import copy
import json
from typing import Any, Literal

from gradio_client.documentation import document

from gradio.components import Button, Component
from gradio.context import Context
from gradio.data_classes import GradioModel, GradioRootModel
from gradio.utils import resolve_singleton


@document(""add"")
class ClearButton(Button):
    """"""
    Button that clears the value of a component or a list of components when clicked. It is instantiated with the list of components to clear.
    Preprocessing: passes the button value as a {str} into the function
    Postprocessing: expects a {str} to be returned from a function, which is set as the label of the button
    """"""

    is_template = True

    def __init__(
        self,
        components: None | list[Component] | Component = None,
        *,
        value: str = ""Clear"",
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = None,
        min_width: int | None = None,
        api_name: str | None | Literal[""False""] = None,
        show_api: bool = False,
    ):
        super().__init__(
            value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )
        self.api_name = api_name
        self.show_api = show_api

        if Context.root_block:
            self.add(components)

    def add(self, components: None | Component | list[Component]) -> ClearButton:
        """"""
        Adds a component or list of components to the list of components that will be cleared when the button is clicked.
        """"""
        from gradio.components import State  # Avoid circular import

        if not components:
            # This needs to be here because when the ClearButton is created in an gr.Interface, we don't
            # want to create dependencies for it before we have created the dependencies for the submit function.
            # We generally assume that the submit function dependency is the first thing created in an gr.Interface.
            return self

        if isinstance(components, Component):
            components = [components]
        none_values = []
        state_components = []
        initial_states = []
        for component in components:
            if isinstance(component, State):
                state_components.append(component)
                initial_states.append(copy.deepcopy(component.value))
            none = component.postprocess(None)
            if isinstance(none, (GradioModel, GradioRootModel)):
                none = none.model_dump()
            none_values.append(none)
        clear_values = json.dumps(none_values)
        self.click(
            None,
            [],
            components,
            js=f""() => {clear_values}"",
            api_name=self.api_name,
            show_api=self.show_api,
        )
        if state_components:
            self.click(
                lambda: resolve_singleton(initial_states),
                None,
                state_components,
                api_name=self.api_name,
                show_api=self.show_api,
            )
        return self

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the button label
        Returns:
            (Rarely used) the `str` corresponding to the button label when the button is clicked
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: string corresponding to the button label
        Returns:
            Expects a `str` value that is set as the button label
        """"""
        return value

    def example_payload(self) -> Any:
        return ""Clear""

    def example_value(self) -> Any:
        return ""Clear""
","This code defines a `ClearButton` class that inherits from the `Button` class. The `ClearButton` class represents a button that, when clicked, clears the value of a specified component or a list of components. The class includes methods for adding components to be cleared, preprocessing the button value, postprocessing the button value, providing an example payload, and providing an example value. The class also includes various parameters for customizing the appearance and behavior of the button.","[-0.015623451, -0.004560846, -0.0012769167, 0.045572404, 0.028242392, -0.053840816, -0.0038037093, 0.060570918, 0.002086632, 0.02586282, 0.024228366, -0.0049664546, -0.031222865, -0.016320497, 0.027064623, 0.037063632, 0.04175067, 0.026391614, 0.023026563, 0.027881851, -0.05710972, -0.008845277, 0.031391118, 0.040596936, -0.013448185, -0.050283477, 0.0042754174, 0.021247894, 0.012498761, 0.02341114, -0.0046720128, -0.024228366, -0.011248885, 0.023339031, -0.01955335, -0.006231353, 0.027569382, 0.016524803, 0.014842278, -0.0245168, -0.0960001, -0.007144724, 0.030525818, 0.0002867429, -0.0074932473, 0.0042363587, -0.045740657, 0.03583779, -0.03953935, -0.00089609507, -0.059272967, 0.015335018, 0.0023600424, -0.0046209362, -0.017690554, 0.0090856375, -0.039923925, 0.051533353, -0.03487635, 0.0014008527, 0.0048282472, -0.00084952515, -0.03574165, 0.041894883, 0.0085688615, 0.03345822, -0.027665526, 0.027449202, 0.02015425, 0.011921895, 0.048697095, -0.01237858, -0.049105708, -0.02720884, 0.014698062, -0.032256417, 0.017618446, 0.028651005, 0.020502774, -0.0058978526, 0.017017543, 0.0032448706, -0.00962044, -0.036054116, -0.045500297, 0.012510778, -0.024096169, 0.03333804, 0.0062854346, -0.041534342, -0.06725295, -0.013328006, -0.015431162, 0.060570918, -0.0146259535, 0.007349031, -0.0119339125, -0.014313485, 0.027497273, 0.027809743, 0.07999207, -0.043096688, 0.0036444704, 0.0046780217, 0.004632954, -0.033121716, -0.043793734, 0.011068614, -0.056100205, 0.012426652, -0.009031557, 0.03175166, -0.016632967, 0.038193326, -0.050283477, -0.029612448, -0.01489035, 0.027905887, -0.013880835, -0.056004062, 0.007931906, -0.017918896, 0.04235157, -0.06855089, 0.001290437, -0.041582417, 0.03345822, -0.010527803, 0.026824264, -0.01593592, 0.031415153, 0.037400138, -0.012282436, -0.0019844787, 0.0026710092, 0.09056794, -0.034828275, 0.0036925424, -0.030525818, -0.0035873847, 0.042615965, -0.02224539, 0.014013033, -0.0169214, -0.03939513, 0.011879832, 0.028747149, -0.03432352, -0.063887894, -0.016584894, 0.024997521, 0.025358062, 0.025718603, -0.0030510796, -0.022810237, -0.045981016, 0.06085935, 0.006453687, -0.008232357, -0.027232876, 0.005582379, -0.037977003, 0.0036624975, -0.015491253, 0.008574871, -0.033506293, 0.02267804, -0.008628952, -0.05951333, -0.0059459247, 0.04922589, 0.01844769, -0.015010531, -0.040741153, -0.02990088, 0.026992517, -0.01489035, 0.0034581907, -0.045452222, -0.037111703, 0.06499355, -0.012691049, -0.008202312, -0.054225393, -0.057830803, 0.00070718647, 0.02720884, -0.011855796, -0.0021061613, 0.0056905416, 0.023495266, 0.0027716602, 0.017666517, -0.014325502, 0.021596417, 0.017269922, 0.010798208, -0.047014568, -0.0072769225, -0.037231885, -0.02776167, 0.026607938, 0.034227375, 0.025526315, 0.015395108, 0.030694071, 0.016224353, -0.00080896425, -0.008628952, 0.0502354, 0.026127217, -0.009169764, 0.0009584386, -0.0037616463, -0.05485033, -0.009482233, 0.0034882359, 0.048865348, 0.0452359, 0.03855387, -0.024781197, 0.012060102, 0.06667608, -0.021320002, 0.013412132, -0.024973486, -0.04773565, 0.0134361675, -0.011843777, 0.026631974, 0.020875335, 0.0054802257, 0.042207353, -0.04076519, 0.010605919, -0.020779189, 0.018928412, -0.0107441265, 0.018423654, -0.014313485, -0.07854991, 0.001014022, 0.007018535, -0.0015323, -0.001826742, 0.033073645, -0.022197317, -0.030525818, 0.0027010543, 0.005528298, 0.037135743, 0.012438671, 0.005381077, -0.0037856824, -0.031294975, 0.0071507334, 0.07042571, -0.0022819252, 0.0397076, -0.013580384, -0.005804713, -0.040068142, -0.017113687, 0.0018838276, -0.018483745, 0.032520812, 0.03538111, 0.01237858, -0.039563384, 0.03266503, 0.014445683, 0.026511794, 0.03730399, -0.004551832, 0.014313485, -0.024588907, -0.005987988, 0.019661512, 0.03199202, -0.012907374, -0.042255424, -0.013063609, 0.046173304, 0.000925389, -0.005588388, 0.027136732, 0.018724104, -0.003695547, 0.00367752, -0.0423035, -0.017786698, -0.001031298, -0.017029561, -0.004978473, -0.07403112, 0.030694071, 0.046341557, -0.02641565, 0.028530825, -0.0049754684, 0.011134713, 0.024180295, -0.050043114, -0.018676033, 0.029564377, -0.003088636, -0.019156754, -0.0066579934, 0.014457701, -0.023050599, 0.01005309, 0.001208564, 0.016825255, -0.018003022, -0.018435672, -0.0088272495, 0.020502774, 0.04062097, -0.032905392, 0.015767667, 0.017209832, 0.028218355, -0.023531321, -0.004149228, 0.04326494, 0.02732902, -0.04352934, 0.023327013, 0.036991525, 0.0014609429, 0.027881851, 0.020034071, 0.039731637, -0.018820249, 0.0034792223, -0.02236557, -0.018964466, -0.0006125444, -0.04682228, -0.026439685, -0.01636857, 0.00876716, 0.0009974972, 0.02543017, 0.023447195, 0.038914412, -0.006501759, 0.023579393, 0.005522289, 0.025237883, 0.015262909, -0.029924918, 0.039178807, -0.039563384, 0.0041792733, -0.04215928, -0.056004062, -0.05081227, -0.023339031, 0.021968976, 0.0121923005, 0.02855486, -0.0074632023, 0.001691539, -0.01066601, 0.009386089, -0.046750173, -0.0840782, 0.01177167, -0.024901377, -0.0003676769, 0.016308479, 0.057830803, 0.03021335, -0.03985182, -0.039875854, -0.00038795732, 0.0030450707, 0.0016269421, -0.051869858, 0.021524308, -0.021103676, -0.030045098, -0.020863315, 0.036510803, -0.019757656, 0.059176825, 0.0046690083, -0.005221838, 0.046197344, 0.0382414, 0.0069344086, 0.04836059, -0.0049424185, 0.04499554, 0.07311775, -0.03934706, -0.005780677, 0.023567375, 0.012024048, -0.01103256, 0.023327013, -0.0059669563, -0.009235863, 0.011044578, -0.031727623, 0.046005055, -0.010708073, 0.015623451, -0.02862697, 0.029804736, 0.03302557, 0.058071166, 0.009121692, 0.024408637, -0.014145232, 0.0035633487, -0.017918896, 0.008965457, 0.0268483, 0.038505796, -0.03353033, 0.0169214, -0.045019574, 0.027977996, 0.049850825, -0.026055109, 0.0072168326, 0.0050385627, -0.07306968, -0.009121692, 0.030597927, -0.008472717, 0.003283929, 0.007943924, -0.03076618, -0.040164288, 0.0022068124, 0.0015818744, 0.042495787, -0.05215829, 0.014818242, 0.032761175, 0.061436217, -0.030453712, 0.014433665, -0.0051587434, -0.058551885, -0.03076618, -0.035765685, -0.034467734, 0.020550847, -0.03756839, 0.05725394, 0.024685053, 0.005074617, 0.0031847802, -0.022786202, -0.0071266973, -0.0021377087, 0.015371072, 0.01992591, 0.027617455, 0.056292497, -0.025093665, 0.048216373, 0.01544318, 0.012186292, 0.02432451, -0.047615472, -0.011957949, 0.0040410655, 0.048841313, 0.040116213, -0.022762166, 0.019036574, 0.022401625, 0.065185845, -0.0074571935, 0.011477227, -0.00894743, -0.015743632, 0.014746134, -0.040717117, 0.005993997, 0.07686738, -0.02463698, -0.03516478, -0.014782188, 0.0047230893, -0.037544355, 0.014193304, -0.0023149748, -0.011561354, -0.005957943, -0.045500297, -0.0029834781, 0.014481737, 0.018387599, -0.047206856, 0.038457725, -0.007433157, 0.02372361, 0.0103295045, -0.010768163, -0.030573891, 0.043337047, -0.006039065, 0.041149765, -0.029588412, -0.046245415, -0.036006045, 0.0071807783, -0.011609426, -0.004602909, -0.0034461727, 0.0051136757, 0.010305469, -0.0041071647, -0.012114183, -0.0056004063, 0.0680221, -0.010161252, -0.0041792733, 0.0040410655, 0.035092674, -0.032833282, -0.053985033, -0.0018537826, 0.027929923, -0.032713104, -0.0072889407, -0.01164548, 0.05816731, -0.024180295, 0.015767667, -0.013039572, 0.020118197, 0.00127917, -0.0058918437, 0.0004732103, -0.00710867, 0.0139529435, -0.011795705, 0.0031577398, 0.043986022, -0.008875322, -0.037712608, 0.034828275, 0.009374071, 0.028050102, -0.002040062, 0.027497273, -0.03583779, 0.04021236, -0.009025548, -0.037904896, 0.010551838, -0.004344521, -0.012438671, -0.011801714, -0.01918079, -0.0026740136, 0.03958742, -0.013460204, -0.038193326, 0.015827758, -0.0014609429, 0.033001535, -0.012823247, -0.0443706, 0.009452187, -0.008418636, 0.034467734, 0.0034221367, 0.036006045, 0.035597432, -0.031246902, -0.043361086, -0.02016627, 0.001166501, -0.047327038, 0.004720085, -0.01170557, -0.033001535, 0.055763703, 0.062109224, -0.03694345, 0.0065858853, 0.024901377, -0.0391067, -0.00017163262, -0.0096564945, 0.036823273, -0.019757656, -0.0018612938, 0.0063034613, 0.007084634, -0.051485278, 0.011086641, -0.040404648, -0.008562853, 0.013303969, -0.0062433714, 0.044755176, -0.030838288, -0.008520789, -0.034780204, -0.0068983543, 0.030117206, -0.0057686586, 0.05595599, 0.011507273, 0.0046359585, 0.017942932, -0.01348424, -0.05167757, 0.026631974, 0.008923394, -0.005597402, 0.008136213, 0.015503271, 0.004467706, -0.01680122, 0.042736147, 0.042928435, 0.012799212, -0.031006541, 0.0642244, 0.015058603, 0.015166765, 0.005606415, -0.0042363587, 0.01011318, -0.02053883, 0.008328501, 0.05460997, 0.030670036, 0.014121196, -0.050619982, 0.010672019, 0.02720884, 0.004705062, -0.002417128, -0.020058107, 0.031222865, 0.009127701, 0.035260927, 0.03273714, 0.015407126, -0.018555852, -0.020298468, 0.013892854, -0.03761646, 0.02475716, -0.0059038615, -0.01489035, 0.02752131, -0.0014789699, 0.0059849834, -0.03266503, 0.021307983, -0.052302506, 0.0071747694, -0.020779189, 0.015022549, -0.012630959, 0.0030736134, -0.0146259535, 0.00049762195, -0.075425215, 0.028699078, 0.002628946, 0.048504807, 0.021620452, 0.027929923, 0.009608422, -0.02562246, -0.009752639, -0.019901874, -0.045764692, -0.006796201, -0.023939934, 0.011507273, -0.009325998, -0.042784218, -0.00057987036, 0.014505773, 0.015190802, -0.017053597, -0.024528818, 5.267281e-05, 0.006399606, 0.018399619, -0.026656011, 0.02224539, -0.00438358, 0.0015022549, 0.003725592, -0.018964466, -0.04516379, -0.0038968492, -0.021115694, 0.005780677, -0.0022233373, 0.0032418661, -0.007072616, -0.0013482737, 0.007667509, -0.017053597, 0.0156114325, 0.012883338, -0.02273813, 0.005771663, -0.021560362, -0.008514781, -0.003926894, 0.009674521, -0.00026383353, -0.030477747, -0.02297849, 0.039683565, -0.022714093, -0.022437679, 0.0006831504, -0.03369858, 0.009356043, 0.020334521, -0.04509168, 0.04021236, -0.009301962, -0.004729098, -0.03175166, 0.047976013, -0.029203836, 0.005546325, 0.0028212348, 0.024036078, 0.024997521, -0.0115192905, -0.034732133, 0.049370106, -0.00039509303, 0.005675519, 0.004071111, -0.037087668, -0.0016374579, -0.033866834, -0.018399619, 0.026151253, 0.024805233, 0.007961951, -0.02518981, 0.037904896, -0.0037916913, -0.017546337, -0.026872335, -0.002840764, 0.00036824023, 0.009584386, 0.0022714094, 0.04259193, 0.0032538841, 0.005594397, 0.014577881, -0.047399145, 0.021584399, -0.012691049, -0.010870316, 0.02898751, -0.012667013, 0.0013963459, 0.013328006, -0.03696749, 0.0027190812, -0.025958965, -0.011939921, -0.031174794, -0.021584399, -0.015815739, 6.032492e-05, 0.007078625, 0.02862697, 0.010960451, -0.00021125459, -0.017089652, 0.013051591, 0.0122584, -0.036078155, -0.0013933415, 0.02119982, 0.002534304, 0.007685536, 0.010167261, 0.046101198, -0.015286946, 0.01648875, -0.04891342, 0.022161264, 0.007835762, -0.02402406, -0.050331548, -0.016644984, -0.014253395, -0.0054321536, 0.02089937, -0.01275114, -0.002634955, 0.008256393, 0.007823744, 0.018423654, 0.02543017, -0.02151229, 0.022822257, -0.01961344, -0.021692561, -0.0007315981, 0.002316477, -0.03088636, -0.032040093, -0.00010065108, -0.02886733, 0.016224353, -0.0013512783, -0.00042776708, 0.008160248, 0.014517792, 0.006826246, 0.033914905, -0.01894043, -0.0032058118, -0.03583779, -0.0007090643, 0.013231861, -0.030621964, 0.038457725, -0.041942958, 0.014854296, -0.020815244, -0.010083135, -0.042015065, -0.0042994535, -0.014409629, 0.0078057162, 0.011128704, 0.013688547, -0.0093440255, 0.004377571, -0.016344532, 0.02372361, 0.0007008019, 0.012642977, -0.025093665, -0.02433653, 0.0069764717, -0.007060598, 0.028338537, 0.015262909, 0.017522302, 0.019168772, 0.00023622958, -0.010515784, -0.029660521, 0.0013715588, 0.031727623, -0.02855486, 0.009163755, 0.0059669563, 0.02819432, -0.011855796, 0.03985182, 0.016753146, 0.03033353, 0.019024557, -0.014806224, 0.03554936, -0.016825255, 0.023339031, 0.011453191, 0.008496754, 0.014553845, -0.051629495, 0.023098672, -0.03776068, -0.005747627, 0.011525299, -0.0016479737, -0.013784691, -0.011459201, 0.04586084, -0.02016627, 0.001963447, 0.008665007, -0.028747149, -0.0030225369, -0.01819531, -0.00019698316, 0.010425649, 0.0090856375, -0.018700069, 0.0001128569, -0.02720884, -0.0013527805, 0.001031298, 0.02494945, -0.017053597, -0.0056004063, -0.012066111, -0.0064837323, -0.034059122, -0.0047110715, -0.034491774, -0.027929923, 0.025237883, 0.008496754, 0.00025857563, -0.012859302, 0.01177167, 0.03107865, -0.005140716, -0.034371592, -0.03554936, -0.02236557, -0.012715085, 0.0066039125, 0.00962044, 0.020755153, -9.7177115e-05, 0.041318018, -0.00055358093, 0.015130711, 0.001538309, 0.0085688615, -0.039683565, 0.020683045, -0.071242936, -0.027881851, 0.01366451, -0.024781197, -0.009169764, 0.017330013, -0.02543017, 0.019661512, 0.019264916, -0.011206822, -0.02119982, 0.005735609, -0.006135209, 0.02212521, 0.020550847, 0.037183814, -0.034419663, 0.029035583, -0.01342415, -0.013964961, -0.0025267927, 0.060234413, -0.013051591, 0.013315987, 0.034660026, -0.048937455, -0.013087644, 0.013243879, -0.018639978, 0.01231849, -0.04215928, 0.05201407, -0.0066039125, -0.0025012544, 0.026607938, 0.01225239, 0.0120901475, 0.024048096, 0.015130711, 0.007132706, 0.011393101, -0.009205818, 0.009584386, 0.012907374, -0.02518981, -0.00435053, 0.019986, 0.035525322, 0.0071927966, -0.010774172, 0.011603417, -0.009494251, -0.0074391663, -0.0065077683, 0.02886733, -0.0388423, 0.040428683, -0.013844781, -0.026175288, -0.006994499, -0.02672812, 0.028458716, -0.008707069, 0.0026845294, -0.009091646, -0.012546833, 0.03415527, -0.00986681, 0.026247397, 0.030165277, 0.016657002, 0.032857317, -0.045332044, -0.04247175, 0.012594905, 0.005723591, -0.002963949, 0.0046840305, -0.013736619, -0.021344038, -0.00249825, 0.016020047, 0.027016552, -0.026271433, 0.012066111, 0.0065318043, -0.03401105, 0.0037346056, -0.0083585465, 0.0022263417, 0.021608435, 0.03653484, -0.014698062, 0.020971479, 0.017305976, 0.010263406, -0.013832763, -0.03694345, -0.0035933936, 0.0051377118, 0.018531816, 0.013796709, 0.029131727, 0.019986, 0.010467712, -0.023170779, -0.023783699, 0.0049484274, 0.018219348, -0.016632967, -0.0023720604, -0.03033353, -0.0036745155, -0.04239964, 0.037400138, -0.02242566, 0.007258896, 0.006231353, 0.007018535, -0.03506864, 0.01053982, -0.002233853, -0.020022053, 0.005876821, 0.024264421, -0.038962483, -0.020995514, 0.039419167, 0.009554341, 0.021187803, -0.037904896, 0.0024907386, 0.039923925, 0.036751162, -0.018844286, 0.0008803214, 0.03119883, -0.015010531, -0.025237883, -0.034539845, -0.04682228, -0.03848176, 0.0057956995, 0.010149234, -0.020695064, 0.041149765, -0.0023705582, 0.012919392, 0.02193292, 0.0089834845, 0.063407175, -0.02176467, -0.00013679909, 0.022197317, -0.012594905, -0.013003518, 0.012486743, 0.0038577905, 0.018591907, -0.04052483, 0.010672019, -0.010005018, 0.03725592, 0.024600927, -0.025958965, 0.048120227, 0.021548344, 0.0041792733, -0.0065738675, -0.0009186289, 0.041318018, 0.0057446226, -0.0051527345, -0.0039389124, 0.004248377, -0.01544318, 0.041221876, 0.018964466, -0.027785707, -0.03107865, 0.010191297, 0.009127701, -0.030838288, 0.030573891, 0.0033860826, 0.029203836, -0.008148231, -0.0076074186, 0.01919281, 0.010527803, -0.04530801, 0.047038604, -0.02672812, -0.036486767, 0.018988501, -0.0034672043, 0.014818242, 0.03191991, -0.02506963, -0.014974477, -0.01850778, 0.0056905416, -0.009392098, -0.009055592, -0.008791195, -0.020190306, 0.017330013, 0.0038397636, 0.014265412, -0.01157938, 0.0017290954, -0.023507284, 0.043601446, 0.002320984, 0.00840061, -0.050043114, 0.009962955, -0.010083135, -0.018027058, -0.014746134, -0.0088813305, 0.004401607, -0.04650981, -0.0042033093, -0.015371072, 0.003377069, 0.006063101, -0.018351546, -0.021115694, -0.015491253, 0.01716176, -0.024252404, -0.016032064, 0.0054712123, 0.006519786, -0.02990088, -0.012162255, -0.014734115, 0.031030577, 0.046077162, 0.026800226, -0.027232876, 0.03365051, 0.032400634, -0.012300463, -0.0032929427, -0.017654499, -0.0030480751, 0.0050385627, 0.0013542827, -0.0050295494, -0.011994003, -0.01967353, -0.02163247, 0.019349042, 0.016813237, 0.03451581, 0.030694071, 0.0060030106, -0.0060090194, -0.01415725, 0.015202819, 0.010557847, -0.012474725, -0.018255401, 0.012871319, -0.009938918, -0.0051587434, -0.008430654, 0.025309991, 0.03143919, -0.00033105942, -0.008514781, 0.025406135, 0.025646495, -0.0035032583, -0.0013362557, -0.017630463, -0.0032749157, -0.017846787, 0.008052086, 0.050043114, -0.036823273, 0.009692549, 0.029708592, 0.002610919, -0.01348424, -0.0045728637, -0.009127701, -0.010347532, 0.0052008065, -0.01255885, 0.0051587434, 0.0015270421, 0.008965457, 0.028242392, -0.02562246, -0.0038818265, -0.0057836813, 0.017342031, -0.026656011, -0.0099148825, -0.0009869814, 0.009157746, -0.010617938, -0.012703068, -0.0006290692, -0.0096024135, -0.0005329249, -0.009163755, 0.0066940477, -0.016560858, -0.021704579, -0.022233373, 0.004401607, -0.022894364, -0.042063136, 0.004314476, 0.0082083205, -0.018988501, -0.012883338, 0.021548344, -0.0034221367, -0.015070621, -0.023495266, 0.009434161, 0.00058137265, -0.004368557, 0.0036745155, -0.021428164, -0.030429674, -0.036630984, 0.030309495, -0.022906382, 0.022269426, -0.022113193, 0.00038683062, 0.0027551355, -0.0041942955, -0.009626449, 0.021307983, -0.02475716, -0.0051437207, 0.02408415, 0.0078117256, -0.0014759654, -0.03107865, 0.020382594, -0.016945435, -0.036679056, -0.0029864828, 0.021259911, -0.031102685, -0.0103295045, 0.032352563, 0.01293141, 0.018099166, 0.004626945, -0.008304465, -0.025261918, 0.002169256, -0.0047230893, -0.0077516353, 0.00894743, 0.022257408, -0.018471725, -0.022437679, -0.028098175, -0.0015345534, 0.012727103, -0.0023314995, -0.03393894, 0.004113174, -0.0042363587, -0.028410645, -0.030910397, -0.055619486, 0.022209337, -0.001190537, -0.028602934, 0.020755153, 0.017438175, -0.03732803, 0.015731612, 0.015214837, 0.0051647522, 0.036991525, -0.0022308484, 0.036679056, -0.0063455245, -0.04530801, 0.0040050116, -0.030261422, -0.00680221, 0.033193823, -0.0063695605, -0.028098175, -0.03345822, -0.021259911, -0.018928412, -0.0045247916, 0.0021722605, 0.04321687, 0.0033920915, 0.029324016, 0.0006399606, 0.02354334, 0.013003518, 0.032328524, 0.008773169, 0.018724104, -0.011044578, 0.022629967, -0.009668512, 0.010029053, -0.034708098, 0.000403731, -0.0115733715, -0.008755142, 0.02261795, 0.027785707, 0.018231366, -0.024781197, 0.017498264, 0.023218852, 0.00080520863, 0.028915402, 0.030814253, 0.022473734, -0.040044107, 0.0021767672, 0.018495763, -0.019649494, 0.04081326, 0.03989989, -0.017690554, -0.04014025, 0.028386608, -0.0040981513, -0.009698558, 0.017065616, -0.011765661, -0.03542918, 0.0025823761, -0.02261795, 0.013832763, 0.0075052655, 0.00097271, 0.018736122, -0.008118185, -0.029636484, -0.0344437, -0.008220339, 0.0011972971, -0.016632967, 0.0035633487, -0.0088813305, 0.027136732, -0.0040981513, -0.027713599, 0.003223839, 0.014265412, 0.02672812, 0.033410147, -0.0054561896, 0.018183293, 0.020478738, -0.016717093, -0.009157746, 0.0063154795, 0.030189315, -0.046413668, 0.010521793, -0.029756665, 0.032328524, -0.034275446, 0.0066579934, -0.026583903, -0.0036985516, 0.00968053, 0.0071266973, 0.022750149, -0.02329096, 0.0063695605, -0.057205867, 0.009235863, -0.030477747, 0.026559867, 0.0001718204, 0.0017711585, 0.00858088, 0.00048710615, -0.013508276, -0.010563856, -0.023879843, -0.0014196308, 0.0062253443, 0.050331548, 0.008100159, -0.00240511, -0.02040663, 0.024264421, -0.0120901475, 0.0043174806, 0.047471255, 0.020418648, 0.026824264, 0.0022383598, -0.03088636, -0.00033143497, -0.034708098, 0.008695051, -0.011056596, -0.013448185, -0.03009317, -0.0036745155, -0.015431162, 0.010834262, -0.025141738, -0.011585389, -0.0007578876, 0.0066700117, 0.015983991, 0.012835266, -0.0071988055, 0.011981985, -0.03415527, -0.02689637, 0.004954437, -5.807154e-05, 0.0028678046, -0.01342415, 0.01876016, 0.000884077, 0.01231849, 0.0012220844, 0.0121923005, -0.012030057, -0.026704082, 0.005627447, 0.012366562, 0.016632967, -0.014601918, 0.028939439, 0.054754186, -0.02433653, 0.04646174, 0.0016735119, -0.020683045, -0.042207353, 0.01090637, -0.0075773736, -0.044058133, 0.033626474, -0.0062674074, -0.0011860302, -0.007084634, 0.0068623004, 0.0058257445, 0.01293141, 0.0033320014, 0.014181286, -0.017209832, -0.021283947, -0.0054561896, 0.013760655, 0.0437697, 0.025454206, 0.012594905, -0.045692585, 0.008328501, -0.024805233, -0.0092418725, 0.011897858, -0.05802309, -0.0046179313, -0.033073645, -0.007835762, 0.0012536317, -0.014337521, 0.05730201, 0.028386608, -0.018087149, -0.031679552, 0.021404129, -0.021668524, 0.016104173, 0.030021062, -0.031847805, 0.010611928, 0.023339031, 0.024997521, 0.048985526, -0.04211121, 0.04504361, 0.0011221844, -0.013688547, 0.028410645, 0.008220339, -0.014589899, -0.03715978]"
../../../gradio,../../../gradio/gradio/components,bar_plot.py,"""""""gr.BarPlot() component.""""""

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.plot import AltairPlot, AltairPlotData, Plot

if TYPE_CHECKING:
    import pandas as pd


@document()
class BarPlot(Plot):
    """"""
    Creates a bar plot component to display data from a pandas DataFrame (as output). As this component does
    not accept user input, it is rarely used as an input component.

    Demos: bar_plot
    """"""

    data_model = AltairPlotData

    def __init__(
        self,
        value: pd.DataFrame | Callable | None = None,
        x: str | None = None,
        y: str | None = None,
        *,
        color: str | None = None,
        vertical: bool = True,
        group: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        group_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        y_lim: list[int] | None = None,
        caption: str | None = None,
        interactive: bool | None = True,
        label: str | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        every: float | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        sort: Literal[""x"", ""y"", ""-x"", ""-y""] | None = None,
        show_actions_button: bool = False,
    ):
        """"""
        Parameters:
            value: The pandas dataframe containing the data to display in a scatter plot. If a callable is provided, the function will be called whenever the app loads to set the initial value of the plot.
            x: Column corresponding to the x axis.
            y: Column corresponding to the y axis.
            color: The column to determine the bar color. Must be categorical (discrete values).
            vertical: If True, the bars will be displayed vertically. If False, the x and y axis will be switched, displaying the bars horizontally. Default is True.
            group: The column with which to split the overall plot into smaller subplots.
            title: The title to display on top of the chart.
            tooltip: The column (or list of columns) to display on the tooltip when a user hovers over a bar.
            x_title: The title given to the x axis. By default, uses the value of the x parameter.
            y_title: The title given to the y axis. By default, uses the value of the y parameter.
            x_label_angle: The angle (in degrees) of the x axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            y_label_angle: The angle (in degrees) of the y axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            color_legend_title: The title given to the color legend. By default, uses the value of color parameter.
            group_title: The label displayed on top of the subplot columns (or rows if vertical=True). Use an empty string to omit.
            color_legend_position: The position of the color legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            height: The height of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            y_lim: A tuple of list containing the limits for the y-axis, specified as [y_min, y_max].
            caption: The (optional) caption to display below the plot.
            interactive: Whether users should be able to interact with the plot by panning or zooming with their mouse or trackpad.
            label: The (optional) label to display on the top left corner of the plot.
            show_label: Whether the label should be displayed.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            visible: Whether the plot should be visible.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            sort: Specifies the sorting axis as either ""x"", ""y"", ""-x"" or ""-y"". If None, no sorting is applied.
            show_actions_button: Whether to show the actions button on the top right corner of the plot.
        """"""
        self.x = x
        self.y = y
        self.color = color
        self.vertical = vertical
        self.group = group
        self.group_title = group_title
        self.tooltip = tooltip
        self.title = title
        self.x_title = x_title
        self.y_title = y_title
        self.x_label_angle = x_label_angle
        self.y_label_angle = y_label_angle
        self.color_legend_title = color_legend_title
        self.group_title = group_title
        self.color_legend_position = color_legend_position
        self.y_lim = y_lim
        self.caption = caption
        self.interactive_chart = interactive
        self.width = width
        self.height = height
        self.sort = sort
        self.show_actions_button = show_actions_button
        super().__init__(
            value=value,
            label=label,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            every=every,
        )

    def get_block_name(self) -> str:
        return ""plot""

    @staticmethod
    def create_plot(
        value: pd.DataFrame,
        x: str,
        y: str,
        color: str | None = None,
        vertical: bool = True,
        group: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        group_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        y_lim: list[int] | None = None,
        interactive: bool | None = True,
        sort: Literal[""x"", ""y"", ""-x"", ""-y""] | None = None,
    ):
        """"""Helper for creating the bar plot.""""""
        import altair as alt

        interactive = True if interactive is None else interactive
        orientation = (
            {""field"": group, ""title"": group_title if group_title is not None else group}
            if group
            else {}
        )

        x_title = x_title or x
        y_title = y_title or y

        # If horizontal, switch x and y
        if not vertical:
            y, x = x, y
            x = f""sum({x}):Q""
            y_title, x_title = x_title, y_title
            orientation = {""row"": alt.Row(**orientation)} if orientation else {}  # type: ignore
            x_lim = y_lim
            y_lim = None
        else:
            y = f""sum({y}):Q""
            x_lim = None
            orientation = {""column"": alt.Column(**orientation)} if orientation else {}  # type: ignore

        encodings = dict(
            x=alt.X(
                x,  # type: ignore
                title=x_title,  # type: ignore
                scale=AltairPlot.create_scale(x_lim),  # type: ignore
                axis=alt.Axis(labelAngle=x_label_angle)
                if x_label_angle is not None
                else alt.Axis(),
                sort=sort if vertical and sort is not None else None,
            ),
            y=alt.Y(
                y,  # type: ignore
                title=y_title,  # type: ignore
                scale=AltairPlot.create_scale(y_lim),  # type: ignore
                axis=alt.Axis(labelAngle=y_label_angle)
                if y_label_angle is not None
                else alt.Axis(),
                sort=sort if not vertical and sort is not None else None,
            ),
            **orientation,
        )
        properties = {}
        if title:
            properties[""title""] = title
        if height:
            properties[""height""] = height
        if width:
            properties[""width""] = width

        if color:
            domain = value[color].unique().tolist()
            range_ = list(range(len(domain)))
            encodings[""color""] = {
                ""field"": color,
                ""type"": ""nominal"",
                ""scale"": {""domain"": domain, ""range"": range_},
                ""legend"": AltairPlot.create_legend(
                    position=color_legend_position, title=color_legend_title or color
                ),
            }

        if tooltip:
            encodings[""tooltip""] = tooltip  # type: ignore

        chart = (
            alt.Chart(value)  # type: ignore
            .mark_bar()  # type: ignore
            .encode(**encodings)
            .properties(background=""transparent"", **properties)
        )
        if interactive:
            chart = chart.interactive()

        return chart

    def preprocess(self, payload: AltairPlotData) -> AltairPlotData:
        """"""
        Parameters:
            payload: The data to display in a bar plot.
        Returns:
            (Rarely used) passes the data displayed in the bar plot as an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""bar"").
        """"""
        return payload

    def postprocess(self, value: pd.DataFrame | None) -> AltairPlotData | None:
        """"""
        Parameters:
            value: Expects a pandas DataFrame containing the data to display in the bar plot. The DataFrame should contain at least two columns, one for the x-axis (corresponding to this component's `x` argument) and one for the y-axis (corresponding to `y`).
        Returns:
            The data to display in a bar plot, in the form of an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""bar"").
        """"""
        # if None or update
        if value is None:
            return value
        if self.x is None or self.y is None:
            raise ValueError(""No value provided for required parameters `x` and `y`."")
        chart = self.create_plot(
            value=value,
            x=self.x,
            y=self.y,
            color=self.color,
            vertical=self.vertical,
            group=self.group,
            title=self.title,
            tooltip=self.tooltip,
            x_title=self.x_title,
            y_title=self.y_title,
            x_label_angle=self.x_label_angle,
            y_label_angle=self.y_label_angle,
            color_legend_title=self.color_legend_title,
            color_legend_position=self.color_legend_position,  # type: ignore
            group_title=self.group_title,
            y_lim=self.y_lim,
            interactive=self.interactive_chart,
            height=self.height,
            width=self.width,
            sort=self.sort,  # type: ignore
        )

        return AltairPlotData(type=""altair"", plot=chart.to_json(), chart=""bar"")

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        import pandas as pd

        return pd.DataFrame({self.x: [1, 2, 3], self.y: [4, 5, 6]})
","The code defines a `BarPlot` component that creates a bar plot to display data from a pandas DataFrame. The component does not accept user input and is typically used as an output component. It includes various parameters such as `value`, `x`, `y`, `color`, `vertical`, `group`, `title`, `tooltip`, and more to customize the appearance of the bar plot. The `create_plot` method generates the actual bar plot using Altair library based on the provided parameters. The `preprocess` and `postprocess` methods handle the data processing before and after displaying the plot. The `example_payload` and `example_value` methods provide examples of the payload and value that can be used with the component.","[-0.04765758, -0.025788542, -0.0015018262, -0.0146424575, 0.021479316, -0.015399634, -0.02817142, 0.0069983155, 0.020399226, -0.023472471, 0.027325165, -0.019140977, -0.01518807, -0.03712392, 0.001748187, -0.010099399, -0.0044734655, 0.024096029, -0.006024007, 0.014742672, -0.008512668, -0.030064361, -0.0029535452, 0.027926452, -0.013172644, -0.022013795, -0.0033989432, 0.03645582, -0.05001819, 0.031600986, -0.014341814, -0.025254063, -0.017938403, 0.0051638326, 0.0044456283, -0.021891309, 0.009932375, -0.017504139, -0.0043760347, -0.031333745, 0.003897232, 0.015388499, 0.0036884518, 0.021991523, -0.020343551, 0.0440944, -0.04792482, 0.021234347, 0.005085888, 0.044628873, -0.032781288, 0.0063524884, 0.005625933, -0.01199234, -0.020421496, 0.058302592, -0.06703239, 0.041956488, -0.0045708963, -0.020376956, 0.012905406, -0.003983528, -0.031935032, 0.042357344, -0.06930392, -0.008033865, -0.05233426, 0.007710952, -0.028082341, 0.04095434, 0.06320197, 0.04193422, -0.0057177963, 0.030153442, -0.017749108, -0.025098175, -0.03658944, -0.008585045, 0.0036383446, -0.011402188, -0.029507615, 0.012693842, -0.015433039, -0.010862143, 0.0013083565, -0.06743325, -0.020688735, -0.004459547, 0.02272643, -0.011747371, 0.02396241, -0.055407505, -0.020777814, 0.070773736, 0.03968496, 0.09442437, -0.048414756, 0.011179488, 0.025231794, 0.025343144, 0.042490963, -0.018439475, -0.012426603, -0.021646341, 0.01935254, -0.049394634, -0.048192058, -0.0033544034, 0.031534176, 0.013361938, -0.011558077, 0.01190326, -0.042936362, 0.043827157, -0.077098384, 0.010617173, 0.0326254, -0.0054783947, 0.05001819, -0.0098432945, -0.039840847, 0.009965779, 0.037903365, -0.042691395, -0.00015823806, -0.0069704778, -0.037569318, -0.059772406, 0.0093923295, 0.016090002, 0.009297682, 0.004217362, -0.036723062, -0.032269083, -0.014631323, 0.048993774, -0.053135976, -0.01203688, -0.03311534, 0.017069876, 0.024340998, 0.04560875, 0.03215773, -0.035030548, -0.04961733, -0.017058741, 0.015767088, -0.022804376, -0.04569783, 0.031177856, -0.0012102297, 0.08716438, -0.012660436, -0.039996736, -0.024630507, 0.014052305, 0.024964556, -0.03462969, 0.0020711005, -0.020221068, 0.025231794, -0.013194914, -0.02265962, 0.0030593271, -0.020131987, -0.009609461, -0.012415468, -0.00047427922, -0.033315767, -0.03874962, 0.0067422115, -0.0086407205, -0.019230057, -0.009726378, 0.04128839, -0.01525488, -0.014920832, 0.010483555, 0.03932864, -0.045029733, 0.0006736644, -0.031400554, -0.06106406, -0.03200184, -0.042758204, -0.0019444404, -0.0022951914, 0.01421933, 0.00358267, 0.028505469, 0.03485239, 0.008351211, 0.0043788184, 0.01084544, 0.013150374, -0.033248957, 0.042980902, 5.2369058e-05, -0.022136278, 0.023116155, 0.019686589, 0.018116562, -0.023227504, 0.011468997, 0.023383392, 0.0133396685, -0.01961978, -0.013562367, -0.01022745, -0.010171776, 0.014675862, -0.019007357, 0.02837185, -0.0021142485, -0.026590258, -0.019007357, -0.025164984, 0.027124735, 0.005509016, -0.010305395, -0.008785475, 0.006775616, 0.021245481, -0.048370216, -0.0013591597, -0.0046989485, 0.05451671, -0.059995104, 0.005225075, -0.011736236, 0.004203443, -0.0012652086, 0.030264791, 0.01825018, -0.017582085, -0.009837727, 0.002403757, -0.037168458, 0.026300749, -0.0058291457, -0.017058741, 0.0018901576, 0.017136686, 0.0014169222, 0.04191195, 0.040152624, -0.029596694, -0.067344174, 0.016780367, 0.048904695, 0.022336707, -0.013462153, 0.0042841714, -0.019953828, -0.04086526, -0.016435184, -0.021791095, -0.0027614674, -0.024764126, -0.079637155, -0.0022450841, -0.0146424575, -0.05692186, -0.005823578, -0.010812035, 0.0064248657, 0.039863117, 0.041065693, -0.042825013, -0.014519974, 0.021178672, 0.021935849, 0.044317096, 0.0013278426, -0.035520487, -0.0066197272, 0.031066507, 0.05246788, 0.013707122, 0.007449281, -0.025588112, 0.015199205, -0.00080658786, 0.02592216, 0.005305803, 0.0043092254, 0.028550008, -0.008919094, -0.039373178, -0.01939708, 0.057545416, -0.031356014, 0.008373481, 0.008301104, 0.01822791, 0.028060071, 0.055674743, 0.009631731, 0.03527552, -0.030710189, -0.008696395, -0.01933027, -0.008161917, -0.059282467, 0.020521712, -0.044985194, 0.016501995, 0.04093207, -0.030866077, 0.024118299, 0.040241703, 0.00042939145, 0.018606499, -0.017882727, -0.04587599, 0.04402759, 0.057055477, 0.027035655, -0.03309307, -0.036322203, -0.06703239, -0.01296108, -0.016323835, 0.003496374, -0.003187379, -0.015878437, -0.016791502, 0.018862603, 0.032335892, 0.018951682, 0.0074715507, -0.03703484, -0.027503323, 0.07037288, 0.013406479, -0.012393198, -0.03692349, -0.044896115, -0.057589956, 0.05888161, -0.016925123, -0.004183957, 0.007432578, 0.003738559, 0.0049745385, 0.0036355609, 0.01527715, 0.014308409, 0.016646748, -0.014709268, -0.04523016, -0.0140411705, -0.010110534, -0.022125144, 0.012716112, -0.038883243, -0.029752582, -0.055541124, -0.057367258, -0.014787212, -0.030042091, -0.009475841, -0.027503323, 0.01302789, 0.017359385, 0.021334562, -0.031756874, -0.042958632, 0.016368374, 0.0138407415, -0.025810812, -0.00080658786, -0.040664833, -0.013406479, 0.0077165193, -0.038237415, 0.046989486, -0.031690065, -0.0068257237, -0.029997552, 0.008718665, -0.03300399, -0.02270416, 0.0076441425, -0.016802637, -0.0024872692, 0.036299933, -0.004484601, 0.018183371, 0.040197164, 0.005740066, -0.068903066, -0.06084136, 0.022915725, 0.0374357, 0.0020098581, 0.01655767, 0.04322587, 0.040508945, -0.012092554, -0.033338036, -0.006597457, 0.0041783894, 0.0066976715, -0.020299012, 0.012292983, 0.042646855, 0.010617173, 0.0094925435, 0.048548378, 0.017203497, -0.038148336, 0.0032347026, -0.055541124, 0.059727866, -0.008807745, -0.018628769, -0.007148637, 0.008701962, 0.018606499, 0.020009503, -0.051755242, -0.0013000052, -0.0046655433, -0.03295945, 0.05028543, 0.041087963, -0.020265607, -0.004673895, -0.026657067, 0.039484527, 0.021668611, 0.018896008, -0.00537818, -0.04086526, -0.054828487, -0.018550824, 0.03483012, 0.014586783, 0.038393304, 0.0060852496, -0.008501533, -0.016680153, 0.0019513997, -0.074336916, -0.01300562, 0.066364296, -0.01406344, -0.029618964, -0.0026737796, -0.0018289153, -0.004776893, -0.032180004, 0.007354634, 0.012671572, -0.0301089, -0.056031063, -0.0051332116, 0.012181634, 0.0305543, -0.003621642, 0.057634495, -0.031378284, 0.057857193, 5.071621e-05, -0.017058741, 0.018194506, 0.019118708, 0.0013953482, -0.028928597, 0.0036355609, 0.029351724, 0.053269595, -0.0032040814, -0.042067837, -0.038437843, 0.022871185, 9.821373e-05, -0.048192058, -0.027013386, 0.044161208, 0.045965068, -0.031333745, 0.052957818, 0.046677705, 0.08912413, 0.024207378, -0.053804073, -0.002490053, -0.03959588, -0.046900403, -0.032803558, 0.0026626447, -0.008534938, 0.016847178, -0.015410769, -0.06315743, -0.009141793, 0.030086631, -0.0027990479, 0.039974466, -0.014119115, 0.026278479, 0.0069148033, 0.029418536, -0.0050608343, 0.01935254, 0.0238956, -0.013406479, 0.040041275, -0.07469324, 0.006090817, 0.05416039, 0.0043481975, -0.021958118, 0.02261508, -0.017292576, 0.0066754017, -0.0068479935, -0.031356014, 0.0036745332, -0.004977322, -0.01757095, 0.0016410131, 0.013506693, 0.02378425, 0.00023452986, -0.07540587, -0.022292167, -0.034028403, -0.017882727, -0.006814589, -0.019107573, -0.02394014, -0.042758204, -0.006736644, 0.0026083617, 0.02398468, -0.011018032, -0.012660436, 0.01417479, 0.011162786, 0.00026567292, -0.03204638, 0.009164063, -0.010010319, -0.00707626, -0.001493475, 0.009264277, 0.055541124, 0.08021617, -0.024207378, -0.018350396, -0.006463838, 0.013629178, 0.029351724, -0.012560222, -0.017092146, -0.014386354, -0.031333745, 0.016858313, 0.072778024, 0.033805706, 0.0036717493, 0.001525488, 0.01604546, 0.003387808, -0.014620188, -0.044628873, 0.018194506, -0.019809075, 0.008351211, -0.0025986186, -0.04302544, 0.00044783374, 0.019285731, 0.022670755, -0.024853205, -0.009754215, -0.010917817, -0.011836451, 0.01305016, -0.019319136, -0.011658291, -0.038616, 0.01626816, 0.016167946, 0.013250589, 0.021301158, -0.013974361, -0.03901686, -0.0007968448, -0.05242334, 0.013651447, -0.018083157, -0.007449281, -0.023517013, -0.0032653238, 0.0067032394, -0.00018807624, 0.009331087, -0.026434368, -0.028572278, 0.01712555, -0.041689247, -0.020811219, 0.03690122, 0.04404986, -0.027993262, -0.0032263515, 0.004799163, 0.023249773, -0.019118708, -0.027325165, -0.015021046, 0.013929821, 0.00057588564, 0.028282769, 0.029062217, -0.05634284, 0.011713966, -0.009325519, -0.05442763, -0.010422312, -0.030064361, 0.017804783, 0.008278835, 0.007382471, -0.013907551, 0.045541942, -0.0113465125, 0.0092921145, 0.028639087, 0.042513233, 0.023338852, 0.0052222908, 0.01130754, -0.010856575, 0.004236848, -0.028728168, 0.008902391, 0.018606499, 0.02391787, 0.0071542044, -0.017158955, -0.007254419, -0.02616713, 0.02812688, 0.037836555, -0.007232149, 0.034540612, 0.016680153, 0.030910619, 0.0044122236, -0.02394014, -0.015733683, -0.011814181, 0.023071613, -0.0040531214, 0.0078501385, -0.028616818, 0.000688627, -0.004579248, -0.034162022, -0.009587191, 0.04099888, 0.023027074, -0.002826885, 0.038059253, 0.0044456283, -0.00017989901, 0.03694576, -0.005542421, -0.0071876096, -0.02061079, -0.0305543, -0.01620135, -0.014007766, -0.0043481975, 0.026478909, -0.0119478, 0.005834713, -0.03429564, -0.004028068, 0.04084299, 0.012894271, 0.03311534, 0.014898562, -0.0019681023, -0.03487466, 0.0049411333, 0.0138407415, -0.0035771022, 0.014609053, -0.016401779, 0.02041036, 0.017559813, 0.0025248497, 0.0282605, -0.008362346, -0.035832264, 0.001068955, 0.024563696, -0.037212998, 0.020688735, 0.018951682, -0.012838596, 0.012972215, 0.020299012, -0.011758506, 0.0028950868, -0.00648054, -0.035654105, 0.013105835, -0.036366742, 0.0069649103, 0.02400695, 0.031378284, -0.01979794, 0.028282769, -0.03532006, -0.002796264, -0.079459, -0.011424458, 0.014497703, 0.0037107216, 0.019976098, 0.037591588, 0.008930229, 0.008852284, 0.015666872, -0.020343551, 0.027369704, 0.0025248497, -0.00921417, -0.0020056826, -0.0011100152, -0.0026208886, -0.024630507, 0.013584637, -0.023851061, 0.02621167, 0.00053795724, -0.0077610593, 0.010433447, -0.048281137, -0.027792832, -0.025543572, 0.009470274, -0.012382063, 0.011301973, 0.005879253, 0.015900707, -0.010873278, -0.036611713, 0.010082697, 0.005589744, -0.021178672, -0.008941364, 0.008518236, -0.024296459, 0.006113087, 0.02398468, -0.019753398, -0.04531924, -0.020031773, 0.032892637, -0.011424458, -0.003092732, -0.01961978, -0.021791095, -0.022982534, -0.014998776, -0.027258355, 0.023004804, 0.010962357, 0.003039841, 0.014586783, -0.011062572, -0.021991523, -0.0022965833, 0.0140411705, -0.03039841, 0.03915048, 0.019207787, 0.009136225, -0.0136403125, 0.0018066454, -0.017281441, -0.00016258765, -0.051488005, 0.0029953013, 0.020221068, -0.02391787, 0.042891823, -0.0095426515, 0.005275182, -0.07602943, -0.028572278, -0.0058848206, 0.0037469103, -0.013451018, -0.043292683, 0.015433039, 0.02270416, -0.010104966, -0.021189807, -0.035921346, -0.011747371, -0.023004804, 0.017236901, 0.044851575, -0.027970992, 0.014163655, -0.01950843, -0.041666977, 0.007415876, -0.030487489, -0.016958527, 0.00925871, -0.021145267, 0.007844571, -0.012281848, -0.0059237927, 0.014419759, 0.013595773, 0.011379918, 0.032335892, -0.0042451993, -0.030754728, -0.024875475, 0.008874554, 0.0074826856, 0.017793648, 0.011702831, 0.03870508, -0.023672901, -0.013272859, -0.0053837476, -0.030242521, -0.0013640312, 0.045541942, -0.012393198, -0.041577898, 0.03520871, -0.035609566, -0.0013842133, -0.008056136, -0.022982534, 0.014052305, 0.02823823, -0.00296468, -0.005010727, -0.031177856, -0.02625621, 0.015544388, -0.01829472, -0.0044150073, 0.003549265, 0.057634495, -0.021423642, -0.019408215, -0.00709853, 0.000117003954, -0.04574237, -0.060485043, 0.012471142, -0.046766784, 0.029351724, 0.0074270107, 0.0075216577, -0.0048353514, 0.0029730313, 0.021212077, -0.010238585, -0.012849731, -0.019953828, 0.049483713, -0.018973952, -5.532678e-05, 0.0010230234, -0.015154665, 0.02065533, -0.003677317, 0.00014762506, -0.026924307, -0.019809075, -0.00058458484, 0.010878845, -0.0031845954, -0.017526409, 0.020109717, 0.015466444, 0.03474104, 0.011162786, 0.027503323, 0.00082329026, -0.022937994, 0.0017996861, 0.021902444, 0.02812688, 0.01298335, 0.005656554, -0.011780776, -0.013695987, -0.01038334, -0.024786396, -0.032335892, -0.04765758, -0.034451533, -0.02834958, -0.0011475957, 0.021390237, 0.0065640523, -0.002700225, 0.0051694, -0.01031653, -0.01322832, 0.004863189, 0.014263869, 0.037324347, -0.0058013084, 0.01982021, -0.009336655, -0.013317399, 0.02589989, -0.0007046335, 0.011791911, -0.0082899695, -0.010600471, 0.013673717, 0.03874962, -0.002657077, -0.0036522632, -0.0033126473, -0.027659213, -0.018361531, 0.019319136, 0.024697317, -0.010071561, 0.016078865, 0.033894785, -0.0029062217, -0.0023633929, 0.0216018, 0.0054923133, 0.016579939, 0.019285731, 0.024185108, 0.029997552, 0.03641128, -0.030888349, 0.0868526, 0.0042925226, -0.04536378, -0.0010933127, 0.020131987, -0.0056732562, 0.020989379, 0.024363268, -0.03458515, -0.02259281, 0.031623255, -0.016958527, 0.014364084, -0.024340998, 0.023650631, -0.022381248, -0.010750793, 0.0342511, 0.0064248657, -0.020466035, -0.00020895427, 0.029953012, -0.017726839, -0.025877621, 0.022147413, -0.0104445815, -0.007354634, 0.026768416, 0.031311475, 0.012872001, 0.011185056, 0.028906327, -0.025276333, -0.009631731, -0.028906327, 0.006692104, 0.00082677, 0.031266935, 0.02400695, -0.014753807, 0.021913579, 0.031667795, 0.015744818, 0.009141793, 0.007371336, 0.03879416, 0.011468997, -0.002551295, -0.008456994, 0.028861787, 0.015922977, -0.011925531, -0.0080895405, -0.0060295747, 0.040130354, -0.035743184, -0.018973952, -0.0007161164, 0.027703753, 3.9972725e-05, 0.00650281, 0.0059683328, -0.0037552614, -0.0432036, 0.0021754906, -0.012883136, -0.0303316, -0.021590665, -0.03304853, -0.0130390255, -0.0057679033, 0.0034267805, 0.0087298, 0.01311697, 0.001991764, -0.021523856, 0.0397295, 0.044517525, 0.020521712, 0.024675047, -0.0036355609, -0.012248443, 0.021278888, 0.03870508, -0.023361122, 0.025632652, 0.020031773, 0.026434368, -0.015856167, -0.029106757, 0.008534938, 0.04761304, 0.020232202, 0.0031957303, 0.0021629639, 0.0025582544, 0.028015532, 0.01829472, -0.0040308516, -0.0014322328, -0.00358267, 0.032358162, 0.015421904, 0.0026320235, -0.007566198, -0.025098175, 0.038304225, 0.024897745, -0.016713558, -0.040419865, 0.018662173, -0.0062133013, -0.029017676, -0.005890388, 0.014709268, -0.0077276547, -0.0061910315, 0.009531517, -0.010355502, 0.0303316, 0.03206865, -0.027302895, -0.024118299, 0.015176935, -0.0043927375, -0.0121370945, 0.008941364, -0.029774854, -0.029062217, -0.008161917, 0.014185925, -0.024964556, 0.015934112, -0.028037801, -0.0075606303, 0.02065533, 0.0044233585, 0.012448872, -0.03485239, 0.011480132, -0.006113087, -0.057367258, 0.0104445815, 0.02153499, 0.014185925, 0.05019635, -0.018617634, -0.018361531, 0.021267753, -0.012849731, -0.010155073, -0.0109957615, -0.028550008, 0.011212894, 0.02373971, -0.01525488, -0.01532169, -0.012103689, 0.025677191, 0.050864447, -0.011095976, 0.012181634, -0.0024775262, 0.0060518445, 0.020120852, 0.015098991, 0.033805706, -0.034473803, -0.0014350165, -0.008262132, -0.0013967401, 0.0023480824, 0.024318729, 0.005868118, 0.021000514, -0.022570541, -0.0060741147, 0.010110534, -0.011825316, 0.00484927, -0.008679693, -0.0195307, 0.00027732982, 0.008835582, 0.012359793, -0.037569318, -0.02810461, 0.00013762101, 0.0094424365, 0.0034768877, 0.015343959, 0.022347841, -0.017982943, -0.014675862, -0.00039250695, 0.04304771, 0.006948208, 0.0010355503, 0.012259578, 0.035008278, 0.019296866, -0.0013215792, 0.033761166, -0.008924661, 0.013684852, 0.016078865, 0.006630862, -0.027859641, 0.014386354, 0.01986475, -0.005219507, -0.009876699, 0.014297274, 0.049216475, -0.019486161, -0.009603893, 0.027436513, 0.03037614, 0.0009457747, -0.007883544, -0.011736236, -0.0063413535, 0.0037858826, -0.027703753, 0.01829472, 0.0044150073, -0.026501179, 0.013974361, -0.0019931558, -0.008128513, 0.0018623202, -0.0021963688, -0.013907551, 0.0066865366, -0.001386997, -0.0055535557, 0.02817142, 0.0075383605, -0.0036494795, 0.0047212183, -0.0062300037, -0.028928597, 0.014764942, -0.007365769, -0.030264791, 0.009024876, 0.025833081, 0.008189755, -0.004106012, 0.020955974, -0.006024007, -0.010516959, 0.0061242217, -0.015689142, 0.022804376, 0.04765758, -0.018394936, 0.0052222908, -0.0003380501, 0.021356832, -0.010784198, -0.011491267, -0.026523449, 0.040085815, 0.016980797, 0.008774339, 0.027970992, 0.022670755, 0.004607085, -0.008590613, -0.0013104443, 0.026478909, -0.019976098, 0.01757095, -0.0095426515, -0.011045869, -0.039484527, 0.01296108, 0.00707626, -0.0519334, -0.03494147, -0.019831344, 0.028839517, -0.02261508, 0.019742263, 0.029841663, -0.0016479724, -0.008562775, 0.010110534, -0.013194914, 0.025654921, -0.0027726023, 0.029886203, 0.03643355, 0.014453163, 0.01505445, -0.0012464183, -0.011162786, -0.016925123, -0.036633983, 0.042312805, 0.0009457747, -0.021668611, -0.013662582, -0.04765758, 0.008328942, -0.007967056, -0.012716112, -0.020566251, 0.027302895, 0.020399226, 0.023205234, 0.015900707, -0.03458515, -0.046455007, 0.057901733, 0.033293497, 0.012003475, -0.0045569777, 0.011212894, 0.018216776, 0.01527715, -0.031445097, 0.005200021, -0.022258762, -0.012727247, -0.0007578725, 4.9193855e-05, -0.019274596, 0.0027906965, 0.0061186543, 0.012716112, -0.048726536, -0.013618043, 0.004829784, -0.04739034, 0.00989897, 0.019051898, -0.022136278, 0.042045567, 0.016635614, -0.010388907, -0.016401779, 0.01935254, 0.031645525, -0.020087447, -0.0099936165, 0.022770971, -0.016212486, -0.040063545, -0.0648054, -0.020287877, 0.027325165, 0.010283126, -0.01955297, 0.009837727, -0.006747779, 0.01820564, -0.016501995, -0.016746962, 0.03037614, -0.011491267, -0.03244724, -0.025744002, 0.0036299934, -0.020488305, -0.00705399, 0.011513537, 0.019074168, 0.038036983, -0.03293718, 0.04084299, 0.02407376, -0.0074214432, -0.027525593, -0.0021406938, -0.0010035372, 0.046766784, -0.009230873, 0.043292683, 0.038126066, -0.001982021, -0.0282605, 0.013762796, -0.025231794, 0.05001819, -0.005751201, -0.004501303, 0.02821596, 0.00013327142, 0.046544086, 0.024563696, 0.0028867354, 0.0036801007, 0.0019207787, 0.02623394, 0.023160694, 0.042468693, 0.0057567684, 0.0056593376, -0.025120445, -0.013718257, -0.043270413, -0.0018149967, 0.0082899695, -0.016602209, -0.012192769, -0.02422965, 0.013462153, 0.027859641, -0.0137405265, -0.002828277, 0.014007766, 0.030888349, -0.02810461, 0.041778326, 0.0026835226, 0.018194506, -0.015176935, -0.024675047, 0.007794464, 0.024719587, -0.019675454, 0.010516959, -0.008919094, -0.025120445, 0.0049522687, -0.012048014, 0.035854533, -0.02407376, -0.014631323, 0.024519157, 0.0058848206, 0.044472985, 0.013083565, -0.0053670453, -0.009587191, -0.035854533, -0.020254472, 0.013250589, 0.0035576161, -0.034006134, 0.030175712, 0.014542243, -0.018116562, 0.016257025, 0.03271448, 0.019296866, 0.010962357, 0.010116101, -0.008050568, -0.0019861965, 0.020321282, 0.009553786, 0.04131066, 0.00058075716, -0.023049343, 0.010355502, -0.021991523, -0.009626163, 0.03309307, -0.020466035, 0.0004332191, -0.041711517, 0.04623231, 0.0033321334, 0.019497296, -0.021200942, 0.005664905, -0.0016424049, 0.013796202, 0.015622334, 0.05006273, 0.0022603946, -0.011118246, 0.04592053, 0.042580046, -0.020265607, 0.0209003, 0.0060741147, -0.0009276804, 0.02175769, 0.012860866, -0.0016952959, -0.010427879, 0.00650281, -0.00764971, 0.015945246, 0.01939708, 0.05220064, -0.008217592, -0.0049188635, 0.030732458, 0.021679746, 0.01874012, 0.003591021, 0.026478909, 0.008518236, -0.02603351, 0.0027030087, 0.004122715, -0.01620135, 0.00095899747, -0.03255859, -0.016902853, 0.033672087, 0.028884057, 0.03966269, -0.019731129, 0.023004804, -0.007827869, 0.0053865314, -0.0037357754, 0.0013459369, -0.014987641, -0.010477987, -0.034540612, 0.022915725, -0.0032792424, 0.014909697, 0.0076664123, -0.003112218, 0.027481053, -0.025031365, -0.0047212183, 0.009008174, 0.040709373, 0.030197982, -0.004724002, -0.013217184, 0.003251405, -0.0206776, 0.0038359899, 0.0144420285, -0.013128105, -0.00032186962, 0.016746962, -0.01406344, -0.004629355, 0.017793648, 0.0026863064, -0.01518807, -0.019218922, -0.008145215, -0.011379918, 0.022826646, 0.00762744, 0.014464298, -0.032335892, 0.001599257, 0.005244561, -0.00824543, 0.04538605, -0.002053006, -0.014698133, 0.006330218, 0.040642563, -0.0774547, 0.013161509, -0.011480132, -0.0061520594, -0.002119816, -0.000794757, -0.011313108, -0.028839517, 0.0074826856, -0.011713966, -0.01307243, -0.017003067, -0.023004804, -0.034518342, -0.06752233, -0.0067199417, 0.0024649992, -0.035965886, 0.023249773, 0.036144044, -0.0140411705, 0.0042229295, -0.0107452255, -0.028572278, -0.024452347, 0.019085303, -0.0053113704]"
../../../gradio,../../../gradio/gradio/components,state.pyi,"""""""gr.State() component.""""""

from __future__ import annotations

from copy import deepcopy
from typing import Any

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class State(Component):
    EVENTS = []
    """"""
    Special hidden component that stores session state across runs of the demo by the
    same user. The value of the State variable is cleared when the user refreshes the page.
    Demos: interface_state, blocks_simple_squares, state_cleanup
    Guides: real-time-speech-recognition
    """"""

    allow_string_shortcut = False

    def __init__(
        self,
        value: Any = None,
        render: bool = True,
        *,
        time_to_live: int | float | None = None,
        delete_callback: Callable[[Any], None] | None = None,
    ):
        """"""
        Parameters:
            value: the initial value (of arbitrary type) of the state. The provided argument is deepcopied. If a callable is provided, the function will be called whenever the app loads to set the initial value of the state.
            render: has no effect, but is included for consistency with other components.
            time_to_live: The number of seconds the state should be stored for after it is created or updated. If None, the state will be stored indefinitely. Gradio automatically deletes state variables after a user closes the browser tab or refreshes the page, so this is useful for clearing state for potentially long running sessions.
            delete_callback: A function that is called when the state is deleted. The function should take the state value as an argument.
        """"""
        self.time_to_live = self.time_to_live = (
            math.inf if time_to_live is None else time_to_live
        )
        self.delete_callback = delete_callback or (lambda a: None)  # noqa: ARG005
        try:
            self.value = deepcopy(value)
        except TypeError as err:
            raise TypeError(
                f""The initial value of `gr.State` must be able to be deepcopied. The initial value of type {type(value)} cannot be deepcopied.""
            ) from err
        super().__init__(value=self.value, render=render)

    @property
    def stateful(self):
        return True

    def preprocess(self, payload: Any) -> Any:
        """"""
        Parameters:
            payload: Value
        Returns:
            Passes a value of arbitrary type through.
        """"""
        return payload

    def postprocess(self, value: Any) -> Any:
        """"""
        Parameters:
            value: Expects a value of arbitrary type, as long as it can be deepcopied.
        Returns:
            Passes a value of arbitrary type through.
        """"""
        return value

    def api_info(self) -> dict[str, Any]:
        return {""type"": {}, ""description"": ""any valid json""}

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        return None

    @property
    def skip_api(self):
        return True","The code defines a `State` component that is used to store session state across runs of a demo by the same user. The component allows setting an initial value, a time-to-live duration for the state, and a delete callback function. The state is automatically cleared when the user refreshes the page or closes the browser tab. The component provides methods for preprocessing and postprocessing data, as well as defining API information. The `State` component is marked as stateful and skips API documentation.","[-0.021087509, 0.01293376, 0.00047783606, 0.03147941, 0.039296445, -0.01566048, -0.009012038, -0.00943458, 0.06227219, 0.03990385, 0.06274755, -0.03850418, -0.022856904, -0.020730987, 0.033618532, -0.007942477, -0.01886916, 0.04621558, 0.02886493, 0.026527742, 0.00013967833, -0.018314574, -0.014788985, 0.007678388, -0.008741346, -0.018697502, -0.012167902, 0.0010794639, -0.0064074597, -0.051286086, 0.018816343, -0.039270036, 0.032350905, 0.0020186305, 0.023873648, 0.0364971, -0.0013146681, -0.002723418, -0.047219116, 0.010893672, -0.035493564, -0.042465515, 0.007401095, 0.05751859, -0.037210144, 0.020308446, -0.04544972, 0.04378596, 0.008609302, 0.034093894, -0.030687144, -0.051602993, -0.005030896, -0.011626519, -0.03485975, -0.0073548793, -0.023662375, 0.054719243, 0.017390262, 0.01515871, 0.037949592, 0.0033341239, -0.029261064, 0.06607507, -0.01575291, 0.01358738, -0.0020697976, 0.038424954, -0.050441004, 0.028495206, 0.029129019, 0.008470655, -0.021074304, -0.04402364, -0.020453695, 0.0055293636, 0.0022266007, 0.037843958, -0.0017297831, -0.007183221, -0.021100713, 0.018486232, 0.00824618, -0.023041766, -0.0086027, 0.00047536023, -0.04523845, -0.0075991615, -0.024032101, 0.02886493, 0.00041635285, 0.02643531, 0.003981142, 0.045581765, 0.028257525, 0.008298998, -0.024996025, -0.04595149, 0.019054024, 0.003218585, 0.029208245, -0.034120303, -0.072571665, -0.0013650102, 0.018076893, 0.018578663, -0.038292907, 0.034569252, -0.07838162, -0.025577022, 0.001886586, -0.018090097, -0.022738066, 0.0033572316, -0.040511254, -0.036655556, -0.016782857, -0.027095534, -0.021998616, -0.036470693, -0.011190772, 0.048011385, -0.014670145, -0.021523256, 0.0017495898, -0.02548459, 0.02177414, -0.03393544, -0.0145645095, 0.028759295, 0.017865622, 0.009474194, 0.018486232, -0.05772986, -0.0005752189, 0.0047337958, -0.036734782, -0.006440471, -0.02174773, 0.030026922, 0.019872699, -0.020664966, 0.023596354, 0.008054716, 0.007585957, -0.010108007, -0.003367135, 0.053266756, -0.045106404, -0.012808317, 0.042465515, 0.0026293362, -0.0278878, -0.014207989, 0.037368596, -0.015383186, 0.0015977386, -0.0062688133, -0.013178042, -0.015845342, -0.022447567, 0.011626519, 0.044129275, -0.029525153, -0.013039395, 0.0111643635, 0.033143174, -0.0114944745, -0.03200759, -0.015026665, 0.049384646, -0.03990385, -0.013574176, -0.011679337, -0.021245962, 0.00086489157, -0.0033902428, -0.002607879, -0.008747948, -0.012742295, 0.0032697523, -0.045106404, -0.055881236, 0.026897466, -0.047905747, 0.0014747721, 0.025062049, 0.0008747949, -0.0009763041, -0.0076585817, -0.02693708, 0.015607661, -0.014036331, -0.01910684, 0.032826263, -0.045766626, 0.052474488, 0.02317381, 0.01492103, -0.019701041, -0.00028637153, -0.02658056, -0.0021622288, 0.01587175, -0.003452964, 0.017231809, 0.015475617, 0.009507204, -0.009124275, -0.027544485, 0.009593033, 0.05535306, 0.035678428, -0.016267885, -0.051814266, -0.02222309, -0.019925516, 0.0012016051, 0.0071238014, 0.008094328, -0.01984629, 0.008100931, 0.012861135, -0.029947694, 0.022341931, 0.0105041405, -0.0041990154, -0.024850776, -0.043944415, -0.0082395775, -0.0082857935, 0.01694131, 0.03633865, 0.0038292909, 0.008866789, -0.015105892, 0.006684753, -0.048249062, -0.0025253512, 0.005942003, -0.033063944, 0.024520665, -0.019172862, 0.019410543, 0.04927901, 0.040458437, -0.01851264, -0.02067817, -0.032614995, 0.0278878, -0.0029264365, -0.027518077, 0.029894877, -0.00035321907, -0.015845342, -0.024758346, 0.058786217, 0.07273012, 0.034305163, -0.0082395775, -0.009903338, -0.06089893, -0.00037550158, 0.024824368, -0.018974796, 0.03129455, 0.057096045, -0.022183478, 0.014207989, -0.023622762, 0.023411492, 0.008180157, 0.00442019, 0.014855008, 0.004595149, -0.008536678, 0.040035896, 0.040062305, -0.035308704, 0.04457823, 0.0055524716, -0.014868212, 0.011316215, 0.06274755, 0.010226848, 0.057624225, -0.026712604, 0.018354187, 0.01566048, -0.020400876, 0.02717476, 0.020295242, 0.037659094, -0.00011007148, 0.037764728, 0.024454644, -0.009619443, 0.010913479, -0.003340726, 0.014379648, 0.0075925593, -0.011349225, -0.03311676, -0.012181106, 0.018974796, -0.0007609065, 0.015568048, 0.009507204, 0.02429619, -0.045555357, 0.02310779, 0.01539639, 0.015528434, 0.001990571, -0.026184427, -0.008714938, 0.06855751, 0.017812805, 0.017456284, -0.024494257, 0.015251141, -0.013012987, 0.028204707, -0.019872699, -0.029498743, -0.0072822548, -0.03971899, 0.00056201447, -0.01655838, -0.024481053, -0.019304907, -0.026712604, -0.028442388, -0.01655838, 0.018565457, -0.037500642, -0.00925632, 0.014630532, -0.019384135, 0.06575817, -0.052527305, -0.027003102, -0.03126814, 0.033037536, 0.048064202, 0.012999782, -0.042254243, -0.03636506, -0.020387672, -0.07463156, 0.01694131, -0.030872006, 0.0067573776, -0.048169836, 0.046321213, -0.0032664512, 0.020334855, -0.03610097, -0.051154044, -0.029525153, -0.0067738835, -0.0004922784, 0.0019526082, -0.017865622, -0.028415978, 0.021840163, -0.063909546, -0.044947952, 0.031558637, 0.008160351, 0.027386032, -0.023979284, 0.034780525, 0.021074304, -0.028732885, 0.049014922, 0.0038160863, 0.0025055446, 0.02296254, 0.016201861, -0.004618257, -0.011322817, 0.007308664, -0.010193836, 0.04309933, 0.018314574, 0.0024081618, 0.029208245, -0.0035916106, -0.016954515, -0.0065031922, -0.0183938, 0.036417875, -0.00055582484, 0.045185633, 0.036734782, -0.03660274, 0.031637866, 0.025233706, -0.043653917, -0.017377058, -0.012167902, 0.007183221, -0.011468066, 0.022949336, -0.026857853, 0.028891338, -0.051286086, 0.059948206, -0.035968926, 0.031875543, -0.004159402, 0.02560343, 0.008206566, 0.00418251, -0.023675581, -0.009012038, -0.03702528, 0.040696118, 0.031109687, 0.037500642, -0.059789754, -0.0024543772, -0.041145068, 0.037210144, 0.03388262, 0.027782165, -0.0077312062, 0.024982821, -0.056673504, 0.04037921, 0.023873648, 0.034991793, -0.0077708196, -0.005829765, 0.002984206, -0.009942952, -0.025365751, 0.018961592, -0.055458695, -0.024467848, -0.021668505, -0.028600842, 0.0016711883, -0.060001027, -0.022091046, -0.022619225, -0.036153786, 0.0018024076, -0.019635018, 0.0012932109, -0.0037665695, -0.031056868, 0.029498743, -0.016954515, -0.025788292, 0.024613097, 0.010636185, 0.021259166, -0.005037498, -0.010365494, 0.010431516, -0.0130525995, 0.0720963, -0.00022323774, 0.021179939, 0.037870366, 0.020400876, -0.0023338867, -0.014366442, -0.008450849, -0.0057538394, 0.060740475, 0.0014722963, 0.021866571, 0.018274961, -0.043706734, 0.012425388, 0.0177996, -0.025312932, -0.027359622, 0.001501181, -0.030211784, 0.0129139535, 0.064120814, 0.09876929, -0.016201861, -0.019001205, 0.022473976, -0.0023503923, -0.0038623018, -0.0016720137, 0.025352545, -0.014247603, 0.013732629, -0.020044357, -0.04642685, -0.0042617368, 0.038398545, -0.009975962, 0.06079329, -0.017509103, -0.022658838, 0.07331111, -0.0041197888, -0.04521204, -0.016241474, 0.029208245, 0.034938976, -0.059050307, -0.024230167, 0.052764986, 0.024520665, -0.06887442, -0.027755756, -0.043469053, 0.007916069, 0.014287216, -0.015700093, 0.0054270294, -0.0034661684, 0.04764166, 0.027306804, -0.011877404, -0.01076823, 0.0028554625, 0.012326355, -0.03631224, 0.04111866, -0.0028785702, 0.00854328, -0.016928107, 0.031373776, 0.042201426, -0.039560534, -0.018855955, -0.0036114173, 0.014775781, 0.0037698708, -0.031347368, 0.024613097, 0.00014122573, 0.039349265, -0.041805293, 0.003928324, 0.028072663, -0.017997667, -0.022091046, 0.008774358, -0.011329419, 0.007341675, -0.0031492615, -0.0058660773, -0.037764728, 0.025577022, -0.018010871, -0.008120737, -0.032324497, -0.010114609, 0.00010403663, -0.012861135, -0.03636506, 0.017284626, 0.0030782877, 0.001815612, -0.004070272, -0.010477732, -0.01563407, -0.0367876, 0.01682247, -0.052527305, 0.05025614, -0.012755499, 0.003103046, -0.011613315, -0.0083056, 0.03604815, -0.018829547, 0.007671786, 0.002812548, -0.0076849903, -0.04040562, -0.0703005, 0.024243372, -0.04515922, 0.0531083, 0.010636185, 0.021589277, -0.0052751782, 0.011758564, -0.027755756, -0.02767653, 0.014749371, 0.029023383, 0.036549922, 0.028468797, -0.01655838, 0.005001186, -0.045608174, 0.01492103, 0.004502718, -0.0029858565, -0.02524691, 0.010563561, 0.01599059, -0.01130301, -0.036629148, 0.017284626, -0.017865622, -0.003542094, 0.0016777905, 0.053742114, 0.01649236, -0.04325778, -0.012880942, 0.004621558, -0.01566048, -0.0038656031, 0.04325778, -0.017707169, 0.0015597758, 0.014775781, -0.0020664965, -0.033592124, 0.015317163, 0.0409338, -0.011930222, 0.0082857935, -0.023464309, 0.012788511, -0.010755026, 0.02572227, 0.02886493, 0.0030667337, -0.019146454, 0.018274961, 0.015607661, 0.033539306, -0.026448516, -0.018552253, 0.0075001284, -0.003545395, 0.057360135, -0.0037236551, 0.05894467, 0.01865789, -0.030132556, 0.053689297, 0.017878827, -0.0036741386, -0.034252346, -0.01041171, -0.021879775, 0.021483641, 0.01996513, -3.687962e-06, 0.01418158, -0.018129712, 0.022447567, -0.009427978, -0.020070765, 0.012887544, -0.04185811, -0.0072426414, -0.01996513, 0.033724166, 0.016333906, -0.009487398, 0.038583405, 0.014023127, -0.084508486, -0.01934452, 0.035229474, 0.043310598, 0.05556433, -0.023979284, -0.01290735, -0.05920876, -1.3191556e-05, 0.009111071, -0.012207515, 0.020757398, -0.005417126, 0.01566048, -0.035229474, -0.0394549, -0.0146569405, -0.004159402, 0.019172862, -0.0061961887, -0.03245654, 0.04428773, 0.0016538575, -0.005826464, -0.0076321727, 0.021021485, -0.012550831, 0.004215521, 0.058310855, -0.0025831207, -0.012920556, -0.0047007846, -0.03367135, -0.000109762, 0.011197374, 0.00025501096, -0.020348059, 0.03705169, 0.003806183, -0.021668505, 0.0036444284, 0.0042023165, -0.041831702, 0.041541204, -0.03554638, -0.03343367, 0.003284607, 0.019265294, -0.0061433706, -0.011283203, -0.03103046, 0.01406274, -0.020889442, -0.025035638, 0.0033011127, -0.019806676, -0.007856648, -0.012240526, -0.00058099587, 0.018274961, -0.0149870515, 0.015053074, 0.0049351635, 0.03346008, -0.014128762, 0.033565715, -0.048011385, -0.006212694, -0.018024076, -0.006331534, -0.009183696, 0.0067177643, -0.0088535845, -0.0085234735, 0.0688216, -0.040062305, 0.00029833807, -0.0031294548, 0.051787857, -0.028574431, -0.008510268, 0.010840855, -0.037210144, 0.034120303, 0.023886852, -0.0092299115, -0.009058254, 0.016901698, -0.0048757438, 0.03853059, 0.0069191325, 0.050916363, -0.029129019, 0.0068861214, -0.026448516, -0.04618917, 0.009408171, 0.015000257, -0.034991793, 0.005734033, -0.03728937, -0.025616635, -0.04621558, 0.01960861, 0.027280396, 0.016716834, 0.015568048, -0.013957105, -0.014049536, 0.025920337, -0.008411235, -0.00060204044, 0.026039178, -0.027570894, 0.029974103, -0.008530076, 0.018671094, 0.0030782877, -0.04259756, -0.027386032, -0.018314574, 0.0052553713, 0.014155172, -0.0058132596, -0.0018634781, -0.03346008, 0.025761884, -0.03731578, -0.0023982583, 0.017548716, -0.027597303, 0.030026922, -0.03295831, -0.0041065845, -0.030634327, 0.060529202, -0.020097174, -0.01877673, -0.017786395, -0.0031938266, -0.016162248, -0.01925209, -0.037896775, -0.02838957, 0.005509557, -0.0019278498, -0.014023127, 0.02041408, -0.015330368, -0.05001846, 0.011415248, 0.030581508, -0.0026805035, -0.0054204273, 0.019080432, -0.019661428, 0.014406056, 0.041541204, 0.00305518, 0.0142343985, 0.013329893, -0.017284626, 0.025312932, 0.009949554, 0.036549922, -0.0025319534, -0.02127237, 0.005390717, -0.044366956, -0.009084662, -0.0051860483, 0.046400443, -0.0051959516, -0.00012750548, 0.07875135, -0.0486452, -0.009177093, -0.026791831, -0.003367135, 0.01575291, -0.011342623, 0.011408646, -0.017654352, -0.017707169, 0.026857853, 0.014458874, 0.014155172, -0.010154223, 0.005205855, 0.012200912, 0.021047896, 0.016030204, -0.016954515, 0.048988514, 0.014194785, 0.010418312, -0.016637608, 0.012068869, 0.033803396, 0.0080018975, 0.011428452, 0.014128762, 0.043125737, -0.016439542, -0.0066319355, 0.0068663144, 0.011725552, 0.005001186, -0.035255883, 0.017720373, 0.019859495, 0.006787088, -0.027227579, -0.014406056, -0.00042151083, -0.015502025, -0.016017, 0.0124584, -0.015607661, 0.025524205, -0.02453387, 0.018750321, -0.002497292, -0.03031742, 0.011151159, 0.005007788, 0.004766807, 0.021959001, -0.026646582, 0.03557279, -0.031426594, -0.014775781, 0.002975953, -0.004281543, -0.013494949, -0.021972207, 0.038556997, 0.0015317163, -0.029974103, -0.029472334, -0.022830496, -0.05292344, 0.00848386, 0.059050307, -0.00249234, -0.015488821, 0.00073449756, -0.0022612622, -0.009441182, 0.011679337, -0.014207989, -0.033037536, 0.013785447, 0.04088098, -0.019014409, 0.007288857, 0.0051398324, 0.043469053, 0.020163197, 0.007942477, 0.054983333, 0.012214117, 0.014075945, 0.030687144, 0.021906184, -0.0620081, -0.03393544, 0.0010282967, -0.03005333, -0.015964182, -0.0134289265, -0.005562375, -0.003657633, -0.05028255, -0.0039646365, -0.01370622, 0.04164684, -0.007876455, 0.0060212296, -0.0097911, -0.02741244, 0.021879775, 0.08392749, -0.012365968, -0.03800241, -0.019186066, 0.02765012, -0.014881416, 0.04016794, -0.015805729, -0.013263871, 0.004855937, -0.032034, -0.0071171992, 0.012181106, -0.03581047, -0.0043376624, -0.020638557, 0.023530332, 0.042254243, 0.026739012, 0.044525407, -0.016017, 0.010273063, 0.015858546, 0.0049681747, 0.0018667793, -0.006443772, 0.004482911, 0.020216014, -0.013772243, 0.05052023, 0.04132993, -0.008668722, -0.036153786, -0.00661543, 0.0066319355, 0.02141762, 0.004215521, 0.033328034, -0.0010720363, 0.019423747, -0.003538793, 0.0066880547, -0.012544229, -0.0030782877, -0.011705746, 0.0043508667, 0.05582842, -0.0104579255, -0.033539306, 0.031453002, 0.055194605, -0.006440471, 0.020717783, 0.014722963, -0.0017495898, -0.014881416, -0.06010666, 0.001993872, 0.020004744, -0.023754807, -0.029683607, -0.0039019152, -0.0077774217, -0.028653659, -0.02441503, 0.009579829, -0.016452746, -0.031426594, -0.0034364583, -0.03633865, -0.012062266, -0.038028818, 0.00034125254, -0.03103046, 0.03773832, -0.0044366955, -0.0043178555, 0.004773409, -0.016109431, 0.06327573, -0.021351598, -0.0001556681, -0.0024560278, 0.047932155, 0.0015845341, -0.002002125, 0.0024675818, -0.032324497, -0.010365494, 0.008932811, 0.030977642, -0.01287434, 0.010827649, 0.011032319, 0.03031742, -0.009718476, 0.015502025, 0.0068068947, -0.02453387, -0.0073746857, 0.0029594477, 0.0053378996, -0.022236295, 0.01311202, -0.025365751, -0.020070765, -0.004542331, 0.0020103776, -0.013772243, 0.0017429875, 0.0035916106, -0.033063944, -0.0016299244, 0.009678863, 0.016584791, -0.0062820176, 0.048249062, 0.039137993, 0.00854328, 0.025827907, 0.04455182, -0.054772064, -0.036893237, 0.024520665, -0.022143865, -0.0012412184, -0.015528434, 0.015884954, -0.027491666, 0.041065842, -0.030238193, -0.0278878, 0.010933286, 0.012689478, -0.021430824, 0.02717476, 0.015224732, 0.01340912, 0.010352289, 0.024520665, -0.006579118, -0.02275127, 0.026752219, 0.028970566, -0.015079483, -0.00943458, 0.021576073, -0.013970309, 0.04544972, 0.0060179285, -0.009962758, 0.04571381, 0.0049219592, 0.02767653, 0.005364308, 0.03176991, -0.015686888, 0.0023338867, 0.005968412, 0.039666172, 0.048301883, 0.0015919616, -0.0032086817, -0.0210611, 0.00943458, -0.030845597, 0.015449207, -0.0018205637, 0.02957797, -0.005063907, -0.00483613, 0.036893237, -0.020295242, 0.0020995077, 0.035493564, -0.04761525, -0.010154223, 0.009051651, 0.01946336, 0.039534125, 0.029234655, -0.0117783705, -0.011263397, 0.016796062, 0.01703374, -0.03132096, -0.03961335, -0.029419517, 0.00486584, -0.0019889204, 0.0008162001, -0.007856648, -0.04661171, 0.021245962, 0.004529127, 0.043416236, 0.02960438, 0.00056531554, -0.036470693, 0.014432465, -0.0006862188, 0.0293667, 0.01613584, -0.029234655, -0.004915357, 0.000603691, 0.0059882184, -0.016413132, 0.015541639, -0.041541204, 0.021602482, 0.0035619007, -0.015779318, -0.0010018877, 0.0013204451, 0.0077246036, 0.0003008139, 0.034014665, -0.013178042, 0.010200438, -0.008596098, 0.018354187, 0.005611892, -0.009361955, 0.017112968, -0.018591868, -0.02477155, 0.027016306, -0.017390262, -0.02595995, -0.002198541, 0.0012280139, 0.03993026, 0.00901864, 0.013613789, -0.0028439087, -0.010246654, 0.0016068167, -0.010286267, 0.025233706, -0.00047948663, -0.018063689, -0.02619763, 0.010306074, 0.0146569405, -0.0013006384, 0.037764728, 0.0023305856, 0.026356084, -0.0024279684, -0.0052289627, 0.018803138, 0.033618532, 0.005238866, 0.001949307, -0.010781434, 0.006097155, -0.02308138, 0.031347368, -0.01329028, 0.0166112, -0.01575291, -0.03581047, -0.0034496628, 0.01566048, -0.011963232, 0.017627941, -0.008061318, 0.0023091284, -0.005971713, 0.03176991, 0.027491666, 0.003028771, 0.02960438, 0.018235346, 0.012544229, 0.019502975, -0.031822726, 0.026144814, 0.02512807, 0.034252346, 0.006618731, 0.016928107, 0.022777678, 0.0039976477, 0.032298088, 0.014141967, -0.0044432976, 0.017363854, 0.010933286, 0.010794639, -0.023992488, -0.0228437, 0.00043987329, -0.023688786, -5.3178865e-05, 0.010325881, -0.0062886197, -0.0021077604, -0.009045049, -0.0012494712, -0.0063117277, 0.011342623, -0.029894877, -0.026303267, -0.050599456, 0.015026665, -0.008820573, -0.007843444, 0.007843444, -0.034093894, -0.035916105, -0.020189606, -0.047905747, -0.028680068, 0.023424696, -0.038028818, 0.0011487872, -0.0409338, 0.050441004, 0.0015044821, 0.015541639, -0.028574431, 0.016201861, -0.0587334, -0.052500896, 0.020625353, -0.018235346, -0.0055491705, -0.02619763, 0.0051629404, 0.0009086313, 0.013864674, 0.012181106, 0.018063689, 0.015726501, 0.00013751198, 0.026488129, 0.0124584, 0.035203066, 0.04159402, 0.0037038485, 0.009632647, 0.018380595, 0.018855955, -0.0010035383, 0.026316471, 0.03219245, -0.030449465, -0.01358738, -0.03198118, 0.0043178555, -0.009698669, 0.02058574, -0.0032548972, -0.016862083, -0.027755756, -0.028521614, -0.042016562, 0.007691593, -0.0149870515, -0.027253987, -0.023424696, -0.00088882464, 0.0064569768, 0.004037261, -0.018380595, 0.045766626, -0.016307497, 0.057571407, -0.015330368, 0.01791844, 0.007229437, 0.007612366, -0.01029287, -0.009989168, 0.0060410365, 0.026408901, -0.008893197, 0.033354443, 0.015713297, -0.014326829, -0.010114609, -0.049675144, 0.0001825928, 0.046690937, -0.0015317163, -0.017495897, 0.01925209, -0.031585045, 0.01418158, 0.048856467, 0.004595149, -0.016439542, -0.0027514775, 0.014973847, -0.01741667, -0.056462232, 0.03298472, 0.008728142, -0.018644685, -0.0013204451, -0.013838265, -0.014736167, 0.015264345, 0.015026665, 0.03868904, -0.023200221, -0.024705527, 0.04471027, 0.021021485, 0.021391211, 0.012002846, 0.029208245, -0.005502955, -0.00031835106, -0.014326829, 0.035018206, -0.026540946, -0.0057901517, -0.0036114173, 0.0055392673, -0.018327778, -0.004515922, 0.008530076, 0.02960438, -0.016281089, -0.00596181, 0.02263243, 0.020876236, -0.0026557453, -0.03319599, -0.016531972, 0.00075760536, -0.011771768, -0.00973168, 0.00030246447, 0.00086159044, -0.021100713, 0.019186066, 0.039560534, -0.00067631545, 0.018235346, -0.0028934253, -0.011652928, 0.0067177643, 0.019331316, 0.023160607, -0.01951618, -0.014604122, 0.02079701, 0.042386286, 0.010246654, 0.013395916, 0.00029483062, -0.017997667, -0.038134456, 0.0026524442, -0.025048843, 0.011619917, -0.021219553, 0.0021028088, 0.022566406, -0.027491666, 0.04254474, -0.013838265, -0.0015680286, -0.053715706, 0.008081124, -0.018116508, -0.027861392, 0.0077312062, 0.0051959516, 0.006800292, -0.022988949, 0.007203028, -0.011666132, -0.008596098, 0.03581047, 0.025709067, -0.019872699, -0.009903338, -0.015818933, 0.029049791, 0.022236295, 0.011415248, -0.011045523, 0.0036906442, 0.024098122, 0.009705272, 0.015673684, 0.0050837137, -0.0073284702, -0.014511691, 0.028706476, 0.0069191325, -0.029419517, -0.05318753, -0.009738282, 0.012306549, -0.023688786, -0.01818253, -0.027042715, -0.0003387767, -0.005951906, 0.01041171, 0.019001205, -0.009725078, -0.02168171, -0.0064074597, -0.0057802484, -0.009190298, 0.00043615952, 0.021668505, 0.016109431, -0.022685247, -0.00082404027, -0.0069521433, 0.0020450393, 0.016017, 0.0045258254, 0.008371622, -0.02572227, 0.014762577, 0.027597303, 0.009031844, 0.027993437, 0.012253731, -0.01293376, 0.0053709103, -0.010616379, -0.019714246, 0.028178299, -0.010966296, 0.00412309, -0.018235346, 0.012266935, 0.038055226, -0.013640198, -0.0051629404, 0.002924786, -0.014049536, 0.01503987, -0.033961847, 0.008259384, -0.020625353, 0.00447961, -0.013838265, 0.006209393, -0.00013905937, 0.009738282, 0.02741244, 0.008411235, 0.006727668, -0.007295459, -0.004364071, -0.022447567, -0.016254678, -0.0024675818, -0.03583688, 0.0068333033, -0.0018255153, -0.013494949, 0.020730987, 0.03079278, 0.008926209, 0.003512384, 0.0064272666, -0.014749371, 0.016624404, 0.008939413, -0.033090353, 0.0148946205, -0.01925209, 0.029789241, 0.051418133, -0.023147402, 0.03100405, 0.009593033, -0.017641146, -0.0008756202, -0.019568997, -0.0010745123, -0.030819189]"
../../../gradio,../../../gradio/gradio/components,button.pyi,"""""""gr.Button() component.""""""

from __future__ import annotations

from typing import Any, Callable, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Button(Component):
    """"""
    Creates a button that can be assigned arbitrary .click() events. The value (label) of the button can be used as an input to the function (rarely used) or set via the output of a function.
    """"""

    EVENTS = [Events.click]

    def __init__(
        self,
        value: str | Callable = ""Run"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = None,
        min_width: int | None = None,
    ):
        """"""
        Parameters:
            value: Default text for the button to display. If callable, the function will be called whenever the app loads to set the initial value of the component.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            link: URL to open when the button is clicked. If None, no link will be used.
            visible: If False, component will be hidden.
            interactive: If False, the Button will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
        """"""
        super().__init__(
            every=every,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            interactive=interactive,
            scale=scale,
            min_width=min_width,
        )
        self.icon = self.serve_static_file(icon)
        self.variant = variant
        self.size = size
        self.link = link

    @property
    def skip_api(self):
        return True

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the button label
        Returns:
            (Rarely used) the `str` corresponding to the button label when the button is clicked
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: string corresponding to the button label
        Returns:
            Expects a `str` value that is set as the button label
        """"""
        return str(value)

    def example_payload(self) -> Any:
        return ""Run""

    def example_value(self) -> Any:
        return ""Run""

    
    def click(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Button` component in Gradio, which creates a button that can be assigned arbitrary click events. The button can have a default text, size, icon, link, and other properties. The `Button` component has methods for preprocessing, postprocessing, and handling click events. The `click` method allows defining a function to call when the button is clicked, along with various parameters for configuring the behavior of the event.","[-0.040489774, 0.022258313, 0.004588288, 0.025975406, 0.018817788, -0.06566866, 0.0028237745, 0.008474089, -0.0108028045, -0.04792396, 0.014204609, 0.033055585, -0.023032708, -0.0071963384, 0.027568446, -0.010675582, -0.028232213, -0.01786639, 0.029980132, 0.03677268, -0.057437953, -0.025444394, 0.022789326, 0.06615542, 0.02025595, -0.025820527, -0.023386717, 0.03163955, -0.010293917, 0.020012569, -0.032568824, -0.03513539, 0.006383224, -0.010564955, -0.0475257, -0.017545568, 0.018939478, 0.019625371, 0.012600506, -0.0018018503, -0.08505065, -0.03498051, -0.0014478413, 0.038940985, -0.017291125, 0.028033083, -0.037989587, 0.024891254, -0.0008144971, 0.044760007, -0.033741478, 0.037635576, 0.008767253, -0.011449977, -0.013231085, 0.012279686, -0.058101717, 0.01723581, -0.03776833, -0.036396544, -0.012401376, -0.005639252, -0.0061177174, 0.0013033337, -0.010338168, 0.017047744, -0.022899954, 0.011228722, 0.015985716, 0.00915445, 0.051198546, -0.0136404075, -0.0059075244, -0.01771151, -0.013098331, -0.017302187, -0.025798403, -0.0207759, 0.052968588, 0.007854573, -0.0072018695, -0.020952905, -0.08044853, -0.03214844, -0.045114014, 0.025245262, -0.017357502, 0.014381614, -0.037082437, -0.06292509, -0.050092265, -0.0073014344, -0.01619591, 0.088502236, 0.017888514, 0.00069211517, -0.009934376, -0.024271738, 0.014038667, 0.021760488, 0.03230332, -0.033055585, 0.009054885, -0.041463297, 0.042215567, -0.040025137, 0.015554268, 0.033144087, -0.0010108615, 0.015841901, 0.0027670776, 0.023430968, -0.058013216, 0.036551423, -0.0145364925, -0.06323485, 0.053101342, -0.03447162, -0.019415177, -0.03212631, -0.014525429, 0.0007273778, 0.007804791, -0.021439668, 0.022855703, -0.04739295, 0.004784652, -0.049295746, -0.034958385, 0.005758177, 0.04095441, 0.054517377, -0.035334516, -0.047260195, -0.004610413, 0.064739384, -0.027590573, 0.019603245, -0.050048016, 0.021793677, -0.00015643462, -0.05217207, 0.013208959, -0.011051717, -0.015388327, -0.015952528, -0.023209712, 0.020189572, -0.08066979, -0.030267766, 0.014093981, 0.029714625, -0.023386717, 0.025577147, 0.016218035, -0.013098331, 0.006814672, -0.0007336006, -0.024802752, -0.013972291, 0.033763602, -0.0073014344, 0.040799532, 0.024404492, -0.027723325, -0.018773537, -0.011837174, 0.0143263, -0.026572797, 0.07221782, 0.036042538, -0.013773161, -0.037082437, -0.010603675, -0.008286022, 0.011704421, -0.008783847, 0.0016690969, 0.0006762124, 0.0123792505, 0.0018530156, 0.016129533, -0.006952957, -0.01695924, -0.003327131, -0.009574836, 0.0034045705, -0.053278346, -0.036573548, 0.008147737, -0.017136246, -0.0058079595, 0.017899577, -0.0023771147, -0.0076333177, -0.0033133025, 0.013916977, -0.021760488, -0.02511251, -0.021705173, -0.0014837953, 0.005210569, 0.001995449, -0.0038166589, -0.050933037, 0.008562592, 0.014624994, 0.0014672012, 0.02829859, 0.022700824, -0.014149295, -0.048543476, 0.0075116274, -0.011201064, -0.04947275, -0.024183236, 0.014979004, 0.028541971, -0.0073180287, 0.0072682463, -0.0022070245, 0.007080179, 0.044583, -0.026794052, 0.034206115, 0.013662533, 0.017069869, 0.014016542, 0.02989163, 0.03637442, 0.035998285, -0.0014028987, 0.019016918, -0.030267766, 0.027236564, -0.04091016, 0.04557865, -0.022678697, 0.03637442, -0.0029067453, -0.06757146, -0.053543855, -0.005412465, -0.021760488, 0.0044278777, 0.033852104, 0.0014015159, -0.008507278, 0.026683424, 0.06009302, -0.030820904, -0.014945815, 0.033121962, 0.034958385, -0.015941465, 0.009663338, 0.03104216, 0.053234097, 0.043520976, -0.02224725, 0.016372913, -0.03292283, -0.032590948, 0.044826385, -0.013065143, 0.033608723, 0.025732026, 0.019083295, -0.0036009348, 0.024736375, -0.017744698, -0.0034322273, 0.03582128, 0.006670856, 0.005500967, -0.0070193335, 0.0024974225, 0.015687022, 0.020720586, 0.007622255, -0.026041783, 0.0060568717, 0.027723325, 0.02005682, -0.032856457, 0.019691749, -0.004649133, -0.0014934753, 0.029803129, -0.038940985, 0.015864026, 0.013363838, 0.027767576, -0.0077660712, -0.011295098, 0.016726922, 0.075713664, -0.016771173, -0.0022803154, -0.026395792, 0.02984738, 0.01691499, 0.016649483, -0.026926806, 0.0017340907, -0.015078569, 0.005185678, 0.027988832, 0.00085736543, 0.021782612, 0.035489395, 0.043476723, 0.03447162, -0.019713873, -0.06009302, -0.006510446, 0.021041406, 0.0237186, -0.007450782, -0.030931532, 0.00029229937, 0.027125936, 0.0074286563, -0.0053820424, -0.0222915, -0.041529674, -0.040135764, 0.00050473935, 0.025754152, -0.026860429, 0.020963967, 0.0047542294, -0.01611847, 0.05301284, 0.031705927, 0.006018152, -0.025400141, 0.03613104, -0.036086787, 0.041175667, -0.046950437, -0.0012341914, 0.002455937, 0.012335, 0.0052797114, 0.050048016, -0.069031745, 0.002028637, -0.03458225, -0.022745075, 0.0013026423, -0.030112887, -0.0016829254, -0.017512381, 0.035754904, -0.028033083, -0.048543476, -0.036507174, -0.059208, -0.014636057, 0.00013543262, 0.046773434, 0.017678322, 0.030312017, -0.035644274, -0.006316847, -0.027922455, -0.049251493, -0.002928871, -0.013905914, 0.022380004, 0.024869129, 0.00011693704, 0.022003869, -0.045136143, -0.0065823537, 0.016704798, -0.008568123, -0.031152787, -0.038896732, 0.05292434, 0.014171421, -0.026063908, -0.020488268, 0.0069750827, -0.0002553082, 0.030843029, 0.04055615, 0.006073466, 0.0071576186, -0.014414802, -0.008031578, 0.0051884437, -0.01985769, 0.028232213, 0.023253962, 0.0042702327, 0.002075654, -0.00097421603, 0.016981367, -0.02551077, -0.03188293, -0.014071856, 0.014381614, 0.0106258, -0.018895227, 0.030466896, 0.034604374, -0.018662909, -0.013618282, 0.017667258, 0.02197068, 0.044782132, -0.009862468, 0.036905434, 0.020001506, -0.025046133, -0.037193064, -0.007550347, 0.0753154, 0.005285243, -0.0006644582, -0.0008877881, -0.05261458, -0.0028624942, 0.024382366, -0.017888514, -0.013242147, 0.029670374, -0.03801171, -0.021793677, 0.011007465, -0.0080149835, 0.03188293, 0.018397402, -0.02650642, -0.029869504, 0.0039300523, 0.02730294, 0.026771927, -0.07385512, 0.007306966, 0.044118363, 0.056331675, -0.029426994, 0.024072608, 0.011671232, -0.026794052, -0.04294571, -0.036839057, -0.029626124, -0.010941089, -0.06558016, 0.030599648, 0.05465013, 0.00286526, 0.01810977, 0.015498954, 0.0066763875, -0.028077334, -0.0023867947, 0.002402006, -0.04557865, 0.0573052, -0.06204007, 0.012611569, 0.0027186782, 0.046950437, 0.03546727, -0.053588104, 0.01345234, 0.010022879, 0.029006608, 0.018496968, -0.028718976, 0.03307771, 0.027612697, 0.02376285, -0.027435694, -0.028918106, -0.0008850224, 0.0025637993, 0.03761345, -0.033719353, -0.001649737, 0.07991752, 0.03741432, -0.035843406, -0.01651673, -0.0035124326, -0.025842654, -0.003625826, 0.0056973314, -0.008263896, 0.0026260272, 0.0067095757, -0.031617425, 0.034958385, -0.00092166784, -0.033852104, -0.010454327, -0.0060070893, -0.029515496, 0.05221632, 0.014105044, 0.008186457, 0.06739445, 0.020809088, 0.017069869, -0.0031473609, -0.011361475, -0.03287858, 0.028342841, 0.020764837, 0.015333013, -0.063411854, -0.018474841, 0.056464426, -0.01639504, 0.014071856, -0.027745452, 0.06836798, -0.016749049, 0.0015432577, -0.0040738685, 0.010526235, -0.02296633, -0.031374045, 0.015864026, -0.022446379, -0.030312017, -0.024802752, -0.025931155, 0.027546322, -0.0335866, -0.016085282, -0.01257838, 0.02944912, 0.01392804, -0.048100967, -0.002413069, -0.010918964, 0.010266259, -0.022468505, 0.0015487891, 0.038609102, -0.016483542, -0.04956125, 0.03422824, 0.012047367, 0.067748465, -0.040091515, 0.04294571, -0.0326352, 0.017346438, 0.004325547, -0.0037585795, 0.021483919, -0.03944987, -0.009635681, 0.0057415827, -0.0074397195, -0.010891306, 0.024404492, -0.0057968968, -0.01993513, 0.0070469906, -0.01711412, -0.0296925, 0.023984106, -0.029471245, 0.029050859, 0.015687022, 0.047215942, -0.03995876, 0.020023631, 0.012711134, -0.02555502, -0.008274959, -0.013496591, 0.03402911, -0.018961605, 0.02646217, -0.019669622, -0.05066753, 0.005058456, 0.04394136, -0.020632084, 0.022623384, 0.0031805492, -0.027723325, 0.018530156, -0.017600883, 0.03004651, -0.029604, 0.0066763875, -0.04206069, 0.032259066, -0.03911799, 0.04668493, -0.00033672334, -0.022623384, 0.020587834, 0.019503681, 0.06836798, -0.033321094, 0.0030339672, -0.011516354, -0.06558016, 0.02272295, -0.021992806, 0.022070246, -0.014204609, -0.044826385, -0.0036202946, 0.006344504, -0.0034598843, 0.003988132, -0.0034571185, 0.003780705, -0.005863273, 0.0042232163, 0.026019657, -0.005708394, 0.015333013, 0.028276464, 0.02332034, -0.012523066, 0.034006983, 0.019492617, 0.03697181, 0.0029620593, 0.017257936, 0.003824956, 0.0017451535, 0.008656625, 0.017678322, -0.014304174, 0.013883788, -0.03048902, 0.0056807376, 0.013043017, -0.012047367, 0.00050508505, 0.00995097, -0.0035981692, -0.014038667, 0.03573278, 0.022346815, 0.010465389, -0.0066155423, 0.001985769, 0.004712744, 0.0009389534, -0.023276089, 0.021871116, -0.041573927, -0.019990442, 0.015687022, 0.016041031, -0.0036949683, -0.007893293, -0.035002634, 0.006632136, 0.003852613, 0.05889824, 0.008645562, 0.02610816, -0.04011364, 0.032568824, -0.028630475, 0.025953282, -0.0033879762, 0.035600025, 0.042613827, 0.006825735, -0.003733688, -0.037591327, 0.004530208, 0.009834811, -0.055889163, 0.017567694, -0.033697225, -0.005758177, 0.032989208, -0.062305573, 0.007887762, 0.030201389, 0.006659793, -0.039272867, -0.022811452, -0.0030173732, -4.101007e-05, 0.009148919, 0.012091618, 0.009431019, 0.01404973, -0.023607971, 0.0039549437, -0.033298966, 0.017169435, 0.004032383, 0.021605609, -0.0010143186, -0.014071856, 0.00776054, -0.023895605, -0.0007660975, -0.017744698, -0.007832448, 0.008944257, 0.023873478, -0.008026047, -0.013352775, -0.007987327, 0.004521911, 0.008772784, 0.027325066, 0.031860806, -0.015432578, -0.011803986, 0.023054833, -0.060402777, -0.03323259, 0.027656948, -0.030511146, 0.0022415956, -0.0029537622, -0.028851729, 0.02447087, -0.028608348, 0.029670374, 0.038365718, 0.03363085, -0.014613932, 0.04624242, 0.03239182, -0.0016096345, 0.009005102, -0.011350412, -0.010006284, 0.03482563, -0.010437733, -0.04453875, 0.008673219, -0.0017769589, 0.0023356294, -0.008059235, -0.021152034, 0.011350412, -0.003116938, 0.0050114393, -0.032657325, -0.008081361, -0.015056443, 0.010288385, -0.015465766, -0.0286526, -0.014979004, 0.01484625, 0.00026135816, 0.030909406, 0.011311692, -0.0056503145, -0.019547932, -0.03929499, 0.03363085, 0.006427475, 0.0040462115, 0.071863815, 0.014337363, -0.00037993735, 0.013441278, -0.009740777, 0.057172444, -0.02491338, -0.014868376, -0.050888788, 0.008999571, -0.026528545, -0.01198099, 0.007594598, 0.030776653, 0.012666883, 0.046021163, -0.027590573, -0.013153645, 0.027015308, -0.009082542, -0.018120833, 0.017567694, 0.0025831591, 0.007279309, 0.0027408036, 0.0406004, 0.016206972, 0.00855706, -0.05690694, -0.0020175744, 0.03352022, -0.020742713, -0.04159605, -0.046817683, 0.024537245, 0.014945815, 0.026373666, -0.021340102, -0.021152034, -0.0018295072, -0.010647926, -0.0016649483, 0.008368993, -0.0071963384, 0.026395792, 0.026063908, -0.010421138, 0.021483919, 0.048720483, -0.017556632, -0.011992053, -0.031683803, -0.007218464, 0.022391066, 0.0050335648, -0.0068478608, 0.011726546, 0.015211322, 0.052703083, 0.036064662, 0.009746308, 0.017822137, -0.005957307, 0.01504538, 0.007223995, -0.003255223, 0.04159605, -0.009281673, 0.036086787, 0.0037392196, -0.010553892, 0.0048012463, 0.0015888917, -0.00029558365, 0.025245262, 0.0016649483, 0.009923314, 0.01643929, 0.006692982, 0.0027311237, 0.020786963, 0.012135869, 0.02785608, -0.00013992688, -0.040666778, 0.020521456, -0.0071963384, 0.022180874, 0.053986363, -0.018662909, 0.004859326, -0.025820527, -0.005290774, -0.024183236, 0.009165513, 0.0034875413, -0.034759253, -0.035533648, 0.016229097, 0.051552553, -0.0041540735, 0.0142709855, 0.0033824448, 0.018275712, -0.0033713821, -0.026683424, -0.008169862, 0.010642394, 0.021705173, 0.020156385, -0.034051236, 0.0064883204, -0.0136957215, 0.015299824, -0.0071410243, 0.0034460558, -0.01970281, -0.005758177, 0.022745075, -0.0009769817, 0.04593266, -0.021428604, 0.007434188, -0.0029786534, -0.03343172, 0.027944582, 0.013872726, -0.017069869, 0.019758124, 0.0037032655, -0.010681114, -0.0048289034, 0.022081308, -0.033874232, -0.018541219, -0.021417541, -0.014005479, -0.082130075, -0.011339349, -0.00533226, -0.01018882, 0.010504109, -0.030953657, 0.01719156, 0.045667153, 0.028918106, 0.009868, -0.02590903, 0.009292735, -0.0051801465, 0.0014042816, -0.0002852123, -0.014647121, -0.01444799, -0.012390313, -0.0028514315, 0.0040794, 0.0027214438, 0.020278076, 0.020963967, 0.01615166, -0.012689008, 0.013164707, 0.02164986, -0.040334895, 0.021273725, -0.048410725, -0.032104187, -0.0038111275, -0.012202246, 0.039693255, 0.0023093552, -0.05814597, 0.0061177174, -0.020067882, 0.023939855, -0.036153164, -0.02204812, 0.0138506, -0.041773055, 0.016383976, -0.012180121, 0.009292735, 0.052304823, -0.010714302, -0.013474465, 0.004679556, 0.022534883, 0.0056586117, 0.017777886, 0.029626124, -0.061022293, -0.009497397, -0.0040489775, -0.009397832, -0.004596585, -0.011322755, 0.047304444, -0.02149498, 0.020078946, 0.017368564, 0.0020549113, 0.018098708, 0.018032331, 0.01699243, -0.0001406183, -0.0020397, 0.005747114, -0.013408089, 0.024006233, -0.001205843, 0.029604, 0.022767201, 0.0052409917, -0.0065049143, -0.051906563, -0.010874713, 0.008656625, -0.010194352, 0.025599273, 0.02431599, -0.045268893, 0.0081753945, -0.00573052, 0.020864403, 0.03761345, 0.033652976, -0.023253962, -0.0326352, 0.027435694, -0.011992053, -0.005567344, 0.0104875155, 0.0033326624, -0.034537997, 0.018286774, 0.012401376, 0.016162721, -0.034139737, -0.01627335, -0.040401272, 0.0053267283, 0.022855703, 0.051154293, -0.013861663, 0.007743946, -0.009292735, -0.008656625, 0.015565331, -0.02944912, -0.0022457442, -0.0076720375, -0.004615945, 0.040069386, 0.0020908653, -0.0070414594, -0.008291554, 0.047614202, 0.003753048, 0.01667161, 0.0059517752, -0.014967941, 0.040224265, -0.01651673, -0.023541596, -0.009126794, 0.022147685, 0.03767983, -0.01659417, -0.006200688, 0.006372161, -0.051596805, -0.038100213, 0.004151308, 0.014282049, 0.0012445627, -0.0207759, 0.0067925467, -0.0075116274, -0.015189196, 0.0145364925, -0.011494228, 0.0046131792, 0.0167933, 0.0032607543, -0.04011364, 0.0070580533, -0.035600025, -0.018485906, 0.005265883, 0.01659417, -0.023386717, 0.01552108, 0.034051236, -0.027170187, -0.026993182, 0.0042370446, 0.007932013, 0.007461845, 0.020399766, -0.008429838, -0.026218787, 0.015775524, -0.007777134, 0.0069253, -0.03248032, -0.051641054, -0.019304551, -0.004751464, 0.031661674, -0.022944205, 0.012047367, 0.006012621, -0.004798481, 0.009525053, -0.004942297, 0.01492369, -0.020311264, 0.009630149, 0.0037862363, -0.018131895, -0.02790033, 0.03546727, 0.009956501, -0.00041796564, -0.029581873, 0.0006765581, -0.002012043, 0.034914132, 0.013231085, -0.003780705, 0.0346265, 0.014647121, 0.018574407, -0.0037281567, 0.0057139257, 0.030887282, 0.006228345, 0.0072018695, 0.024647873, -0.03442737, -0.0060789976, 0.055667907, -0.018176148, -0.04095441, -0.010139038, 0.007279309, -0.0018792897, 0.00011857917, 0.0030975782, 0.0015764461, 0.018640785, -0.014105044, -0.02790033, 0.00087603385, 0.013618282, -0.023276089, 0.0534996, -0.0031750177, 0.00264677, 0.03617529, -0.016605232, 0.016339725, 0.002112991, -0.016848613, -0.0024766799, -0.006842329, 0.0118593, -0.00017320164, 0.011361475, -0.027524196, -0.006045809, 0.008651094, -0.0016746282, 0.05624317, -0.0071133673, 0.0034875413, -0.022789326, 0.02785608, 0.009303798, 0.0060236836, -0.004333844, 0.045313146, 0.015233448, 0.003589872, -0.0032773484, -0.03009076, -0.016859677, -0.019193923, 0.0019802377, -0.024603622, -0.019625371, 0.005639252, -0.03840997, -0.01997938, 0.010332637, 0.02164986, -0.0063776923, -0.0077881967, 0.017423877, 0.02332034, 0.022468505, 0.002473914, -0.04150755, 0.018297838, 0.029338492, 0.027479945, -0.026993182, 0.0048759202, 0.031617425, 0.037392195, 0.04159605, -0.048410725, 0.01277751, 0.010797273, -0.013264272, 0.0036728429, -0.0005310134, -0.0045550996, 0.0058079595, 0.0425032, -0.004804012, 0.03588766, 0.015023255, 0.0074839704, -0.0026094331, -0.029426994, -0.035799153, 0.02396198, -0.0058134906, 0.009121262, 0.006300253, 0.012401376, -0.033852104, -0.0103271045, 0.02555502, 0.016361851, -0.0057139257, -0.012124807, 0.018154021, 0.023607971, 0.0017368564, -0.02555502, 0.012124807, 0.018640785, -0.024692124, 0.0076665063, 0.012666883, -0.004806778, -0.008927663, 0.025178887, 0.005102707, 0.00076471467, -0.0048814514, 0.02889598, -0.027435694, 0.012943452, 0.016284412, -0.00067828665, 0.005857742, -0.025975406, 0.015786586, -0.0474372, 0.014669246, 0.004024086, 0.0053820424, -0.017368564, 0.00062193564, 0.017722573, 0.019393053, -0.012744322, 0.029072985, 0.0013095565, -0.020034693, 0.009148919, 0.008203051, 0.022346815, -0.01333065, -0.008933195, -0.019304551, 0.0043117185, -0.01572021, -0.008822567, -0.015078569, -0.0005251363, -0.025953282, -0.012799636, 0.016782237, 0.0010074044, 0.015344075, -0.030820904, 0.0062062196, 0.022479568, -0.038874608, -0.028984483, 0.027325066, -0.031462546, -0.04903024, 0.012080556, 0.01011138, 0.008772784, 0.0007225378, 0.012766448, 0.01313152, 0.001894501, 0.003517964, 0.05854423, -0.011881425, 0.002038317, 0.0005856359, -0.030157138, -0.010830461, -0.043808606, -0.011516354, 0.01810977, -0.027833953, 0.01082493, 0.0067648897, -0.056552928, -0.012545192, 0.033144087, -0.017744698, 0.071377054, -0.024050483, 0.0136404075, 0.0124345645, 0.0033935076, 0.018408466, 0.0017714276, -0.0062394077, -0.019061169, -0.027391443, -0.015709147, -0.0044002207, -0.003534558, 0.0069031743, -0.04549015, -0.030887282, 0.0061564366, 0.0009230507, 0.012711134, -0.017833201, -0.00286526, -0.010902369, 0.012744322, 0.010653457, -0.008457495, -0.005639252, -0.020609958, 0.018651847, -0.023386717, 0.008418775, 0.004831669, -0.016693734, 0.01643929, 0.0027034667, 0.019990442, 0.0019511977, -0.04460513, -0.0045827567, 0.03621954, -0.019138608, -0.008662157, 0.0060236836, -0.032214813, -0.0061675, -0.012545192, 0.017003492, 0.0064606634, -0.009209764, 0.0434546, -0.01791064, 0.023740726, 0.0018239758, 0.059650507, 0.0044168145, 0.023386717, -0.020134259, 0.0074286563, 0.010830461, 0.012124807, 0.0035234953, 0.010006284, -0.028984483, -0.005642018, 0.041972186, -0.0025126338, 0.016383976, -0.0028348372, 0.01970281, 0.03697181, 0.033321094, 0.04394136, 0.018353151, 0.0573052, -0.03382998, 0.045136143, 0.0115384795, 0.024869129, 0.026771927, 0.014713497, -0.005014205, -0.035179637, 0.020676335, -0.0073014344, 0.03776833, 0.029869504, -0.011394663, 0.0079652015, -0.008922132, -0.032082062, 0.0022415956, 0.0067372327, 0.0010385184, -0.0007778517, 0.008402181, -0.053986363, -0.017047744, -0.023939855, 0.007987327, -0.026063908, -0.0074784392, 0.020687398, 0.020322327, -0.011278504, -0.05106579, 0.010045004, -0.0018557813, 0.046419423, -0.006941894, -0.00062400993, -0.010642394, -0.016450353, -0.014824125, 0.009901187, 0.02017851, 0.031573173, -0.026373666, -0.03028989, -0.054915637, 0.0024158345, -0.011350412, 0.032745827, 0.0013724761, 0.034914132, 0.0034764784, -0.019216048, 0.0126447575, 0.026572797, 0.023607971, -0.06580141, 0.008291554, -0.02447087, 0.022114497, 0.02630729, -0.026727676, -0.0026135817, -0.014436928, -0.0049727196, 0.004095994, -0.03044477, 0.014613932, -0.0023314808, 0.03219269, 0.011759735, -0.004333844, -0.019990442, 0.027170187, 0.0021019282, -0.0055701095, 0.047171693, -0.026550671, 0.02017851, 0.017954892, -0.020388704, 0.02790033, 0.011350412, -0.024448743, 0.0018419528, 0.011079374, -0.025842654, -0.01882885, -0.021506043, 0.031661674, -0.03307771, -0.017512381, 0.01066452, -0.016693734, 0.03267945, -0.02849772, -0.023076959, -0.0068036094, 0.0010758553, -0.004740401, -0.008042641, -0.02351947, -0.03801171, -0.015476828, -0.027878204, -0.034914132, 0.0004833052, -0.014967941, 0.024360241, -0.0078103226, -0.02296633, 0.00049021945, -0.009043822, 0.021019282, 0.026395792, 0.035179637, 0.066951945, -0.02964825, 0.02626304, 0.0010855353, -0.053366847, 0.0043836264, 0.002827923, -0.0022360643, -0.02825434, -0.0038332532, -0.02451512, 0.008131143, 0.009657807, 0.027081685, 0.026041783, -0.016052093, -0.012467752, -0.007069116, -0.01639504, -0.016981367, 0.016881801, -0.00085529115, 0.03294496, 0.0067482954, -0.020975031, -0.014868376, -0.02069846, -0.0015225151, 0.011134688, -0.020598896, 0.019227112, 0.0017396221, -0.022202998, 0.024847003, 0.010725365, 0.00058183307, 0.05544665, 0.024847003, -0.024492994, -0.04593266, 0.03588766, -0.027612697, 0.01257838, -0.004261936, -0.056818437, -0.005918587, 0.018331027, 0.03343172, 0.034560125, -0.013098331, 0.0063389726, -0.009729715, -0.014071856, 0.0068036094, -0.012954515, 0.0044665975, -0.021417541]"
../../../gradio,../../../gradio/gradio/components,login_button.pyi,"""""""Predefined button to sign in with Hugging Face in a Gradio Space.""""""
from __future__ import annotations

import warnings
from typing import Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components import Button
from gradio.context import Context
from gradio.routes import Request

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class LoginButton(Button):
    """"""
    Creates a button that redirects the user to Sign with Hugging Face using OAuth.
    """"""

    is_template = True

    def __init__(
        self,
        value: str = ""Sign in with Hugging Face"",
        logout_value: str = ""Logout ({})"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str
        | None = ""https://huggingface.co/front/assets/huggingface_logo-noborder.svg"",
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = 0,
        min_width: int | None = None,
        signed_in_value: str = ""Signed in as {}"",
    ):
        """"""
        Parameters:
            logout_value: The text to display when the user is signed in. The string should contain a placeholder for the username with a call-to-action to logout, e.g. ""Logout ({})"".
        """"""
        if signed_in_value != ""Signed in as {}"":
            warnings.warn(
                ""The `signed_in_value` parameter is deprecated. Please use `logout_value` instead.""
            )
        self.logout_value = logout_value
        super().__init__(
            value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )
        if Context.root_block:
            self.activate()
        else:
            warnings.warn(
                ""LoginButton created outside of a Blocks context. May not work unless you call its `activate()` method manually.""
            )

    def activate(self):
        # Taken from https://cmgdo.com/external-link-in-gradio-button/
        # Taking `self` as input to check if user is logged in
        # ('self' value will be either ""Sign in with Hugging Face"" or ""Signed in as ..."")
        _js = _js_handle_redirect.replace(
            ""BUTTON_DEFAULT_VALUE"", json.dumps(self.value)
        )
        self.click(fn=None, inputs=[self], outputs=None, js=_js)

        self.attach_load_event(self._check_login_status, None)

    def _check_login_status(self, request: Request) -> LoginButton:
        # Each time the page is refreshed or loaded, check if the user is logged in and adapt label
        session = getattr(request, ""session"", None) or getattr(
            request.request, ""session"", None
        )
        if session is None or ""oauth_info"" not in session:
            return LoginButton(value=self.value, interactive=True)  # type: ignore
        else:
            username = session[""oauth_info""][""userinfo""][""preferred_username""]
            logout_text = self.logout_value.format(username)
            return LoginButton(logout_text, interactive=True)


# JS code to redirects to /login/huggingface if user is not logged in.
# If the app is opened in an iframe, open the login page in a new tab.
# Otherwise, redirects locally. Taken from https://stackoverflow.com/a/61596084.
_js_open_if_not_logged_in = """"""
(buttonValue) => {
    if (!buttonValue.includes(""Signed in"")) {
        if ( window !== window.parent ) {
            window.open('/login/huggingface', '_blank');
        } else {
            window.location.assign('/login/huggingface');
        }
    }
}
""""""","This code defines a custom `LoginButton` class that inherits from the `Button` class in Gradio. The `LoginButton` class creates a button that redirects the user to sign in with Hugging Face using OAuth. It includes parameters for customizing the button's appearance and behavior, such as the text displayed on the button, the icon, and the link for redirection.

The `activate` method of the `LoginButton` class sets up the button to handle the redirection logic based on the user's login status. If the user is not logged in, the button redirects to the Hugging Face login page. If the user is logged in, the button displays a logout option with the username.

Additionally, the code includes JavaScript code `_js_open_if_not_logged_in` that handles the redirection behavior when the user is not logged in. If the app is opened in an iframe, it opens the login page in a new tab; otherwise, it redirects locally.","[-0.0386053, 0.022242786, 0.013736141, 0.037675608, 0.042835377, -0.040046312, -0.0064439005, 0.014259091, 0.005676908, -0.036815647, 0.016513584, 0.019383997, -0.023207339, 0.04422991, -0.015363095, 0.025938297, -0.023486245, -0.008948248, 0.0017736705, 0.039860375, -0.05308519, -0.04030198, 0.016095225, 0.060429726, -0.010691413, -0.03565354, -0.020453138, -0.0029837177, 0.017257335, -0.011580427, -0.030633222, -0.019790735, -0.038256664, 0.0314467, -0.004761746, -0.00601973, -0.007268999, 0.02586857, 0.031911545, -0.0063683633, -0.07507231, -0.041324634, -0.011557185, 0.070144966, -0.025891813, -0.016757628, -0.0004096438, 0.010772761, 0.026263688, 0.011772175, -0.07707114, -0.022881947, -0.041440845, 0.009343365, -0.03567678, 0.036374047, -0.03028459, 0.01435206, -0.049552374, -0.008355572, -0.046298467, -4.5417622e-05, -0.011626911, -0.0053253695, 0.03302717, 0.038070727, -0.050807454, -0.006839018, 0.050714485, 0.009970904, 0.08334654, -0.0042998074, -0.0041022487, -0.031748846, -0.014166122, -0.00961065, -0.02554318, 0.023625698, 0.026310172, -0.054014876, -0.01965128, 0.0011148994, -0.044043973, -0.03621135, -0.03493303, 0.0050493684, -0.04950589, -0.0072515667, -0.028355487, -0.046647098, 0.021499036, 0.011853523, -0.042602956, 0.040883034, -0.008012749, 0.00041799646, -0.026589079, -0.049598858, 0.03186506, 0.04973831, 0.05554886, -0.05773363, 0.015397958, -0.027146893, 0.058616832, -0.031074824, 0.012457821, 0.057082847, 0.002040956, -0.028913299, -0.007722222, 0.004901199, -0.008733258, 0.00050842314, -0.0024142838, -0.043021314, -0.0073329145, -0.015397958, -0.0065020057, -0.044787724, -0.011353816, -0.015432822, 0.031074824, -0.049552374, 0.038512327, -0.03565354, 0.010999372, 0.014375302, -0.050621517, 0.008669341, 0.008210308, 0.043091044, -0.050900422, -0.06461332, -0.03314338, 0.043951005, -0.015746592, -0.021406068, -0.04244026, 0.0007662663, -0.016792491, -0.06916879, -0.015827939, -0.039558228, 0.0031958027, -0.03332932, 0.017664073, 0.030075409, -0.07037739, -0.037094556, -0.014026669, 0.0094130915, -0.005119095, 0.02628693, -0.012004597, 0.013143465, 0.05898871, 0.0012732368, -0.011801228, 0.051458236, -0.004137112, 0.011737312, 0.05248089, 0.0278674, -0.013782626, -0.008861089, 0.0095699765, -0.0035066672, -0.02882033, 0.053178158, 0.03072619, 0.003622878, -0.019616418, 0.022533314, 0.0070888717, -0.020708801, -0.0014729745, 0.018117296, 0.0053602327, 0.008489214, 9.641882e-05, -0.046089288, -0.003843679, -0.033956856, -0.06912231, -0.019395618, 0.02195226, -0.03862854, 0.027193377, 0.02396271, 0.01456124, -0.013213192, -0.0011345099, -0.04151057, 0.004761746, -0.0065949745, 0.023916226, -0.040162526, 0.007722222, 0.0061359415, -0.037117798, -0.013457235, -0.0033003928, -0.05996488, -0.0077047898, 0.04676331, 0.03060998, 0.0017300914, -0.0065717325, 0.027495524, -0.005107474, -0.017373545, 0.018582141, -0.01592091, -0.018454308, -0.014712314, 0.041742995, 0.008605425, 0.011458405, 0.018965637, -0.017048156, 0.01667628, 0.016060362, -0.014793661, 0.05531644, 0.013213192, 0.026356656, 0.017396787, -0.038024243, 0.041254908, 0.059593007, -0.003158034, 0.022347378, -0.054712143, 0.042835377, -0.026960954, 0.025682634, -0.020325305, 0.022242786, -0.0024259049, -0.06642621, 0.0074781785, 0.0006464237, 0.0037303735, 0.020836635, -0.024729703, 4.2988995e-05, -0.002473842, 0.026426384, 0.025705876, -0.038372874, 0.027239861, 0.04388128, -0.009906989, -0.03662971, 0.020325305, 0.021684974, 0.015339853, -0.029726775, -0.031702362, 0.01689708, -0.037187524, -0.013689657, 0.03823342, -0.0044683134, -0.012097566, -0.0021208508, 0.015014462, -0.016757628, 0.04339319, -0.012027839, -0.0013785531, 0.0399301, 0.0032742452, 0.05689691, -0.00939566, 0.046275225, -0.0012114998, 0.009349176, 0.013364266, -0.025078336, 0.0059558144, 0.038884204, 0.025217788, -0.031074824, 0.038977172, 0.0058860877, -0.010610065, -0.037071314, 0.027727947, -0.032562323, -0.030795917, -0.0048692413, -0.011865144, -0.02417189, 0.03356174, 0.030517012, -0.0036867943, -0.012585652, 0.0121208085, 0.021162026, 0.011411921, -0.014479891, 0.0052324007, 0.040720336, -0.0113828685, 0.02206847, 0.059825428, 0.01192325, 0.031121308, -0.028216032, -0.010499665, 0.03811721, 0.031539667, -0.026844744, 0.0066240276, -0.0030331074, 0.010546149, -0.009023785, -0.014154501, -0.0057030553, 0.011411921, -0.006414848, 0.0076002, 0.015642002, -0.035118967, -0.0021571668, 0.015293369, 0.008599615, 0.012306746, 0.051458236, -0.037512913, 0.004662967, -0.0017736705, 0.0572223, 0.0043637236, -0.019139953, 0.019198058, -0.04657737, 0.04116194, -0.09668756, -0.00054473913, 0.0008418035, 0.0038523949, -0.021185268, 0.03346877, -0.056339096, 0.020848256, -0.041231666, 0.001020478, -0.016594931, -0.03072619, 0.011812849, -0.033189863, 0.019790735, -0.04622874, -0.028797088, -0.038372874, -0.020255579, 0.009540924, -0.018779699, 0.01414288, -0.0058599403, 0.008076665, -0.0057582557, 0.003736184, -0.0056304233, -0.04834378, 0.06577543, -0.040139284, 0.033863887, 0.03535139, -0.015560654, 0.014026669, -0.06958715, -0.02470646, 0.023718666, -0.030470526, -0.006839018, 0.011754744, 0.04074358, 0.029912714, -0.02101095, -0.038582057, 0.044787724, -0.008216118, 0.056757458, -0.0069552287, 0.018605383, 0.03365471, -0.0095699765, -0.034166038, 0.016653037, -0.01636251, 0.012620515, -0.027495524, 0.03823342, -0.035839476, 0.019488586, 0.01087154, -0.026310172, -0.010267243, -0.0018056285, -0.013178328, 0.015351474, -0.026589079, 0.029401386, 0.0113712475, -0.023579214, -0.0088204155, 0.020092884, -0.00533118, 0.05099339, -0.04213811, 0.050389092, 0.011121393, -0.005761161, -0.041231666, 0.016281161, 0.04899456, 0.0014519113, 0.0005817814, -0.006519438, -0.06545004, -0.008599615, 0.0040615746, 0.051551204, -0.013863973, 0.022707632, -0.05373597, -0.03179533, 0.042835377, -0.025891813, 0.01963966, -0.009982525, -0.0415803, -0.042393778, 0.0121324295, 0.029308416, 0.016292784, -0.0006958134, 0.012271883, -0.007913969, 0.043532643, -0.0027077165, 0.023056265, -0.014793661, -0.05517699, -0.038767993, -0.04074358, -0.018094053, 0.0059906775, -0.010255622, 0.02342814, 0.02598478, -0.008861089, 0.015583896, 0.030749433, -0.02112716, -0.05973246, -0.03314338, 0.0077745165, -0.037419945, 0.07232973, -0.0071063032, -0.019558312, -0.009651325, 0.020441517, 0.030028924, -0.070005514, 0.013143465, -0.0008127507, 0.0057495395, 0.019488586, -0.037094556, 0.028355487, 0.004616482, 0.02101095, 0.01446827, -0.0027759904, -0.0053166538, 0.05922113, 0.014607724, -0.045275807, 0.025171304, 0.07279458, 0.0021542616, -0.011133014, -0.015851181, -0.02986623, 0.027751189, -0.002781801, -0.008163824, -0.01034278, -0.013341024, -0.0036083518, -0.030702949, -0.019395618, 0.02754201, -0.031702362, 0.011557185, 0.009064458, -0.0006199131, 0.0831606, -0.020023156, 0.0076699266, -0.00065513956, -0.030121893, -0.027937127, 0.01182447, -0.03588596, -0.009999957, -0.004814041, 0.014886631, 0.01530499, -0.0023532729, -0.0139104575, 0.03465412, 0.0013553109, 0.019511828, -0.045903347, 0.051923078, -0.016083604, -0.0037826684, -0.00093622494, 0.052806284, 0.00077570847, -0.019511828, -0.0016966808, 0.005636234, -0.013062118, -0.012620515, 0.022835463, 0.019442102, -0.026147477, -0.0077047898, -0.037071314, 0.0072980514, -0.022161439, -0.06335824, 0.026100993, 0.0041196803, 0.012887801, 0.015827939, 0.017024912, 0.026077751, -0.0011410469, -0.043044556, 0.05805902, -0.006345121, 0.043765064, -0.031051582, 0.030586738, -0.01996505, -0.0073619676, -0.021545522, -0.002112135, 0.008808794, 0.0004114596, 0.010842487, -0.0064206584, -0.004093533, -0.0051220004, 0.026542595, -0.036304317, -0.03683889, 0.012376472, -0.009447955, -0.03158615, 0.035955686, -0.008105718, 0.016002256, 0.003070876, 0.06879692, -0.0023038832, 0.005214969, -0.0115048895, -0.02965705, 0.007972076, 0.0115048895, -0.010668171, -0.03886096, -0.028355487, -0.027425798, -0.038582057, -0.018338097, 0.002738222, 0.0002783617, 0.00025439315, 0.007733843, -0.012097566, 0.008861089, 0.005438675, 0.034166038, -0.022010366, 0.0365135, 0.009157428, 0.020418275, 0.0017417124, 0.031655878, -0.015026083, -0.069540665, 0.05099339, 0.003948269, 0.04348616, -0.02902951, -0.013852352, -0.0018709973, 0.007199272, 0.025473453, -0.005351517, 0.005223685, 0.0027934222, -0.041092213, -0.03907014, 0.032562323, -0.004982547, 0.017071398, 0.006269584, -0.0061591836, 0.0071702194, 0.010185895, 0.04241702, 0.000540018, 0.014712314, 0.027402556, -0.0013785531, -0.0008359929, 0.0043462915, 0.01171407, -0.01351534, 0.024264859, 0.024752945, -0.023125991, -0.014933115, -0.026426384, 0.03072619, -0.00056580233, 0.0215339, -0.027379313, 0.03028459, -0.022149818, 0.00496221, 0.0052730744, 0.009093512, 0.042579714, 0.001168647, 0.03072619, 0.013736141, 0.007379399, 0.002725148, 0.0069319867, 0.028262516, 0.003895974, -0.0076002, 0.004445071, -0.009012164, 0.003861111, 0.008471782, 0.014514755, -0.025055094, 0.03821018, -0.038489085, 0.0136199305, -0.024195133, 0.029401386, -0.027216619, 0.023137612, -0.013120223, -0.024567008, -0.031493183, 0.02194064, 0.03179533, -0.013341024, 0.036281075, 0.013968564, 0.0027934222, -0.027611736, -0.01774542, -0.025217788, -0.013968564, 0.0042533227, 0.0012979317, -0.023741908, 0.040232252, -0.029517597, 0.024543766, 0.011865144, 0.011777986, -0.024567008, -0.02205685, -0.006780912, -0.015130674, -0.009912799, 0.008192876, 0.002777443, 0.0009914251, -0.019465344, -0.007518852, -0.019232921, 0.027704705, 0.0021266614, 0.037094556, -0.005214969, -0.012841317, 0.015328232, -0.028006854, 0.0034688986, -0.023985952, -0.009628082, -0.042091627, -0.030377558, -0.010720465, 0.03242287, 0.011847712, 0.015955772, 0.0030563495, -0.006618217, 0.03621135, -0.009273639, -0.022556556, 0.037536155, -0.05341058, -0.028518181, 0.01868673, -0.03258557, -0.032469355, 0.026054509, -0.04697249, 0.005363138, -0.057780113, 0.0012107735, 0.031609394, 0.010226569, -0.026984196, 0.047460575, -0.0034688986, -0.01709464, -0.00031431447, -0.020662317, -0.010865729, 0.0070365765, -0.005572318, -0.017257335, 0.03686213, -0.015804697, -0.002052577, 0.0104764225, -0.028983025, 0.034119554, 0.014979599, 0.006984282, -0.03862854, -0.0033439717, -0.013282918, 0.0059790565, 0.009064458, -0.0047297883, -0.054107845, 0.023509488, 0.015851181, 0.037187524, 0.0012064156, 0.005723392, -0.021836048, -0.0405344, 0.008378814, 0.016687902, 0.040464673, 0.04694925, 0.014421786, -0.024985367, -0.011888387, -0.028866814, 0.07009848, -0.057268783, 0.015583896, -0.014375302, 0.035560567, -0.019906946, 0.009093512, 0.010377643, 0.018431066, -0.00522659, 0.051179327, -0.001884071, 0.01804757, 0.013573446, 0.0024752945, 0.014514755, 0.028959783, 0.0003444567, -0.013771005, -0.017117882, 0.031307247, 0.012585652, 0.0036577415, -0.062335584, -0.030540254, 0.002677211, 0.0032684347, -0.0042533227, 0.009808209, 0.048808623, 0.0072864303, 0.019151574, -0.014921494, 0.012376472, 0.00039911218, -0.003492141, 0.022974916, -0.0062753945, -0.040999245, 0.022510072, 0.011958113, 0.0035589621, 0.012097566, -0.0278674, -0.012620515, -0.031818572, -0.010424128, 0.0014933115, -0.013782626, 0.0065078167, -0.015979014, 0.0070365765, -0.022579798, 0.029912714, 0.001284858, 0.032004513, -0.01626954, 0.009546734, 0.010697223, 0.022324136, -0.024102163, 0.01023238, -0.016699523, 0.0021469984, -0.009994146, 0.0063916054, -0.011348005, -0.009122564, 0.010296295, -0.00055708655, 0.011103962, -0.011533943, -0.00083308766, 0.0021876723, -0.014189364, -0.012736727, 0.007367778, -0.021150403, -0.010581013, -0.0190005, 0.024799429, -0.021998744, 0.008837847, 0.018140538, -0.041742995, -0.0010909309, -0.019860461, 0.012690242, -0.019267784, 0.0011403206, 0.02882033, -0.052294955, -0.013678036, 0.014259091, 0.0026844742, -0.0051132846, 0.0010335516, 0.014166122, 0.020929603, -0.00031249865, -0.03463088, 0.017257335, 0.008187066, 0.017861633, -0.00025639054, -0.0050813262, 0.037419945, -0.005223685, -0.013108602, 0.015049325, 0.020104505, -0.04390452, 0.0019973768, -0.012074324, -0.010749518, 0.06056918, -0.035421114, 0.011255036, -0.025566421, -0.055874255, 0.014584482, 0.045508232, -0.02090636, 0.020011535, 0.010075495, 0.0010015937, 0.03251584, -0.0010633307, -0.024474038, -0.027797673, -0.034770332, -0.031167792, -0.019383997, -0.024822671, -0.0142126065, -0.008088286, -0.0025406631, -0.062846914, 0.02691447, 0.013259676, 0.008245171, 0.00037042258, -0.008436919, -0.002834096, 0.023125991, 0.026728531, 0.023474624, -0.032655295, -0.049134016, -0.00037187524, -0.024055678, 0.015944151, 0.01467745, -0.0072631883, -0.011202741, -0.00153108, -0.022219544, -0.008634478, 0.0056536654, 0.02089474, 0.012213777, -0.028216032, -0.0061301305, -0.0094247125, -0.039883617, 0.021568764, 0.025148062, -0.048715655, 0.023695424, 0.0049041044, 0.0079255905, -0.045345537, 0.0016008066, 0.010883161, 0.015560654, -0.037187524, -0.0045961454, 0.05159769, 0.0475303, -0.020546107, -0.059035193, -0.014177743, 0.03367795, 0.025612906, 0.02744904, -0.004970926, -0.04506663, 0.040790062, 0.006769291, -0.002913991, 0.03251584, -0.022091713, 0.016687902, -0.031214276, 0.027356071, 0.020209095, -0.02290519, 0.03639729, 0.026472868, 0.024752945, 0.019023743, 0.008396246, 0.017152745, 0.02038341, 0.038907446, -0.027239861, 0.0005349338, 0.044090457, 0.03388713, -0.0019334607, -0.041324634, -0.0049244417, 0.012969148, -0.018640246, 0.005151053, 0.0005618076, -0.043207254, -0.031934787, -0.035211936, 0.013131844, 0.005583939, -0.0088669, -1.8089877e-05, -0.005973246, 0.028587908, -0.0045525664, -0.014549619, 0.012539168, 0.011562996, -0.034816816, 0.024892397, -0.005708866, 0.032678537, -0.036815647, -0.04032522, -0.01983722, 0.03883772, -0.0023750626, 0.037024826, -0.02586857, -0.00991861, -0.0192213, 0.0008418035, 0.04646116, -0.029168963, 0.034142796, -0.0014838693, -0.017722178, 0.010772761, -0.01783839, -0.019093469, -0.0092910705, 0.024288101, 0.023985952, 0.021464173, -0.0016182383, -0.0032132345, 0.04081331, -0.03927932, -0.005839603, -0.018082432, 0.01782677, 0.0329342, -0.0072050826, 0.0032393818, -0.04065061, -0.032632053, -0.015456065, 0.009790777, 0.019337513, -0.036583226, -0.007222514, 0.028773846, -0.011888387, -0.010784382, 0.048948076, -0.012376472, 0.009174859, 0.008396246, -0.00073321885, 0.0018898816, 0.021522278, -0.032887716, -0.005583939, 0.016002256, 0.005984867, -0.032957442, 0.021045813, 0.023660561, -0.02554318, 0.002934328, -0.012922664, 0.03272502, 0.024683218, 0.03270178, -0.0011824471, -0.00949444, -0.00844854, -0.012202156, 0.0046222927, -0.024915641, -0.022765737, -0.0027033587, 0.0014097848, -0.006565922, -0.021789564, 0.007931401, 0.01973263, 0.024032436, 0.017931359, -0.0065252483, 0.042602956, 0.005307938, 0.012980769, -0.006269584, -0.010168463, -0.054014876, 0.019337513, -0.016804112, 0.013387509, -0.0030476337, 0.0055171177, 0.028727362, 0.036559984, 0.037559398, -0.003282961, -0.00585413, 0.011313141, 0.026077751, 0.031818572, -0.006873881, 0.056106675, 0.0021557142, 0.016281161, 0.0069726603, -0.013410751, -0.029331658, 0.008861089, 0.008936627, -0.013608309, 0.008948248, 0.0017881969, -0.02396271, 0.0069203656, 0.032236934, -0.02247521, 0.030958613, -0.007222514, 0.0047762725, 0.017408408, 0.03009865, -0.036699437, 0.00229662, -0.027681462, -0.0115048895, 0.017966222, 0.0074781785, -0.041533813, 0.016990049, -0.019860461, 5.420154e-05, -0.0003838595, -0.030586738, 0.006316068, 0.015642002, -0.0047995145, -0.02417189, 0.0053253695, -0.010883161, 0.0022268936, 0.011812849, 0.020766906, -0.010511286, 0.040116042, 0.017571105, 0.040232252, -0.0202672, 0.0032103292, 0.00844854, 0.037745334, 0.042602956, -0.011777986, -0.010673981, 0.006711186, -0.017501378, -0.0036170676, -0.017466515, -0.002606032, -0.028006854, -0.038767993, 0.031284004, 0.016013877, 0.013689657, 0.005034842, 0.0080708545, 0.046251982, 0.011074909, 0.013422372, -0.027170135, 0.013538582, 0.034793574, 0.011830281, -0.013526961, -0.008059233, 0.03786155, 0.031167792, 0.045461748, -0.037815064, 0.007483989, 0.032980684, 0.010575201, 0.011109772, -0.009488629, 4.6393612e-05, -0.014886631, 0.02882033, 0.00049898104, 0.004497366, -0.009070269, -0.028750604, -0.009906989, -0.03072619, -0.019163195, 0.008483403, -0.000106587286, 0.018500792, 0.007338725, 0.012643758, -0.017547863, 0.005400907, 0.041533813, 0.042068385, -0.0030243916, -0.014398544, 0.021231752, 0.0044944608, 0.0035734884, -0.00216443, -0.0034863302, 0.0008483404, -0.01572335, -0.0329342, 0.023718666, -0.024009194, -0.010894782, 0.0050726105, 0.004084817, -0.0039046898, -0.0050203158, -0.008959869, -0.002653969, -0.009250396, 0.025682634, -0.020197473, 0.026147477, -0.028169548, 0.004355008, -0.018768078, 0.005043558, 0.0329342, -0.012620515, -0.003378835, -0.0101336, 0.031655878, -0.017431652, -0.0016269542, 0.07088871, 0.0013574898, -0.015258506, -0.0034253194, 0.008314897, 0.031400215, -0.00565076, -0.0016008066, -0.023195717, 0.025171304, 0.005531644, -0.034491427, 0.018814562, -0.010610065, -0.02163849, -0.040999245, -0.00971524, -0.004814041, 0.027263103, -0.017791906, 0.051272295, 0.039651196, -0.040162526, 0.006461332, 0.020058021, -0.018268371, -0.031098066, -0.003599636, -0.015142295, -0.00075101363, -0.013131844, 0.021917397, 0.007948833, 0.0032451923, -0.022196302, 0.039883617, 0.006711186, -0.009360797, 0.018605383, -0.020976087, -0.0073445356, -0.03195803, 0.0017242809, 6.845555e-05, -0.016746007, -0.05308519, 0.019256163, -0.020546107, -0.0124113355, 0.0023765152, 0.003463088, 0.017385166, -0.006780912, 0.0010778571, 0.039442018, -0.025519937, 0.006176615, 0.00085051934, 0.02059259, -0.026984196, -0.00469783, -0.015944151, -0.028239274, 0.022963295, 0.008088286, -0.03302717, -0.03253908, 0.0006823765, 0.00802437, 0.01995343, -0.01678087, -0.016327647, -0.023509488, -0.00665308, -0.011644343, -0.009244585, 0.0060255406, 0.0010611517, -0.038001, 0.043811552, -0.004052859, 0.0076176315, -0.010801814, 0.009941852, 0.0048256624, -0.0023474623, 0.012027839, -0.0069436077, -0.021289857, 0.029773261, -0.033213105, -0.0025348526, -0.019163195, -0.005499686, 0.00020881665, -0.008826226, 0.014166122, -0.017757041, 0.0011148994, 0.046391435, -0.0036170676, 0.015246884, 0.013096981, 0.02364894, -0.0145031335, 0.02586857, 0.016339269, 0.022765737, 0.012144051, 0.0092794495, 0.00823355, -0.008262603, -0.0148169035, -0.032562323, 0.023439761, -0.016955186, 0.02998244, -0.0145263765, 0.030958613, 0.025334, -0.0020671033, 0.044810966, 0.036490258, 0.04348616, -0.018826183, 0.032050997, -0.0030476337, 0.0062289103, -0.005415433, -0.0050638947, -0.041022487, 0.0063683633, 0.010034821, -0.009738483, 0.01804757, 0.005403812, -0.027704705, 0.015711728, 0.00791978, -0.027518768, -0.011743123, -0.02840197, 0.021801185, -0.04950589, 0.023439761, -0.015072568, -0.016188193, -0.044322878, -0.013840731, -0.03314338, 0.02079015, 0.031655878, 0.007977886, 0.02902951, -0.008454351, -0.024450796, 0.019488586, 0.041626785, 0.043648854, 0.017791906, -0.017141124, -0.009860504, -0.02870412, 0.009262017, 0.012167293, 0.0019959242, -0.030424042, -0.04497366, -0.0060429727, 0.020755285, -0.013341024, 0.013956943, -0.009680377, 0.026310172, 0.014270712, -0.03409631, -0.006780912, 0.0010938362, -0.005342801, -0.028053338, 0.010883161, -0.0045235134, 0.005720487, 0.026449626, -0.0012899422, -0.024729703, -0.02586857, 0.014270712, 0.0041196803, -0.031400215, 0.0031958027, 0.032143965, 0.02321896, -0.0026684953, -0.034468185, -0.019709388, 0.024264859, -0.0007255925, 0.0010517096, 0.0047414093, 0.022417104, 0.018558899, 0.032120723, 0.009848883, 0.0010386358, -0.02089474, 0.021150403, -0.00030759603, 0.007356157, -0.00575535, 0.0015819224, -0.0019087659, 0.04297483, -0.02628693, 0.015700107, -0.01530499, -0.033631466, 0.04520608, -0.025171304, -0.023486245, -0.016560068, -0.0018579235, 0.0040877224, -0.0107785715, -0.009023785, -0.015665244, 0.011562996, 0.00061373936, -0.0139104575, 6.754765e-05, -0.0034253194, 0.034049824, 0.0016763438, -0.020011535, 0.017280577, 0.021917397, 0.009349176, 0.024125405, 0.035514083, 0.08357896, 0.010354401, 0.0036286889, 0.027634978, -0.019267784, 0.013329403, -0.01308536, -0.004613577, -0.014712314, -0.017222472, -0.01530499, -0.009988336, -0.01108653, 0.02575236, 0.011429353, -0.028564665, 0.0121324295, -0.011470026, 0.014200985, 0.003567678, -0.009099322, 0.015886044, 0.0012884896, 0.009227154, 0.00037514366, -0.038279906, -0.014723935, -0.023160854, -0.0070481976, -0.038791236, 0.007629253, -0.043788306, -0.031516425, 0.03872151, -0.0026684953, -0.006112699, 0.03465412, 0.0055403598, 0.019779114, -0.05173714, 0.015212021, -0.051690657, 0.052806284, -0.008373003, -0.017024912, -0.014607724, 0.027751189, -0.023695424, 0.0012456367, -0.02047638, 0.03367795, -0.013259676, 0.002141188, -0.0072283247, 0.0022835464, -0.008303276, -0.059174646]"
../../../gradio,../../../gradio/gradio/components,chatbot.pyi,"""""""gr.Chatbot() component.""""""

from __future__ import annotations

import inspect
from pathlib import Path
from typing import Any, Callable, List, Literal, Optional, Tuple, Union

from gradio_client import utils as client_utils
from gradio_client.documentation import document, set_documentation_group

from gradio import processing_utils, utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel, GradioRootModel
from gradio.events import Events

set_documentation_group(""component"")


class FileMessage(GradioModel):
    file: FileData
    alt_text: Optional[str] = None


class ChatbotData(GradioRootModel):
    root: List[Tuple[Union[str, FileMessage, None], Union[str, FileMessage, None]]]

from gradio.events import Dependency

@document()
class Chatbot(Component):
    """"""
    Creates a chatbot that displays user-submitted messages and responses. Supports a subset of Markdown including bold, italics, code, tables.
    Also supports audio/video/image files, which are displayed in the Chatbot, and other kinds of files which are displayed as links. This
    component is usually used as an output component.

    Demos: chatbot_simple, chatbot_multimodal
    Guides: creating-a-chatbot
    """"""

    EVENTS = [Events.change, Events.select, Events.like]
    data_model = ChatbotData

    def __init__(
        self,
        value: list[list[str | tuple[str] | tuple[str | Path, str] | None]]
        | Callable
        | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        height: int | str | None = None,
        latex_delimiters: list[dict[str, str | bool]] | None = None,
        rtl: bool = False,
        show_share_button: bool | None = None,
        show_copy_button: bool = False,
        avatar_images: tuple[str | Path | None, str | Path | None] | None = None,
        sanitize_html: bool = True,
        render_markdown: bool = True,
        bubble_full_width: bool = True,
        line_breaks: bool = True,
        likeable: bool = False,
        layout: Literal[""panel"", ""bubble""] | None = None,
        placeholder: str | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show in chatbot. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            height: The height of the component, specified in pixels if a number is passed, or in CSS units if a string is passed.
            latex_delimiters: A list of dicts of the form {""left"": open delimiter (str), ""right"": close delimiter (str), ""display"": whether to display in newline (bool)} that will be used to render LaTeX expressions. If not provided, `latex_delimiters` is set to `[{ ""left"": ""$$"", ""right"": ""$$"", ""display"": True }]`, so only expressions enclosed in $$ delimiters will be rendered as LaTeX, and in a new line. Pass in an empty list to disable LaTeX rendering. For more information, see the [KaTeX documentation](https://katex.org/docs/autorender.html).
            rtl: If True, sets the direction of the rendered text to right-to-left. Default is False, which renders text left-to-right.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            show_copy_button: If True, will show a copy button for each chatbot message.
            avatar_images: Tuple of two avatar image paths or URLs for user and bot (in that order). Pass None for either the user or bot image to skip. Must be within the working directory of the Gradio app or an external URL.
            sanitize_html: If False, will disable HTML sanitization for chatbot messages. This is not recommended, as it can lead to security vulnerabilities.
            render_markdown: If False, will disable Markdown rendering for chatbot messages.
            bubble_full_width: If False, the chat bubble will fit to the content of the message. If True (default), the chat bubble will be the full width of the component.
            line_breaks: If True (default), will enable Github-flavored Markdown line breaks in chatbot messages. If False, single new lines will be ignored. Only applies if `render_markdown` is True.
            likeable: Whether the chat messages display a like or dislike button. Set automatically by the .like method but has to be present in the signature for it to show up in the config.
            layout: If ""panel"", will display the chatbot in a llm style layout. If ""bubble"", will display the chatbot with message bubbles, with the user and bot messages on alterating sides. Will default to ""bubble"".
            placeholder: a placeholder message to display in the chatbot when it is empty. Centered vertically and horizontally in the Chatbot. Supports Markdown and HTML. If None, no placeholder is displayed.
        """"""
        self.likeable = likeable
        self.height = height
        self.rtl = rtl
        if latex_delimiters is None:
            latex_delimiters = [{""left"": ""$$"", ""right"": ""$$"", ""display"": True}]
        self.latex_delimiters = latex_delimiters
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        self.render_markdown = render_markdown
        self.show_copy_button = show_copy_button
        self.sanitize_html = sanitize_html
        self.bubble_full_width = bubble_full_width
        self.line_breaks = line_breaks
        self.layout = layout
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.avatar_images: list[dict | None] = [None, None]
        if avatar_images is None:
            pass
        else:
            self.avatar_images = [
                self.serve_static_file(avatar_images[0]),
                self.serve_static_file(avatar_images[1]),
            ]
        self.placeholder = placeholder

    def _preprocess_chat_messages(
        self, chat_message: str | FileMessage | None
    ) -> str | tuple[str | None] | tuple[str | None, str] | None:
        if chat_message is None:
            return None
        elif isinstance(chat_message, FileMessage):
            if chat_message.alt_text is not None:
                return (chat_message.file.path, chat_message.alt_text)
            else:
                return (chat_message.file.path,)
        elif isinstance(chat_message, str):
            return chat_message
        else:
            raise ValueError(f""Invalid message for Chatbot component: {chat_message}"")

    def preprocess(
        self,
        payload: ChatbotData | None,
    ) -> list[list[str | tuple[str] | tuple[str, str] | None]] | None:
        """"""
        Parameters:
            payload: data as a ChatbotData object
        Returns:
            Passes the messages in the chatbot as a `list[list[str | None | tuple]]`, i.e. a list of lists. The inner list has 2 elements: the user message and the response message. Each message can be (1) a string in valid Markdown, (2) a tuple if there are displayed files: (a filepath or URL to a file, [optional string alt text]), or (3) None, if there is no message displayed.
        """"""
        if payload is None:
            return payload
        processed_messages = []
        for message_pair in payload.root:
            if not isinstance(message_pair, (tuple, list)):
                raise TypeError(
                    f""Expected a list of lists or list of tuples. Received: {message_pair}""
                )
            if len(message_pair) != 2:
                raise TypeError(
                    f""Expected a list of lists of length 2 or list of tuples of length 2. Received: {message_pair}""
                )
            processed_messages.append(
                [
                    self._preprocess_chat_messages(message_pair[0]),
                    self._preprocess_chat_messages(message_pair[1]),
                ]
            )
        return processed_messages

    def _postprocess_chat_messages(
        self, chat_message: str | tuple | list | None
    ) -> str | FileMessage | None:
        if chat_message is None:
            return None
        elif isinstance(chat_message, (tuple, list)):
            filepath = str(chat_message[0])

            mime_type = client_utils.get_mimetype(filepath)
            return FileMessage(
                file=FileData(path=filepath, mime_type=mime_type),
                alt_text=chat_message[1] if len(chat_message) > 1 else None,
            )
        elif isinstance(chat_message, str):
            chat_message = inspect.cleandoc(chat_message)
            return chat_message
        else:
            raise ValueError(f""Invalid message for Chatbot component: {chat_message}"")

    def postprocess(
        self,
        value: list[list[str | tuple[str] | tuple[str, str] | None] | tuple] | None,
    ) -> ChatbotData:
        """"""
        Parameters:
            value: expects a `list[list[str | None | tuple]]`, i.e. a list of lists. The inner list should have 2 elements: the user message and the response message. The individual messages can be (1) strings in valid Markdown, (2) tuples if sending files: (a filepath or URL to a file, [optional string alt text]) -- if the file is image/video/audio, it is displayed in the Chatbot, or (3) None, in which case the message is not displayed.
        Returns:
            an object of type ChatbotData
        """"""
        if value is None:
            return ChatbotData(root=[])
        processed_messages = []
        for message_pair in value:
            if not isinstance(message_pair, (tuple, list)):
                raise TypeError(
                    f""Expected a list of lists or list of tuples. Received: {message_pair}""
                )
            if len(message_pair) != 2:
                raise TypeError(
                    f""Expected a list of lists of length 2 or list of tuples of length 2. Received: {message_pair}""
                )
            processed_messages.append(
                [
                    self._postprocess_chat_messages(message_pair[0]),
                    self._postprocess_chat_messages(message_pair[1]),
                ]
            )
        return ChatbotData(root=processed_messages)

    def example_payload(self) -> Any:
        return [[""Hello!"", None]]

    def example_value(self) -> Any:
        return [[""Hello!"", None]]

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def like(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","This code defines a `Chatbot` component for Gradio, which creates a chatbot that displays user-submitted messages and responses. The component supports a subset of Markdown formatting, audio/video/image files, and other file types displayed as links. It is usually used as an output component.

The `Chatbot` component has methods for preprocessing and postprocessing chat messages, as well as for handling events like `change`, `select`, and `like`. These event methods allow users to define functions to be called when certain events are triggered, such as user selection or liking a message in the chatbot.

The component also provides parameters for customizing the appearance and behavior of the chatbot, such as setting labels, container options, layout styles, avatar images, and more. The component can be used in Gradio interfaces to create interactive chatbot applications.","[-0.048078973, 0.0055178353, 0.017935893, 0.010461628, -0.005236672, -0.058810048, -0.017900748, 0.014889955, -0.04015953, -0.015417136, -0.01139884, 0.009278398, -0.031958926, 0.00451619, -0.0055705532, -0.0069295107, -0.04079215, 0.0013011137, 0.010924377, 0.0016137618, 0.009582992, -0.027249437, 0.0056525595, 0.060075283, -0.015838882, -0.024578383, -0.044658147, 0.039034877, -0.0027691685, -0.0030254372, -0.051968403, -0.033435035, 0.0012059282, -0.03144346, 0.010660785, -0.050515722, 0.014163615, 0.0058868625, -0.00023778091, -0.014807949, -0.049812812, -0.04564222, -0.009647425, 0.04777438, -0.061340522, -0.0028174934, -0.038683422, 0.018228771, 0.02284454, 0.042854015, -0.06827589, 0.016635511, -0.010379622, -0.0004967955, -0.006542911, -0.0039802217, -0.03910517, 0.021696456, 0.009237395, -0.00015934433, -0.0040124385, -0.020021189, 0.018357638, 0.02502356, -0.032591544, -0.022176778, -0.05712307, -0.04097959, -0.0058077853, -0.003151375, 0.05004712, -0.020677239, -0.017174408, -0.03950348, -0.030271946, -0.004970152, -0.03678557, -0.011568709, 0.016342632, -0.022996837, -0.0022771321, -0.012710936, -0.07146241, -0.025445303, -0.019798601, 0.022118201, -0.01924799, 0.019740026, -0.031888634, -0.05965354, -0.04878188, -0.00862235, -0.038847435, 0.04402553, 0.034817424, 0.0027325584, -0.021801893, -0.013495851, 0.034137946, 0.0047680656, 0.034372248, -0.046509143, -0.040136103, -0.022657098, 0.03615295, -0.05028142, 0.012207185, 0.024156637, -0.019048832, -0.010818941, -0.019470578, 0.003854284, -0.042057384, 0.01258207, -0.015569434, -0.05585783, 0.07085322, -0.03615295, -0.031490322, -0.019060548, -0.0071345256, 0.00451619, -0.010080886, -0.03132631, 0.03697301, -0.042994596, -0.0006761838, -0.024742395, -0.049250487, 0.005394826, -0.019435432, 0.020032905, -0.007163814, -0.07366486, -0.03798051, 0.015592864, -0.040534414, -0.018662233, -0.029077, -0.008885941, 0.013109252, -0.05581097, 0.01656522, 0.016998682, -0.033997364, -0.045056462, -0.05257759, 0.0152179785, -0.07708568, -0.045079894, -0.029123861, 0.047797807, -0.06607344, -0.008733643, -0.010268328, 0.05257759, 0.043627214, 0.0021380146, -0.028983278, -0.026405945, 0.015745161, 0.013894167, 0.031912066, -0.037113592, -0.03441911, -0.018603656, 0.018873105, 0.06059075, -0.03950348, 0.021485584, 0.027249437, 0.008897656, -0.03238067, -0.00030111594, -0.0050052973, -0.0091085285, -0.019072263, -0.028889557, 0.016576936, 0.008077595, 0.02040779, -0.008358759, -0.014889955, 0.016869815, -0.006197314, -0.030693691, -0.020606948, -0.04718862, -0.047282342, -0.005960082, 0.028022636, -0.040651567, 0.009120244, 0.046040535, 0.037558768, 0.0035906932, 0.05192154, -0.025609316, 0.025398443, -0.016647227, 0.026476236, 0.014069894, 0.008552059, -0.0036229098, -0.022118201, -0.010291759, 0.012921809, 0.009688429, -0.011621428, -0.012921809, 0.008253323, -0.037230745, 0.020290637, -0.015733445, -0.05955982, -0.033622477, -0.035848357, 0.05726365, -0.041987095, -0.02086468, -0.07708568, 0.014339343, 0.042947736, -0.03608266, 0.0225048, -0.0044019674, 0.061012495, -0.038144525, 0.009993022, 0.008411477, 0.020114912, -0.006941226, -0.012183755, -0.031138867, 0.06822903, -0.05571725, 0.011849874, -0.0012293585, 0.07314939, 0.03233381, -0.034137946, -0.0018217057, 0.06204343, -0.014597076, 0.036598127, 0.021567589, -0.025539026, -0.041846514, 0.044611286, 0.08608291, 0.00054951373, -0.017912462, 0.027155716, -0.018123336, 0.0006476281, 0.017853888, -0.014433064, 0.040300112, 0.008470053, -0.014222191, 0.0073571135, -0.0047680656, -0.042994596, 0.0375822, 0.006718638, 0.0075269835, -0.005172238, 0.005356752, -0.011890876, 0.011515992, -0.012183755, -0.031349737, 0.04306489, 0.007339541, -0.007573844, -0.0010499703, 0.019013686, 0.03617638, 0.017080687, 0.043720935, -0.05009398, 0.01610833, 0.01060221, 0.031115435, -0.018966826, 0.025773328, 0.054498874, -0.0021526585, 0.039761215, -0.014011318, 0.030014211, 0.034911145, 0.021450438, -0.028561534, 0.0007102309, 0.013835591, 0.075820446, 0.043228902, 0.029756479, 0.0126172155, -0.027764903, 0.023992626, 0.02680426, -0.056138996, -0.019165983, 0.024695534, -0.00024546898, 0.012125179, 0.013835591, -0.027764903, 0.005327464, 0.044540998, -0.01494853, -0.028163219, -0.07225904, -0.017150978, 0.029405024, 0.024601813, 0.0077905743, -0.014210476, -0.020642092, 0.019974329, 0.06373041, -0.04543135, -0.06218401, -0.014397918, -0.032708697, 0.005271817, -0.007808147, -0.03617638, 0.044236403, -0.030599969, 0.0015449353, 0.019576015, 0.02509385, 0.00965914, -0.03922232, 0.029498745, -0.0478681, 0.03474713, -0.0072926804, -0.0133787, 0.0073805437, 0.021509014, 0.007275108, 0.0117151495, -0.055436086, 0.0321698, -0.054873757, -0.022493087, -0.05098433, -0.01765473, 0.0057433518, -0.07169671, 0.0532805, -0.014444779, -0.051968403, -0.04547821, -0.03854284, -0.020009475, -0.060215868, 0.04172936, -0.010736934, 0.028584965, 0.012546925, -0.010537776, -0.044259835, -0.057029344, 0.013601288, -0.05093747, 0.020419504, -0.0015976535, -0.028163219, -0.01101224, -0.06508937, -0.032427534, 0.02661682, -0.015569434, -0.043041456, -0.00085886684, 0.0131795425, -0.04238541, -0.0069587985, 0.01494853, 0.0045132614, -0.008112741, 0.005728708, 0.038730282, 0.0024001412, 0.042033955, -0.025375012, -0.014409633, -0.009606422, -0.024320649, 0.057638533, 0.058247723, 0.035895217, -0.0074918377, -0.006607344, 0.022305643, 0.009260825, -0.00801902, -0.0071696714, 0.05403027, 0.0037781356, -0.019107409, 0.013601288, 0.016834669, -0.025867049, 0.0029668615, 0.044939313, -0.0029068214, -0.00079296913, -0.023336576, 0.030904563, -0.010479201, -0.021063838, -0.019822033, 0.038964584, 0.08397419, 0.024953268, -0.05253073, 0.013413846, -0.026171643, 0.00072194607, 0.038214818, 0.050703164, 0.0021116557, -0.026031062, -0.04543135, -0.06213715, -0.013437276, 0.023149135, -0.013027246, 0.011972883, -0.03479399, 0.011387125, 0.029451884, 0.002574404, 0.019552585, -0.042151105, -0.010098458, 0.01603804, 0.00625589, -0.038144525, 0.007005659, 0.018533366, 0.0005809982, -0.0027486668, -0.041869942, -0.024320649, -0.015100827, 0.009700144, -0.013085822, -0.01756101, -0.041869942, 0.022176778, 0.04939107, 0.015124258, -0.03521574, 0.01019218, 0.0033271024, -0.016190335, 0.06059075, -0.013800446, -0.0019901108, 0.022809396, 0.025445303, 0.015710015, -0.016190335, 0.016717518, 0.030763982, 0.017818742, 0.030271946, -0.037418187, -0.00023741482, 0.019892324, -0.007275108, -0.02316085, 0.033669338, 0.0032860993, 0.013882452, 0.0065897712, 0.0012930596, 0.00042796903, 0.08097511, 0.0030137221, -0.041752793, 0.021016978, -0.014995391, 0.012488349, -0.004308246, 0.0027281654, -0.009963734, 0.028702116, -0.00801902, -0.021696456, -0.021403577, 0.03465341, -0.032427534, -0.0074918377, -0.008926944, -0.0072926804, 0.049906537, 0.00823575, -0.0007340273, 0.0043346053, 0.03458312, 0.032755557, 0.0035789781, -0.019329997, -0.049859673, 0.009003092, 0.014081609, 0.023195995, -0.025000129, -0.052249566, 0.020688953, -0.037254173, 0.013542713, -0.009629852, 0.022469657, -0.015885742, -0.018427929, -0.0052396003, 0.012746083, -0.012640646, -0.047586937, -0.021438723, -0.007515268, 0.017889032, 0.0047124187, -0.008516913, 0.04782124, -0.05417085, -0.010900946, -0.03547347, 0.006812359, -0.009577135, -0.029358163, 0.0024557882, -0.019997759, 0.010391337, 0.014058179, -0.010572922, 0.037441615, -0.0074449773, -0.02511728, 0.017771881, 0.033107013, 0.032052647, -0.0352626, 0.041471627, -0.024508093, 0.021591019, 0.0034618266, 0.0015800807, 0.022668814, -0.010906803, -0.0010982952, 0.009606422, -0.004814926, 0.006144596, 0.03383335, -0.02671054, -0.031818345, -0.0010851157, -0.015920887, -0.06035645, 0.04172936, -0.014069894, 0.014327628, -0.009770434, 0.039480053, 0.02750717, -0.029311303, -0.021016978, -0.008616492, -0.018591942, -0.028795836, -0.0033681053, -0.036410682, -0.0011436915, -0.020489795, -0.032005787, -0.02994392, -0.0065487684, 0.023336576, 0.0029200008, 0.0022463799, -0.0049350066, 0.009887585, -0.00980558, 0.016307488, -0.024062917, 0.0141987605, -0.01410504, 0.025000129, -0.024226928, -0.00020995743, 0.010959522, -0.020852966, -0.031888634, 0.0007347595, 0.02992049, -0.028983278, 0.013413846, -0.0047563505, -0.03441911, -0.007696853, -0.010637355, 0.01852165, -0.016682371, -0.067244954, -0.02352402, -0.005746281, 0.009793865, -0.0087687895, 0.019564299, 0.008224035, -0.014058179, 0.0020735813, 0.014257336, -0.0147610875, -0.01335527, 0.07221218, 0.022375934, -0.041752793, 0.007814004, 0.008985519, 0.027999206, 0.022071341, 0.03533289, -0.007532841, -0.0077788588, -0.036457542, 0.015862312, 0.0019447147, 0.015405421, -0.04325233, 0.019505722, 0.01115868, -0.008891799, -0.023629455, 0.02661682, 0.0010609531, -0.012500064, 0.008247465, 0.0362701, -0.0007197495, -0.007573844, 0.0024733609, 0.0018685663, -0.0013347948, -0.011931879, -0.0061855987, -0.015007106, -0.010426483, 0.023078844, 0.040487554, -0.019083979, 0.0070408047, 0.0033798206, 0.023863759, -0.014034749, 0.024672104, -0.020091482, -0.0055676247, -0.016178621, 0.04411925, -0.03165433, -0.0060625896, 0.010924377, -0.00026651964, 0.0463217, -0.015628008, -0.00024876386, -0.042760294, 0.02436751, 0.011064959, -0.038706854, -0.014889955, -0.03783993, -0.008106884, 0.023629455, -0.04093273, 0.028116358, 0.025820188, 0.00060991995, -0.040651567, -0.003084013, -0.009577135, -0.028748976, 0.017361851, -0.013659864, 0.038894296, 0.010139462, 0.020759244, 0.046696585, -0.021837037, 0.0042438125, -5.3907992e-05, 0.0017660587, 0.00610945, 0.0010294687, -0.0037547052, 0.0037839932, -0.0007680745, -0.0030927993, -0.016120045, -0.014749372, 0.017924178, 0.0040417262, 0.02393405, -0.0003701255, 0.02514071, -0.010514346, 0.011305119, 0.025328152, -0.013624718, -0.001093902, -4.1003022e-05, -0.03955034, -0.02204791, 0.015299984, -0.07104067, -0.017912462, 0.0132966945, -0.05674818, 0.016483216, 0.004284816, 0.010701789, 0.038050804, 0.0009913945, 0.0060743047, 0.051687237, -0.011644858, -0.008786362, 0.0063613257, -0.023559164, -0.000550612, 0.017549293, 0.012230616, -0.04076872, 0.001685517, -0.016202051, 0.025632747, 0.010865801, -0.023371723, 0.011551137, -0.0034647554, 0.007626562, -0.016307488, 0.0094482675, -0.04957851, 0.007638277, -0.002287383, -0.025609316, -0.03156061, 0.0122189, -0.028491242, 0.021391863, -0.0077144257, -0.0026593388, -0.016822955, -0.019986045, 0.022106485, -0.024789255, -0.0062148864, 0.04172936, 0.024203498, 0.0046743443, -0.0042467415, -0.0020032905, 0.041307617, -0.020806104, -0.011914306, -0.009969592, 0.010438198, -0.0023166707, -0.008821507, 0.015346846, 0.03144346, -0.010912661, 0.02120442, -0.00024272324, -0.002369389, 0.011861589, -0.026101353, -0.0013655471, -0.020899827, -0.006607344, 0.005081446, -0.012699221, 0.02284454, 0.018287348, 0.05421771, -0.054920617, -0.025820188, 0.025211, -0.023020267, -0.0049906536, -0.021192705, -0.01494853, 0.023031984, 0.042104244, -0.04725891, -0.020138342, -0.00050997507, -0.0032304523, 0.0033915357, 0.015522572, -0.017865602, 0.014515069, 0.0063261804, 0.024062917, 0.005757996, 0.0071931016, -0.019341711, -0.040956162, -0.0055149063, 0.009916874, -0.0073864013, 0.019189414, -0.0075269835, 0.013027246, 0.028819267, 0.03612952, 0.010555349, -0.0016430496, 0.024039486, -0.015171118, 0.023442013, 0.021040408, 0.005491476, 0.014093325, -0.033716198, 0.046837166, -0.024859546, -0.0131795425, 0.025492165, 0.016670657, 0.009834868, -0.0050345855, 0.024273789, -0.013847306, -0.006015729, 0.0025641532, 0.0053977547, 0.008569632, 0.009881728, 0.024226928, -0.011094246, -0.04224483, 0.0313966, 0.008270895, 0.019529153, 0.026218504, 0.0006871667, 0.033153873, -0.014479924, 0.003303672, -0.020314068, -0.020700669, -0.008575489, -0.058622606, -0.009020665, -0.024109777, 0.04020639, 0.004472258, -0.0075679864, -0.0051429505, 0.022879686, 0.010045741, -0.0046567717, 0.017713305, 0.0116038555, 0.005655488, -0.026031062, -0.010514346, 0.005189811, -0.010391337, 0.009137817, 0.002224414, -0.003221666, -0.0012520566, -0.005268888, -0.000114039656, -0.008979661, 0.019822033, -0.03917546, 0.0047856383, -0.031818345, 0.007128668, 0.0065077655, 0.07305567, -0.0416825, 0.009295971, -0.00944241, -0.012546925, -0.011357837, 0.021087268, -0.03608266, -0.030810842, -0.015206263, 0.018556796, -0.03470027, 0.02504699, -0.022621952, -0.00707595, -0.014163615, -0.03144346, 0.018123336, 0.03769935, -0.0025275433, -0.014187045, -0.02195419, 0.007773001, 0.00084715174, 0.018896535, -0.02989706, -0.015499142, 0.017408712, -0.004870573, -0.023055414, 0.03151375, -0.0033563902, 0.026499668, 0.0038513553, -0.0057726395, 0.02518757, -0.010496774, 0.02664025, -0.01808819, 0.007855007, -0.028444381, -0.011428128, -0.0070408047, -0.0029097502, -0.025304722, 0.03313044, -0.07193101, -0.030178225, -0.026944842, 0.018345924, -0.04636856, -0.008511056, 0.022657098, -0.0041266615, 0.018744238, 0.00039428798, 0.04229169, 0.071977876, 0.030927993, -0.03854284, -0.0034501115, -0.021919044, 0.010104316, 0.018697377, 0.013648149, -0.051780958, -0.02318428, 0.0016943035, 0.0010353263, 0.003772278, -0.017373566, 0.05407713, -0.021532444, 0.008680926, 0.026382515, 0.02391062, 0.008253323, 0.0385897, 0.040229823, -0.020220347, 0.013366985, -0.00016538496, -0.03214637, 0.03289614, -0.0011890876, 0.00881565, 0.01178544, 0.02511728, 0.00095185585, -0.03516888, -0.041213896, -0.0044107535, 0.018919965, 0.012371197, 0.01756101, -0.03378649, -0.020419504, -0.00024089275, 0.031865206, 0.029569035, 0.013507567, 0.00075343053, -0.0064960504, 0.0437678, 0.004527905, -0.017689874, 0.0028760692, 0.022141632, -0.03322416, 0.0218839, -0.015053967, 0.020993548, -0.025890479, -0.032544684, -0.02977991, -0.0352626, -0.0027662397, 0.050468862, -0.026897982, 0.008704356, -0.027952345, -0.015920887, 0.00924911, -0.010420625, -0.010186322, -0.0033153873, -0.0034032508, 0.021848753, -0.00492622, -0.0070583774, -0.03284928, 0.014351058, 0.029217582, -0.028491242, -0.0050082263, -0.0002659705, 0.022422796, -0.027975775, -0.011094246, -0.0010624176, 0.051218633, 0.014807949, 0.010637355, -0.0021072624, 0.015710015, -0.038753714, -0.016412923, 0.0075504137, 0.032591544, 0.008926944, -0.042924307, -0.006624917, -0.0141519, 0.029405024, 0.022832826, 0.00801902, 0.008844937, 0.027554031, 0.0339505, 0.0153117, 0.003028366, -0.030107934, 0.011926021, 0.004905719, 0.028584965, -0.028725546, 0.00765585, -0.0011239221, -0.033388175, -0.022785965, -0.010526061, 0.03636382, 0.0033271024, 0.03207608, 0.022914832, 0.014257336, -0.0027018064, -0.019915754, 0.008153744, -0.016389493, -0.032427534, 0.036434114, -0.023137419, 0.013214688, -0.034348816, -0.010297616, 0.027272867, -0.00093355094, -0.0013831198, -0.0042438125, 0.029170722, 0.006554626, 0.014702512, 0.019400287, -0.007720283, -0.048078973, 0.024320649, -0.0009474627, -0.041331045, -0.0066952077, -0.009735289, -0.014081609, 0.00205308, 0.0006366451, 0.004267243, -0.010906803, 0.027483739, -0.012464918, -0.010198037, 0.0054182564, 0.015147688, 0.0009738218, -0.015768591, 0.03830854, 0.006706923, -0.02040779, 0.052999336, -0.015042251, -0.038378827, -0.016530076, 0.03373963, -0.020560086, 0.002968326, 0.0031133008, -0.020630378, 0.0244378, -0.002883391, -0.007749571, 0.015053967, 0.03678557, 0.013870737, 0.01197874, 0.010274186, -0.017338421, -0.0137418695, 0.000710597, -0.011340264, -0.011562852, -0.03369277, -0.0044429703, 0.006759641, -0.008036592, -0.011164537, -0.005658417, -0.04233855, 0.013706724, -0.013238118, -0.006390614, 0.02823351, -0.03226352, -0.0092198225, -0.014702512, 0.034442537, 0.026031062, -0.02282111, 0.022645384, 0.036551267, 0.026405945, 0.027811764, 0.018146766, -0.019306567, 0.0024718964, 0.007421547, -0.0015830095, 0.01658865, -0.022633668, -0.0057843546, -0.021790177, -0.019458862, 0.028678685, 0.015053967, -0.027226007, -0.0008046843, 0.0053479658, 0.04086244, 0.016096614, -0.0068826503, -0.007175529, 0.02664025, -0.019130839, 0.01760787, 0.02004462, 0.008821507, -0.008593062, 0.02079439, 0.020958401, -0.01255864, 0.008675068, -0.017385282, 9.619236e-05, 0.01649493, -0.041190464, 0.01094195, 0.009489271, 0.028912988, 0.0027969917, -0.0052981763, -0.0029419668, -0.011621428, -0.02393405, -0.027436879, -0.0385897, 0.022516517, 0.014995391, 0.060028423, -0.0012549853, -0.0013684758, -0.016459784, -0.0051693097, 0.017807027, -0.0005667203, 0.021075552, -0.030037642, 0.05103119, -0.005052158, 0.002637373, 0.0010873122, 0.007298538, 0.0012132501, 0.01178544, -0.023324862, -0.016096614, 0.003994866, -0.009477556, 0.026148213, -0.0039333613, 0.0069880863, -0.0019022473, 0.0073864013, -0.031958926, 0.010326904, 0.025609316, -0.04158878, -0.010280043, 0.000993591, 0.014620506, -0.03992523, 0.05716993, 0.013941027, -0.01115868, -0.00900895, 0.0119377365, 0.05426457, 0.020243777, -0.0031689478, 0.03683243, 0.011767867, 0.0075386986, 0.0029961495, 0.0047973534, 0.022165062, 0.015253124, -0.0046860594, -0.007901868, -0.029311303, -0.043088317, -0.030881133, 0.025867049, -0.015569434, 0.014632221, -0.0011619964, 0.03441911, 0.010256613, -0.0041676643, -0.028819267, 0.030881133, 0.010713504, -0.022832826, -0.038613133, 0.008013162, -0.031162297, -0.02350059, 0.023043698, 0.033622477, 0.008440765, -0.0033534614, -0.0119377365, 0.0059688683, 0.016670657, -0.012265761, 0.0478681, -0.009758719, -0.024976699, 0.012207185, -0.012464918, -0.0052806037, -0.03776964, -0.021637881, 0.010889231, -0.012898379, -0.022856256, -0.0038484265, -0.008329471, 0.020970117, 0.048406996, -0.021345, 0.0630275, -0.01651836, 0.0036726992, 0.01972831, 0.006624917, 0.01695182, -0.032568116, 0.00026688573, -0.004981867, 0.015885742, -0.002480683, -0.009688429, 0.02511728, -0.0030898706, -0.022200208, -0.01601461, -0.000829579, -0.03844912, -0.007064235, -0.02987363, 0.028444381, -0.01217204, 0.006706923, 0.005845859, -0.019540869, -0.019740026, -0.008388047, 0.016916675, -0.008487625, -0.017432142, 0.0306234, -0.014421348, 0.006431617, 0.025234431, 0.013191258, -0.015182833, -0.007064235, 0.00039941337, 0.018205341, -0.022106485, -0.01176201, -0.006513623, 0.0068065017, -0.021825323, -0.03465341, 0.022235353, 0.0031865207, 0.022598522, 0.009887585, 0.00432289, -6.0314713e-05, 0.0024499306, 0.057825975, 0.0026651963, 0.05032828, -0.0017045542, 0.016237197, -0.01296867, 0.013273264, 0.024180068, 0.00548269, -0.015381991, -0.016799524, 0.004560122, -0.02197762, 0.029592467, -0.0037459189, -0.023664601, 0.02286797, 0.029756479, 0.025632747, 0.0073043955, 0.038050804, -0.027624322, 0.019412002, 0.0022727388, 0.0008412941, 0.017162694, 0.015639724, -0.02987363, -0.017057257, 0.01572173, 0.014866524, -0.024648674, 0.0023488875, -0.03144346, 0.014608791, -0.004486902, -0.036574695, 0.0298502, -0.0009196392, -0.000680943, -0.046087395, -0.041940235, -0.023641171, 0.0035233311, -0.02987363, 0.016295772, -0.032591544, -0.02236422, 0.06363669, 0.043791227, -0.029077, -0.032614976, 0.012371197, -0.02248137, 0.035543762, 0.026054492, 0.03313044, -0.0156983, -0.010801367, -0.013964457, 0.0074918377, 0.009864155, 0.01758444, -0.002086761, -0.05642016, -0.047680657, 0.0007951657, -0.009629852, 0.0013501709, 0.021520728, 0.012488349, -0.0037605627, -0.01296867, 0.023043698, 0.0043316763, 0.002868747, -0.016963536, 0.006378899, 0.007796432, 0.024086347, 0.044376984, -0.011556994, 0.019341711, -0.00482957, 0.01040891, 0.009254968, -0.01494853, 0.0033768918, 0.011416413, 0.011639001, 0.006742068, -0.014831379, -0.0052659595, 0.021286426, 0.004598196, 0.0042467415, 0.0069705136, 0.00046750766, 0.04243227, 0.0218839, 0.0027969917, 0.024133207, 0.008130314, -0.0036551266, -0.0002742077, -0.009237395, -0.00939555, -0.031302877, 0.0063496106, 0.04882874, -0.009823153, -0.00705252, -0.0061035925, -0.00941898, 0.021110699, -0.008007305, 0.003619981, -0.016576936, 0.009313543, 0.002994685, 0.008780505, -0.032568116, -0.012394628, -0.012371197, -0.029194152, 0.01970488, 0.0041471627, 0.010063313, 0.023992626, 0.014737657, -0.029990781, 0.0141519, 0.02359431, 0.009688429, 0.030927993, 0.013695009, 0.038238246, 0.0046479856, 0.0025304721, 0.0069295107, -0.018685663, 0.023418583, -0.000557934, -0.0030137221, -0.035075158, -0.03369277, -0.011281689, -0.011721007, 0.012031458, 0.030412527, -0.013730154, -0.0061035925, 0.0037488476, -0.026218504, -0.015135973, 0.0072341044, 0.003950934, -0.006554626, -0.0003377258, 0.007503553, -0.0118205855, 0.009155389, -0.033973932, 0.0076089893, 0.001707483, -0.01606147, -0.0063144653, 0.019365141, -0.009811438, 0.054920617, -0.00746255, 0.003731275, 0.022493087, 0.020466365, -0.0155577175, -0.03228695, 0.037488475, -0.05342108, 0.019857178, -0.010133604, -0.06851019, 0.011100104, 0.0071931016, -0.0071520987, 0.032497823, -0.002864354, 0.0007827184, 0.00982901, 0.009840725, 0.018263917, -0.023231141, 0.010221467, -0.004264314]"
../../../gradio,../../../gradio/gradio/components,dataframe.py,"""""""gr.Dataframe() component""""""

from __future__ import annotations

import warnings
from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Tuple,
    Union,
)

import numpy as np
import semantic_version
from gradio_client.documentation import document

from gradio.components import Component
from gradio.data_classes import GradioModel
from gradio.events import Events

if TYPE_CHECKING:
    import pandas as pd
    import polars as pl  # type: ignore
    from pandas.io.formats.style import Styler


def _is_polars_available():
    import importlib.util

    spec = importlib.util.find_spec(""polars"")
    return bool(spec)


def _import_polars():
    import polars as pl  # type: ignore

    return pl


class DataframeData(GradioModel):
    headers: List[str]
    data: Union[List[List[Any]], List[Tuple[Any, ...]]]
    metadata: Optional[Dict[str, Optional[List[Any]]]] = None


@document()
class Dataframe(Component):
    """"""
    This component displays a table of value spreadsheet-like component. Can be used to display data as an output component, or as an input to collect data from the user.
    Demos: filter_records, matrix_transpose, tax_calculator, sort_records
    """"""

    EVENTS = [Events.change, Events.input, Events.select]

    data_model = DataframeData

    def __init__(
        self,
        value: pd.DataFrame
        | Styler
        | np.ndarray
        | pl.DataFrame
        | list
        | list[list]
        | dict
        | str
        | Callable
        | None = None,
        *,
        headers: list[str] | None = None,
        row_count: int | tuple[int, str] = (1, ""dynamic""),
        col_count: int | tuple[int, str] | None = None,
        datatype: str | list[str] = ""str"",
        type: Literal[""pandas"", ""numpy"", ""array"", ""polars""] = ""pandas"",
        latex_delimiters: list[dict[str, str | bool]] | None = None,
        label: str | None = None,
        show_label: bool | None = None,
        every: float | None = None,
        height: int = 500,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        wrap: bool = False,
        line_breaks: bool = True,
        column_widths: list[str | int] | None = None,
    ):
        """"""
        Parameters:
            value: Default value to display in the DataFrame. If a Styler is provided, it will be used to set the displayed value in the DataFrame (e.g. to set precision of numbers) if the `interactive` is False. If a Callable function is provided, the function will be called whenever the app loads to set the initial value of the component.
            headers: List of str header names. If None, no headers are shown.
            row_count: Limit number of rows for input and decide whether user can create new rows. The first element of the tuple is an `int`, the row count; the second should be 'fixed' or 'dynamic', the new row behaviour. If an `int` is passed the rows default to 'dynamic'
            col_count: Limit number of columns for input and decide whether user can create new columns. The first element of the tuple is an `int`, the number of columns; the second should be 'fixed' or 'dynamic', the new column behaviour. If an `int` is passed the columns default to 'dynamic'
            datatype: Datatype of values in sheet. Can be provided per column as a list of strings, or for the entire sheet as a single string. Valid datatypes are ""str"", ""number"", ""bool"", ""date"", and ""markdown"".
            type: Type of value to be returned by component. ""pandas"" for pandas dataframe, ""numpy"" for numpy array, ""polars"" for polars dataframe, or ""array"" for a Python list of lists.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            latex_delimiters: A list of dicts of the form {""left"": open delimiter (str), ""right"": close delimiter (str), ""display"": whether to display in newline (bool)} that will be used to render LaTeX expressions. If not provided, `latex_delimiters` is set to `[{ ""left"": ""$$"", ""right"": ""$$"", ""display"": True }]`, so only expressions enclosed in $$ delimiters will be rendered as LaTeX, and in a new line. Pass in an empty list to disable LaTeX rendering. For more information, see the [KaTeX documentation](https://katex.org/docs/autorender.html). Only applies to columns whose datatype is ""markdown"".
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            show_label: if True, will display label.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            height: The maximum height of the dataframe, specified in pixels if a number is passed, or in CSS units if a string is passed. If more rows are created than can fit in the height, a scrollbar will appear.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to edit the dataframe; if False, can only be used to display data. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            wrap: If True, the text in table cells will wrap when appropriate. If False and the `column_width` parameter is not set, the column widths will expand based on the cell contents and the table may need to be horizontally scrolled. If `column_width` is set, then any overflow text will be hidden.
            line_breaks: If True (default), will enable Github-flavored Markdown line breaks in chatbot messages. If False, single new lines will be ignored. Only applies for columns of type ""markdown.""
            column_widths: An optional list representing the width of each column. The elements of the list should be in the format ""100px"" (ints are also accepted and converted to pixel values) or ""10%"". If not provided, the column widths will be automatically determined based on the content of the cells. Setting this parameter will cause the browser to try to fit the table within the page width.
        """"""
        self.wrap = wrap
        self.row_count = self.__process_counts(row_count)
        self.col_count = self.__process_counts(
            col_count, len(headers) if headers else 3
        )
        self.__validate_headers(headers, self.col_count[0])

        self.headers = (
            headers
            if headers is not None
            else [str(i) for i in (range(1, self.col_count[0] + 1))]
        )
        self.datatype = datatype
        valid_types = [""pandas"", ""numpy"", ""array"", ""polars""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        if type == ""polars"" and not _is_polars_available():
            raise ImportError(
                ""Polars is not installed. Please install using `pip install polars`.""
            )
        self.type = type
        values = {
            ""str"": """",
            ""number"": 0,
            ""bool"": False,
            ""date"": ""01/01/1970"",
            ""markdown"": """",
            ""html"": """",
        }
        column_dtypes = (
            [datatype] * self.col_count[0] if isinstance(datatype, str) else datatype
        )
        self.empty_input = {
            ""headers"": self.headers,
            ""data"": [
                [values[c] for c in column_dtypes] for _ in range(self.row_count[0])
            ],
            ""metadata"": None,
        }

        if latex_delimiters is None:
            latex_delimiters = [{""left"": ""$$"", ""right"": ""$$"", ""display"": True}]
        self.latex_delimiters = latex_delimiters
        self.height = height
        self.line_breaks = line_breaks
        self.column_widths = [
            w if isinstance(w, str) else f""{w}px"" for w in (column_widths or [])
        ]
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: DataframeData
    ) -> pd.DataFrame | np.ndarray | pl.DataFrame | list[list]:
        """"""
        Parameters:
            payload: the uploaded spreadsheet data as an object with `headers` and `data` attributes
        Returns:
            Passes the uploaded spreadsheet data as a `pandas.DataFrame`, `numpy.array`, `polars.DataFrame`, or native 2D Python `list[list]` depending on `type`
        """"""
        import pandas as pd

        if self.type == ""pandas"":
            if payload.headers is not None:
                return pd.DataFrame(
                    [] if payload.data == [[]] else payload.data,
                    columns=payload.headers,
                )
            else:
                return pd.DataFrame(payload.data)
        if self.type == ""polars"":
            polars = _import_polars()
            if payload.headers is not None:
                return polars.DataFrame(
                    [] if payload.data == [[]] else payload.data, schema=payload.headers
                )
            else:
                return polars.DataFrame(payload.data)
        if self.type == ""numpy"":
            return np.array(payload.data)
        elif self.type == ""array"":
            return payload.data  # type: ignore
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(self.type)
                + "". Please choose from: 'pandas', 'numpy', 'array', 'polars'.""
            )

    def postprocess(
        self,
        value: pd.DataFrame
        | Styler
        | np.ndarray
        | pl.DataFrame
        | list
        | list[list]
        | dict
        | str
        | None,
    ) -> DataframeData:
        """"""
        Parameters:
            value: Expects data any of these formats: `pandas.DataFrame`, `pandas.Styler`, `numpy.array`, `polars.DataFrame`, `list[list]`, `list`, or a `dict` with keys 'data' (and optionally 'headers'), or `str` path to a csv, which is rendered as the spreadsheet.
        Returns:
            the uploaded spreadsheet data as an object with `headers` and `data` attributes
        """"""
        import pandas as pd
        from pandas.io.formats.style import Styler

        if value is None:
            return self.postprocess(self.empty_input)
        if isinstance(value, dict):
            if len(value) == 0:
                return DataframeData(headers=self.headers, data=[[]])
            return DataframeData(
                headers=value.get(""headers"", []), data=value.get(""data"", [[]])
            )
        if isinstance(value, (str, pd.DataFrame)):
            if isinstance(value, str):
                value = pd.read_csv(value)  # type: ignore
            if len(value) == 0:
                return DataframeData(
                    headers=list(value.columns),  # type: ignore
                    data=[[]],  # type: ignore
                )
            return DataframeData(
                headers=list(value.columns),  # type: ignore
                data=value.to_dict(orient=""split"")[""data""],  # type: ignore
            )
        elif isinstance(value, Styler):
            if semantic_version.Version(pd.__version__) < semantic_version.Version(
                ""1.5.0""
            ):
                raise ValueError(
                    ""Styler objects are only supported in pandas version 1.5.0 or higher. Please try: `pip install --upgrade pandas` to use this feature.""
                )
            if self.interactive:
                warnings.warn(
                    ""Cannot display Styler object in interactive mode. Will display as a regular pandas dataframe instead.""
                )
            df: pd.DataFrame = value.data  # type: ignore
            if len(df) == 0:
                return DataframeData(
                    headers=list(df.columns),
                    data=[[]],
                    metadata=self.__extract_metadata(value),  # type: ignore
                )
            return DataframeData(
                headers=list(df.columns),
                data=df.to_dict(orient=""split"")[""data""],  # type: ignore
                metadata=self.__extract_metadata(value),  # type: ignore
            )
        elif _is_polars_available() and isinstance(value, _import_polars().DataFrame):
            if len(value) == 0:
                return DataframeData(headers=list(value.to_dict().keys()), data=[[]])
            df_dict = value.to_dict()
            headers = list(df_dict.keys())
            data = list(zip(*df_dict.values()))
            return DataframeData(headers=headers, data=data)
        elif isinstance(value, (np.ndarray, list)):
            if len(value) == 0:
                return DataframeData(headers=self.headers, data=[[]])
            if isinstance(value, np.ndarray):
                value = value.tolist()
            if not isinstance(value, list):
                raise ValueError(""output cannot be converted to list"")

            _headers = self.headers
            if len(self.headers) < len(value[0]):
                _headers: list[str] = [
                    *self.headers,
                    *[str(i) for i in range(len(self.headers) + 1, len(value[0]) + 1)],
                ]
            elif len(self.headers) > len(value[0]):
                _headers = self.headers[: len(value[0])]

            return DataframeData(headers=_headers, data=value)
        else:
            raise ValueError(""Cannot process value as a Dataframe"")

    @staticmethod
    def __get_cell_style(cell_id: str, cell_styles: list[dict]) -> str:
        styles_for_cell = []
        for style in cell_styles:
            if cell_id in style.get(""selectors"", []):
                styles_for_cell.extend(style.get(""props"", []))
        styles_str = ""; "".join([f""{prop}: {value}"" for prop, value in styles_for_cell])
        return styles_str

    @staticmethod
    def __extract_metadata(df: Styler) -> dict[str, list[list]]:
        metadata = {""display_value"": [], ""styling"": []}
        style_data = df._compute()._translate(None, None)  # type: ignore
        cell_styles = style_data.get(""cellstyle"", [])
        for i in range(len(style_data[""body""])):
            metadata[""display_value""].append([])
            metadata[""styling""].append([])
            for j in range(len(style_data[""body""][i])):
                cell_type = style_data[""body""][i][j][""type""]
                if cell_type != ""td"":
                    continue
                display_value = style_data[""body""][i][j][""display_value""]
                cell_id = style_data[""body""][i][j][""id""]
                styles_str = Dataframe.__get_cell_style(cell_id, cell_styles)
                metadata[""display_value""][i].append(display_value)
                metadata[""styling""][i].append(styles_str)
        return metadata

    @staticmethod
    def __process_counts(count, default=3) -> tuple[int, str]:
        if count is None:
            return (default, ""dynamic"")
        if isinstance(count, (int, float)):
            return (int(count), ""dynamic"")
        else:
            return count

    @staticmethod
    def __validate_headers(headers: list[str] | None, col_count: int):
        if headers is not None and len(headers) != col_count:
            raise ValueError(
                f""The length of the headers list must be equal to the col_count int.\n""
                f""The column count is set to {col_count} but `headers` has {len(headers)} items. ""
                f""Check the values passed to `col_count` and `headers`.""
            )

    def process_example(
        self,
        value: pd.DataFrame
        | Styler
        | np.ndarray
        | pl.DataFrame
        | list
        | list[list]
        | dict
        | str
        | None,
    ):
        import pandas as pd

        if value is None:
            return """"
        value_df_data = self.postprocess(value)
        value_df = pd.DataFrame(value_df_data.data, columns=value_df_data.headers)
        return value_df.head(n=5).to_dict(orient=""split"")[""data""]

    def example_payload(self) -> Any:
        return {""headers"": [""a"", ""b""], ""data"": [[""foo"", ""bar""]]}

    def example_value(self) -> Any:
        return {""headers"": [""a"", ""b""], ""data"": [[""foo"", ""bar""]]}
","The code defines a `Dataframe` component that can display a table of values in a spreadsheet-like format. It can be used to display data as an output component or to collect data from the user as an input. The component supports various functionalities such as setting headers, limiting row and column counts, specifying data types, and choosing the type of value to be returned (e.g., pandas DataFrame, numpy array, polars DataFrame, or Python list of lists).

The component allows users to interact with the displayed data if set to interactive mode. It also provides methods for preprocessing and postprocessing the data, as well as handling example data and values. The component can handle different data formats such as pandas DataFrame, numpy array, polars DataFrame, and lists, and can convert between these formats as needed.","[-0.06567978, -0.0085144155, 0.014822869, 0.020562362, 0.041284434, -0.030444276, -0.018196693, 0.004836148, 0.0032640256, 0.007461343, 0.009722205, -0.02435542, -0.03815017, -0.024036005, 0.0053002983, -0.033858027, 0.0060938457, 0.019075084, 0.004389466, 0.04016648, -0.003957756, 0.00031239694, -0.014762978, 0.025313666, 0.038689185, 0.0051455814, -0.027210195, 0.024774652, -0.019594135, -0.0066977404, -0.05286324, -0.029106723, 0.002123613, 0.023856334, 0.009687268, -0.08137106, 0.004259703, 0.035694666, -0.030045006, -0.030144824, -0.02868749, 0.001107972, -0.005644668, 0.030244641, -0.0047637806, 0.017847333, -0.049669087, -0.040026736, 0.031182922, 0.033718284, -0.015691279, 0.0055598235, 0.011279355, -0.012247582, -0.00030553452, 0.020562362, -0.06548014, 0.045756247, 0.0057694395, -0.03583441, 0.039906956, 0.03345876, -0.056656297, 0.07478312, -0.036213715, 0.0060838643, -0.026551401, 0.006897375, -0.030983288, 0.0077358405, 0.037990462, -7.496045e-06, 0.012317454, -0.015142283, -0.0004713248, -0.043879684, -0.016340092, -0.0106205605, -0.008709059, -0.015361882, 0.009023484, 0.0018590972, -0.03942783, 0.005509915, 0.013904549, -0.051226236, -0.015920859, 0.016519763, -0.033099417, -0.030484201, -0.015781114, 0.007945457, -0.050108284, 0.04092509, 0.00011556971, 0.029565884, -0.055179, -0.028707454, 0.0023831378, -0.003977719, 0.05949111, 0.026012387, -0.0703113, -0.0117484955, 0.031841718, 0.00905842, 0.00023067153, -0.039447796, -0.03964743, 0.01246718, -0.027908916, -0.014792923, -0.012616906, 0.017687624, -0.013425427, -0.010081546, 0.006937302, -0.024495164, 0.009233099, 0.011478989, -0.008559333, 0.040565748, -0.007276681, -0.04132436, -0.008015329, -0.015421772, -0.014902722, -0.05881235, -0.011169556, 0.015212156, -0.026551401, 0.0019464373, 0.014233946, -0.054061048, -0.046435006, 0.07150911, -0.056177173, 0.024495164, -0.011209482, 0.010929994, -0.007830666, 0.0074413796, 0.0651208, -0.015661333, -0.05545849, -0.016000712, 0.0042796666, 0.0044194106, -0.07737837, -0.010261218, 0.040186442, 0.044398732, 0.005669622, -0.032899782, 0.022638563, 0.003064391, 0.036672875, -0.0037481394, -0.0037132034, -0.06340395, -0.0054001156, -0.0020786952, 0.012507107, 0.0027449757, -0.0113192815, 0.0010237511, -0.027948843, 0.0070271376, -0.034836236, 0.00030834187, 0.020183057, 0.020502472, 0.0060189827, -0.014373691, 0.040485896, -0.0046165497, 0.00808021, 0.024734726, -0.012966267, -0.06627868, -0.038529474, -0.037291743, -0.060329575, 0.0029970142, 0.0008035292, -0.025613118, -0.023616772, -0.032141168, 0.0017642707, 0.020702107, -0.0065579964, 0.05322258, -0.030444276, 0.045037564, -0.0025116527, 0.006977229, 0.035395212, 0.019095048, -0.023496991, 0.0015084889, 0.011249409, -0.0081401, -0.04739325, 0.056416735, 0.009402789, 0.03623368, -0.05777425, 0.008040283, 0.0037107079, -0.06232592, 0.016120493, -0.016380018, 0.02319754, 0.0004519852, -0.04368005, -0.027110377, -0.019234793, 0.004634018, -0.011399135, 0.009901876, -0.014822869, 0.0071868454, -0.007910521, -0.035994116, -0.01564137, -0.025193885, 0.022119513, -0.020003386, -0.025413483, -0.034377076, 0.018126821, -0.043320708, 0.021800097, 0.02707045, 0.013305645, -0.045836102, -0.039347976, -0.045796175, 0.046075664, 0.054340534, 0.008619224, 0.030923398, 0.0007860612, -0.007825676, 0.043839756, 0.03918827, -0.0059291474, -0.06488124, -0.017837351, 0.05066726, 0.03158219, -0.0059341383, -0.0036208723, -0.032061316, -0.053701706, -0.055498417, -0.0059291474, 0.034596674, 0.060409427, -0.014213983, -0.040246334, -0.03665291, -0.06480139, 0.04196319, -0.02031282, 0.024016041, 0.030384384, 0.008070229, -0.01997344, -0.033478722, 0.043160997, 0.06955269, 0.042681877, 0.036712803, -0.028008733, -0.017567843, 0.044278953, 0.037471414, 0.059930306, 0.009477653, -0.0035235505, -0.013944476, -0.023576844, 0.068674296, 0.00092518155, 0.015272046, 0.0113192815, 0.006687759, 0.0031068134, -0.042282607, 0.017587807, -0.019783787, 0.014802905, 0.016809233, 0.01599073, 0.028827235, 0.036892474, 0.0074214158, 0.023596808, -0.0057045585, -0.045356978, -0.014822869, -0.02221933, -0.028288221, -0.0047288444, -0.017048795, -0.030544093, 0.0074014524, 0.019274719, -0.022838198, -0.004778753, 0.0050981683, 0.030444276, -0.022059623, -0.064681605, 0.05649659, 0.09119308, 0.00808021, 0.011119647, -0.020422619, -0.058333226, 0.0035160643, 0.035055835, -0.023177575, -0.014383672, -0.044199098, -0.032240987, -0.002448019, 0.02609224, -0.02221933, 0.04483793, 0.010251236, -0.023876296, 0.0031217858, -0.0067127133, -0.043560266, -0.0053402255, 0.012187691, -0.082089745, 0.03918827, 0.007785749, -0.011928167, -0.029825408, 0.00981204, -0.008239917, -0.0075861146, -0.03190161, 0.036333494, -0.025253776, -0.02429553, -0.028228331, -0.028607637, 0.009153246, 0.00060732587, 0.027210195, -0.023037832, -0.023556883, -0.04364012, -0.0286276, -0.02215944, -0.02557319, -0.002255871, 0.02164039, -0.0067925667, -0.04022637, 0.0064382157, -0.050866894, -0.0039228196, 0.0045891004, 0.007536206, 0.035135686, -0.034596674, 0.001077403, 0.0029321332, 0.016050622, -0.034417003, 0.0121677285, 0.009817031, -0.020502472, -0.020881778, -0.0074763154, 0.018685797, -0.011269373, -0.024854507, 0.015791096, 0.014054275, 0.027270084, 0.024155786, 0.016529744, 0.00499336, -0.008739004, -0.01257698, -0.019564189, -0.026511474, 0.059011985, 0.0039727283, -0.0066528227, 0.036313534, 0.059650816, -0.019324629, -0.009452698, -0.019564189, 0.010670469, -0.002233412, -0.023277393, -0.03116296, 0.037191924, 0.015421772, 0.015561516, -0.022319147, -0.0092131365, -0.03295967, 0.016779287, 0.00014044605, 0.041284434, -0.032899782, -0.038449623, 0.014872777, 0.0033688338, 0.04120458, -0.00034062652, -0.026331803, -0.049150035, -0.005759458, -0.0038978653, 0.06012994, 0.009677287, -0.021041486, -0.06204643, -0.019115012, 0.011518916, 0.04767274, 0.075182386, 0.015192192, -0.006283499, -0.011129629, 0.026631255, 0.028128514, 0.035415176, 0.040965017, 0.0014897732, 0.038649257, 0.01570126, -0.004524219, -0.037730936, -0.012547034, 0.0053002983, 0.006967247, -0.015132302, -0.031941533, 0.023157613, 0.04675442, -0.0410848, -0.012816541, -0.015401809, -0.048670914, 0.013724878, -0.028068623, 0.031382557, 0.035994116, 0.013844659, 0.0036757719, -0.042681877, 0.052663606, 0.014044293, -0.020502472, 0.032041352, -0.037072144, 0.018805578, 0.012367363, -0.03579448, 0.060489282, 0.05154565, 0.03329905, 0.007885566, 0.030584019, 0.04675442, -0.0032016397, -0.08384653, 0.00036027806, 0.0007636023, -0.018046968, -0.037112072, 0.011359208, 0.05430061, 0.044358805, -0.008065238, -0.03906849, 0.01643991, -0.009387816, -0.025533265, -0.0036682857, 0.031103069, -0.0039328015, 0.017697606, 0.01985366, -0.07873588, 0.006133773, -0.0006906109, -0.052703533, 0.036493205, 0.034896128, 0.00761606, 0.045277126, 0.01708872, -0.0096373595, 0.0051705358, -0.011908203, -0.04847128, 0.029865336, -0.036273606, 0.020292856, 0.025673008, 0.0060289646, -0.009622388, -0.004032619, -0.0048935427, 0.021919878, -0.013225792, -0.00957747, 0.0030094914, 0.010740341, -0.010900049, -0.019115012, 0.010011675, -0.0050108284, -0.014184037, -0.06727686, 0.0010218796, -0.016170401, -0.01217771, 0.009033465, 0.0016070585, 0.011498952, -0.05334236, 0.015431754, -0.0011747248, 0.009802058, -0.018546054, -0.022339111, 0.043520343, 0.012616906, -0.0002567176, -0.018785615, 0.014064257, 0.005834321, -0.014054275, -0.003451183, -0.01425391, 0.016589634, 0.025692971, -0.04028626, 0.025613118, -0.041124724, 0.023477027, 0.021201193, -0.0034337149, -0.0057345037, -0.01056067, -0.020362727, -0.018595962, 0.011159574, 0.0079504475, 0.02106145, -0.0004931598, 0.02164039, -0.0041199587, -0.02493436, -0.035395212, 0.024395347, -0.048271645, -0.0032340803, -0.010540706, -0.016869122, -0.04160385, 0.02557319, 0.02609224, 0.0022695959, -0.019753844, -0.0014997548, 0.006607905, 0.0031492356, -0.04675442, -0.013844659, -0.017308319, 0.02539352, 0.035634775, 0.009891894, 0.010530725, -0.024215676, -0.026451584, 0.008190009, -0.021999732, 0.010026648, 0.030084932, -0.01789724, 0.009487634, 0.0059391293, -0.0030194733, -0.01056067, 0.016819214, -0.00369324, -0.014852813, -0.00083160284, -0.026910743, 0.028248295, 0.021680316, 0.020442583, 0.0027499665, 0.008145091, -0.012227619, 0.05961089, -0.02279827, -0.027809098, 0.0026102222, 0.0049584243, -0.033977807, 0.0147030875, 0.03942783, -0.013026157, -0.032500513, 0.005584778, -0.012367363, -0.03186168, 0.017278373, 0.047473107, 0.003468651, -0.015202174, -0.02661129, 0.013485316, -0.014223965, 0.010301145, 0.051505726, 0.015601443, 0.0035110733, 0.032760035, 0.009542533, -0.0066328594, -0.00062448194, -0.01643991, -0.011858295, -0.00045229713, 0.028567709, 0.031083105, 0.03128274, -0.007970411, -0.011628715, -0.0024779644, 0.019494317, 0.0073415623, 0.01443358, 0.005345216, 0.016250256, 0.0070221466, 0.005674613, 0.008619224, -0.009278018, -0.0275895, 0.02203966, -0.0020587316, 0.010031638, -0.0048161843, -0.019414464, -0.01379475, -0.015481663, 0.02868749, -0.010450871, -0.037551265, 0.046594713, 0.0499885, -0.039567575, 0.013884585, -0.0010892563, 0.01794715, -0.021380864, -0.025593154, 0.009692259, -0.028368074, -0.0039802147, 0.045636468, 0.009377835, -0.00479123, -0.008724032, 0.016529744, -0.013645024, -0.020901741, 0.015661333, 0.00033033287, 0.031003252, -0.03641335, 0.010121474, -0.010550688, -0.021001559, 0.012826523, 0.0027275076, -0.010410944, 0.02423564, 0.012836504, 0.033159304, -0.010570652, -0.035754554, 0.0045366962, 0.004144913, -0.02902687, -0.0062984712, -0.017507954, -0.004309612, 0.039407868, 0.025872642, -0.02487447, 0.027609464, 0.0060688914, -0.03082358, -0.0041623814, -0.03669284, -0.009941802, -0.007715877, 0.028527783, 0.0002738737, 0.02649151, -0.028008733, -0.017747516, -0.037950534, -0.047273472, -0.0031093087, 0.012676797, -0.009253063, 0.007890557, -0.040545784, -0.005749476, 0.04196319, -0.007835657, 0.028228331, -0.003962747, 0.005604741, -0.018276546, 0.009382825, 0.02094167, -0.0054051066, -0.01593084, -0.03565474, -0.014733033, -0.001235239, -0.017288355, -0.026072277, -0.050148208, -0.0070171556, 0.013415445, 0.015531572, -0.0361139, -0.0026975623, 0.002202219, 0.03018475, 0.007670959, -0.019654026, -0.023417138, -0.042402387, -0.014952631, -0.061727017, 0.0030718772, -0.01823662, 0.022898087, -0.017218484, 0.02557319, -0.017547881, -0.041404214, 0.016419945, -0.016948977, -0.035195578, 0.0065829507, -0.005579787, 0.012826523, 0.00092206226, -0.01789724, 0.060289647, -0.008384652, 0.0015933336, 0.001904015, 0.008379662, 0.0031417494, -0.01829651, 0.012836504, 0.035934225, -0.0048037074, 0.039886992, -0.012716724, 0.019574171, 0.016469853, -0.004234749, -0.043081146, -0.02026291, -0.0019077581, 0.011908203, 0.009008511, 0.023417138, -0.016210329, 0.0087939035, -0.04184341, -0.026012387, 0.015172229, -0.021241121, -0.00450176, -0.03579448, 0.03363843, 0.039347976, 0.0011790917, -0.023177575, -0.012766632, -0.048391424, -0.0020774475, 0.004436879, 0.007047101, -0.019055123, 0.023556883, -0.008684104, -0.009193173, 0.0020712088, 0.023636736, 0.0053202617, -0.029406175, -0.012507107, -0.0066478318, -0.049030256, -0.0033912926, 0.0045142374, 0.011159574, -0.008729023, 0.022778306, -0.0070920186, -0.021101376, 0.013924513, 0.026112204, 0.0039452785, 0.018156767, 0.03283989, 0.012836504, 0.0063184346, -0.016769305, 0.0026226994, -0.011149592, 0.014762978, 0.032400694, 0.0021959804, -0.050627332, 0.037251815, -0.0037880663, 0.019304665, -0.0073215985, -0.027669353, -0.017158594, -0.026890779, 0.01869578, -0.0041474085, -0.047353324, 0.008529388, 0.0028922062, 0.019634062, -0.0007018404, 0.002506662, 0.07202816, 0.011299318, 0.010810213, -0.019224811, 0.025932534, -0.016829196, -0.06024972, -0.011848313, 0.0058842297, 0.044877857, 0.0011379172, -0.00211987, -0.009203155, 0.008000356, 0.012217637, -0.0007218038, -0.011758477, -0.004304621, 0.03515565, -0.028986942, -0.017977094, 0.013545207, -0.0113192815, 0.04160385, -0.01672938, -0.0012863954, -0.00923809, -0.012367363, -0.0152620645, 0.021520609, -0.016889086, -0.002106145, 0.024794616, 0.01576115, -0.01570126, 0.018536072, 0.045676395, -0.024195712, 0.028966978, -0.00842458, 0.016429927, 0.0011011095, -0.008803885, 0.013525244, -4.9167815e-05, -0.0018378859, -0.0010649258, 0.02273838, -0.014752996, -0.05921162, -0.044199098, -0.042322535, -0.0106205605, 0.012008021, 0.024974287, -0.0020250434, -0.020282874, -0.005165545, 0.0027250121, 0.0005209215, 0.00078543735, -0.013874604, 0.023916224, 0.046714496, -0.0045616506, -0.010570652, -0.006602914, 0.046954054, 0.028927052, 0.012836504, 0.00957747, 0.037790827, 0.0025391025, 0.02886716, -0.00079729065, -0.008459516, -0.024036005, -0.038409695, -0.006433225, -0.019713916, -0.015142283, -0.028268257, 0.040965017, 0.004352034, -0.028787307, 0.008244908, -0.00065255555, 0.05118631, -0.0037730937, 0.018575998, -0.021919878, 0.024555055, 0.010900049, 0.06815525, -0.01240729, -0.040965017, -0.0022097053, 0.016010694, -0.006158727, -0.0113093, 0.0044568423, -0.038808964, -0.05002843, -0.0043819794, -0.008699077, 0.043520343, -0.027290048, 0.0514658, -0.00848447, -0.006682768, 0.024435274, 0.010460853, 0.029486028, 0.028787307, -0.027170267, -0.001595829, -0.025114032, -0.011169556, -0.04635515, 0.022658527, 0.047233544, 0.0040675546, 0.009552515, 0.015841005, 0.032899782, -0.06528051, -0.029645737, -0.01489274, 0.035814445, 0.03681262, 0.029865336, -0.031142997, 0.02297794, 0.0005555456, -0.012876431, 0.02319754, -0.0011716055, 0.028268257, 0.0131559195, 0.019244775, 0.0075511783, -0.025593154, -0.00934789, 0.037072144, -0.014483489, 0.013056102, 0.03687251, 0.067556344, -0.027849026, 0.0018116839, -0.0006931063, -0.011498952, -0.0067726034, 0.013934494, 0.030204713, -0.00040581968, -0.042681877, 0.0028497837, -0.021899914, -0.021999732, -0.043240853, -0.033578537, -0.015192192, 0.019144958, 0.01460327, 0.029446103, -0.020482508, 0.0043670065, -0.0069472836, 0.04368005, 0.0058492934, 0.015282028, -0.0038304888, -0.010231272, 0.0058492934, 0.02954592, 0.043240853, -0.0077757672, 0.02868749, -0.0046964036, 0.006518069, -0.018735707, -0.0111995, 0.0057844124, 0.014812887, 0.01997344, -0.01766766, 0.0029296377, -0.011069738, 0.0049534333, 0.017907223, -0.0069273203, -0.035754554, 0.022538746, 0.0028996924, -0.0061687087, 0.0065579964, -0.017617753, 0.015421772, 0.046554785, 0.037191924, -0.014822869, 0.0040251324, 0.02319754, -0.038230024, -0.047832448, -0.011379172, 0.036912438, -0.014633216, 0.02475469, 0.005729513, -0.03573459, -0.011518916, 0.022658527, -0.044278953, -0.044119246, -0.016919032, -0.015282028, 0.01576115, 0.03018475, -0.0058742478, -0.015970767, 0.0052603716, -0.02643162, 0.010400962, -0.0048236707, 0.033219196, -0.013405463, -0.0031492356, 0.034816273, -0.016559688, -0.010151419, 0.015880931, -0.014733033, -0.02914665, -0.008739004, 0.0006388307, 0.016210329, -0.00634838, 0.0038604338, 0.006717704, -0.01834642, 0.002013814, -0.02014313, -0.009871931, -0.039308053, -0.00407005, 0.029406175, 0.0236567, -0.048670914, -0.003573459, 0.0027624436, 0.023516955, 0.012367363, 0.017308319, -0.008055256, 0.025812753, -0.0058043757, 0.028208368, 0.002519139, 0.009307963, 0.02008324, -0.026152132, 0.015301991, 0.018735707, 0.00074551045, 9.669801e-05, 0.028028697, -0.0037206898, -0.008838821, 0.012856468, -0.0039677373, 0.004970901, -0.022878123, 5.205316e-05, -0.023776479, 0.016459871, 0.00808021, -0.037431486, -0.025892606, 0.002717526, -0.028807271, -0.03629357, -0.010979903, 0.0025802772, -0.020582326, -0.03641335, 0.020881778, 0.022239294, 0.004309612, -0.01679925, 0.0029770508, 0.034357112, 0.023756517, -0.001965153, 0.028587673, -0.02661129, -0.02719023, 0.0018852992, 0.017338265, -0.0013437903, -0.031761862, 0.0097721135, -0.0014223965, 0.0123074725, -0.033159304, 0.00628849, -0.030623946, -0.00124834, -0.005040773, 0.03180179, -0.002154806, 0.0083696805, 0.0067077223, -0.00441442, -0.016320128, 0.0011641192, 0.011069738, 0.020821888, -0.020582326, 0.060848624, -0.0062535536, -0.05697571, 0.0019177397, -0.0024280557, -0.013455371, 0.02026291, -0.0016644534, -0.010590615, -0.0055198963, 0.022179402, 0.008978566, -0.0075511783, 0.008040283, -0.017448064, -0.0046839267, 0.007191836, -0.013245755, 0.034596674, -0.016120493, 0.0111895185, 0.004022637, 0.012746668, 0.012766632, 0.031202886, 0.03393788, -0.006128782, 0.00634838, 0.0022384028, 0.025193885, -0.013365536, -0.0026925716, 0.0036707812, -0.015252083, 0.011718551, -0.024974287, 0.017358229, -0.022259258, 0.040386077, 0.017308319, -0.018446237, -0.00090147497, 0.019274719, -0.0067077223, 0.027369902, -0.010800231, 0.016070584, 0.016080566, 0.0029570875, -0.01286645, 0.015451717, 0.009597433, -0.039308053, -0.00024377255, -0.009802058, 0.038349804, -0.04779252, 0.014673143, 0.042961363, 0.009836994, 0.011878259, 0.031662047, -0.009532551, 0.026711108, 0.011449044, 0.0089286575, 0.062285993, 0.008549351, -0.0026451584, -0.0046215407, 0.001991355, 0.0130161755, 0.004314603, 0.013774787, -0.0039377925, -0.002757453, 0.007970411, -0.00993182, -0.049709015, 0.024734726, -0.028228331, -0.021800097, 0.017587807, 0.021360902, -0.03751134, 0.0027424803, -0.014363709, -0.015631389, 0.03958754, -0.0032515484, 0.0073215985, -0.015152265, 0.041404214, -0.0017006372, 0.030963326, -0.02868749, -0.0010848893, -0.04172363, -0.026212022, 0.025812753, 0.01869578, -0.00675264, -0.016699433, 0.005050755, 0.027090413, -0.017238447, 0.02557319, 0.0011684862, -0.027270084, 0.035355285, 0.01587095, -0.030524129, 0.054939438, 0.0048037074, -0.022678489, 0.0029396194, 0.015831023, 0.0012346152, -0.026591327, -0.015831023, 0.03427726, 0.006518069, -0.011708569, -0.0338181, -0.00028510316, 0.020702107, 0.019364554, -0.0006737668, -0.00876895, -0.02810855, -0.043520343, -0.0195043, 0.0015546543, 0.005355198, -0.032939706, -0.0173183, -0.04595588, 0.0073415623, -0.03046424, -0.006383316, 0.021161268, 0.0033987788, 0.061128113, -0.02886716, 0.010660487, 0.010321109, 0.009163228, -0.0077358405, -0.005529878, 0.0077358405, 0.03082358, -0.018027004, 0.050707188, 0.043999463, -0.044478588, -0.019604117, -0.017677642, -0.0029221512, 0.032340802, 0.011299318, 0.0028373066, 0.02313765, -0.027270084, 0.034476895, 0.013086047, -0.005989038, -0.00017530413, 0.019883605, 0.0069572655, 0.01159877, -0.011618733, 0.030723764, 0.014054275, -0.020582326, -0.026331803, 0.014792923, 0.017837351, 0.04080531, 0.032061316, -0.007820685, 0.009088364, 0.022818234, 0.058333226, 0.052783385, 0.037730936, 0.03393788, 0.048151862, -0.022838198, 0.045716323, 0.030623946, -0.025653046, -0.03134263, -0.018376363, 0.0053302436, 0.0034262286, -0.027809098, 0.0052254354, -0.01113961, -0.00721679, -0.0057694395, -0.023576844, 0.036972325, -0.033039525, 0.0044942736, 0.009617397, 0.03220106, 0.014333763, -0.018935341, -0.0195043, 0.008843812, -0.0053252527, -0.03335894, 0.050427698, 0.018126821, 0.01304612, 0.03186168, 0.028408002, 0.023696626, 0.031781826, 0.00046851742, -0.0035834408, 0.005120627, 0.0028073615, -0.0024904415, -0.008868767, 0.010490797, 0.03669284, 0.018156767, -0.0063982885, -0.017997058, -0.01829651, -0.012257564, 0.0021024018, -0.001745555, -0.010860122, -0.020302838, -0.0014498462, 0.053462144, 0.017937168, -0.009317945, -0.057335053, 0.014303818, -0.002730003, 0.021340938, 0.006937302, 0.028148478, 0.008579297, -0.009836994, -0.017228466, 0.017637717, -0.0032240986, 0.041124724, 0.012008021, -0.0018166747, -0.0011372933, 0.018466199, 0.00097571407, 0.022578672, -0.015461699, 0.031262778, 0.017128648, 0.014673143, 0.031841718, 0.01672938, -0.008763959, 0.0120279845, -0.01794715, -0.01333559, 0.011329263, -0.020063275, -0.027210195, -0.03391792, -0.0077258586, -0.029765518, -0.010969921, -0.019354574, -0.0006793815, -0.014124148, 0.02920654, 0.018436255, 0.008065238, -0.010680451, -0.0076210503, -0.020522436, 0.0066578137, -0.023876296, 0.0069522746, -0.011299318, -0.0044817966, 0.02031282, -0.005038278, 0.003653313, 0.060489282, -0.01246718, -0.018416291, -0.029645737, 0.001806693, -0.008983556, 0.035874337, 0.037191924, -0.001881556, -0.004826166, 0.037491377, 0.005355198, -0.0070221466, 0.022638563, 0.009886903, 0.008818858, -0.036573056, 0.01489274, -0.01443358, 0.010141437, 0.0082349265, 0.021859989, 0.021840025, -0.020502472, -0.004479301, 0.019514281, -0.018655853, 0.018566016, 0.015471681, -0.02816844, -0.0038579386, -0.028567709, 0.018216657, 0.014194019, -0.02920654, -0.0061088186, 0.008055256, -0.004955929, -0.028228331, 0.00091083284, 0.00038398465, 0.013834677, -0.005420079, -0.040765382, 0.007566151, -0.035814445, 0.043200925, 0.01593084, 0.020362727, -0.0143138, -0.017987076, -0.021999732, -0.045396905, 0.014523417, 0.022059623, -0.016589634, 0.013655006, 0.01056067, -0.002079943, 0.021101376, 0.019294683, -0.010001693, 0.01695896, 0.0014960117, 0.0009576222]"
../../../gradio,../../../gradio/gradio/components,checkboxgroup.py,"""""""gr.CheckboxGroup() component""""""

from __future__ import annotations

from typing import Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.base import FormComponent
from gradio.events import Events


@document()
class CheckboxGroup(FormComponent):
    """"""
    Creates a set of checkboxes. Can be used as an input to pass a set of values to a function or as an output to display values, a subset of which are selected.
    Demos: sentence_builder
    """"""

    EVENTS = [Events.change, Events.input, Events.select]

    def __init__(
        self,
        choices: list[str | int | float | tuple[str, str | int | float]] | None = None,
        *,
        value: list[str | float | int] | str | float | int | Callable | None = None,
        type: Literal[""value"", ""index""] = ""value"",
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            choices: A list of string or numeric options to select from. An option can also be a tuple of the form (name, value), where name is the displayed name of the checkbox button and value is the value to be passed to the function, or returned by the function.
            value: Default selected list of options. If a single choice is selected, it can be passed in as a string or numeric type. If callable, the function will be called whenever the app loads to set the initial value of the component.
            type: Type of value to be returned by component. ""value"" returns the list of strings of the choices selected, ""index"" returns the list of indices of the choices selected.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: Additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: If True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If True, choices in this checkbox group will be checkable; if False, checking will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.choices = (
            # Although we expect choices to be a list of tuples, it can be a list of tuples if the Gradio app
            # is loaded with gr.load() since Python tuples are converted to lists in JSON.
            [tuple(c) if isinstance(c, (tuple, list)) else (str(c), c) for c in choices]
            if choices
            else []
        )
        valid_types = [""value"", ""index""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return [self.choices[0][1]] if self.choices else None

    def example_value(self) -> Any:
        return [self.choices[0][1]] if self.choices else None

    def api_info(self) -> dict[str, Any]:
        return {
            ""items"": {""enum"": [c[1] for c in self.choices], ""type"": ""string""},
            ""title"": ""Checkbox Group"",
            ""type"": ""array"",
        }

    def preprocess(
        self, payload: list[str | int | float]
    ) -> list[str | int | float] | list[int | None]:
        """"""
        Parameters:
            payload: the list of checked checkboxes' values
        Returns:
            Passes the list of checked checkboxes as a `list[str | int | float]` or their indices as a `list[int]` into the function, depending on `type`.
        """"""
        if self.type == ""value"":
            return payload
        elif self.type == ""index"":
            choice_values = [value for _, value in self.choices]
            return [
                choice_values.index(choice) if choice in choice_values else None
                for choice in payload
            ]
        else:
            raise ValueError(
                f""Unknown type: {self.type}. Please choose from: 'value', 'index'.""
            )

    def postprocess(
        self, value: list[str | int | float] | str | int | float | None
    ) -> list[str | int | float]:
        """"""
        Parameters:
            value: Expects a `list[str | int | float]` of values or a single `str | int | float` value, the checkboxes with these values are checked.
        Returns:
            the list of checked checkboxes' values
        """"""
        if value is None:
            return []
        if not isinstance(value, list):
            value = [value]
        return value
","The code defines a `CheckboxGroup` component that can be used to create a set of checkboxes. It can be used as an input to pass a set of values to a function or as an output to display values, with a subset of checkboxes selected. The component has various parameters such as choices, value, type, label, info, every, show_label, container, scale, min_width, interactive, visible, elem_id, elem_classes, and render.

The `CheckboxGroup` component has methods for generating example payloads, example values, and API information. It also includes methods for preprocessing and postprocessing the data based on the type of values selected in the checkboxes. The component can handle values as strings, integers, or floats, and can return either the values selected or their indices based on the specified type.","[-0.022406438, 0.005898268, 0.011081066, 0.04050842, 0.010487748, 0.0050693695, 0.017787874, -0.010708788, 0.026082676, 0.013704457, 0.015821785, -0.033481687, 0.013401981, -0.019579457, 0.01533317, -0.008597278, -0.004662191, 0.038274758, 0.0044004335, 0.0292703, -0.018160151, -0.019928468, -0.012110645, 0.012517823, -0.040205944, -0.0456505, -0.050583173, -0.0014222155, 0.01920718, -0.0016621598, -0.046371788, -0.030433666, 0.021638617, -0.013727725, -0.03927525, -0.0067009907, 0.0074397284, 0.046301987, -0.012715596, -0.0036529708, -0.06528813, 0.05174654, 0.009789729, 0.014390843, 0.011302105, 0.054724757, -0.014809655, -0.00079763314, -0.04399852, 0.0013844061, -0.044277728, 0.039694063, -0.033853963, -0.014972527, 0.042137135, 0.025151983, -0.07831783, 0.04748862, 0.025756933, 0.0132042095, 0.060541593, -0.011831437, -0.021580448, 0.059471294, -0.003501733, 0.0009146969, 0.01603119, -0.0071779713, -0.0127853975, 0.013541586, 0.06617229, 0.04313763, -0.039158914, 0.02148738, 0.035319805, -0.009074259, 0.0025943073, -0.024453962, 0.016717575, 0.031387627, -0.011115966, 0.02247624, -0.014297774, -0.041764855, -0.025826735, 0.0043975255, -0.01311114, -0.01581015, -0.0688713, -0.015449506, -0.0680802, -0.0127853975, -0.027385646, 0.0935812, 0.0047232676, -0.0175203, -0.048489112, 0.012343318, 0.001656343, 0.00830062, 0.06244951, -0.014867824, -0.036459904, 0.005389295, 0.03936832, -0.022418072, -0.047000006, 0.023406934, -0.010237625, 0.0040019806, 0.006375248, 0.013657922, -0.10209704, 0.036785647, -0.029596042, -0.0009568689, 0.032969806, -0.052816838, 0.0016010831, -0.013006437, -0.018800002, -0.0680802, 0.03459852, -0.06528813, -0.014472279, -0.030038122, -0.027501984, -0.026966834, -0.020486884, 0.006828961, 0.0037722157, 0.011947773, 0.0014316678, -0.01942822, 0.0027062811, 0.03301634, -0.040578224, -0.00286479, -0.033132676, -0.0011982674, 0.0055463496, -0.01182562, 0.054399017, -0.018846536, -0.029479707, -0.011790719, -0.0044964114, 0.021056933, -0.063985154, 0.0125876255, 0.011517328, 0.0304802, 0.012250249, 0.009481437, -0.0067475257, 0.032644063, 0.020614853, 0.012261882, -0.013157675, -0.024919309, 0.011912873, -0.011837253, 0.03927525, -0.011971041, -0.0080272285, 0.0068056937, -0.0058808173, -0.0005296953, 0.002088243, 0.0012040843, 0.021917824, 0.0049181315, 0.021347774, 0.005002476, -0.0052147903, 0.0049501243, 0.012773763, -0.029851984, -0.026454953, -0.018450992, 0.01889307, 0.008533293, -0.042811885, -0.013390348, -0.044882677, -0.008579828, 0.028293073, -0.053049512, -0.031527232, -0.020324012, 0.014483913, -0.0030247527, 0.00040172497, 0.015088863, 0.012471288, -0.043882184, 0.022487873, 0.005165347, 0.049885154, -0.0245703, 0.065195054, 0.0036878716, 0.031922776, 0.0234302, -0.02387228, 0.018334655, -0.062077235, 0.020673022, 0.0035162752, -0.038367826, -0.022336636, -0.011883789, 0.01615916, -0.007905075, -0.024849508, 0.011197402, -0.025594063, 0.0013953126, -0.02044035, 0.02501238, -0.027106438, 0.008259902, 0.030619806, -0.043765847, -0.009289481, -0.015914854, -0.011243937, -0.029921785, -0.01507723, -0.018183418, 0.011662749, -0.0052235154, 0.022999754, -0.0054009287, 0.0017595917, -0.010499382, 0.012389853, 0.010580818, 0.00026539297, -0.009045174, -0.00876015, 0.022592576, 0.012238615, -0.020033171, 0.019951735, 0.04581337, -0.046534657, -0.02831634, -0.005697587, 0.013483417, 0.07170991, 0.04085743, 0.045068815, -0.017485399, 0.01437921, 0.0187302, -0.013087872, 0.07189605, 0.048814856, 0.024896042, -0.04886139, -0.045697033, -0.034784656, 0.016519804, -0.04423119, 0.05435248, 0.022546042, 0.03666931, -0.009196412, -0.043602973, -0.02212723, 0.04993169, 0.07692179, 0.023034656, -0.012948269, 0.012226981, 0.007928343, 0.030433666, -0.03720446, 0.000583501, -0.048814856, -0.014658418, 0.028246537, 0.04423119, 0.040275745, 0.0041154088, 0.02901436, -0.0056859534, 0.007247773, 0.009597774, 0.06631189, 0.017217824, 0.023918815, 0.025407923, -0.00020813353, 0.03266733, 0.04032228, 0.0057702977, 0.030619806, 0.011092699, -0.020370547, 0.0073641096, -0.048302975, -0.03971733, 0.021766586, -0.038740102, 0.0010303064, 0.009993318, -0.03387723, -0.019149013, 0.039019313, 0.048256442, -0.011680199, -0.029665845, -0.067894064, 0.026873766, 0.020347279, 0.031178221, -0.0050926367, 0.00052751397, -0.0045313123, 0.032039113, 0.017915843, 0.009621041, -0.04092723, 0.0129948035, -0.06286833, -0.012389853, 0.01724109, -0.06021585, 0.016112626, -0.017124753, 0.011214852, 0.030433666, 0.020451982, -0.04695347, -0.03327228, 0.026803963, -0.0491406, 0.017962378, -0.012738863, -0.007079085, 0.014181437, 0.009911883, 0.04895446, 0.014472279, -0.012692329, 0.044394065, 0.012948269, -0.028874755, 0.010086387, -0.006107674, -0.01041213, 0.021929458, 0.013227477, -0.037344065, 0.0015327353, -0.03806535, -0.046534657, 0.009772278, -0.03343515, 0.04155545, 0.017089853, 0.021952726, -0.014216338, 0.017799506, -0.069801986, -0.011197402, -0.00809703, -0.002662655, 0.041625254, -0.02238317, 0.0140301995, -0.024500499, -0.0304104, -0.015798517, 0.038298026, 0.030131191, 0.0010819308, -0.021138368, 0.0457203, -0.037320796, -0.0140301995, -0.03129456, 0.03092228, 0.015402972, -0.010714605, 0.042323273, -0.0012847928, -0.0057150377, 0.0052933176, 0.01193614, -0.0068580452, -0.041508917, 0.04399852, 0.043091092, -0.007864357, 0.052584164, 0.004467327, -0.015786882, -0.003975805, -0.035273273, -0.010196907, 0.07585149, -0.021661883, -0.03562228, 0.010598268, 0.011145051, 0.049326736, -0.01428614, 0.050397035, 0.049885154, 0.031759903, -0.038042083, 0.01850916, -0.008085397, -0.009923516, 0.0027353654, -0.010034036, 0.0066719064, 0.029386638, -0.028851489, -0.019765597, 0.033109408, 0.008236635, 0.013041338, 0.027757924, 0.012831932, -0.044138122, -0.0620307, -0.04285842, 0.0109240115, 0.03555248, 0.033504955, 0.01358812, -0.04399852, 0.038530696, 0.02501238, 0.010371412, 0.013785892, -0.013983665, 0.033598024, 0.00888812, 0.020905696, -0.0031090968, -0.026431685, -0.010993813, -0.052677233, -0.032015845, -0.03876337, -0.031852975, 0.026431685, -0.034645054, 0.009574506, 0.012948269, 0.029572776, 0.027571784, 0.010452848, 0.046813868, -0.012843566, -0.019521289, 0.035878222, 0.049280204, 0.058354463, 0.010173639, 0.028688617, 0.04043862, -0.010557551, 0.010214358, 0.024291093, -0.033132676, 0.008003961, 0.023325497, 0.053189114, -0.014483913, 0.009196412, 0.01612426, 0.03508713, 0.00490359, -0.02044035, 0.0058808173, 0.035854954, 0.0012353498, 0.01904431, 0.051095054, 0.088276245, 0.0061367583, -0.01158713, 0.016682675, -0.013576487, -0.03466832, 0.024593567, -0.003780941, -0.009004456, 0.021126734, -0.03136436, -0.045068815, 0.007742204, 0.01454208, -0.024709905, 0.048023768, -0.0014142174, -0.009993318, 0.03431931, 0.020882428, -0.027501984, 0.016961884, 0.0138207935, -0.0074746297, 0.0001523283, -0.04783763, 0.006165842, 0.03990347, -0.009481437, -0.015763616, -0.03832129, -0.011691833, -0.016926982, -0.0234651, -0.01074369, -0.03641337, 0.03457525, 0.006351981, -0.0051333546, -0.014937625, 0.0044789608, 0.0031527232, -0.07724753, 0.029735647, 0.038018815, -0.04583664, -0.00074455456, 0.037483666, 0.003780941, -0.0445104, -0.006526486, -0.002076609, -0.02533812, 0.026687626, -0.017275993, 0.00888812, -0.0008688893, -0.03431931, 0.005136263, 0.008416956, 0.03911238, -0.012680694, -0.018195052, 0.010289976, 0.045510896, 0.017752972, -0.05016436, 0.017322527, -0.0137160905, 0.001935551, 0.039019313, -0.013750992, 0.018276487, -0.0088532185, -0.035668816, 0.006660273, 0.004982117, -0.0058255577, 0.034109905, -0.023244062, 0.0008907025, -0.02076609, 0.020393815, 0.0042288373, 0.019788863, -0.0057499385, 0.021440843, -0.021533914, 0.024128221, 0.021766586, -0.017718071, 0.016996784, -0.016775744, -0.012192081, 0.00655557, -0.012226981, -0.014472279, -0.0148561895, 0.009330199, -0.036739115, 0.011249754, 0.014588616, -0.001865749, 0.016554704, 0.016775744, -0.0068580452, -0.004816337, -0.00018068535, -0.013983665, -0.0038769187, 0.036878716, -0.035273273, -0.0039089113, -0.030852478, -0.011092699, 0.0028255263, 0.03869357, -0.015228467, 0.0013226023, -0.003969988, -0.013855695, 0.017113121, -0.022138864, 0.00052933174, 0.0027993505, -0.007352476, 0.03266733, -0.013995298, -0.02803713, 0.023232428, -0.0030567453, -0.010493565, 0.012948269, 0.019812131, -0.0146467835, 0.007846907, 0.014937625, -0.025128715, -0.0076491344, 0.040229212, 0.047279213, 0.046720795, -0.023662874, 0.042649016, 0.04025248, -0.024128221, -0.03548268, 0.014995794, 0.015286636, -0.021882923, -0.0006591198, 0.021882923, 0.010598268, -0.009353466, 0.010313244, 0.04136931, 0.023627972, 0.008812501, -0.019218814, 0.022429705, -0.0020082614, 0.009248763, 0.032713864, 0.03939159, -0.0049443073, 0.03736733, 0.019498022, -0.014763121, -0.028967826, 0.012215348, -0.004249196, -0.01663614, -0.014332674, 0.0064101494, -0.0019093752, -0.044975746, -0.010237625, -0.0012949723, -0.00040136144, 0.02447723, 0.05067624, -0.004857055, -0.011098516, -0.035505943, 0.02177822, -0.032295052, 0.021056933, -0.012738863, 0.0329, -0.019777229, 0.008033046, -0.017927477, 0.008393689, 0.021685151, 0.031852975, -0.04346337, 0.0014702043, -0.021115102, -0.036901984, 0.023790844, -0.053794064, 0.027222775, 0.016252229, 0.040392082, 0.00021176905, 0.020289112, 0.022511141, -0.012645793, 0.023511637, -0.03850743, 0.040997036, -0.00094814366, 0.0019573641, 0.03406337, 0.0070500006, -0.007247773, 0.03545941, -0.003591894, -0.06612575, -0.04495248, -0.0064043324, -0.028642083, 0.05016436, 0.0118605215, -0.0027150065, -0.008981189, 0.041252974, 0.005162439, 0.0052147903, -0.029177232, -0.021673517, -0.03834456, 0.01838119, 0.004982117, -0.011162501, -0.039926738, 0.01077859, -0.049187135, -0.01828812, 0.025105448, -0.050908916, -0.02526832, -0.013192575, -0.049000997, -0.013390348, 0.018439358, -0.01856733, -0.024430696, 0.01533317, -0.021231437, 0.05593466, -0.0022074878, -0.012087378, 0.018427724, 0.0125876255, 0.0055957926, 0.04192773, 0.009719927, -0.00061549357, 0.00010588452, -0.033411887, 0.0245703, -0.01720619, 0.009743194, -0.006061139, -0.0034784658, 0.006997649, 0.00043008203, 0.010877476, -0.017345794, -0.019579457, -0.009940966, -0.027199509, 0.001181544, 0.038623765, 0.0065497532, 0.034831192, -0.03129456, -0.0016025373, 0.0025245051, -0.03343515, -0.016170794, -0.014065101, 0.009400001, 0.013611387, 0.014844556, 0.005633602, -0.009667575, -0.018148517, 0.027152974, -0.039182182, -0.009882798, -0.036855448, -0.005738305, 0.02831634, -0.009440719, -0.0029811265, 0.0028895114, 0.010348145, 0.011156685, 0.0679406, 0.019579457, 0.029247032, -0.015635645, -0.05235149, 0.00039990724, 0.0012288059, -0.017054953, -0.030805944, 0.025035646, 0.023232428, -0.022546042, -0.076409906, -0.026803963, 0.023942081, -0.054724757, -0.024686636, -0.03762327, 0.015658913, 0.043858916, -0.024291093, -0.036343567, -0.032108914, -0.018695299, 0.015321536, -0.010894927, -0.0014105819, -0.0062821787, 0.003821659, -0.0013444154, -0.014297774, -0.011104333, 0.029293567, -0.010336511, -0.03571535, -0.014902724, -0.028176736, -0.016391834, 0.0002699374, 0.022720547, 0.014937625, -0.03387723, -0.007666585, 0.036041092, 0.010493565, 0.00391182, 0.0049326736, 0.014472279, 0.017345794, -0.005589976, 0.00997005, -0.026082676, 0.03187624, 0.005415471, -0.039950006, 0.027362378, 0.0043422654, 0.014065101, 0.017939111, 0.029945053, 0.001795947, 0.02286015, 0.044417333, -0.0024634285, 0.044277728, -0.009871164, 0.0032108915, 0.01619406, -0.024337627, -0.010958912, 0.012773763, -0.017357428, -0.00047698026, -0.009027724, 0.024989111, 0.014600249, -0.024104953, -0.02473317, 0.035273273, -0.013541586, -0.042998023, 0.01052265, 0.009999135, 0.035063867, -0.011901239, 0.005261325, 0.0067475257, 0.017857675, 0.008556561, 0.010115472, -0.0074455454, 0.0026015784, 0.0031643568, -0.0073350254, -0.0058750007, 0.028991092, 0.011209036, 0.015728714, -0.0075851493, -0.024686636, -0.028060399, -0.028525745, -0.036739115, 0.009260397, -0.011924506, -0.0061134906, 0.027129706, -0.00315854, -0.017473765, -0.012610893, 0.025663864, -0.025477726, 0.01450718, 0.021033665, 0.0037344063, -0.067568325, 0.005249691, 0.006753342, 0.010377229, 0.0022467515, -0.029642578, -0.006008788, -0.014425744, -0.014111635, -0.04136931, -0.0063926987, -0.0655208, 0.009050991, -0.0049094064, 0.018357923, 0.026036141, 0.00679406, 0.015612378, -0.0007627321, 0.018008912, -0.023104457, 0.030433666, 0.037832677, -0.00749208, -0.013378714, -0.011488244, 0.031317826, -0.006916214, 0.012296784, 0.011779086, 0.024081687, 0.011203219, 0.008457675, -0.016566338, -0.028618814, -0.04965248, -0.052398026, -0.001781405, -0.0006918395, -0.0029113246, -0.018229952, 0.016298763, -0.03178317, -0.009522155, -0.030177725, -0.021475745, 0.014402477, 0.0015269185, -0.011226486, 0.012087378, 0.061658423, 0.017229456, 0.051281195, 0.018485893, -0.025966339, 0.013041338, 0.0134136155, 0.0019166463, 0.010638987, 0.004048515, -0.01358812, -0.019951735, 0.020789359, -0.02095223, -0.0012695236, -0.018160151, 0.035133667, -0.012145546, -0.010563367, 0.033784162, 0.0013247835, -0.012226981, 0.07980694, -0.014006932, 0.0049937507, 0.017974012, 0.02752525, -0.033342082, 0.02552426, 0.0017377787, 0.032574262, 0.014146537, 0.028525745, -0.03241139, -0.015728714, 0.007893441, 0.020242576, 0.010551734, 0.027478715, 0.014879457, -0.051327728, -0.015472774, 0.02482624, -0.035343073, -0.0011539141, 0.019090844, -0.002376176, 0.034831192, 0.029712379, -0.0063054464, -0.018962873, 0.015658913, 0.0024692453, 0.0069220304, 0.021056933, -0.0013880417, 0.07738714, -0.00019286435, -0.011540595, 0.0062879957, 0.007148887, 0.027804459, -0.030270796, 0.0023878096, 0.008161016, -0.038111884, 0.004348082, 0.015973022, -0.005738305, -0.040299013, -0.040205944, -0.03173664, 0.032574262, -0.008597278, 0.014181437, -0.029805448, 0.024919309, -0.007980694, 0.023895547, 0.008876486, -0.03666931, 0.030945549, -0.023488369, 0.0070965355, -0.0047145425, 0.0032516092, -0.0150655955, 0.029409904, 0.033109408, 0.035878222, 0.0025637688, -0.029851984, -0.02051015, 0.038972776, 0.020405447, -0.0008659809, -0.007556065, 0.007887624, 0.0066079213, -0.01850916, -0.026990103, 0.025570795, -0.021603715, 0.03622723, 0.00021922187, -0.005075186, -0.0043015475, -0.011115966, -0.01799728, 0.04371931, -0.020754458, -0.0010666617, 0.033249013, -0.031480696, 0.012471288, 0.00014442104, -0.03990347, -0.006869679, 0.021103468, 0.0037373148, -0.004452785, -0.0121688135, 0.04539456, -0.028781686, -0.031457428, -0.0070907185, -0.012308417, -0.024384161, 0.036390103, -0.013018071, 0.01533317, -0.0016505262, -0.002144957, 0.044045053, 0.003437748, 0.00538057, -0.008626362, -0.0016199878, 0.013774259, 0.018276487, -0.04348664, 0.016589606, -0.013937131, -0.035133667, -0.014925992, -0.012331684, -0.002335458, 0.02850248, -0.009557055, 0.002585582, 0.014181437, 0.0022002168, 0.002704827, 0.0138207935, 0.018218318, -0.012192081, 0.0057557556, 0.0057964735, 0.015519309, 0.023593072, 0.0056016096, 0.06412476, 0.027641587, 0.0043015475, -0.01882327, 0.0038391093, -0.015484408, -0.016252229, 0.029735647, -0.042044062, 0.027246043, -0.01907921, 0.00087688747, -0.022208666, 0.029223766, -0.026990103, 0.011011263, -0.033644557, -0.012250249, -0.0015065596, -0.028386142, 0.0040136143, -0.027827727, -0.04120644, -0.0071198028, 0.021475745, -0.0031265474, 0.0030858296, -0.006037872, -0.0010608447, 0.018404458, 0.027990596, 0.010231808, 0.055003967, -0.032969806, 9.043357e-05, -0.03729753, 0.021929458, 0.015600745, -0.0033650375, -0.0076956693, 0.067289114, -0.017752972, 0.01669431, 0.04371931, 0.01099963, -0.02631535, -0.012471288, 0.024058418, 0.022464607, -0.0019122836, -0.03834456, -0.017752972, -0.0059099016, -0.014821289, 0.040903963, -0.00409505, -0.0040019806, 0.021243071, 0.04092723, 0.023302231, -0.0187302, -0.004836696, 0.049838617, 0.0075444314, -0.011837253, 0.0072186887, -0.016589606, -0.01939332, 0.006276362, 0.0073815603, -0.010348145, -0.003167265, -0.033062875, 0.018904705, 0.043347035, -0.0397406, -0.014088368, 0.02282525, 0.010621536, 0.020626487, 0.0032545177, -0.022150498, -0.0044876863, 0.02961931, -0.023697775, -0.024104953, 0.008399506, 0.014495546, -0.010528467, 0.014274507, 0.0039641713, -0.026850497, -0.014437377, 0.014670051, -0.02282525, 0.015554209, 0.01241312, 0.03399357, -0.02831634, 0.009661758, -0.009830447, -0.0021624074, 0.00690458, -0.03129456, 0.047069807, 0.016019557, -0.007852724, 0.005101362, 0.015775248, 0.010987996, 0.034900993, -0.026082676, 0.021068567, -0.020207675, 0.0004493503, 0.020370547, -0.0018788369, -0.036622778, -0.0017944928, 0.015147031, -0.018532427, 0.014937625, -0.013018071, 0.023150994, -0.0017028777, 0.023709409, 0.029712379, 0.03704159, 0.03841436, -0.0059738867, -0.011709283, 0.016799012, 0.016787378, -0.01063317, 0.013995298, 0.0010492111, 0.027013369, -0.013960398, -0.0026073952, -0.004380075, 0.003810025, 0.00679406, -0.008847402, 0.012133912, 0.024244556, 0.0052933176, -0.031061884, 0.000618402, -0.023627972, 0.00433354, -0.030550003, 0.0135183185, -0.010970546, -6.357616e-05, -0.015100497, 0.010505199, 0.0046505574, -0.013890595, 0.005584159, 0.010464481, 0.017613368, -0.017531933, 0.017089853, 0.0053078593, 0.04078763, -0.023849012, 0.015914854, 0.030084657, 0.0015298269, -0.010423764, -0.004071783, -0.028083667, 0.0013015162, -0.013704457, -0.01781114, 0.054073274, -0.019149013, -0.0049937507, 0.053561393, -0.0064043324, 0.04092723, -0.010336511, -0.006456684, -0.005240966, 0.005299134, -0.025384657, -0.030968815, -0.02199926, 0.027036637, -0.025756933, -0.015356437, -0.0033068692, 0.009400001, -0.003943812, -0.04032228, -0.016147526, 0.01698515, -0.0009735923, -0.011523145, 0.004743627, 0.0147514865, 0.02910743, -0.01041213, 0.022418072, -0.027385646, -0.0006165842, 0.009039357, 0.029758913, 0.027152974, -0.016973516, 0.04739555, -0.0045458544, -0.02365124, 0.007771288, 0.011784902, -0.0050780945, 0.006735892, 0.017031685, 0.029712379, 0.033086143, 0.015856685, -0.0134136155, -0.018427724, -0.009103343, 0.02803713, 0.011174135, 0.026361885, -0.041601986, 0.013599754, 0.014332674, 0.02076609, 0.023511637, 0.010912377, -0.029433172, 0.013134408, 0.010662254, 0.005339852, 0.015426239, -0.018997774, -0.0064741345, 0.009062625, -0.04460347, 0.0015647279, 0.02387228, 0.028525745, 0.023418566, 0.038553964, 0.019602725, 0.0010659345, 0.028665349, 0.016275497, 0.0041328594, 0.020940596, 0.002153682, -0.0081901, 0.0034261143, 0.032434657, 0.02631535, 0.04834951, -0.023337131, -0.0023005572, 0.018776735, -0.00040790538, -0.008923021, 0.0016505262, 0.0011219216, 0.02199926, 0.016391834, -0.026710894, 0.010737873, -0.023220794, -0.011796536, -0.032713864, 0.022522775, 0.010138739, -0.04941981, -0.033504955, 0.004135768, -0.03999654, 0.014530447, 0.050722778, 0.0467906, -0.033760894, -0.007643318, 0.016892081, -0.023150994, 0.0029956687, 0.05826139, -0.008987006, 0.013180942, -0.005668503, -0.0042782803, 0.0036209782, -0.00071946945, 0.015658913, -0.018916339, -0.011994308, -0.009423268, 0.021987626, 0.001544369, 0.013867328, -0.0036180697, 0.014809655, -0.03676238, -0.01346015, 0.043184165, -0.0029345918, -0.009638491, -0.068917826, -0.013727725, 0.024128221, 0.029200498, 0.02291832, -0.0029185957, 0.015437873, -0.0028764235, -0.021592082, 0.034528717, -0.0026452045, 0.03134109, 0.0061367583, 0.04886139, -0.00028084393, 0.009958417, -0.012052476, 0.036739115, 0.017974012, -0.0002492149, -0.008556561, 0.006916214, 0.0055172653, 0.024291093, -0.0130995065, 0.03622723, 0.00046207462, 0.011203219, 0.0042055696, -0.024291093, -0.016787378, -0.036878716, 0.026152479, 0.012203714, 0.0016519803, -0.017008418, 0.004473144, -0.003612253, -0.016973516, 0.021405943, -0.02016114, -0.032504458, 0.0027150065, -0.0064915847, -0.0038332925, 0.021603715, 0.018229952, -0.00155164, -0.027757924, -0.009830447, -0.022871785, -0.030270796, 0.014321041, -0.015554209, -0.027595052, -0.032015845, 0.008510025, -0.0065497532, 0.011738367, -0.008527476, 0.055003967, -0.015100497, 0.031922776, -0.012703962, -0.013250744, -0.0009743194, 0.012308417, 0.0040339734, -0.009597774, 0.006148392, -0.016740844, 0.0050053843, -0.006724258, 0.022895051, -0.0013095144, -0.00011324645, -0.004621473, 0.009690843, -0.00486578, 0.018765101, 0.042742085, -0.040461887, 0.03545941, -0.020300744, 0.021545546, 0.028618814, 0.015147031, 0.035599012, 0.008620545, -0.012226981, -0.02133614, 0.026897032, -0.022278467, -0.0027644495, -0.008568194, -0.029712379, 0.040182676, 0.035436142, 0.024686636, -0.00727104, -0.0072012385, -0.008248269, -0.00023158264, 0.0017625001, -0.044487134, 0.0001507832, 0.002655384, 0.014518813, 0.0044964114, -0.007224506, 0.014041834, 0.01647327, 0.022278467, 0.014437377, -0.029689113, -0.028060399, -0.008248269]"
../../../gradio,../../../gradio/gradio/components,file_explorer.py,"""""""gr.FileExplorer() component""""""

from __future__ import annotations

import fnmatch
import os
import warnings
from pathlib import Path
from typing import Any, Callable, List, Literal

from gradio_client.documentation import document

from gradio.components.base import Component, server
from gradio.data_classes import GradioRootModel


class FileExplorerData(GradioRootModel):
    root: List[List[str]]


@document()
class FileExplorer(Component):
    """"""
    Creates a file explorer component that allows users to browse files on the machine hosting the Gradio app. As an input component,
    it also allows users to select files to be used as input to a function, while as an output component, it displays selected files.

    Demos: file_explorer
    """"""

    EVENTS = [""change""]
    data_model = FileExplorerData

    def __init__(
        self,
        glob: str = ""**/*"",
        *,
        value: str | list[str] | Callable | None = None,
        file_count: Literal[""single"", ""multiple""] = ""multiple"",
        root_dir: str | Path = ""."",
        ignore_glob: str | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        height: int | float | None = None,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        root: None = None,
    ):
        """"""
        Parameters:
            glob: The glob-style pattern used to select which files to display, e.g. ""*"" to match all files, ""*.png"" to match all .png files, ""**/*.txt"" to match any .txt file in any subdirectory, etc. The default value matches all files and folders recursively. See the Python glob documentation at https://docs.python.org/3/library/glob.html for more information.
            value: The file (or list of files, depending on the `file_count` parameter) to show as ""selected"" when the component is first loaded. If a callable is provided, it will be called when the app loads to set the initial value of the component. If not provided, no files are shown as selected.
            file_count: Whether to allow single or multiple files to be selected. If ""single"", the component will return a single absolute file path as a string. If ""multiple"", the component will return a list of absolute file paths as a list of strings.
            root_dir: Path to root directory to select files from. If not provided, defaults to current working directory.
            ignore_glob: The glob-style, case-sensitive pattern that will be used to exclude files from the list. For example, ""*.py"" will exclude all .py files from the list. See the Python glob documentation at https://docs.python.org/3/library/glob.html for more information.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            height: The maximum height of the file component, specified in pixels if a number is passed, or in CSS units if a string is passed. If more files are uploaded than can fit in the height, a scrollbar will appear.
            interactive: if True, will allow users to select file(s); if False, will only display files. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        if root is not None:
            warnings.warn(
                ""The `root` parameter has been deprecated. Please use `root_dir` instead.""
            )
            root_dir = root
            self._constructor_args[0][""root_dir""] = root
        self.root_dir = os.path.abspath(root_dir)
        self.glob = glob
        self.ignore_glob = ignore_glob
        valid_file_count = [""single"", ""multiple""]
        if file_count not in valid_file_count:
            raise ValueError(
                f""Invalid value for parameter `file_count`: {file_count}. Please choose from one of: {valid_file_count}""
            )
        self.file_count = file_count
        self.height = height

        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return [[""Users"", ""gradio"", ""app.py""]]

    def example_value(self) -> Any:
        return [""Users"", ""gradio"", ""app.py""]

    def preprocess(self, payload: FileExplorerData | None) -> list[str] | str | None:
        """"""
        Parameters:
            payload: List of selected files as a FileExplorerData object.
        Returns:
            Passes the selected file or directory as a `str` path (relative to `root`) or `list[str}` depending on `file_count`
        """"""
        if payload is None:
            return None

        if self.file_count == ""single"":
            if len(payload.root) > 1:
                raise ValueError(
                    f""Expected only one file, but {len(payload.root)} were selected.""
                )
            elif len(payload.root) == 0:
                return None
            else:
                return self._safe_join(payload.root[0])
        files = []
        for file in payload.root:
            file_ = self._safe_join(file)
            files.append(file_)
        return files

    def _strip_root(self, path):
        if path.startswith(self.root_dir):
            return path[len(self.root_dir) + 1 :]
        return path

    def postprocess(self, value: str | list[str] | None) -> FileExplorerData | None:
        """"""
        Parameters:
            value: Expects function to return a `str` path to a file, or `list[str]` consisting of paths to files.
        Returns:
            A FileExplorerData object containing the selected files as a list of strings.
        """"""
        if value is None:
            return None

        files = [value] if isinstance(value, str) else value
        root = []
        for file in files:
            root.append(self._strip_root(file).split(os.path.sep))

        return FileExplorerData(root=root)

    @server
    def ls(self, subdirectory: list | None = None) -> list[dict[str, str]] | None:
        """"""
        Returns:
            a list of dictionaries, where each dictionary represents a file or subdirectory in the given subdirectory
        """"""
        if subdirectory is None:
            subdirectory = []

        full_subdir_path = self._safe_join(subdirectory)

        try:
            subdir_items = sorted(os.listdir(full_subdir_path))
        except FileNotFoundError:
            return []

        files, folders = [], []
        for item in subdir_items:
            full_path = os.path.join(full_subdir_path, item)
            is_file = not os.path.isdir(full_path)
            valid_by_glob = fnmatch.fnmatch(full_path, self.glob)
            if is_file and not valid_by_glob:
                continue
            if self.ignore_glob and fnmatch.fnmatch(full_path, self.ignore_glob):
                continue
            target = files if is_file else folders
            target.append(
                {
                    ""name"": item,
                    ""type"": ""file"" if is_file else ""folder"",
                    ""valid"": valid_by_glob,
                }
            )

        return folders + files

    def _safe_join(self, folders):
        combined_path = os.path.join(self.root_dir, *folders)
        absolute_path = os.path.abspath(combined_path)
        if os.path.commonprefix([self.root_dir, absolute_path]) != os.path.abspath(
            self.root_dir
        ):
            raise ValueError(""Attempted to navigate outside of root directory"")
        return absolute_path
","This code defines a `FileExplorer` component that allows users to browse files on the machine hosting the Gradio app. It can be used as an input component to select files for a function or as an output component to display selected files. The component supports parameters such as `glob` for file pattern matching, `value` to set initial selected files, `file_count` to specify single or multiple file selection, `root_dir` to set the root directory, and more.

The component provides methods for preprocessing and postprocessing selected files, as well as listing files and subdirectories in a given directory. The `ls` method returns a list of dictionaries representing files and subdirectories in a specified subdirectory.","[-0.03487357, 0.03794476, 0.06004397, -0.024614021, 0.01382035, -0.05007373, -0.04177262, 0.0069268662, -0.0073330197, 0.0077781198, 0.0065763504, -0.0115169585, -0.011839656, -0.038456626, 0.003096226, -0.00249395, -0.0139316255, 0.01511114, 0.008824104, 0.019495374, 0.05292237, -0.05385708, -0.003313212, 0.027484916, -0.014877463, -0.03097895, -0.02991071, 0.08274406, 0.020763908, -0.01812669, -0.040815655, -0.017358894, 0.037655447, 0.01444349, -0.029977474, -0.048426863, 0.046958033, 0.028419625, -0.016123742, -0.045400184, -0.048426863, -0.043174684, -0.01675801, 0.04475479, 0.0036553824, -0.009013272, -0.011166442, 0.042907625, 0.032447778, 0.02861992, -0.02581579, -0.020941949, 5.837589e-05, -0.0041032643, -0.012830003, 0.01341976, -0.06035554, -0.0014111056, -0.006626424, 0.003947479, -0.0085069705, 0.028953744, 0.024792062, 0.023256468, -0.008034052, 0.005007373, -0.04025928, 0.023078427, 0.020318808, -0.024369217, 0.006403874, -0.013831478, -0.015845554, -0.05893122, -0.0029098403, -0.017637081, -0.0135755455, -0.05612709, 0.010860437, -0.047714703, -0.029621394, 0.025570987, -0.029087275, -0.010877128, -0.010977275, 0.007972851, 0.0034829064, 0.025370691, -0.03013326, -0.05915377, -0.008551481, -0.020196406, 9.675706e-05, 0.035986323, 0.009491754, 0.017637081, -0.04533342, -0.056483172, -0.006676498, 0.047180586, 0.0001729978, -0.01426545, -0.017937524, -0.060132988, 0.05893122, 0.00944168, -0.00045657507, 0.010253987, -0.008078562, -0.04101595, -0.01217348, -0.002762401, 0.003997553, -0.016157124, 0.018582918, -0.010148277, 0.010699088, -0.033293467, -0.024636276, 0.009130111, -0.020318808, 0.0061312504, -0.033337977, 0.0019361844, 0.015578494, -0.003007206, -0.015367072, -0.021809893, -0.0077781198, -0.024792062, -0.011806274, 0.066631444, 0.031713363, -0.06413889, -0.020430082, 0.020986458, -0.066453405, -0.0054691643, -0.050652362, 0.04297439, 0.011572596, -0.013208338, 0.030800909, -0.014376725, 0.0029209678, -0.018849978, -0.02142043, 0.051943153, -0.05879769, -0.039480355, 0.02199906, -0.011973185, -0.03231425, 0.012818876, 0.0034634331, 0.008245475, 0.050029222, 0.0023117373, -0.016858157, -0.016068105, -0.03213621, -0.0041728113, 0.016379675, 0.006047794, 0.014588147, 0.036186617, 0.004400925, 0.026416676, -0.021119988, 0.0659638, -0.007221745, -0.024903337, 0.0045817466, -0.026016086, 0.02790776, -0.031357285, -0.006142378, -0.01577879, 0.0037165838, -0.02866443, -0.015456093, -0.029354336, -0.02545971, 0.015177905, -0.027084326, -0.020285426, 0.00062070566, -0.069346555, -0.037744466, 0.008034052, 0.009458371, 0.05968789, -0.0048571522, 0.051854134, -0.022989407, -0.007894958, -0.013130445, 0.03013326, -0.011605979, 0.042106446, 0.028019035, 0.021832148, 0.015444965, -0.0077169184, -0.048515882, 0.048738435, 0.008379005, 0.0341169, 0.032737095, -0.0057362244, 0.011366737, -0.024079902, 0.012384904, 0.016724627, -0.029688159, -0.028419625, 0.036742993, -0.008595991, -0.0012323702, 0.017581444, -0.013252848, -0.0014111056, 0.009964673, 0.0002788829, 0.0394581, 0.01293015, 0.019450864, -0.027662955, 0.025526477, -0.022299502, 0.026795011, 0.018015416, -0.0037666576, -0.0015759317, 0.05234374, -0.017748356, -0.007900522, -0.028998256, 0.03511838, 0.024680786, -0.03861241, 0.023100682, 0.0071382886, -0.02728462, 0.028330605, 0.0105655575, 0.0013735503, -0.03725486, 0.00267199, 0.08261053, -0.015723152, 0.006337109, 0.018783214, 0.0022004624, 0.0010188613, 0.026060596, -0.02937659, 0.002468913, 0.0042785225, -0.031045714, -0.013074808, -0.047981765, -0.013208338, 0.030289045, -0.026327657, 0.042284485, 0.013786968, 0.025637751, -0.011661616, -0.007221745, 0.010854873, -0.020051748, 0.03696554, 0.006426129, -0.0046512936, -0.03195817, 0.016112614, -0.008679447, -0.017726101, 0.011077423, -0.0050018094, 0.013831478, -0.021987932, 0.026950795, -0.0387682, 0.033760823, -0.0023256468, 0.0017776175, -0.0037694394, -0.033538274, 0.008590427, 0.009291459, 0.0566167, -0.023723822, -0.0030322426, 0.012284756, 0.0271956, 0.0010383344, 0.033805333, 0.0072273086, 0.021320283, -0.008367877, 0.0061980155, 0.010537739, -0.038412116, -0.011761763, 0.026795011, 0.025971577, 0.007327456, 0.0019069747, 0.026349911, -0.019217186, 0.00880185, -0.019873708, 0.003290957, -0.048738435, 0.019473119, 0.003246447, 0.021809893, -0.028642176, -0.009730996, 0.047047053, 0.05621611, -0.00035851402, -0.0018360369, -0.019606648, -0.013297358, -0.009647539, -0.02617187, -0.040593106, 0.047714703, 0.02902051, -0.05897573, 0.0047876053, 0.012340393, -0.047848232, -0.023901861, 0.041928407, -0.06721008, 0.017102962, -0.012607453, 0.010760289, 0.02857541, 0.018182328, 0.0047987327, 0.0167135, -0.037521917, 0.01453251, -0.0034356145, -0.004793169, -0.012551815, -0.023033917, -0.026683737, -0.0016705154, 0.015489475, -0.015189032, -0.06369379, -0.061512798, -0.05764043, -0.009480626, -0.04092693, 0.016290653, -0.03776672, 0.041349776, -0.019406354, 0.0020238133, -0.02844188, -0.009107855, 0.021976804, -0.005324507, 0.039524868, 0.019473119, -0.03017777, -0.022232737, -0.027462661, -0.02208808, -0.003688765, -0.01399839, -0.021431558, -0.00025262893, 0.019272823, 0.038189568, -0.01964003, -0.03360504, -0.06275908, -0.0020252042, -0.0019695668, 0.023879606, 0.017581444, -0.033961117, -0.013152701, 0.002847248, 0.020029493, -0.015322562, 0.017703846, -0.0004739618, 0.035763774, 0.009491754, 0.043219194, -0.009491754, -0.01475506, -0.08136425, -0.01573428, 0.023300977, -0.03936908, -0.008779595, 0.015812172, 0.08105268, -0.026194125, -0.026817266, 0.042462524, -0.0054691643, 0.046824504, -0.02701756, 0.046824504, -0.0125073055, 0.00013274755, -0.035897303, 0.020118512, 0.06676498, 0.0341169, -0.008195401, -0.0034968157, -0.039613888, 0.038300842, 0.028152565, 0.049628634, 0.017904142, 0.053322963, -0.06858989, -0.0097143045, -0.03364955, 0.007577825, 0.053501002, 0.017091835, -0.06854538, 0.018338114, 0.049139023, 0.01777061, -0.01413192, 0.007483241, 0.014877463, 0.006476203, 0.024102157, -0.018605174, -0.02146494, -0.003841768, -0.016924921, -0.067877725, -0.03801153, -0.017703846, -0.0016579969, -0.048026275, -0.00035208094, 0.024013137, -0.0032075008, 0.02951012, -0.04244027, 0.04324145, 0.0028208203, 0.016947176, 0.03847888, -0.022232737, 0.026772756, 0.022599945, -0.024369217, -0.036653973, 0.0045650555, -0.0023214738, -0.022499798, 0.035986323, 0.013987263, 0.01928395, 0.009052218, -0.069480084, 0.0036832013, -0.016379675, -0.015144522, -0.05314492, 0.00521045, -0.023345487, 0.03482906, -0.02977718, -0.046601955, 0.011739508, 0.083812304, -0.03222523, -0.005616604, 0.02652795, -0.016513204, -0.030111004, -0.0015689769, -0.016980559, -0.007861576, 0.030956695, 0.005213232, -0.047670193, -0.019562138, -0.012607453, 0.012217991, 0.011439066, -0.014721678, -0.012184609, 0.05772945, -0.006537404, -0.0048933164, 0.014721678, -0.027974525, 0.015756534, -0.037455153, 0.0014284924, 0.00087003113, 0.00948619, 0.015723152, 0.035385437, -0.034584258, -0.04244027, 0.017025068, -0.009413862, -0.024814317, 0.00808969, 0.035808284, -0.02012964, -0.026772756, 0.0012295883, 0.017648209, -0.013174956, -0.08893095, 0.016980559, -0.0060199755, -0.0073830937, -0.021587342, -0.024302451, 0.033961117, -0.026906285, -0.017447913, -0.0017275438, -0.0135978, -0.0057139695, -0.017492425, -0.0026539078, 0.00840126, 0.019050274, 0.0009138456, 0.010738034, 0.06556321, -0.01999611, -0.050741382, 0.062224958, 0.007750301, 0.026772756, -0.05688376, 0.036364656, -0.014065155, -0.00066730205, 0.02817482, 0.024502747, -0.018894488, -0.008078562, -0.005204886, -0.017002814, -0.0052827788, 0.043263704, 0.009508446, 0.024324706, -0.018371496, -0.036720738, -0.02079729, -0.01395388, 0.0076724086, 0.009018836, 0.01649095, -0.032447778, 0.025303926, 0.005007373, -0.00547751, -0.013352996, -0.05376806, -0.031112479, 0.016212761, 0.018716449, -0.0016413056, -0.020274298, 0.017080707, -0.007900522, -0.03106797, -0.00020672801, 0.027151091, 0.028286096, -0.03351602, -0.011672744, -0.013364123, 0.0122291185, 0.0087629035, -0.038790453, 0.01741453, -0.027707465, 0.028686685, -0.03057836, 0.019918218, -0.03928006, -0.017481297, -0.010760289, 0.039391335, 0.029977474, 0.00065269717, 0.035007104, 0.0033465945, -0.043219194, -0.0050351922, -0.05163158, 0.016212761, -0.041193992, -0.0329819, -0.022433031, 0.017180854, -0.023300977, -0.0019014109, 0.02870894, -0.0064205653, -0.013453143, 0.0030739708, 0.0061701965, 0.004884971, 0.027507171, 0.014410107, 0.0049294806, -0.008379005, 0.0027081543, 0.022377394, 0.019261695, 0.0035468894, 0.023278723, -0.0015870591, 0.022755729, -0.0011850783, -0.012963533, -0.027974525, -0.023412252, -0.008429078, 0.0221771, 0.045845285, 0.001059894, -0.01430996, 0.0037610936, 0.014410107, -0.011962058, 0.02088631, 0.03910202, 0.0051937588, 0.005892009, 0.010231732, 0.005274433, 0.025682261, -0.0050157188, -0.0052466146, 0.006626424, -0.00565555, -0.019183803, 0.036676228, 0.0024355308, -0.008707265, -0.0068322825, -0.032247484, -0.021275772, 0.03364955, 0.005981029, 0.019628903, 0.0045873104, 0.047803722, -0.027217856, -0.04017026, 0.010671269, -0.005741788, 0.019094784, -0.06213594, 0.031179244, -0.030244535, -0.020719398, 0.012919023, -0.015878936, -0.012651963, -0.024257941, -0.004662421, -0.010899383, 0.006097868, 0.008629373, -0.01968454, 0.006982504, -0.025593242, 0.023790587, -0.005638859, -0.0005685455, 0.0067766453, 0.0073664025, 0.02910953, 0.015433837, -0.019395227, 0.020674888, -0.041438796, 0.02951012, 0.019461991, -0.017970907, 0.024146667, -0.0646285, -0.0038195131, -0.009603029, 0.0043591964, 0.010582249, -0.046779994, 0.009107855, 0.041216247, -0.017993161, 0.016602224, -0.025014611, 0.022455288, 0.0029126222, -0.0073163286, 0.031713363, -0.0008150891, -0.06293712, 0.009057782, -0.0258603, -0.019339588, 0.008996581, -0.049272552, 0.012718728, 0.009803324, -0.02955463, 0.021387048, 0.017826248, -0.0060756127, 0.03574152, 0.024480492, -0.014332215, 0.036653973, -0.0038056036, -0.0039446973, 0.0069435574, 8.78029e-05, 0.03262582, 0.005132558, 0.0028764578, -0.019517628, -0.02728462, -0.0025509784, -0.00053759717, -0.0145658925, -0.08568172, 0.0045344546, 0.007004759, 0.0056694592, -0.0077169184, 0.017614827, 0.013008043, 0.015255798, -0.023901861, -0.008128636, -0.019128166, -0.022789111, 0.031223753, 0.02688403, -0.025148142, -0.0010508529, -0.013965008, -0.018805468, 0.026305402, -0.03734388, 0.0005748047, 0.0072940737, 0.037277114, 0.0024174484, 0.0043842336, -0.03062287, 0.018938998, -0.022232737, 0.020864055, -0.042284485, 0.039725162, 0.0226222, -0.02124239, 0.005830808, 0.031246008, -0.009792197, 0.05781847, 0.016969431, -0.0134976525, 0.011127496, -0.0018749831, -0.027151091, 0.019918218, -0.017536934, -0.016869284, 0.016368547, 0.021175625, 0.00088115863, 0.011394556, -0.06253653, -0.029087275, -0.009347097, 0.002161516, -0.03160209, -0.011650489, 0.0066653704, 0.056438662, 0.03910202, -0.0044593443, -0.07272931, -0.045800775, 0.04506636, -0.0052327053, 0.025548732, -0.025259417, 0.011761763, 0.04292988, 0.02164298, 0.0051409034, 0.021142242, 0.011027348, -0.024680786, -0.0387682, 0.013553291, -0.0062425253, 0.0076501537, -0.0062870355, 0.037432898, 0.052610803, 0.042328995, 0.02946561, 0.010676833, 0.029576885, 0.0294211, -0.00027627486, 0.030823164, -0.03097895, 0.01706958, 0.009408298, 0.00045448868, -0.019473119, -0.028597666, 0.015355945, -0.0087629035, 0.02804129, -0.0258603, 0.05011824, 0.009174621, 0.0006081872, 0.024836572, 0.00023611156, 0.025348436, 0.0022394087, -0.039658397, 0.017080707, 0.014165303, 0.04003673, -0.0135978, 0.0114168115, 0.029332079, -0.025192652, 0.017180854, 0.010515484, -0.0065429676, -0.006387183, 0.0066987528, -0.024925591, -0.050029222, -0.0029571322, -0.012284756, 0.020741653, -0.016435312, -0.011299972, 0.010092639, -0.00411161, -0.005892009, -0.02505912, -0.0040949187, 0.0039864257, -0.0073719663, -0.019061401, -0.022588817, 0.016958304, 0.014020645, 0.033538274, -0.02928757, -0.0067766453, -0.018093308, 0.012562944, 0.008367877, 0.020051748, 0.01324172, 0.011110805, 0.010120458, 0.0036998924, -0.00014352732, 0.019784689, 0.047848232, -0.0033465945, 0.05514787, -0.007978415, -0.008868614, -0.0051548127, -0.0051047388, -0.01252956, -0.011110805, -0.026394421, 0.011806274, -0.031090224, 0.0077447374, 0.018772086, 0.008840796, -0.009230258, -0.02505912, 0.011795146, 0.016368547, 0.013019171, -0.016034722, -0.01439898, 0.017169727, -0.023857351, 0.010571121, -0.011461321, -0.019350715, 0.00653184, 0.0102094775, -0.029532375, -0.016924921, 0.0024216215, 0.0020154677, 0.01613487, -0.0036971106, 0.027840996, -0.0070270137, 0.029843945, -0.015255798, 0.02973267, -0.017703846, -0.008501407, 5.846282e-05, -0.023568036, 0.014643785, -0.009174621, -0.047358625, 0.022733474, -0.037432898, 0.043085665, -0.063604765, 0.0072328723, -0.02737364, 0.01113306, 0.0013832869, -0.02652795, 0.017581444, 0.037477408, 0.010103767, -0.03066738, -0.007360839, -0.027707465, 0.037922505, 0.0065429676, -0.018449388, -0.06120123, -0.019473119, 0.009402734, 0.04128301, 0.015478347, -0.021520577, 0.041972917, -0.0052299234, -0.003357722, -0.019094784, 0.014855207, 0.024235686, 0.017436786, -0.017982034, -0.010092639, 0.0044231797, 0.00027923062, -0.03356053, 0.019606648, -0.008540354, 0.0153781995, 0.006737699, 0.018438261, 0.00728851, -0.047714703, -0.025949322, 0.0085793, 0.00061375095, 0.035318673, 0.024947846, -0.06026652, 0.018905615, -0.004217321, 0.03146856, 0.002562106, 0.007922777, -0.006999195, 0.03336023, 0.033983372, 0.012429413, -0.044955086, -0.01306368, 0.029354336, -0.01928395, -0.015990213, 0.015990213, 0.025170397, -0.009380479, 2.7253673e-05, 0.017214237, -0.023078427, 0.016657861, 0.0150221195, -0.0176037, 0.027529426, -0.05443571, -0.013252848, 0.047358625, -0.004170029, -0.0073330197, -0.02701756, -0.00092219125, 0.0027484915, 0.010949456, -0.022811366, -0.015444965, 0.03422818, 0.0068656653, -0.00561104, -0.01293015, 0.019317333, 0.016813647, -0.024502747, -0.0009736559, 0.017002814, 0.04940608, 0.0068601016, -0.0040531904, -0.008351186, -0.008679447, -0.026950795, -0.004687458, -0.0017637082, 0.048070785, -0.0013046989, -0.031001205, -0.013208338, -0.034383964, 0.014599275, 0.034740042, -0.0025259417, -0.02830835, 0.011394556, 0.00552202, 0.0014340561, 0.016924921, -0.009091164, -0.011439066, 0.015533985, -0.0017066797, -0.026060596, 0.036475934, 0.038679175, -0.011255463, -0.056438662, -0.009808888, 0.021631852, 0.010170531, 0.023256468, 0.019829199, 0.013620055, 0.019083656, -0.009013272, -0.00702145, -0.012073333, -0.0114168115, -0.01827135, 0.0035413257, 0.028241586, 0.010938329, 0.0024828226, -0.04350851, 0.008056307, 0.012284756, -0.023901861, 0.02999973, -0.032603562, 0.0036108724, 0.0105266115, -0.015010992, -0.019806944, 0.03638691, -0.0005379449, -0.033337977, -0.03436171, -0.0052633057, -0.011194261, 0.025326181, 0.015745407, -0.028464135, 0.013408633, -0.01613487, -0.034717787, -0.028553154, 0.0070270137, -0.0016426967, -0.0009861743, -0.0067488262, 0.014098538, 0.0020349408, 0.01609036, 0.06035554, -0.010454283, -0.02982169, -0.017548062, -0.01113306, -0.013898242, 0.021631852, 0.010771416, 0.026416676, 0.0050657927, -0.010532175, -0.008390132, 0.040370557, 0.029265314, -0.046067834, -0.01568977, 0.025726771, -0.013341868, 0.014821825, -0.006470639, -0.03026679, -0.012785493, -0.02182102, -0.007177235, 0.018694194, 0.0064205653, -0.024124412, 0.000228983, 0.037121326, -0.030845419, -0.02182102, 0.040682126, 0.040815655, -0.026305402, -0.015723152, 0.014699423, 0.028219331, 0.022833623, -0.011950931, 0.012396031, 0.035251908, 0.0018221275, 0.019139294, -0.024858827, 0.023389997, -0.0060644853, -0.010548866, -0.0042924318, 0.044955086, -0.039569378, 0.010265116, -0.024280196, 0.013898242, 0.020385573, -0.0027429278, -0.0031240445, -0.014766187, 0.006225834, 0.05443571, -0.007683536, 0.0050045913, -0.012251373, 0.017180854, 0.009046654, -0.011917548, -0.047759213, 0.014643785, 0.012874513, 0.045578223, 0.0385679, -0.047714703, -0.0066097328, 0.025548732, -0.017726101, 0.0076000798, 0.002121179, -0.023879606, 0.04417616, 0.03280386, 0.010482102, -0.0029126222, 0.02737364, -0.018349241, 0.014020645, -0.037388388, -0.0028625485, 0.004131083, 0.018260222, 0.004042063, 0.010871564, 0.0116949985, -0.03262582, 0.015389327, 0.018182328, 0.0025954884, -0.009436117, -0.042462524, 0.0142098125, 0.02955463, 0.026327657, 0.038812708, -0.025838045, -0.0026984178, 0.0029988603, 0.012663091, 0.0022811368, 0.0018805468, 0.017681591, -0.003914097, 0.005719533, 0.02235514, 0.011427939, 0.012663091, -0.023056172, 0.008306676, 0.01644644, -0.0010640668, 0.013019171, -0.001876374, 0.0067710816, -0.03516289, 0.030155515, 0.024792062, 0.026394421, -0.021709746, 0.045311164, 0.0017066797, 0.040993694, 0.01644644, 0.06315967, 0.004879407, 0.008512534, 0.030556105, -0.011650489, 0.0120510785, 0.023389997, 0.016780265, 0.02928757, -0.011016221, 0.010726906, -0.009986928, 0.01422094, 0.01528918, 0.018471643, -0.0031657727, -0.006136814, -0.0149331, 0.02545971, -0.048026275, -0.0023312105, 0.013976135, -0.00322141, -0.032158464, 0.0020571959, 0.0002707111, -0.003669292, 0.01475506, -0.00626478, -0.015678642, 0.00041136963, 0.0055025467, 0.022588817, -0.005560966, -0.011216516, 0.021698618, 0.0018165638, -0.01897238, -0.02652795, -0.025927067, -0.0025732336, -0.014154175, 0.0017650991, 0.015500602, -0.06186888, 0.021887785, -0.003421705, -0.031246008, 0.0341169, 0.005694496, 0.009764378, 0.049628634, 0.012985788, 0.013842605, 0.012696473, -0.0104209, -0.01328623, -0.049806673, 0.017392276, -0.0026761629, -0.0057918616, 0.024658531, -0.00048856664, 0.0074331677, 0.0003936352, -0.02973267, 0.0039001873, -0.004309123, -0.018093308, 0.019751305, -0.031802382, 0.007238436, 0.027062071, -0.0042729587, 0.017459042, -0.013898242, -0.0070325774, 0.0016691245, 0.010459847, 0.0058252444, -0.0058864453, 0.009330406, -0.034651022, 0.022922643, 0.04506636, 0.024925591, -0.017525807, -0.010587812, -0.012640836, 0.05452473, -0.025615497, -0.018950125, 0.0019765215, -0.0028416843, -0.024792062, -0.017303256, 0.016936049, 0.050607853, 0.0027971743, 0.023078427, -0.044509985, 0.04025928, -0.0009646148, -0.0018624647, 0.021498322, -0.0074999323, 0.0014952573, -0.018861106, 0.027351385, 0.003510725, 0.010843745, 0.00304337, -0.03440622, 0.00056402496, -0.012140098, -0.016780265, 0.019940473, 0.015422709, -0.010103767, -0.0048209876, 0.01471055, 0.005981029, 0.045533713, 0.019862581, -0.041193992, 0.037521917, 0.016123742, 0.042685077, -0.020252043, -0.014321088, -0.0044092704, -0.007850449, 0.0020168587, 0.013375251, 0.018872233, 0.020541359, -0.0105266115, 0.031579833, -0.046690974, -0.0258603, 0.020997586, 0.011683871, 0.014009518, -0.023078427, 0.009274768, -0.009213567, -0.026349911, 0.011661616, -0.027618445, -0.025726771, -0.0149331, 0.048604902, 0.030845419, 0.0140317725, -0.051275503, 0.042418014, -0.020452337, 0.021042095, -0.009875652, 0.041394286, -0.023456762, -0.0021921168, -0.022410776, -0.002603834, 0.008234347, -0.004865498, -0.01293015, -0.039880946, 0.024502747, -0.0058641904, -0.029354336, 0.039925456, 0.011939803, 0.0054608188, 0.016157124, -0.0014326652, 0.04457675, -0.008612682, -0.024435982, -0.051186483, 0.009669794, -0.007611207, 0.010587812, 0.0044231797, -0.025081376, -0.030378064, -0.009002144, 0.0124071585, -0.0022449724, 0.0040670997, -0.0040281536, 0.022811366, 0.017926397, 0.022076953, 0.0126853455, -0.0005323811, 0.024725296, 0.05924279, 0.01430996, -0.030756399, -0.021042095, 0.0320917, 0.034584258, -0.039391335, 0.024458237, -0.021709746, -0.04052634, 0.0038974055, -0.008451333, -0.02577128, -0.046423916, 0.007794811, 0.0014312742, -0.041972917, -0.022154845, -0.03620887, -0.038723685, 0.024903337, -0.0059532104, -0.007182799, -0.009580774, 0.0067710816, 0.03865692, -0.03338249, -0.010693524, -0.004704149, 0.007305201, -0.031246008, 0.01341976, -0.039213296, -0.00339945, 0.021732, 0.02902051, -0.019873708, -0.06707655, 0.033115428, -0.007093779, -0.00020985762, 0.034005627, 0.02235514, 0.021921167, 0.015723152, 0.00948619, -0.012830003, 0.03725486, -0.011283281, 0.015823299, -0.016769137, -0.019272823, -0.0044732536, 0.010498793, -0.0043564145, 0.0030294608, 0.012874513, -0.0014201467, 0.0046930215, -0.011055168, -0.018950125, 0.023634803, 0.01457702, -0.0029710415, 0.022076953, 0.0145658925, 0.01964003, 0.0046262564, -0.042017426, -0.017648209, -0.0065707867, -0.013653438, -0.010715779, 0.0088630505, 0.011405683, 0.008840796, 0.0012421068, -0.005649986, -0.0039780797, 0.010932765, 0.007338584, -0.0285309, 0.04226223, -0.030489339, 0.024458237, -0.014654912, -0.09160155, 0.0006109691, 0.049228042, 0.019083656, 0.021631852, -0.000300964, 0.016257271, -0.011962058, -0.0041171736, 0.00140276, -0.0141096655, -0.0044927266, 0.005204886]"
../../../gradio,../../../gradio/gradio/components,image.pyi,"""""""gr.Image() component.""""""

from __future__ import annotations

import warnings
from pathlib import Path
from typing import Any, Literal, cast

import numpy as np
from gradio_client.documentation import document, set_documentation_group
from PIL import Image as _Image  # using _ to minimize namespace pollution
from PIL import ImageOps

import gradio.image_utils as image_utils
from gradio import utils
from gradio.components.base import Component, StreamingInput
from gradio.data_classes import FileData
from gradio.events import Events

set_documentation_group(""component"")
_Image.init()  # fixes https://github.com/gradio-app/gradio/issues/2843

from gradio.events import Dependency

@document()
class Image(StreamingInput, Component):
    """"""
    Creates an image component that can be used to upload images (as an input) or display images (as an output).

    Demos: sepia_filter, fake_diffusion
    Guides: image-classification-in-pytorch, image-classification-in-tensorflow, image-classification-with-vision-transformers, create-your-own-friends-with-a-gan
    """"""

    EVENTS = [
        Events.clear,
        Events.change,
        Events.stream,
        Events.select,
        Events.upload,
    ]

    data_model = FileData

    def __init__(
        self,
        value: str | PIL.Image.Image | np.ndarray | None = None,
        *,
        format: str = ""png"",
        height: int | str | None = None,
        width: int | str | None = None,
        image_mode: Literal[
            ""1"", ""L"", ""P"", ""RGB"", ""RGBA"", ""CMYK"", ""YCbCr"", ""LAB"", ""HSV"", ""I"", ""F""
        ] = ""RGB"",
        sources: list[Literal[""upload"", ""webcam"", ""clipboard""]] | None = None,
        type: Literal[""numpy"", ""pil"", ""filepath""] = ""numpy"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        show_download_button: bool = True,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        streaming: bool = False,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        mirror_webcam: bool = True,
        show_share_button: bool | None = None,
    ):
        """"""
        Parameters:
            value: A PIL Image, numpy array, path or URL for the default value that Image component is going to take. If callable, the function will be called whenever the app loads to set the initial value of the component.
            format: Format to save image if it does not already have a valid format (e.g. if the image is being returned to the frontend as a numpy array or PIL Image).  The format should be supported by the PIL library. This parameter has no effect on SVG files.
            height: The height of the displayed image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the displayed image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            image_mode: ""RGB"" if color, or ""L"" if black and white. See https://pillow.readthedocs.io/en/stable/handbook/concepts.html for other supported image modes and their meaning.
            sources: List of sources for the image. ""upload"" creates a box where user can drop an image file, ""webcam"" allows user to take snapshot from their webcam, ""clipboard"" allows users to paste an image from the clipboard. If None, defaults to [""upload"", ""webcam"", ""clipboard""] if streaming is False, otherwise defaults to [""webcam""].
            type: The format the image is converted before being passed into the prediction function. ""numpy"" converts the image to a numpy array with shape (height, width, 3) and values from 0 to 255, ""pil"" converts the image to a PIL image object, ""filepath"" passes a str path to a temporary file containing the image. If the image is SVG, the `type` is ignored and the filepath of the SVG is returned.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            show_download_button: If True, will display button to download image.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to upload and edit an image; if False, can only be used to display images. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            streaming: If True when used in a `live` interface, will automatically stream webcam feed. Only valid is source is 'webcam'.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            mirror_webcam: If True webcam will be mirrored. Default is True.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
        """"""
        self.format = format
        self.mirror_webcam = mirror_webcam
        valid_types = [""numpy"", ""pil"", ""filepath""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.height = height
        self.width = width
        self.image_mode = image_mode
        valid_sources = [""upload"", ""webcam"", ""clipboard""]
        if sources is None:
            self.sources = (
                [""webcam""] if streaming else [""upload"", ""webcam"", ""clipboard""]
            )
        elif isinstance(sources, str):
            self.sources = [sources]  # type: ignore
        else:
            self.sources = sources
        for source in self.sources:  # type: ignore
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must a list consisting of elements in {valid_sources}""
                )
        self.streaming = streaming
        self.show_download_button = show_download_button
        if streaming and self.sources != [""webcam""]:
            raise ValueError(
                ""Image streaming only available if sources is ['webcam']. Streaming not supported with multiple sources.""
            )
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: FileData | None
    ) -> np.ndarray | PIL.Image.Image | str | None:
        """"""
        Parameters:
            payload: image data in the form of a FileData object
        Returns:
            Passes the uploaded image as a `numpy.array`, `PIL.Image` or `str` filepath depending on `type`. For SVGs, the `type` parameter is ignored and the filepath of the SVG is returned.
        """"""
        if payload is None:
            return payload
        file_path = Path(payload.path)
        if payload.orig_name:
            p = Path(payload.orig_name)
            name = p.stem
            suffix = p.suffix.replace(""."", """")
            if suffix in [""jpg"", ""jpeg""]:
                suffix = ""jpeg""
        else:
            name = ""image""
            suffix = ""png""

        if suffix.lower() == ""svg"":
            return str(file_path)

        im = PIL.Image.open(file_path)
        exif = im.getexif()
        # 274 is the code for image rotation and 1 means ""correct orientation""
        if exif.get(274, 1) != 1 and hasattr(ImageOps, ""exif_transpose""):
            try:
                im = ImageOps.exif_transpose(im)
            except Exception:
                warnings.warn(
                    f""Failed to transpose image {file_path} based on EXIF data.""
                )
        with warnings.catch_warnings():
            warnings.simplefilter(""ignore"")
            im = im.convert(self.image_mode)
        return image_utils.format_image(
            im,
            cast(Literal[""numpy"", ""pil"", ""filepath""], self.type),
            self.GRADIO_CACHE,
            name=name,
            format=suffix,
        )

    def postprocess(
        self, value: np.ndarray | PIL.Image.Image | str | Path | None
    ) -> FileData | None:
        """"""
        Parameters:
            value: Expects a `numpy.array`, `PIL.Image`, or `str` or `pathlib.Path` filepath to an image which is displayed.
        Returns:
            Returns the image as a `FileData` object.
        """"""
        if value is None:
            return None
        if isinstance(value, str) and value.lower().endswith("".svg""):
            return FileData(path=value, orig_name=Path(value).name)
        saved = image_utils.save_image(value, self.GRADIO_CACHE, self.format)
        orig_name = Path(saved).name if Path(saved).exists() else None
        return FileData(path=saved, orig_name=orig_name)

    def check_streamable(self):
        if self.streaming and self.sources != [""webcam""]:
            raise ValueError(
                ""Image streaming only available if sources is ['webcam']. Streaming not supported with multiple sources.""
            )

    def example_payload(self) -> Any:
        return file(
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
        )

    def example_value(self) -> Any:
        return ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""

    
    def clear(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def stream(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Image` component that can be used to upload and display images. It allows users to upload images from sources like webcam, clipboard, or file upload. The component can preprocess uploaded images into numpy arrays, PIL images, or file paths, and postprocess them back into `FileData` objects. The component also provides methods to handle events like `clear`, `change`, `stream`, `select`, and `upload`, which can trigger functions when certain actions are performed on the image component.","[-0.042305373, 0.03581809, -0.027053354, 0.0080861, 0.010783385, -0.06441275, 0.0055469726, 0.020416541, -0.03607114, 0.032390412, 0.023050562, -0.010777633, -0.03669226, -0.036002126, -0.03952182, -0.017897543, 0.022429438, 0.051760245, 0.0027260396, 0.035795085, 0.031769287, -0.036853295, -0.013377148, 0.023602672, 0.016839333, -0.019047769, -0.025995145, 0.029537845, -0.009150061, 0.00752824, -0.054244734, -0.030389015, 0.005492337, 0.0057568895, -0.019829925, -0.024085768, -0.008661214, 0.051300153, -0.03699132, -0.017287921, -0.0343688, -0.015643096, -0.008281639, -0.025282003, -0.058063492, -0.011272231, -0.035150956, 0.021083673, -0.014826435, 0.045203947, -0.042098332, -0.018817725, 0.0066483156, -0.03006695, -0.016241213, 0.050149925, -0.042857483, 0.06542495, -0.032160364, -0.03581809, 0.07858355, 0.0056619956, -0.027881518, 0.0106741125, -0.020221002, -0.007999834, 0.014044279, 0.00047267167, 0.0013069462, -0.011272231, 0.04219035, -0.002116419, -0.027352413, -0.036301184, -0.0029373937, -0.019369833, -0.02854865, 0.025834113, 0.02081912, -0.045710046, 0.0020934143, 0.022429438, -0.040096935, 0.0049028452, -0.013078088, 0.044697847, -0.056361154, -0.008862504, -0.023878725, 0.000663897, -0.05350859, 0.046262156, -0.01808158, 0.06551696, -0.03416176, 0.039567832, -0.036623247, -0.04881566, 0.007873308, 0.03416176, 0.009661912, 0.0262712, -0.036462218, -0.021716299, 0.07191223, -0.047619425, 0.012203915, 0.030734083, 0.005638991, 0.0056562442, 0.0037554933, -0.0063032475, -0.011939363, 0.07260237, -0.006774841, -0.044421792, 0.04633117, 0.028341608, 0.014446859, -0.005705129, -0.044950895, 0.016701305, -0.014412352, -0.04184528, 0.04405372, -0.039038725, -0.012491472, -0.0479875, -0.029905919, -0.017345432, -0.0047878227, 0.016505767, 0.019634387, -0.06381463, -0.015585585, 0.027651472, 0.013273627, -0.0022098748, -0.063630596, 0.010001229, 0.027628468, -0.008275888, 0.023441639, -0.007971077, -0.037658453, 0.00013182688, -0.05852358, 0.018886738, -9.417489e-05, -0.027030349, 0.044996906, 0.010369302, -0.0078963125, -0.039498817, -0.069289714, 0.00772953, 0.03643921, -0.002056032, -0.012215418, -0.029215783, -0.052220333, -0.0035628302, 0.020497056, 0.010260031, -0.014159302, 0.00858645, -0.0042012064, -0.009426115, -0.004460008, -0.024223793, 0.006107709, 0.017748013, -0.020911139, -0.009115554, 0.016137693, -0.021290714, 0.010231275, -0.018012565, -0.041500214, -0.05291047, 0.0006876205, -0.027260395, -0.071360126, -0.010081746, -0.018691199, -0.00047267167, 0.004744689, 0.0070393933, -0.040534023, 0.019162793, -0.0051156376, 0.044444796, -0.01945035, 0.0025721965, 0.018553171, 0.00020182901, 0.0028338733, 0.015424552, 0.01647126, -0.03319557, 0.027076358, 0.035127953, 0.010823642, 0.011628801, 0.03754343, -0.03061906, -0.011185964, 0.034782883, -0.028341608, 0.0075512445, 0.0044283764, -0.038509622, 0.048217542, -0.024637876, -0.04594009, -0.03784249, -0.023004552, 0.05714331, -0.020853627, 0.0107891355, -0.026547253, -0.001541305, 0.040764067, -0.042926494, -0.04037299, 0.007367208, -0.017598484, -0.014067284, -0.019772412, -0.051024098, 0.024867922, -0.004025797, 0.003071108, -0.026570259, 0.01885223, -0.06473481, -0.004997739, -0.040856086, 0.026823308, 0.0128710475, -0.03107915, 0.025834113, -0.023924734, 0.017932048, -0.006792094, 0.029031746, 0.022578968, 0.012100395, -0.022429438, 0.04692929, 0.0075915023, -0.02668528, -0.00041480083, -0.033586647, -0.0037066087, -0.010685614, 0.018840728, 0.00528242, 0.007045144, -0.0027059105, 0.038647648, -0.0070566465, -0.028985737, -0.005219158, 0.03814155, 0.022843521, 0.030941123, 0.021693293, 0.011208968, 0.00011367484, 0.006774841, 0.01773651, 0.018323127, 0.0067518363, -0.022118878, 0.029284796, 0.029238787, 0.024292808, 0.03657724, 0.014734416, -0.007959575, -0.03607114, -0.044835873, 0.08143612, -0.029974932, -0.030458027, -0.02177381, -0.05875363, -0.0054492033, -0.056407165, 0.052128315, -0.01839214, -0.03931478, 0.03657724, 0.0060674506, 0.04117815, 0.004537648, 0.012410956, 0.023361124, -0.0024916807, -0.04071806, -0.04184528, -0.015286526, -0.03936079, -0.022924038, 0.016287223, -0.010467071, -0.020945646, 0.01839214, -0.019680396, 0.02516698, 0.010386555, -0.016793324, -0.004911472, -0.01854167, 0.044191744, 0.023131078, 0.04830956, -0.009431867, 0.032919515, -0.014538878, 0.0267773, 0.030412018, -0.03091812, -0.032528438, -0.01930082, -0.06459679, 0.0065965555, -0.006792094, -0.027076358, 0.0222339, 0.038072534, -0.022095872, -0.024223793, 0.03471387, -0.025235994, -0.02303906, 0.023280608, -0.0798718, 0.008402413, -0.0409251, -0.018323127, 0.022855023, 0.021578271, 0.03006695, 0.037106343, -0.026363218, 0.06942774, -0.01233044, -0.021141184, -0.0012559048, 0.0010416749, 0.045042913, -0.0038475115, 0.019772412, -0.0024255426, -0.058983672, -0.033724673, -0.061974265, -0.031654265, -0.05231235, 0.029123764, 0.018909743, 0.021486253, -0.03531199, -0.029629864, -0.030389015, -0.051622216, -0.01061085, 0.005072504, 0.0070106373, 0.030734083, 0.013664705, 0.017460456, -0.025443036, -0.014688407, -0.013020577, -0.013860243, -0.035288982, -0.004920099, 0.012917057, 0.018001063, 0.02208437, -0.049551807, -0.00023112386, 0.03593311, 0.009058042, -0.0057913964, 0.02061208, 0.022763005, 0.008661214, -0.031447224, -0.039544825, -0.011323991, -0.008574947, 0.04225936, 0.025995145, 0.009822944, 0.02753645, -0.01283654, -0.013377148, -0.02233742, -0.0076777693, 0.02092264, -0.028433627, -0.04081008, 0.063952655, 0.0141478, 0.0011401632, 0.0058345296, -0.021497754, -0.024177784, 0.012882549, -0.018909743, -0.013457663, -0.019461852, -0.00548371, -0.06455077, -0.0044111228, 0.098551504, -0.0151254935, -0.012157906, -0.027122367, -0.03264346, 0.023384128, 0.014469864, 0.035334993, -0.026317209, 0.021313718, -0.04311053, -0.0136417, -0.0018964378, -0.008931518, 0.035841092, 0.058983672, -0.043087527, 0.021612776, 0.011657557, 0.0012307436, 0.06220431, -0.047941487, 0.0343458, 0.0077697877, -0.0062227314, -0.043501608, -0.011496525, -0.026846314, 0.023027558, -0.029974932, 0.004241464, -0.036899302, 0.0049833613, 0.00818962, -0.0016074431, 0.024913931, -0.065470956, -0.0011717944, -0.037727468, 0.015574082, -0.014274325, -0.034276783, 0.009420364, 0.021152686, 0.061422154, 0.013434659, 0.015344037, -0.025512049, 0.00399129, -0.02077311, -0.027651472, 0.01545906, 0.05097809, 0.071360126, 0.03648522, -0.016241213, 0.0011394443, 0.022728499, -0.0006926527, -0.060870048, 0.01687384, 0.0031602504, 0.0013335452, -0.025880123, -0.050702035, -0.009362853, 0.084472716, -0.02390173, -0.048769653, 0.063078485, -0.037865493, -0.067173295, 0.009121305, 0.0006013534, -0.009121305, 0.014412352, 0.00376412, -0.03814155, -0.001634761, 0.003102739, -0.033379607, 0.03289651, 0.009909211, -0.004077557, -0.0030797345, 0.011208968, 8.6985965e-05, 0.0071889227, 0.0022199394, -0.007068149, 0.0019079401, 0.02390173, 0.016942853, 0.05392267, -0.0053140516, 0.013618696, -0.00014593513, 0.0017555349, 0.02875569, -0.009006282, -0.007764037, -0.015539575, 0.020738604, 0.010771882, -0.03340261, -0.0075339912, 0.00095468893, -0.06556298, -0.018967254, 0.017817026, -0.0049057207, 0.005164522, -0.011950865, 0.017828528, -0.0022659483, -0.048769653, -0.003157375, -0.011962367, -0.0035685813, 0.0044715097, -0.02299305, -0.002455736, -0.018691199, 0.002776362, 0.006447026, -0.03314956, 0.03107915, -0.039636843, -0.035565037, -0.0035542033, 0.014630895, 0.023671685, -0.008632459, 0.04619314, -0.015976662, 0.03328759, 0.023016054, 0.0034478074, 0.014642398, 0.0008159427, -0.0030998634, 0.0058949166, -0.010679863, -0.01440085, 0.030550046, 0.009259333, 0.006585053, -0.0047763204, -0.017575478, -0.011766829, 0.013469165, -0.03982088, 0.025857117, -0.009684917, 0.022659484, -0.019933445, 0.024499848, 0.01743745, -0.015884643, -0.03112516, -0.013526677, -0.02415478, -0.021486253, -0.03446082, -0.033310592, 0.0041695754, 0.03906173, -0.0043277317, 0.0038158803, 0.029100759, 0.026754295, 0.019576874, 0.001834613, -0.00520478, 0.01915129, 0.0059121703, 0.0232461, 0.028456632, 0.016356237, -0.04101712, 0.009627406, -0.0060099396, -0.00565912, -0.042006314, 0.017725008, 0.0318383, 0.0014895448, 0.016942853, -0.015263521, -0.046883278, -0.0099207135, -0.020209499, 0.0161722, -0.0033184066, -0.0018691199, 0.029123764, -0.010173763, -0.005446328, 0.07412067, 0.03648522, -0.0033471624, -0.028893718, 0.0001854742, -0.0020071473, -0.029882913, 0.015643096, 0.045894083, 0.004937352, -0.018771715, -0.004293225, 0.021302216, 0.014584887, 0.024338817, 0.014492868, -0.004189704, 0.007355706, -0.013296631, 0.01440085, -0.023671685, -0.011479272, -0.027099364, -0.004589408, 0.06800146, 0.015597086, 0.0020934143, 0.023878725, 0.018840728, -0.05346258, -0.0054952125, 0.036094144, -0.004344985, -0.029560851, -0.028663673, -0.00045829383, -0.006119211, -0.0006132151, -0.031355206, -0.022348924, 0.020451047, -0.02050856, 0.019634387, -0.0075109866, -0.012318938, -0.019254811, 0.0030883611, -0.019565372, 0.006573551, 0.0066770716, -0.023625676, -0.0065562977, 0.03455284, -0.01101343, 0.016505767, 0.0067978455, 0.027444432, -0.015873142, -0.038831685, -0.010679863, -0.035910107, 0.0132161155, 0.05590106, 0.031447224, -0.0036490972, -0.02001396, 0.0062744915, -0.016103188, -0.034897905, -0.01116871, 0.026041154, -0.009150061, -0.027513444, 0.007252185, 0.017414447, -0.020174993, -0.03814155, 0.00072823785, 0.018530168, -0.035035934, -0.035749074, 0.01338865, 0.015689105, -0.018679697, -0.013055083, 0.000121672514, 0.004137944, -0.024913931, -0.030895114, 0.0026383346, 0.0038446358, 0.030181972, -0.011053688, 0.0024255426, 0.0011933611, -0.00924783, 0.008943019, 0.006021442, -0.041477207, 0.01637924, 0.0041321926, -0.026018148, 0.0043938695, 0.0029244537, -0.008718725, -0.065608986, -0.03779648, 0.026754295, -0.014688407, -0.01116871, 0.003456434, -0.009811441, 0.0187027, -0.020036966, -0.037773475, 0.0028712556, -0.019875934, -0.0071889227, 0.0049891123, 0.008212625, 0.025742095, 0.0065562977, -0.010656859, -0.034023732, 0.010714371, 0.0054865857, -0.0100932475, -0.019369833, -0.034437817, -0.007367208, -0.019530864, 0.024430836, -0.015113991, 0.0057971473, 0.005420448, -0.03455284, -0.008724476, -0.018024066, 0.00075411797, -0.016954355, -0.024683885, -0.042512413, -0.026041154, 0.012940061, 0.06321651, -0.006941624, -0.024108771, -0.029445827, -0.04304152, 0.026639272, 0.008017086, 0.01015651, -0.0046699243, -0.003243642, 0.0050264946, 0.020290015, -0.0068150987, 0.044099726, 0.001355112, 0.007798543, -0.024039758, 0.0050092414, -0.006239985, -0.029675873, 0.02698434, 0.023430137, -0.02571909, 0.037819486, 0.009661912, -0.028157573, -0.0026182057, 0.000894302, -0.032597452, -0.00040545524, -0.010472823, 0.019001761, 0.0007634636, 0.015344037, -0.010938665, 0.021658786, -0.055855054, 0.0013917754, -0.005492337, 0.0019050646, 0.0004913629, -0.04557202, 0.02096865, 0.02542003, 0.04078707, -0.026639272, -0.012307435, -0.0006567081, 0.0009618779, -0.012433961, 0.038279574, 0.0007321918, 0.04690628, -0.0298139, -0.03142422, 0.023407133, -0.007114158, -0.0028209332, -0.009391609, 0.018725706, 0.0150679825, -0.026915327, 0.0078100455, 0.010852397, 0.01991044, -0.0025261873, 0.012318938, 0.00035890695, 0.01101343, 0.036117148, 0.031815298, 0.037129346, 0.025949135, 0.011346996, -0.0047331867, -0.007942322, -0.01843815, 0.015401548, -0.012433961, -0.023648681, -0.00427022, -0.026593262, 0.016896844, 0.052358363, -0.002415478, 0.004612413, 0.00060171285, -0.048677634, 0.0014780426, -0.002089101, -0.0062342337, -0.007045144, -0.041500214, 0.025051959, -0.03202234, 0.03319557, -0.020738604, -0.010116252, 0.04945979, 0.021681791, 0.033425614, -0.015677603, 0.054336753, 0.033425614, -0.010375054, -0.020036966, 0.012054386, 0.0031372458, -0.005759765, 0.01959988, 0.0071889227, 0.014366344, 0.035196967, 0.0049316008, -0.025604067, -0.013365645, -0.017460456, -0.005986935, -0.022153385, 0.002303331, -0.012721518, 0.012295933, -0.009840198, -0.042420395, 0.004336358, 0.0077582854, -0.023418635, 0.019162793, 0.018162094, -0.023280608, -0.00032457986, -0.0094031105, -0.025397027, -0.0025808234, 0.040741064, -0.01859918, 0.032045342, -0.03521997, 0.0018144841, -0.036508225, -0.025143975, -0.053002488, -0.0016304477, 0.0026325835, 0.00333566, -0.014090288, 0.016609287, -0.017886039, -0.0687376, -0.027858512, -0.0011646055, -0.0059696813, 0.0022731374, 0.0067345826, 0.02461487, 0.016459757, 0.00019607786, 0.0051156376, -0.033563644, 0.008339151, 0.006964628, 0.016942853, 0.0021106678, 6.335238e-05, -0.003930903, 0.0032005084, 0.0012738771, -0.035035934, -0.0020574697, 0.048217542, 0.00048884674, 0.0073844614, -0.0030193476, 0.015424552, -0.050057907, -0.046216145, 0.0068150987, -0.027352413, 0.020290015, -0.019691898, -0.038739666, 0.020209499, -0.043179546, 0.04725135, 0.0001796332, 0.017955054, 0.0075569954, -0.017805524, 0.00166783, 0.024821913, -0.021589773, 0.01980692, -0.036416207, -0.027605463, -0.017046373, 0.023924734, 0.024890926, -0.0063550076, -0.006573551, -0.024522854, -0.016252717, -0.0026785927, 0.0007163762, 0.0130435815, -0.014331836, 0.042006314, 0.005837405, 0.013676207, 0.007407466, 0.002516123, 0.032298394, 0.029629864, -0.00858645, 0.0035887102, -0.012548983, -0.01687384, -0.028111564, 0.034391806, -0.01530953, 0.037060335, 0.044237755, 0.0072636874, 0.002776362, -0.03202234, -0.011870349, 0.0045146435, -0.013687709, 0.015804127, 0.0110191805, -0.02005997, -0.02031302, 0.02749044, -0.03349463, 0.034575842, -0.034736875, 0.014101791, -0.015700607, 0.023361124, -0.007965326, -0.03581809, 0.01834613, 0.05392267, -0.02466088, 0.02652425, 0.010432565, 0.047665432, -0.009730926, 0.0026699658, 0.00013667939, -0.0032263885, 0.01723041, 0.04784947, -0.003890645, -0.0032033839, -0.037106343, -0.010984674, 0.02884771, 0.003617466, -0.047205344, 0.008385159, -0.052266344, -0.00056612765, -0.003350038, 0.009529636, -0.0062629897, 0.045065917, 0.01934683, 0.021164188, 0.017771017, 0.015804127, 0.01803557, -0.023786707, 0.01924331, -0.024522854, 0.05396868, -0.004805076, 0.025282003, 0.017069379, -0.028203582, -0.029836904, -0.017828528, 0.032160364, 0.0129285585, 0.00012113335, -0.030734083, -0.0065160394, 0.00032655682, 0.010978923, 0.031539243, -0.003157375, 0.0027591086, -0.025535053, 0.01965739, -0.011554036, -0.02399375, -0.001834613, 0.013561184, 0.007539742, 0.025857117, 0.00086985965, -0.010927162, 0.032459423, -0.022878028, -0.01040956, -0.012295933, 0.032505434, -0.006602307, 0.019783916, -0.03289651, -0.04248941, 0.011835842, -0.0005618143, -0.025972141, -0.036646254, 0.0032005084, -0.036255173, -0.039222762, -0.01283654, -0.011462019, -0.015723612, -0.00396541, 0.016551776, 0.03289651, 0.0394068, 0.034736875, 0.043685645, -0.01743745, 0.041040123, -0.0075512445, 0.0031947573, 0.0525424, -0.0017655995, -0.027237391, -0.020784613, 0.0063089984, -0.00016732217, 0.008120607, -0.0089947805, 0.0066138087, 0.013308134, -0.010955919, -0.0065505463, -0.010835145, -0.022268407, 0.03793451, 0.001140882, -0.007286692, 0.0113642495, -0.0013694898, 0.007240683, 0.029514842, 0.05815551, -0.020347526, -0.02208437, 0.040764067, 0.019887436, 0.0019510736, 0.03163126, 0.011916358, 0.06335454, 0.0012501536, -0.056407165, -0.017748013, 0.007286692, -0.00089573977, 0.07297044, 0.02420079, -0.008730228, 0.02965287, 0.009265084, 0.0014140611, 0.0049546054, 0.008569196, 0.0033040289, 0.03061906, 0.014124796, -0.021405736, -0.008327648, -0.0067288317, 0.017356936, -0.0051932777, -0.0069358726, -0.0016606412, 0.001528365, 0.012894052, 0.0003405752, 0.012767526, -0.005032246, 0.048493598, -0.013883248, 0.058937665, 0.022532959, 0.02066959, 0.027467435, 0.004825205, -0.04400771, -0.00528242, 0.0061709713, -0.009828695, -0.010599348, 0.011208968, -0.017851533, -0.01915129, -0.014734416, -0.0051156376, -0.0031688772, 0.018806221, 0.013526677, 0.0059754327, -0.01338865, -0.019496359, -0.014078787, 0.0056677465, -0.003582959, -0.0010481449, -0.022417936, 0.0028209332, -0.005992686, 0.03542701, 0.014538878, -0.021992352, 0.009201821, 0.0037526176, -0.021693293, 0.009713672, 0.0072981943, 0.005032246, 0.0013910566, 0.019381335, -0.024844917, 0.0003655567, -0.0145503795, -0.028893718, -0.0028194955, 0.02152076, -0.030181972, 0.013193111, 0.037658453, 0.01976091, 0.0031401215, 0.0074477238, 0.030596055, 0.0132161155, 0.03340261, -0.039797876, -0.027927527, -0.0012336192, 0.026248194, 0.013963764, 0.008333399, 0.001501047, 0.025282003, -0.041822277, -0.02859466, 0.062480364, 0.015643096, 0.0328505, 0.0035542033, 0.023740698, -0.041362185, -0.004943103, 0.025558058, 0.00884525, 0.025880123, 0.0069531263, 0.024522854, -0.017713506, -0.013952261, 0.01207739, 0.032712474, -0.008966024, -0.0003333863, 0.012422458, 0.007148665, -0.032919515, 0.028479636, 0.0052766693, 0.037129346, -0.00261533, 0.03510495, 0.009115554, 0.03006695, -0.01621821, -0.0045692795, 0.0029790895, 0.037681457, -0.0048453338, -0.010380805, 0.0016879591, 0.013170106, 0.008684219, 0.009058042, -0.009926464, 0.00046620163, -0.010237026, -0.0033126555, -0.03167727, 0.04531897, -0.017161397, -0.031102154, -0.02774349, -0.0060962066, -0.02314258, 0.014929955, -0.047205344, -0.044099726, 0.021382732, 0.00039143686, 0.0038848938, 0.014642398, 0.022360425, 0.040442005, 0.02571909, -0.066069074, 0.007976829, -0.0040631793, -0.0059466767, 0.04278847, -0.0132161155, 0.0011502276, -0.022003856, -0.0013191673, 0.009725175, -0.04087909, 0.02001396, 0.0025750722, -0.031033142, 0.019588377, 0.00823563, -0.014607891, 0.04214434, 0.03011296, -0.015252018, -0.019737907, 0.0014320334, -0.0050207437, -0.02096865, -0.029238787, 0.01642525, -0.034230776, 0.015217512, -0.03616316, -0.00012364947, -0.004790698, -0.012491472, 0.0013644575, 0.028318604, -0.012008376, -0.017345432, -0.025604067, 0.003410425, 0.030780092, -0.008615205, -0.005072504, -0.019887436, 0.0020402162, -0.035127953, -0.0058086496, 0.0058230273, 0.012249924, 0.018990258, -0.007884811, 0.01601117, 0.0037986268, -0.024775904, -0.039682854, -0.034805886, -0.016632292, 0.026800305, -0.011789833, 0.019875934, 0.02804255, -0.0016290098, -0.0066828225, -0.03995891, -0.020324523, 0.0017929174, 0.0071716695, -0.027260395, 0.004520395, 0.006332003, 0.027559454, 0.013181609, -0.0037468665, 0.03719836, -0.016839333, 0.011427511, 0.022164887, -0.021969348, -0.016080182, 0.007884811, -0.029399818, 0.011122702, 0.020082975, 0.00049351953, -0.006021442, -0.01323912, -0.012675509, -0.034437817, -0.010317542, 0.005986935, 0.023430137, 0.018357633, 0.012698513, 0.011916358, -0.007280941, 0.024522854, 0.0033184066, -0.010340546, -0.053692628, 0.024476845, 0.024108771, 0.014998969, -0.019231806, -0.0035628302, -0.0037842488, -0.015021973, -0.03255144, -0.018150592, -0.009322595, 0.013124097, 0.034621853, 0.004129317, 0.0065275417, -0.008327648, -0.018886738, -0.035381, -0.008523187, 0.011433262, 0.025903126, 0.0176905, 0.014849438, 0.0054779593, 0.004885592, -0.0022860775, -0.0024945561, 0.029767891, 0.025374021, 0.005463581, 0.00021944186, 0.014918452, -0.002242944, 0.015723612, 0.029215783, 0.024108771, -0.038325585, -0.024568863, -0.0022601974, -0.0027432928, -0.022118878, 0.004465759, 0.008045842, 0.022371927, 0.015229014, -0.0029560851, 0.051806252, -0.01450437, 0.025788104, -0.091236055, -0.009437618, -0.02167029, 0.055302944, 0.003703733, 0.017253414, 0.01218091, -0.02521299, -0.013802731, 0.0045002657, -0.014745918, 0.052220333, 0.037014324, 0.036623247, -0.00077784143, -0.00667132, -0.026892323, -0.0021264832, 0.024752898, 0.004215584, 0.008304643, -0.0003677134, 0.006780592, -0.04117815, -0.021313718, 0.015252018, -0.043225553, 0.013411654, 0.030412018, 0.018587679, -0.007821548, -0.0090522915, 0.020082975, -0.013676207, -0.02758246, -0.02040504, -0.007246434, -0.007085402, 0.02900874, -0.0001686701, 0.023855722, -0.0051501445, -0.011628801, -0.0026325835, -0.01849566, -0.011237724, 0.028433627, -0.019611381, -0.0013385774, 0.029675873, -0.0112492265, 0.012445463, 0.050241943, 0.0046900534, 0.00036717422, -0.054290745, 0.028525645, -0.0033615404, 0.01697736, 0.03846361, 0.017817026, -0.022406435, 0.036462218, 0.025074963, -0.024913931, 0.027398422, 0.0061307135, -0.011985372, -0.036209166, -0.042029317, -0.011605796, -0.015401548, 0.003456434, 0.021486253, -0.02960686, 0.0069013657, -0.021256207, -0.013055083, -0.0030452276, -0.0036749772, 0.017840032, 0.011254977, 0.024706889, -0.013503673, 0.017161397, 0.024223793, 0.007700774, 0.006774841, -0.007994082, 0.033080548, -0.019645888, -0.0029790895, -0.0073327012, -0.02884771, -0.022544462, 0.00063514133, 0.026409227, -0.002902887, -0.014745918, 0.004606662, 0.04198331, 0.0030279742, -0.00026706848, -0.027076358, -0.045295965, 0.0016505767, -0.0059984373, -0.0026354592, 0.0070221396, 0.010478574, -0.008954522, -0.0027835509, 0.02107217, 0.017667497, 0.021509256, -0.036324188, -0.0047935736]"
../../../gradio,../../../gradio/gradio/components,paramviewer.py,"from __future__ import annotations

from typing import Literal, TypedDict

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.events import Events


class Parameter(TypedDict):
    type: str
    description: str
    default: str | None


@document()
class ParamViewer(Component):
    """"""
    Displays an interactive table of parameters and their descriptions and default values with syntax highlighting. For each parameter,
    the user should provide a type (e.g. a `str`), a human-readable description, and a default value. As this component does not accept user input,
    it is rarely used as an input component.Internally, this component is used to display the parameters of components in the Custom
    Component Gallery (https://www.gradio.app/custom-components/gallery).
    """"""

    EVENTS = [
        Events.change,
        Events.upload,
    ]

    def __init__(
        self,
        value: dict[str, Parameter] | None = None,
        language: Literal[""python"", ""typescript""] = ""python"",
        linkify: list[str] | None = None,
        every: float | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: A list of dictionaries with keys ""type"", ""description"", and ""default"" for each parameter.
            language: The language to display the code in. One of ""python"" or ""typescript"".
            linkify: A list of strings to linkify. If any of these strings is found in the description, it will be rendered as a link.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. Queue must be enabled. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.value = value or {}
        self.language = language
        self.linkify = linkify
        super().__init__(
            every=every,
            value=value,
            render=render,
        )

    def preprocess(self, payload: dict[str, Parameter]) -> dict[str, Parameter]:
        """"""
        Parameters:
            payload: A `dict[str, dict]`. The key in the outer dictionary is the parameter name, while the inner dictionary has keys ""type"", ""description"", and (optionally) ""default"" for each parameter.
        Returns:
            (Rarely used) passes value as a `dict[str, dict]`. The key in the outer dictionary is the parameter name, while the inner dictionary has keys ""type"", ""description"", and (optionally) ""default"" for each parameter.
        """"""
        return payload

    def postprocess(self, value: dict[str, Parameter]) -> dict[str, Parameter]:
        """"""
        Parameters:
            value: Expects value as a `dict[str, dict]`. The key in the outer dictionary is the parameter name, while the inner dictionary has keys ""type"", ""description"", and (optionally) ""default"" for each parameter.
        Returns:
            The same value.
        """"""
        return value

    def example_payload(self):
        return {
            ""array"": {
                ""type"": ""numpy"",
                ""description"": ""any valid json"",
                ""default"": ""None"",
            }
        }

    def example_value(self):
        return {
            ""array"": {
                ""type"": ""numpy"",
                ""description"": ""any valid json"",
                ""default"": ""None"",
            }
        }

    def api_info(self):
        return {""type"": {}, ""description"": ""any valid json""}
","This code defines a `ParamViewer` class that extends the `Component` class. The `ParamViewer` class is used to display an interactive table of parameters with descriptions and default values. It includes methods for preprocessing and postprocessing data, as well as providing example payloads and values. The class also specifies the supported events and API information. The class is documented using the `@document()` decorator.","[-0.04722261, 0.052670408, -0.0075377934, -0.015163454, -0.0191175, -0.041147187, -0.022167765, 0.005133984, 0.039339624, -0.025632262, 0.028544448, -0.04860339, -0.002471279, -0.020247228, 0.013933307, -0.024188722, 0.02656115, 0.052168306, -0.010663372, 0.06713092, 0.016431259, -0.0067532603, -0.00251992, -0.007362058, -0.008774217, -0.011598536, -0.065172724, 0.05327293, 0.022155212, -0.019368552, 0.014209462, -0.028469134, 0.014171804, -0.0034833266, -0.0044498714, -0.022531789, 0.021753531, 0.019556839, -0.041498657, 0.033088464, -0.019920861, -0.008052447, 0.0040732953, 0.050461162, -0.00089044496, 0.003564918, -0.026736885, 0.031531952, -0.027866613, 0.0025764063, -0.037758004, -0.023297492, 0.031958736, -0.01439775, -0.0034080113, -0.0043588653, -0.046243515, 0.022895811, -0.007983408, 0.0132554695, 0.040293615, 0.0019691777, -0.027088355, 0.084252566, -0.02150248, 0.02069912, -0.054929864, 0.00799596, 0.009552474, -0.018339243, 0.014686458, 0.022807945, -0.032511048, -0.025130162, 0.00051426137, 0.009031544, -0.047900446, 0.055733226, -0.015012824, -0.0075880033, -0.019142605, 0.055733226, -0.054829445, -0.008033618, -0.028695079, -0.02020957, -0.00070098025, -0.0048107565, 0.00020986258, -0.00085514097, -0.023548543, 0.009031544, -0.037808213, 0.06547399, 0.021753531, 0.046143092, -0.044762317, -0.007487583, 0.021464823, 0.014171804, 0.05834415, 0.04830213, -0.067783654, -0.015979368, 0.060854655, -0.017661408, -0.014811983, -0.0030377118, -0.048528075, -0.0026501524, -0.021891609, 0.024665717, -0.082846686, 0.043130487, -0.043808322, 0.008956228, 0.0040952624, -0.004970801, -0.0039101127, -0.020535937, -0.05789226, -0.014234567, 0.0059091025, -0.051666208, 0.003373492, -0.049783327, -0.016004473, -0.048678704, -0.014284777, -0.014586038, -0.015715765, 0.004537739, 0.03818479, -0.0565868, -0.0068976143, 0.008981334, -0.0362517, -0.0057867155, -0.015728317, 0.00574592, 0.017347595, 0.005253233, 0.017786933, -0.0007915938, -0.033690985, -0.018376902, -0.010926976, 0.023523437, -0.03391693, 0.00093987054, -0.0013203691, 0.007933198, -0.0032385522, -0.016029578, -0.013029524, 0.013104839, 0.007431097, 0.010374664, 0.005259509, -0.011115264, 0.009144517, -0.047398347, -0.02219287, -0.017548434, -0.03306336, 0.0022045379, -0.03738143, -0.037230797, -0.044812527, -0.02721388, 0.0017463705, 0.023661515, -0.008140314, 0.0006421403, 0.009652894, 0.014924956, 0.0017181273, -0.019694917, -0.013694808, -0.055683017, -0.001923675, 0.008761665, -0.021527587, -0.008410194, 0.010519018, 0.031757895, -0.011573431, -0.012345412, 0.007989684, 0.0075440696, 0.052469566, 0.03113027, 0.013857991, 0.02676199, 0.017347595, -0.008523166, -0.0010206775, -0.021414613, 0.0038912836, 0.003043988, 0.028619764, 0.0058620307, 0.01896687, -0.024301695, -0.023322597, -0.0052752, -0.019255579, 0.027540246, -0.02393767, -0.052118097, 0.011680127, 0.019356, 0.051967468, 0.020824645, -0.019694917, -0.019079844, -0.010638268, 0.050134797, -0.037004855, -0.003304453, -0.04692135, 0.02442722, 0.03271189, -0.046143092, -0.030452434, -0.0053505152, -0.005519974, -0.037004855, -0.043808322, -0.035121974, 0.026736885, -0.00315853, 0.0057898536, 0.042628385, 0.02397533, -0.05789226, -0.0055984277, -0.0332642, -0.020812092, -0.011975111, 0.0005868307, 0.051816836, 0.007556622, 0.01335589, 0.00029066947, 0.045389943, 0.00080493087, -0.030904325, -0.007418544, 0.09765867, 0.03431861, -0.024916768, 0.0019393656, -0.032385524, -0.01246466, -0.005469764, -0.035624076, 0.047498766, 0.0051465365, -0.012747092, -0.037532058, 0.0115169445, -0.037607376, 0.03208426, 0.0196196, 0.0065022097, 0.031155376, 0.016958466, 0.009897669, -0.033816513, 0.031205585, 0.032385524, 0.04591715, 0.007136112, -0.07852861, 0.019732574, 0.08123996, 0.038310315, -0.017309936, -0.02666157, 0.006558696, -0.0014325572, 0.008259564, 0.06718113, -0.012753368, 0.02721388, 0.014460512, -0.008654968, -0.008140314, -0.035724495, 0.016757624, 0.046996664, 0.00992905, -0.008479233, -0.02919718, 0.06738197, 0.057038687, -0.040996555, 0.060201924, 0.01320526, 0.0041674394, 0.01137259, -0.024138512, 0.003351525, 0.010851661, -0.013569283, 0.017058887, -0.02204224, -0.032134473, -0.05083774, 0.016305733, 0.0032887624, -0.0010065559, -0.027339406, -0.05357419, 0.0044279043, 0.06532336, 0.0282934, -0.0084290225, 0.026385413, -0.021678217, 0.013732466, -0.032937832, -0.017535882, -0.008378812, -0.022971127, -0.060402766, 0.022105003, 0.027715983, -0.014033726, 0.038486052, -0.023360254, -0.025732683, 0.032736994, -0.01335589, -0.03469519, -0.042979855, 0.017046332, -0.013443758, 0.036226597, -0.02135185, -0.02546908, -0.03138132, 0.0590973, 0.01648147, -0.026787095, -0.0104876375, 0.03296294, -0.0022547478, -0.033213988, -0.027866613, -0.023410466, 0.017297383, 0.0016224142, 0.022996232, 0.007638213, -0.024741033, -0.042678595, -0.033891827, -0.008554548, -0.00024908924, -0.001973885, 0.01191235, -0.047699608, -0.006677945, 0.007418544, -0.04061998, 0.0040513286, -0.039741304, -0.030025648, -0.027766192, 0.037155483, -0.0029121866, 0.0073934393, -0.05392566, -0.04561589, -0.012966761, 0.005127708, -0.030000543, -0.023460675, 0.020322543, -0.021703321, 0.012753368, -0.0033421107, 0.008353707, 0.02531845, 0.050511375, 0.017937563, -0.016996123, 0.004280412, -0.0013572421, -0.0062731258, -0.044210006, -0.02666157, 0.008504338, 0.0699929, -0.007958303, 0.011178026, 0.051415157, -0.0007245162, -0.0018656194, -0.02328494, 0.010682201, -0.011002291, -0.020837197, -0.038260106, 0.021828847, -0.010456256, 0.026636465, 0.0035617799, 0.032937832, -0.050737318, 0.01236424, 0.014724116, 0.032837413, -0.032385524, -0.028092558, -0.009150793, -0.0051904703, 0.044812527, 0.031607267, -0.021314193, -0.00047385794, 0.030251592, -0.011397695, 0.0441849, 0.030954534, -0.025356106, -0.008014789, -0.023347702, 0.032209788, 0.045264415, 0.024063196, -0.010744964, 0.0022469026, -0.035021555, 0.034419034, -0.015037929, 0.034193087, 0.032862518, -0.02864487, -0.02373683, -0.00394777, 0.008636139, -0.007362058, -0.0057898536, 0.0153140845, 0.027741088, 0.007067073, -0.018427111, 0.037833318, 0.028218083, -0.010839108, 0.002686241, -0.017347595, -0.02646073, 0.01574087, 0.019770231, 0.0055544935, -0.0023598752, 0.07210172, 0.060904868, -0.02115101, 0.03158216, -0.01429733, -0.005469764, -0.016908256, 0.025017189, -0.006012661, -0.05387545, -0.031883422, -0.0029671039, 0.013544178, 0.012765921, -0.0011195285, -0.024113407, -0.039640885, -0.022807945, -0.029121865, -0.029423125, 0.0198581, -0.0043588653, 0.03316378, 0.032511048, -0.0050272876, 0.09775909, -0.02899634, -0.027289197, 0.013242917, 0.026284995, -0.011542049, -0.001021462, -0.004405937, -0.013142497, 0.018351797, -0.025506737, -0.060252134, -0.017598644, 0.030703483, 0.028218083, 0.049356543, -0.007983408, -0.025858209, 0.039339624, 0.015615345, 0.006295093, 0.017711617, 0.037205692, -0.007104731, 0.010694754, -0.06291327, 0.0018499289, 0.013506521, -0.009414396, 0.02894613, -0.02531845, 0.02904655, -0.019556839, 0.013531625, 0.028845709, 0.039942145, 0.015125796, 0.031531952, -0.012508594, -0.014510723, -7.276543e-05, 0.010449979, -0.048226815, -0.0282934, -0.007939474, -0.024000434, -0.033540357, -0.010782622, 0.0047950656, -0.054879654, -0.0073808865, 0.017247174, 0.0010622577, -0.00012091615, -0.034142878, 0.010958357, 0.008780493, -0.010186377, -0.009916497, 0.009847458, 0.035724495, 0.043958955, -0.01648147, 0.0019409347, 0.029573757, 0.033891827, -0.0640681, 0.0046726787, 0.0017730446, 0.0059342077, 0.00050759286, -0.016770178, 0.002592097, -0.011868415, -0.03396714, -0.002308096, 0.019544287, 0.054026082, 0.008240735, -0.010418599, 0.022770286, 0.013443758, -0.046092883, -0.028017243, 0.008353707, -0.02249413, -0.003117734, -0.026008839, -0.0021810017, 0.008824428, -0.032310206, 0.035824914, -0.0014796293, -0.02625989, -0.0216029, -0.0017793209, 0.00910686, -0.013092287, 0.03057796, -0.012671777, 0.023071546, 0.024063196, -0.0025795444, -0.02204224, -0.020548489, 0.0025858209, -0.01916771, -0.016293181, 0.023397913, 0.018841345, -0.006301369, -0.025092503, -0.011234513, -0.048151497, 0.003539813, 0.007512688, -0.0322851, -0.021979477, 0.020598698, -0.015878947, 0.0041486104, 0.008554548, 0.011115264, -0.018063089, -0.00470406, -0.022607103, 0.044461057, -0.03087922, -0.010198929, -0.03301315, -0.021439718, -0.011786824, -0.009941602, 0.017096544, -0.010242863, -0.011548326, 0.03559897, 0.012006493, 0.019644707, 0.016431259, 0.016343392, 0.030402223, -0.011247065, 0.004421628, 0.035724495, 0.01688315, 0.02641052, 0.040594876, 0.031833213, 0.01330568, 0.061356757, -0.0068536806, -0.03118048, 8.15424e-05, -0.061356757, -0.01847732, 0.050134797, 0.03351525, 0.017786933, 0.011749166, -0.0034111496, -0.021766083, 0.0054791784, 0.013945859, -0.02726409, -0.026586255, 0.0011477718, -0.018740924, 0.011039948, 0.020887407, 0.006175844, -0.009972984, 0.01856519, 0.008504338, 0.027816402, -0.051666208, -0.030201383, 0.0040199473, -0.04011788, -0.006985482, 0.012809855, 0.025305897, 0.00997926, -0.0075315167, -0.0028227498, -0.05347377, -0.030025648, 0.02135185, 0.04488784, 0.008510614, -0.032837413, 0.011993941, 0.015138349, -0.013431205, 0.030025648, -0.01604213, 0.018402006, -0.017799485, -0.017096544, 0.025293345, 0.0019864375, -0.009847458, 0.0441849, 0.043883637, -0.020774433, -0.0068285754, -0.00764449, -0.0034770502, -0.010788898, -0.0034268403, 0.048879545, -0.023674069, -0.0065524196, 0.040695295, -0.0024179306, 0.015150902, 0.018376902, -0.03793374, -0.032988045, 0.013920754, -0.00413292, -0.01221361, 0.012991867, 0.024289142, -0.0372559, -0.018803688, -0.0010300919, -0.0432058, -0.0060565947, 0.007914369, 0.0026532908, -0.04762429, 0.028318504, 0.004776237, 0.0025842518, -0.037205692, 0.043582376, -0.040469352, -0.008027342, 0.008629863, -0.00012483881, 0.0173727, 0.042276915, -0.051139, 0.022481577, 0.039214097, -0.027941927, -0.0028337333, 0.0062731258, -0.019544287, -0.015565135, -0.046419248, 0.0043055173, -0.03163237, -0.0035931612, 0.0063076452, -0.005589013, 0.0022437645, 0.010820279, 0.04200076, 0.010104785, -0.030628169, 0.028870815, -0.0063515794, 0.021176115, -0.014837088, 0.009251214, -0.039816618, -0.013531625, 0.0055011455, -0.034218192, -0.00868635, 0.0064519993, -0.03697975, 0.015238769, 0.019971073, 0.03246084, 0.0023237867, -0.008328603, -0.02030999, -0.074411385, 0.034845818, -0.010788898, 0.02333515, -0.0009414396, 0.0115169445, 0.017699065, -0.029724387, -0.02711346, 0.03431861, 0.010814003, 0.005585875, -0.03469519, -0.0077135283, 0.04463679, -0.0053065815, 0.0045094956, 0.0097784195, -0.029649071, 0.04423511, -0.0022986818, 0.006772089, 0.00670305, -0.019029632, -0.03208426, -0.030301804, -0.028343609, -0.026209679, 0.00235203, 0.07606832, -0.0416995, 0.022305842, -0.074310966, -0.02442722, -0.0015039498, -0.025782892, -0.0033232819, -0.0066842213, 0.018602846, 0.0362517, 0.016908256, -0.026435625, -0.00058761524, -0.0056266706, -0.0016553646, 0.0015518063, -0.023598753, -0.03853626, -0.0068348516, -0.045088682, -0.01107133, -0.00764449, -0.017548434, -0.023247283, -0.027339406, -0.040720403, -0.006514762, -0.02064891, -0.012389345, 0.016920809, 0.042377334, -0.008529443, -0.0068411278, -0.019104948, -3.2950386e-05, 0.052670408, -0.0019283821, -0.010770069, 0.0016773316, -0.014786879, 0.035071764, -0.035272606, -0.023222176, -0.0061852583, -0.021816295, 0.028368713, 0.059348352, 0.016205315, -0.0042490307, 0.04870381, -0.0432058, 0.014184357, 0.017636303, -0.01886645, -0.013380995, -0.0130420765, -0.00088338414, -0.016305733, -0.04428532, 0.006960377, 0.050084587, 0.015339189, -0.008077552, -0.007343229, 0.050310533, -0.028469134, -0.042327125, -0.011799376, 0.010085956, -0.012175952, -0.023523437, -0.013669703, -0.037958845, 0.06341537, -0.009169621, 0.042226706, -0.007958303, 0.022268185, 0.031607267, -0.027289197, 0.010964633, -0.011247065, 0.019983625, -0.064469784, -0.05033564, 0.0216029, -0.009571303, 0.011818205, -0.034343716, -0.0032134473, -0.021816295, -0.0053505152, -0.019155158, 0.013632045, 0.013745018, -0.027816402, -0.00433376, -0.0023128034, -0.020686567, 0.024590403, 0.027364511, 0.0028619764, 0.025556948, 0.012514871, 0.006022075, -0.020837197, -0.020887407, 0.018464768, -6.629304e-05, -0.01444796, -0.031908527, -0.011924902, -0.022996232, -0.010544124, -0.04554057, -0.025305897, -0.019481523, -0.0016553646, 0.05407629, 0.015075587, 0.01623042, 0.023084098, 0.025105055, 0.011259618, 0.012715711, -0.004544015, -0.037908636, 0.009207279, 0.0018624814, 0.007437373, 0.028192978, -0.012282649, -0.0042396164, 0.011278447, -0.004613054, 0.029021446, 0.02239371, -0.011297275, 0.019142605, 0.00093516335, -0.045038473, -0.0211008, 0.022230528, -0.01206298, 0.016217867, -0.0019864375, 0.021427166, 0.014134146, -0.038109474, -0.0020005591, 0.046343934, 0.044210006, 0.023523437, 0.005529389, 0.0042176493, 0.011441629, -0.0038818694, 0.055733226, 0.008899743, -0.04011788, -0.021791188, 0.008604758, -0.0362517, 0.037105273, -0.015050481, -0.031883422, 0.004823309, 0.0068348516, 0.004349451, 0.004114091, -0.0268122, 0.03853626, -0.0068787853, -0.043456852, 0.061055496, -0.01901708, 0.01273454, 0.06251159, 0.02010915, -0.001523563, 0.012075532, 0.008793046, 0.006514762, 0.0036527857, 0.009590131, 0.012144571, 0.009295147, -0.008347431, 0.02264476, -0.033590566, 0.0097407615, -0.004402799, -0.0074687544, 0.005246957, -0.0036496476, -0.034896027, 0.0134688625, 0.011705233, 0.021012932, 0.0023269248, 0.015464715, 0.020724224, 0.03281231, 0.030025648, -0.022456473, 0.0010865782, 0.040494457, 0.021766083, 0.011956283, -0.022770286, -0.009263766, 0.027791297, 0.009094306, -0.023247283, -0.015602793, -0.018351797, -0.0015643588, -0.0255695, 0.011667575, -0.0076005557, -0.020360202, 0.0095650265, 0.012991867, -0.026736885, -0.041197397, -0.00044326115, -0.0016600719, 0.0088558085, 0.005228128, 0.028017243, -0.012232439, 0.0071235597, -0.009916497, 0.035824914, -0.0049049, 0.026159469, 0.001330568, -0.040820822, -0.008730283, -0.01931834, 0.01189352, 0.007362058, 0.018879002, 0.017636303, 0.01896687, -0.020222124, -0.011391419, -0.00012601561, 0.02676199, 0.04626862, -0.038511157, 0.010224034, -0.007104731, 0.00014788448, 0.011818205, -0.0015416073, 0.038812418, 0.013368443, 0.019443866, -0.018941766, -0.0014655077, -0.016293181, -0.012753368, 0.006320198, 0.045088682, -0.029774597, 0.0047982037, 0.0047825132, -0.023837252, 0.040795717, 0.025531841, 0.016795283, -0.010042023, 0.018150955, -0.013857991, -0.017711617, -0.003928941, -0.0054352446, -0.016820388, 0.0039132508, 0.02397533, 0.0029121866, 5.3936645e-05, 0.017535882, 0.0032667955, -0.022908363, 0.03677891, 0.01648147, -0.0056706048, 0.0004181561, 0.008303497, 0.01688315, -0.016644653, -0.023510884, 0.008278392, -0.019594496, 0.042126283, -0.015678108, -0.038837522, 0.009301423, 0.027490037, 0.0030502644, 0.055683017, -0.010782622, 0.010449979, 0.015954264, 0.027364511, -0.015251322, 0.010475085, -0.025544396, -0.008949952, 0.0038002778, -0.0013831317, -0.025958627, 0.012351688, 0.011240789, 0.040193196, 0.010788898, -0.02397533, -0.015803633, 0.025707578, 0.017862247, -0.007770015, 0.02393767, -0.046469457, 0.024540193, 0.008052447, -0.020548489, 0.01836435, 0.011805653, -0.016820388, -0.017422909, 0.006866233, 0.017021228, 0.02283305, -0.019745126, 0.0007339306, 0.0018922936, -0.026536044, -0.03233531, 0.011466734, -0.00010934429, -0.0056988476, -0.015276426, -0.0063358885, -0.010675925, -0.042879436, -0.021515034, 0.03087922, 0.000534267, -0.030954534, -0.0016506575, 0.05327293, 0.013380995, 0.0039603226, 0.013318232, 0.033490144, 0.011052501, 0.034870923, 0.008755389, 0.0005880075, -0.0028651145, 0.0037469296, 0.006222916, -4.5870664e-05, 0.00992905, -0.015929159, -0.030050753, 0.021427166, -0.050662003, 0.006985482, 0.0036527857, -0.0075377934, -0.010387217, 0.005328548, 0.00037481065, 0.011460458, -0.024602955, -0.02721388, -0.019669812, -0.025218029, 0.03539813, 0.020899959, 0.0196196, 0.02363641, 0.008611035, -0.02656115, 0.0039006982, 0.022381159, 0.010795174, 0.0047982037, 0.008906019, 0.0412225, -0.017548434, 0.04589204, -0.051967468, -0.0055513554, -0.023749383, -0.02397533, -0.0020633219, -0.025707578, -0.03961578, -0.0028117662, 0.025757788, -0.017146753, 0.029674176, 0.00997926, -0.011077606, -0.01604213, 0.011567155, 0.02328494, 0.012037874, 0.019920861, 0.011767996, -0.019004527, 0.014334987, 0.023171967, -0.0053850347, 0.0067093265, -0.015427057, 0.018075641, -0.017560987, 0.01584129, 0.04757408, 0.013883096, -0.010493914, 0.023661515, -0.010431151, 0.019155158, -0.008611035, 0.016669758, -0.015853843, -0.020335095, -0.043155592, -0.019556839, 0.03263657, -0.04129782, -0.0051653655, -0.0078013963, 0.010249139, -0.030276697, 0.01802543, 0.01832669, 0.032184683, -0.010839108, 0.035172183, -0.030377118, 0.032259997, -0.00032656186, -0.0073306765, 0.050787527, 0.027715983, -0.01851498, -0.0003740261, -0.013443758, 0.0069541004, -0.019556839, 0.0037751729, 0.010004365, -0.016255524, -0.03263657, -0.03888773, -0.015489819, -0.011579707, -0.015364295, -0.0066277348, -0.027715983, -0.01117175, -0.010562953, -0.012401897, -0.003492741, -0.009307699, 0.03635212, 0.027816402, 0.00022143444, -0.018540084, 0.033690985, 0.02150248, 0.012295201, -0.043356434, -0.013519073, 0.0032071709, -0.040795717, 0.01449817, -0.0036904432, 0.00023928257, -0.012753368, 0.019494075, 0.00898761, -0.025807997, -0.013506521, 0.03346504, -0.02954865, -0.020335095, 0.024602955, 0.0049331435, -0.0022500406, -0.0009131964, -0.00068803545, -0.002974949, -0.022757733, -0.016004473, -0.0223435, 0.023360254, 0.020786986, 0.0026313236, 0.006160153, -0.016996123, -0.017284831, -0.012175952, -0.007851606, -0.04092124, 0.006091114, -0.022230528, -0.0006644995, 0.0057710246, 0.012094361, -0.0061444626, -0.019142605, -0.004402799, -0.0036622002, -0.011968835, -0.013493968, -0.018351797, 0.027038146, -0.0072616376, 0.03569939, -0.01817606, 0.029674176, 0.012182228, 0.004396523, -0.02726409, -0.014535828, 0.0056894333, 0.043883637, -0.030326908, 0.005808682, 0.013857991, 0.003086353, -0.022895811, -0.0367287, -0.012232439, 0.06421874, -0.0025622847, 0.0282934, 0.01678273, 0.0023614443, 0.038059264, -0.0023143725, -0.03361567, -0.0010944236, -0.025757788, -0.009728209, -0.0017228345, 0.007839054, 0.007989684, -0.012596462, -0.0029812255, -0.0011085451, -0.008033618, -0.022155212, -0.0017228345, 0.010010641, 0.009213556, -0.0045879493, 0.02105059, 0.025983734, 0.046745613, 4.935203e-05, 0.028921025, 0.014673905, 0.0063296123, 0.047147296, 0.020272333, -0.003329558, -0.01821372, 0.021552691, 0.03366588, 0.001389408, -0.042427544, 0.011786824, -0.019293236, -0.009571303, 0.0023692898, -0.014887298, 0.025983734, -0.018489875, -0.024452325, 0.011843311, 0.032511048, -0.019795338, -0.008554548, -0.07205151, 0.0049300054, -0.032561257, -0.024489982, -0.009056649, 0.03444414, -0.0035868848, 0.015715765, 0.023774488, -6.2566505e-05, -0.00016965526, 0.030552853, 0.014033726, 0.007267914, -0.007751186, 0.0013643029, 0.0043588653, 0.017284831, -0.004208235, 0.02874529, 1.3692553e-05, -0.064369366, 0.0057710246, -0.012979314, 0.006376684, -0.027741088, -0.0028400095, -0.011711509, -0.0108767655, 0.034569662, 0.0042427545, 0.008560824, -0.027866613, 0.0427037, -0.019732574, 0.02696283, -0.0034268403, -0.016104894, 0.02924739, 0.0036935813, -0.01360694, 0.022920916, -0.029021446, 0.034243297, 0.016242972, 0.051615994, 0.0021715874, 0.0067156027, 0.009383014, 0.025607157, 0.021866504, 0.0035021554, -0.029849911, -0.017058887, 0.0045848107, 0.011378867, -0.03331441, 0.011466734, -0.028042348, 0.033490144, -0.030326908, -0.004873519, -0.026109258, 0.009841182, -0.020222124, 0.0089248475, -0.0015353311, -0.012458384, -0.025883313, -0.011818205, -0.0047166124, 0.003229138, -0.0008724007, -0.004478114, -0.027389616, -0.013745018, -0.0111278165, 0.018138403, 0.050109692, 0.00455343, 0.0062731258, 0.023548543, 0.024552746, 0.01569066, 0.04190034, -0.019996177, 0.0065273144, -0.01658189, -0.0010167548, -0.008008513, 0.02259455, 0.05058669, 0.03301315, 0.006859957, 0.046092883, -0.0005691787, -0.021803742, 0.012088085, -0.013380995, 0.022079896, -0.029799702, 0.039088573, 0.020598698, 0.011824481, 0.004547153, 0.018527532, -0.014899851, -0.018954318, -0.0048578284, -0.015502372, -0.014523275, 0.0039038362, 0.007726081, -0.024753585, 0.055080492, -0.014422854, -0.0022971127, 0.0060534566, -0.021263983, 0.0050492543, -0.0021433441, 0.001187783, -0.048728913, 0.00613191, -0.039565567, 0.027766192, -0.053373348, -0.014159252, 0.028393818, 0.014749221, -0.0002441859, 0.0069101667, -0.010180101, -0.042578176, 0.00073824555, -0.00059781416, -0.043456852, -0.038963046, 0.024264038, 0.034042455, 0.03241063, 0.04195055, 0.005557632, 0.021063142, -0.026636465, -0.022054791, 0.014937509, 0.015150902, -0.0240883]"
../../../gradio,../../../gradio/gradio/components,number.py,"""""""gr.Number() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import FormComponent
from gradio.events import Events
from gradio.exceptions import Error


@document()
class Number(FormComponent):
    """"""
    Creates a numeric field for user to enter numbers as input or display numeric output.

    Demos: tax_calculator, blocks_simple_squares
    """"""

    EVENTS = [Events.change, Events.input, Events.submit, Events.focus]

    def __init__(
        self,
        value: float | Callable | None = None,
        *,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        precision: int | None = None,
        minimum: float | None = None,
        maximum: float | None = None,
        step: float = 1,
    ):
        """"""
        Parameters:
            value: default value. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be editable; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            precision: Precision to round input/output to. If set to 0, will round to nearest integer and convert type to int. If None, no rounding happens.
            minimum: Minimum value. Only applied when component is used as an input. If a user provides a smaller value, a gr.Error exception is raised by the backend.
            maximum: Maximum value. Only applied when component is used as an input. If a user provides a larger value, a gr.Error exception is raised by the backend.
            step: The interval between allowed numbers in the component. Can be used along with optional parameters `minimum` and `maximum` to create a range of legal values starting from `minimum` and incrementing according to this parameter.
        """"""
        self.precision = precision
        self.minimum = minimum
        self.maximum = maximum
        self.step = step

        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    @staticmethod
    def _round_to_precision(num: float | int, precision: int | None) -> float | int:
        """"""
        Round to a given precision.

        If precision is None, no rounding happens. If 0, num is converted to int.

        Parameters:
            num: Number to round.
            precision: Precision to round to.
        Returns:
            rounded number or the original number if precision is None
        """"""
        if precision is None:
            return num
        elif precision == 0:
            return int(round(num, precision))
        else:
            return round(num, precision)

    def preprocess(self, payload: float | None) -> float | int | None:
        """"""
        Parameters:
            payload: the field value.
        Returns:
            Passes field value as a `float` or `int` into the function, depending on `precision`.
        """"""
        if payload is None:
            return None
        elif self.minimum is not None and payload < self.minimum:
            raise Error(f""Value {payload} is less than minimum value {self.minimum}."")
        elif self.maximum is not None and payload > self.maximum:
            raise Error(
                f""Value {payload} is greater than maximum value {self.maximum}.""
            )
        return self._round_to_precision(payload, self.precision)

    def postprocess(self, value: float | int | None) -> float | int | None:
        """"""
        Parameters:
            value: Expects an `int` or `float` returned from the function and sets field value to it.
        Returns:
            The (optionally rounded) field value as a `float` or `int` depending on `precision`.
        """"""
        if value is None:
            return None
        return self._round_to_precision(value, self.precision)

    def api_info(self) -> dict[str, str]:
        return {""type"": ""number""}

    def example_payload(self) -> Any:
        return 3

    def example_value(self) -> Any:
        return 3
","The code defines a `Number` component that creates a numeric field for users to enter numbers as input or display numeric output. It inherits from `FormComponent` and includes parameters such as value, label, info, precision, minimum, maximum, step, and others. The component allows for rounding numbers to a specified precision and checking if the input value falls within a specified range. It also provides methods for preprocessing and postprocessing the input value, as well as generating example payloads and values.","[-0.040198043, 0.044330556, 0.0059722494, 0.059269466, 0.04614267, -0.03489429, -0.00066089764, 0.04397697, 0.023469117, 0.048882943, 0.023226028, -0.017933322, -0.035225775, -0.017789679, 0.04159028, 0.018452648, 0.03142475, -0.015237247, -0.0009875481, 0.0012292558, -0.018673638, -0.0079777315, 0.0018231658, -0.039380383, 0.013624021, -0.048219975, -0.02729224, 0.0065689217, -0.033568352, -0.015480336, -0.026806062, -0.03575615, -0.012397528, 0.051623218, -0.0048148152, -0.05330274, 0.047998983, 0.0022540959, -0.012872656, 0.0014654386, -0.027778419, 0.03206562, -0.004240242, -0.00241017, -0.037148386, 0.041126203, -0.023226028, -0.019999577, -0.015447187, 0.038032345, -0.0064694765, -0.025944203, -0.0066186446, 0.004403222, -4.9722705e-05, 0.020629399, -0.0324855, 0.04097151, 0.0584739, -0.032419205, 0.028021507, -0.03336946, -0.052374583, 0.058341306, 0.005607616, 0.032131918, -0.034584902, -0.00012404779, 0.023800602, 0.015701326, 0.025634818, -7.911608e-05, 0.042584736, 0.018806232, -0.010099234, 0.0021850367, -0.007966682, -0.004463994, -0.032794885, 0.0148836635, 0.0066683674, 0.033325262, -0.037767157, -0.039512977, 0.01560188, 0.0025027094, -0.027049152, 0.0009523279, -0.06894882, -0.053170145, -0.039756067, -0.014552179, 0.010110283, 0.088749506, 0.0038838957, -0.004314826, -0.049015537, -0.029855723, 0.03184463, 0.001720958, 0.03946878, 0.0095743835, -0.04178917, 0.006756763, 0.047159225, 0.042518437, -0.053656325, -0.009044007, -0.024861353, 0.014552179, 0.011834004, 0.035579357, -0.04530291, 0.016795225, -0.042827822, 0.0008321647, -0.004566202, 0.012662715, -0.031800434, -0.011066064, -0.015414039, -0.03502688, -0.02795521, -0.020110073, 0.017911224, -0.034297615, -0.046010077, -0.039977055, -0.0133146355, 0.044573642, 0.012651666, -0.010745629, -0.011624063, -0.011878202, -0.011646163, -0.006176665, -0.05020888, 0.018474746, -0.03814284, -0.029502138, 0.032264512, 0.0014405772, 0.06368926, -0.0056462893, -0.014353287, 0.011447271, -0.048882943, 0.01626485, -0.008568879, -0.018154312, -0.036441218, -0.0042982516, -0.06634114, -0.03871741, 0.030209307, 0.00022478806, 0.04377808, -0.016286949, -0.005005419, -0.047380213, 0.012043945, -0.0027347489, 0.017148808, -0.0060772197, 0.013325685, -0.008419711, -0.041767072, -0.05224199, -0.035645656, 0.011789806, 0.00013000416, -0.037568267, -0.04941332, -0.06258431, 0.0012983151, -0.0022955316, 0.03420922, -0.049722705, -0.043203507, 0.008552305, -0.004701558, -0.01670683, -0.07080513, -0.006049596, 0.015889166, 0.0052374583, 0.026540875, -0.020220567, 0.0046849838, -0.04574489, -0.0045468654, 0.005458448, 0.019425003, 0.0015593593, 0.008248445, -0.034275517, 0.03765666, -0.037811354, 0.010143432, -0.041037805, 0.036772702, 0.008916939, 0.014927861, 0.013170992, 0.010530164, 0.008983236, -0.05723636, 0.005361765, -0.023336522, -0.020596249, 0.028198298, 0.033015877, 0.05440769, 0.0098340465, -0.058208715, 0.022353118, 0.004033064, 0.0238227, -0.06572237, 0.0003414983, 0.0062816353, -0.011220757, 0.014320139, -0.02340282, 0.0047871917, -0.030872276, 0.029281149, 0.01171246, 0.003856272, 0.013679269, 0.00025465622, 0.005555131, 0.027866814, -0.0062816353, -0.01450798, -0.017159859, -0.016938869, 0.03529207, -0.025259133, 0.024330977, -0.012585369, 0.01235333, -0.0074860295, 0.013325685, 0.023933195, 0.043314002, -0.04448525, -0.0205852, 0.031822532, 0.02164595, 0.002194705, -0.0034667775, 0.042098556, -0.029347446, -0.02645248, -0.031380553, 0.035490964, 0.07730223, 0.054319292, -0.020286864, -0.02534753, -0.14488092, -0.048927143, -0.009718027, -0.0065136743, 0.012010796, 0.016408492, 0.033037975, 0.0043203505, -0.0411704, -0.010032937, 0.019192964, 0.007972207, 0.017922273, -0.04574489, 0.012242835, 0.047689598, 0.070760936, -0.018541044, -0.017524492, 0.019248212, -0.032198213, -0.008789869, 0.04684984, -0.019546548, 0.010850599, 0.017933322, -0.011392024, 0.017303502, -0.034562804, 0.041104104, 0.019679142, 0.025833707, 0.0038838957, -0.033281066, 0.022695653, 0.063777655, -0.04702663, 0.061390966, -0.0082373945, -0.017281402, -0.0015856018, -0.0325518, -0.06833005, -0.011834004, -0.018043818, 0.011403074, -0.014364337, -0.05113704, -0.04505982, 0.05065086, 0.02689446, 0.013038399, -0.010480441, -0.020076923, 0.0025621005, 0.014684772, 0.03754617, 0.013137843, 0.006049596, 0.008403137, 0.005027518, 0.03012091, -0.026408281, 0.0014198595, 0.0012513547, -0.030076712, 0.02233102, 0.05873909, -0.05241878, 0.03405453, 0.03164574, -0.021303417, -0.008872741, -0.019391855, -0.034386013, 0.0054032006, -0.002114596, -0.020485755, 0.034165025, 0.0017016215, -0.028330892, 0.02276195, 0.0006432875, 0.023999492, -0.004165658, -0.039999153, 0.010380995, 0.03940248, -0.013104695, -0.0563524, -0.021281319, 0.0027016003, -0.028132001, 0.021502309, 0.0025952489, 0.0086628, -0.063026294, -0.044772536, -0.0019074182, -0.046673045, 0.006104843, -0.003218164, -0.009121354, 0.030960672, -0.0037402525, -0.027977308, -0.04143559, -0.01645269, -0.030518692, -0.024463572, 0.0030441345, 0.042827822, 0.013833961, -0.008635176, -0.051446427, 0.032772787, -0.020640448, 0.034695398, -0.051269636, 0.07995411, 0.012640617, 0.023115532, -0.015082554, 0.01257432, 0.029811524, 0.07182168, 0.010193154, 0.029612632, 0.0015579781, 0.0008121375, 0.0048976867, 0.0067954366, -0.035822447, 0.023933195, 0.057280555, 0.030165108, 0.054319292, 0.029590534, 0.008568879, -0.010403095, 0.0008756721, -0.0093147205, 0.014154397, -0.004665647, -0.029082257, 0.046054274, 0.020541001, 0.022242624, -0.017027264, 0.011303629, -0.027712122, 0.03789975, -0.014927861, 0.079644725, 0.0016436117, 0.028706575, 0.021402862, 0.007220842, 0.012485924, -0.03940248, -0.01670683, -0.020463655, 0.004417034, 0.008265018, 0.024993947, -0.010607511, -0.022452563, -0.011303629, -0.04090521, 0.010231827, 0.011237332, 0.012320181, 0.012640617, -0.01865154, -0.032021422, -0.016850471, 0.047822192, 0.045258712, 0.025391728, -0.0032651243, 0.012342281, 0.016143305, -0.0011519094, 0.008651751, 0.010204204, -0.069655985, -0.05334694, 0.006375556, -0.04596588, -0.026253588, 0.027137548, -0.043755982, -0.02342492, -0.0067899115, -0.027137548, 0.07624148, -0.00053003023, 0.017745482, 0.024883451, -0.0048148152, 0.010546738, -0.004425321, 0.016165404, -0.0024833728, -0.025060244, -0.043026716, -0.0010448674, 0.009176602, 0.00066055235, -0.013856061, -0.004861776, 0.024529869, 0.025016045, -0.03447441, 0.04424216, 0.019380806, 0.059623048, -0.00053762674, -0.011088164, -0.016585285, -0.026253588, 0.0010683476, -0.022806147, -0.0059335763, 0.055070657, 0.0076130987, 0.027314339, -0.02318183, -0.0070385253, -0.037966046, -0.01995538, 0.039358284, -0.007718069, 0.052993353, 0.061125778, -0.009911393, 0.011347827, -0.051225435, -0.017226156, 0.037811354, -0.034739595, 0.017369797, 0.026585072, -0.03272859, -0.0052540326, 0.07221947, 0.0016104631, -0.03591084, -0.003499926, 0.008187672, -0.008148999, 0.013325685, -0.039977055, -0.03299378, 0.014773169, 0.014110199, 0.00019405667, -0.012916854, -0.03058499, 0.0014419585, 0.009386542, -0.0019488538, -0.02340282, -0.007911435, -0.023314424, -0.017480293, -0.012519072, 0.0061711404, 0.0026353034, -0.007021951, -0.015303544, 0.024839254, 0.051711615, -0.06134677, 0.006265061, -0.005010944, 0.05065086, -0.0018811757, -0.008375513, -0.009983215, -0.016695779, 0.058120318, 0.007823039, -0.05065086, 0.042076457, -0.009055058, -0.0205852, -0.034363914, 0.046938233, 0.007071674, 0.001230637, -0.017038314, -0.0048700627, -0.024109988, 0.037258882, 0.010314699, -1.769645e-05, 0.008049553, -0.03222031, -0.015005208, -0.0129942, 0.010789827, 0.033082172, 0.013071546, -0.049103934, -0.034010332, -0.023513315, -0.018563144, 0.031115364, -0.04355709, -0.0004340378, -0.0062540113, 0.009662779, 0.007497079, -0.0021795118, -0.0058120317, -0.03447441, 0.022574108, 0.025612717, 0.0001734252, 0.0038010245, -0.0031656788, -0.03272859, -0.02470666, 7.143323e-05, 0.041546084, 0.013281487, 0.011999746, -0.008154524, -0.063158885, 0.0020814477, -0.0044474197, 0.03991076, 0.013701368, 0.020275814, -0.04786639, 0.024993947, -0.03222031, 0.01171246, 0.016353246, -0.0128505565, 0.020563101, 0.03493849, 0.009148978, 0.020507853, 0.027557429, -0.024419373, -0.0091987, -0.0024516056, -0.016916769, 0.0324634, -0.031446848, -0.036949493, -0.009253948, 0.021303417, 0.0033452332, 0.022353118, 0.026474578, 0.012629567, -0.040330637, 0.027270142, 0.015612929, -0.0050440924, 0.025944203, 0.025900004, -0.022850346, -0.0118671525, -0.0025621005, -0.010596461, 0.021413911, 0.011369925, 0.022430465, 0.0017927798, -0.019391855, 0.016010711, 0.046054274, 0.009121354, -0.039778166, -0.064263836, 0.019226113, 0.027027052, 0.013568774, 0.028264595, 0.015369841, 0.013137843, -0.009226324, 0.01018763, 0.0016104631, -0.02231997, -0.013756615, -0.0024156948, -0.0040164897, -0.030562889, -0.00747498, -0.027800517, -0.01626485, -0.0007969445, 0.009347868, -0.010148956, -0.015922315, 0.028330892, -0.013933407, -0.009132404, -0.014176495, 0.046186868, 0.01861839, -0.044087466, 0.016596334, 0.054496083, -0.04636366, 0.019811736, -0.03635282, 0.011347827, 0.01583392, 0.0059114774, -0.002187799, -0.015193049, 0.0016518987, 0.021215022, 0.011016342, -0.011325727, -0.009403116, -0.008546781, -0.024198383, -0.034584902, 0.005762309, 0.009408641, 0.04459574, -0.0018052105, 0.012927904, -0.009579908, 0.008276068, 0.004254054, -0.03772296, 0.011635113, -0.022695653, -0.021137675, -0.004292727, -0.012253884, -0.04720342, -0.008215296, -0.025612717, 0.01605491, -0.020706745, -0.013723467, -0.030562889, 0.046010077, 0.031955127, 0.0024778482, 0.02707125, 0.010530164, -0.006027497, -0.021933237, -0.01671788, -0.013336735, 0.012397528, 0.030076712, -0.02532543, -0.014353287, -0.01472897, -0.007303713, -0.035203677, -0.009392067, 0.05440769, -0.007342386, 0.0061821896, 0.017082512, -0.003433629, -0.02234207, 0.0074363067, 0.010579887, -0.015679227, 0.01277321, -6.021109e-05, 0.013104695, -0.023049235, -0.009778799, 0.021756446, -0.01474002, -0.035932943, 0.019889083, -0.016397443, -0.036706407, 0.025701113, -0.008187672, 0.00835894, -0.02729224, 0.015270395, -0.029723128, -0.012762161, 0.004789954, 0.002720937, 0.017911224, 0.0097567, -0.024993947, -0.053125948, -0.009463889, 0.0023231553, -0.0065136743, -0.037192583, 0.024529869, -0.004673934, 0.032573897, 0.025413828, -0.029833622, 0.041568182, -0.011822955, -0.021391813, 0.02861818, -0.015988613, -0.0060606454, -0.065545574, -0.03336946, 0.033723045, -0.0390047, -0.040441133, -0.01843055, -0.008071653, 0.0049059736, 0.0072650397, -0.0052927057, 0.027159646, -0.011436222, 0.009723552, -0.0072484654, -0.008342365, 0.017204056, -0.028529784, -0.07756742, 0.011734558, 0.013336735, 0.00395848, -0.0005845871, 0.038385928, 0.0022734327, 0.010270501, -0.03922569, 0.046010077, 0.017789679, -0.009933491, -0.04879455, -0.021745397, -0.007894861, -0.0010068847, -0.03098277, -0.02707125, -0.02945794, 0.02408789, 0.003930856, 0.042938318, -0.005450161, -0.0076572965, 0.020485755, 0.018331105, -0.028485585, 0.009624106, 0.023469117, -0.018297955, -0.037082087, -0.014585326, -0.032684393, 0.026982855, 0.0114583215, 0.017966472, 0.041722875, -0.0022568584, 0.004737469, 0.017612888, 0.007690445, 0.020065874, 0.037634563, -0.013590873, 0.00029022177, -0.043269802, 0.006872783, -0.007778841, 0.054363493, 0.017413996, -0.004085549, 0.033634648, -0.016154354, 0.02209898, 0.015469286, 0.014861564, -0.021557555, -0.023955295, 0.01909352, -0.03120376, 0.026828162, -0.034982685, -0.0098340465, 0.010900322, -0.023049235, 0.0016201314, -0.009132404, 0.043424495, 0.002580056, -0.016938869, 0.03635282, -0.0026974569, 0.020817239, -0.031999324, 0.05113704, -0.018242707, -0.0019930517, 0.0140660005, -0.0011470752, 0.026828162, -0.023800602, 0.020010626, 0.0116903605, 0.0034833518, 0.005035805, -0.039579272, -0.02364591, -0.018750984, -0.005516458, -0.038872108, 0.011093688, -0.018286906, -0.0048148152, -0.0035385992, 0.0013280106, 0.005701537, -0.005568943, -0.023778502, 0.019590747, -0.00757995, -0.024176285, 0.0011056396, 0.0006443234, 0.000381898, 0.0019157054, 0.015005208, -0.029767327, -0.016010711, 0.042540535, 0.015027306, -0.028905466, -0.00802193, -0.0021380764, 0.00400544, -0.02254096, -0.0061711404, -0.009010859, -0.01450798, -0.0036242327, 0.0022817196, -0.045170315, -0.014441684, -0.01072353, 0.029767327, 0.03420922, 0.030629186, 0.021071378, 0.019866982, -0.0076130987, -0.017811777, -0.0025330957, 0.0126185175, -0.012673765, 0.0112539055, 0.016872572, 0.008828542, 0.009662779, -0.0021767495, 0.041767072, 0.025192838, -0.010834025, 0.009480462, -0.003336946, 0.0056159035, 0.013878159, -0.030032514, -0.059976634, -0.030496592, -0.013955506, -0.00038500567, 0.041015707, -0.06797646, 0.009712501, 0.027314339, -0.0123864785, 0.022441514, -0.012121291, 0.010546738, 0.011314678, 0.0069390796, 0.017303502, 0.014828416, -0.01646374, 0.018441599, -0.012077092, -0.031336352, 0.003626995, 0.023093434, -0.01051359, 0.0368611, 0.023314424, -0.015215148, -0.02989992, -0.017579738, -0.016474789, -0.0026435906, -0.023955295, 0.023977393, -0.005789933, -0.018054867, 0.033457857, 0.0027236992, 0.020695696, 0.0023853087, -0.025811609, 0.022463614, 0.011447271, -0.03206562, -0.019148767, -0.0045938254, 0.03827543, 0.022629356, 0.017215105, 0.02039736, 0.0030358473, -0.04377808, 0.010773253, 0.06620854, -0.008944563, 0.03493849, 0.021756446, 0.011403074, -0.013060497, 0.0105577875, -0.03666221, 0.031004868, 0.0060772197, -0.00535624, -0.017038314, -0.011436222, -0.019204013, -0.005560656, 0.027911011, 0.013900259, -0.008861691, 0.024176285, 0.01148042, 0.07557851, -0.015579781, 0.037634563, -0.004502667, -0.041192498, -0.020441556, -0.006762288, -0.028021507, 0.051048644, -0.0390268, 0.007734643, 0.0015621217, -0.019425003, -0.048573557, 0.0029695504, 0.006806486, 0.027491132, -0.0065578725, -0.0035800347, 0.0031352928, 0.018076966, -0.004740231, -0.0027457983, -0.006458427, -0.0064971, 0.04159028, 0.00084666716, -0.009115829, -0.01125943, 0.05484967, -0.024949748, 0.0050468547, 0.03164574, 0.030518692, -0.0026684518, -0.014563228, -0.0020994032, -0.002566244, 0.020607298, -0.049811102, 0.012309132, -0.009491512, -0.024795055, 0.0433361, -0.028132001, -0.017844927, 0.015789721, 0.007690445, -0.046054274, -0.00341153, -0.016364295, -0.0016297998, 0.0519768, 0.012231786, 0.010778777, -0.0035772724, -0.013038399, -0.0038010245, 0.00661312, -0.014209644, 0.021259218, -0.041082002, -0.0006754001, -0.006695991, -0.007259515, 0.008055078, 0.005718111, 0.019115617, -0.027358538, 0.00054073444, -0.02080619, -0.01342513, 0.017016215, 0.003789975, 0.00449438, 0.023888998, -0.02559062, 0.018728886, -0.0043507367, 0.04291622, 0.017701283, 0.029789425, -0.004947409, 0.002535858, -0.013513526, 0.03378934, -0.015402989, -0.036374923, -0.007867237, 0.01171246, 0.026032599, 0.03314847, -0.007673871, -0.0047126077, 0.025391728, -0.0039722915, -0.012253884, 0.017270353, -0.0057512596, -0.0023051999, 0.018585242, 0.007281614, -0.019325558, -0.02948004, -0.0016408493, 0.03858482, 0.034187123, -0.013480378, -0.0433582, 0.016784176, 0.014541129, -0.015425088, 0.02035316, -0.006386605, 0.013822912, -0.029568436, -0.015878117, -0.00084666716, -0.007430782, 0.01364612, 0.06382185, -0.005679438, -0.02857398, 0.014552179, -0.017369797, -0.011425173, -0.037126288, -0.016364295, 0.018485798, -0.0021767495, 0.017193006, -0.028242497, -0.020607298, -0.0049556964, 0.013358833, 0.002269289, -0.008579929, 0.028308794, -0.023005038, -0.0077070193, -0.037325177, 0.019314509, 0.010408619, 0.014541129, 0.020463655, 0.05135803, -0.0039391434, 0.000691629, 0.03502688, 0.007602049, 0.0044612316, 0.00046476917, 0.05374472, -0.033944033, -0.0030745205, 0.00373749, -0.013137843, -0.005560656, -0.009624106, -0.026783964, 0.029966217, 0.0055385567, -0.0009840952, 0.019590747, -0.03359045, -0.020541001, -0.01754659, -0.011900301, 0.018563144, 0.015756574, -0.005955675, -0.014209644, 0.018905677, 0.056396596, 0.010845074, -0.008718047, 0.012099192, 0.0055578933, 0.009508086, 0.008872741, -0.0005735376, -0.020563101, 0.015900217, 0.04183337, -0.0015800771, -0.015635028, 0.017038314, 0.00930367, 0.0066628424, 0.019237163, -0.022828247, 0.023977393, 0.014121248, 0.015657127, 0.0017444382, 0.027137548, 0.009673828, 0.02145811, 0.056750182, 0.00066711294, 0.012264934, 0.002128408, 0.035844546, -0.0051490623, 0.039733965, -0.00025862711, 0.0091931755, -0.028507685, -0.013093646, 0.006673892, -0.02296084, 0.0134914275, -0.010530164, 0.017137758, -0.019767538, 0.034783795, 0.009817472, 0.044551544, -0.00704405, -0.0041407966, 0.018043818, 0.01843055, -0.0024198382, 0.018662589, 0.015734473, -0.0105577875, -0.0238669, -0.014817366, 0.025192838, -0.009800898, 0.02576741, -0.030231405, 0.034584902, -0.003499926, 0.0011553623, -0.047336016, 0.018386351, 0.017623937, 0.0054612104, 0.027557429, -0.01712671, -0.010845074, -0.00254967, 0.022010583, -0.0011222138, 0.018275857, -0.0051463, 0.0067678127, 0.0096020065, 0.023115532, -0.013292536, -0.026054697, 0.02426468, -0.0059888237, -0.023491215, 0.028905466, 0.0075468016, -0.03599924, 0.03792185, 0.0005213978, 0.023911096, 0.0021242644, 0.01430909, 0.0006788531, -0.0005845871, -0.010784302, -0.006646268, -0.0016698542, -0.040573727, 0.027491132, -0.0020220566, -0.004798241, 0.04355709, -0.037258882, 0.022717752, -0.042982515, -0.010784302, 0.026518777, -0.046673045, -0.005353478, 0.04309301, -0.0076849204, 0.0022002298, 0.025679015, 0.0012320181, 0.010165531, 0.038076542, -0.00047754514, -0.0070550996, -0.000672983, -0.021502309, -0.028109903, -0.012397528, -0.008718047, -0.023248127, -0.015093603, -0.036441218, -0.018143263, 0.005850705, -0.0068562087, 0.016386393, -0.013347784, -0.01039757, -0.004405984, -0.0140107535, 0.009364443, -0.012320181, 0.011513568, -0.028463487, -0.014154397, -0.028927565, 0.0022237098, 0.00081282813, -0.021049278, -0.0029364019, 0.021535456, -0.043888576, 0.047998983, 0.016353246, 0.016386393, -0.015082554, -0.02859608, -0.023005038, 0.0055054086, 0.017480293, 0.017867025, -0.020419458, -0.021137675, 0.0075468016, -0.0053728144, 0.020110073, 0.04609847, -0.016154354, 0.017568689, 0.025413828, 0.01798857, 0.02035316, 0.024574066, -0.03858482, -0.01193345, 0.022563059, 0.015281444, 0.03012091, -0.019590747, -0.0049556964, 0.03162364, -0.0070164264, -0.009038483, 0.007110347, 0.027690021, 0.007325812, 0.02773422, -0.008850642, -0.0066407435, 0.0016643294, 0.006535773, -0.001831453, 0.02857398, 0.0096296305, 0.00092884776, -0.010474917, 0.010546738, 0.060153425, 0.0009108923, -0.021413911, 0.0029667881, -0.03275069, -0.0017623936, -0.006734664, -0.010353372, -0.017447146, -0.00093851605, -0.017137758, -0.02883917, 0.039181493, -0.0021422198, -0.029723128, 0.031822532, 0.01645269, 0.019027222, -0.033479955, 0.010458343, 0.017491342, 0.000860479, -0.0073092375, 0.048882943, -0.0044446574, -0.006132467, 0.005977774, 0.016651582, 0.021402862, -0.004425321, 0.00084045186, 0.023380721, -0.0125632705, 0.024507768, -0.0151157025, 0.020872487, 0.029944118, 0.014132298, -0.010358897, -0.008657276, -0.02576741, -0.016916769, -0.014143348, 0.022717752, 0.012143389, 0.013999704, -0.014397485, -8.533141e-05, 0.046673045, -0.0021007843, 0.009298146, -0.031026969, -0.013811863, 0.037258882, -0.0061711404, 0.014927861, -0.013038399, -0.007342386, 0.0011740084, -0.026960757, -0.015524534, 0.009452838, 0.05697117, 0.026319886, -0.005604854, -0.0162759, 0.01711566, 0.014099149, 0.0050606662, -0.0024446996, 0.002320393, 0.016762076, 0.0109389955, 0.021325516, 0.010988718, -0.023778502, 0.03573405, 0.008513632, 0.017005166, 0.008546781, -0.016518988, -0.034120824, -0.0029833624, 0.02362381, -0.005345191, 0.0052788937, -0.00046787685, 0.011358876, 0.004499905, 0.009905868, 0.0011505282, 0.021800645, -0.0105577875, -0.013524576, -0.023535414, -0.015491385, -0.01671788, -0.007894861, 0.0029502138, -0.0011954167, -0.006110368, 0.00043852665, 0.007939058, 0.034695398, -0.012861607, -0.008204246, -0.029104358, 0.020960882, -0.0098340465, 0.021657001, 0.0119223995, 0.015557682, -0.03445231, 0.0585181, 0.007718069, -0.010380995, 0.01366822, 0.0324634, -0.015590831, -0.012596419, -0.030872276, -0.021413911, -0.003367332, 0.022894543, 0.04181127, -0.005405963, -0.012607468, 0.026319886, 0.0034944012, -0.002401883, 0.014717921, -0.027844716, -0.0028314318, 0.033037975, 0.02492765, 0.0238227, 0.04592168, 0.020043775, -0.0014157159, -0.011137886, 0.009673828, -0.034363914, 0.024176285, 0.03750197, 0.005359003, 0.00165328, -0.018938826, 0.016607383, -0.009099255, -0.012021845, 0.0030607088, 0.013292536, -0.0052927057, -0.027822616, 0.037966046, -0.04483883, 0.0070550996, -0.015745522, -0.007828563, 0.03949088, -0.008629652, -0.012806359, 0.0049722707, 0.019458152, 0.012717963, -0.014264892, -0.0067291395, 0.02839719]"
../../../gradio,../../../gradio/gradio/components,html.py,"""""""gr.HTML() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.events import Events


@document()
class HTML(Component):
    """"""
    Creates a component to display arbitrary HTML output. As this component does not accept user input, it is rarely used as an input component.

    Demos: blocks_scroll
    Guides: key-features
    """"""

    EVENTS = [Events.change]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default value. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Is used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: This parameter has no effect.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return ""<p>Hello</p>""

    def example_value(self) -> Any:
        return ""<p>Hello</p>""

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the HTML
        Returns:
            (Rarely used) passes the HTML as a `str`.
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a `str` consisting of valid HTML.
        Returns:
            Returns the HTML string.
        """"""
        return value

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}
","The code defines a `HTML` component class that inherits from the `Component` class. This component is used to display arbitrary HTML output and does not accept user input. It has parameters such as `value`, `label`, `every`, `show_label`, `visible`, `elem_id`, `elem_classes`, and `render`. The class provides methods for generating example payloads and values, preprocessing and postprocessing HTML strings, and providing API information.","[-0.061495118, -0.007510938, 0.028878072, 0.047990825, 0.05278551, -0.023005685, -0.007653899, -0.0054627503, 0.03846744, 0.0025251817, 0.060703337, -0.028856078, -0.043108165, -0.060263455, 0.0052813003, -0.032089192, 0.014889913, -0.004214593, 0.002470197, 0.022851726, -0.0069061043, -0.050762065, 0.023907438, 0.014197103, -0.012855471, -0.019838555, -0.0713924, 0.048430704, 0.032331124, 0.031451367, 0.030065747, -0.046715178, 0.035124358, 0.036663935, 0.0022942452, 0.006658672, 0.017474202, 0.02480919, 0.016715411, 0.01620955, -0.027272513, 0.028680127, 0.016242541, -0.01012822, -0.0553808, 0.021554083, -0.039501157, 0.03257306, -0.00786834, 0.045043636, -0.007681391, -0.014219097, 0.012943447, 0.007565923, -0.047199044, -0.0070875543, -0.08916353, 0.073459834, -0.003675741, -0.021477105, 0.019068765, -0.02630478, -0.068181284, 0.057668168, -0.028680127, 0.016231544, -0.0021100459, -0.028988043, -0.0023945926, -0.009990757, 0.052081704, -0.030065747, -0.02597487, -0.013130396, -0.015538734, 0.015659701, -0.023357589, 0.012844474, -0.0047451975, 0.01118393, -0.0044180374, 0.0298678, -0.056656446, -0.051993728, -0.0039836564, -0.0059768595, 0.00041513605, -0.012591544, -0.041876506, -0.037675656, -0.0608353, -0.02265378, -0.029295959, 0.042558316, -0.028064296, 0.0542811, -0.07645101, -0.025776925, 0.012173658, 0.009974262, 0.07244811, -0.023951424, -0.035608225, 0.025337044, 0.023379581, -0.020707315, -0.049882308, -0.001355378, -0.025447015, 0.0058009075, -0.029317953, 0.009644353, -0.0633866, 0.02819626, -0.03791759, -0.021037225, 0.041766535, 0.0415246, 0.003835197, -0.0030929008, 0.008984534, -0.0044427803, -0.023599522, -0.06281476, -0.028988043, -0.014274081, -0.004046889, -0.008220243, -0.00834121, -0.0057899104, 0.012052692, 0.024171365, -0.04891457, -0.040424902, -0.02524907, 0.041590583, -0.035146352, -0.02392943, -0.013746226, 0.030285686, 0.018782843, -0.00101997, 0.022268888, -0.011810758, 0.0041321157, -0.035278317, -0.013427314, -0.018046046, -0.01806804, -0.00028660882, 0.015483749, 0.019794567, -0.034222607, -0.0185739, 0.007439458, -0.010716558, 0.040556867, -0.015758675, -0.02061934, -0.036971852, 0.013251362, 0.0039644116, -0.0089680385, 0.0069885817, -0.008110274, 0.019156741, 0.040798802, -0.012558552, -0.040996745, 0.014812933, 0.01071106, -0.0171223, -0.017210275, 0.00022578177, -0.017034324, -0.009759821, 0.036312032, -0.043548044, -0.026326774, -0.019552633, 0.037719645, 0.041722547, -0.032661036, -0.00022371984, -0.04414188, -0.031319402, 0.016605442, -0.007296497, -0.022565804, 0.0031176442, 0.009919277, -0.007170032, 0.017683147, -0.011260909, -0.009649851, -0.007642902, 0.024193358, -0.028042302, 0.014428039, 0.010760546, 0.034002665, 0.0491785, 0.027052574, 0.004181602, 0.009100002, 0.05577669, -0.023665503, -0.030791547, 0.03967711, 0.005190575, -0.021576077, 0.024897166, 0.042932216, -0.0062022973, -0.06760944, -0.025842905, -0.026018858, 0.021444114, 0.020223448, -0.022279885, -0.058371976, 0.036378015, 0.004104623, -0.06461826, -0.03585016, -0.0019478403, 0.011315893, -0.017254263, -0.036202062, 0.023115654, 0.039083272, -0.0030186714, 0.002772614, 0.003980907, -0.0038626897, -0.036773905, 0.024523268, -0.019761575, -0.008550153, -0.008148763, -0.016418492, 0.015483749, -0.0020660579, -0.0006433234, 0.059427686, 0.041612577, -0.022763751, -0.04561548, 0.009067011, 0.046143334, 0.022334868, -0.004057886, 0.020949248, -0.014768946, -0.0041183694, 0.012316619, -0.016275533, 0.050718077, 0.059471674, -0.035564236, -0.03428859, -0.04913451, -0.019849552, 0.0029664356, -0.005102599, 0.020080488, 0.032661036, -0.0022681274, -0.010386649, -0.010540606, 0.024743207, 0.043064177, 0.034200612, 0.0014763448, -0.022235896, -0.0018543659, 0.015142843, 0.062594816, 0.000947115, 0.03486043, -0.013504293, -0.005583717, -0.01515384, 0.033562787, -0.024501273, 0.025491003, -0.018090034, -0.0382475, -0.007038068, -0.06246285, 0.05758019, 0.008434685, 0.02615082, -0.03147336, -0.044493787, 0.04284424, 0.061231192, 0.028460188, 0.07442757, -0.011557827, -0.034156624, -0.02564496, -0.026216803, -0.015527737, 0.044361822, -0.034772456, 0.013482299, -0.0014667223, 0.009825802, -0.043987926, 0.015450759, 0.015065864, -0.017958071, 0.014197103, -0.053445328, 0.034332573, 0.028350217, 0.031561337, 0.00353278, -0.013680245, 0.0072250166, 0.018606892, 0.0071590347, -0.028900066, -0.024413299, 0.016605442, -0.040952757, -0.012371603, -0.005795409, -0.014702964, 0.018408947, -0.021466108, 0.030131727, -0.0066311797, 0.053929195, -0.010452631, -0.031209433, 0.028284235, -0.023577528, 0.026656682, -0.042756263, -0.012096679, -0.009517888, 0.022444839, 0.030505626, 0.016814385, -0.02615082, 0.05296146, 0.01176677, -0.0062517836, -0.020300427, -0.027602423, 0.038885325, -0.054369073, 0.022543812, -0.024083389, 0.007532932, -0.011315893, -0.024237346, -0.032243147, 0.00012491884, -0.0023231122, 0.020300427, 0.01620955, 0.021444114, 0.036268044, -0.03373874, -0.028966049, 0.020905262, -0.004654472, -0.012899459, 0.033936683, 0.020729309, -0.01234961, -0.01078254, -0.014252088, -0.018914808, -0.03202321, -0.025930882, -0.0090505155, 0.03464049, -0.030131727, 0.014757949, -0.0065706964, 0.011557827, -0.026678676, 0.01409813, 0.000458093, -0.009468401, 0.027844356, 0.04680315, 0.0298678, -0.054545026, -0.026194809, 0.011546831, 0.01245958, -0.01307541, 0.011447857, 0.022609793, 0.0021540336, 0.0022227648, -0.0007216769, 0.016781393, -0.008693114, -0.0070105754, -0.070292704, -0.0014055517, 0.01034266, 0.055996627, -0.010029247, 0.019992512, 0.036268044, 0.021631062, -0.008610636, -0.0029829312, -0.035058375, 0.020168463, -0.05643651, 0.0109969815, 0.005212569, 0.018848825, -0.07680292, -0.0043767984, -0.003026919, 0.009017524, 0.0185739, 0.031143451, 0.026172815, -0.031209433, -0.02964786, -0.002148535, 0.03952315, -0.0070875543, 0.038313482, -0.00757692, -0.061759047, 0.02458925, 0.06804932, 0.011150938, -0.0037582184, 0.0057239286, -0.0069665876, -0.03980907, -0.0090505155, -0.050278198, -0.0075494274, -0.020355413, -0.038533423, -0.0064552277, -0.0316933, -0.042360373, 0.02458925, -0.04031493, -0.014768946, 0.04218442, 0.0037279767, 0.009594866, 0.0116568, -0.0013203251, 0.0036454992, -0.008720606, 0.027712392, -0.009171482, 0.016836379, -0.025293056, 0.013922178, 0.06989681, 0.014417042, 0.008071784, -0.0136252595, -0.008550153, 0.01606659, 0.048606656, -0.033452816, -0.005740424, 0.029229976, -0.015901634, 0.01679239, -0.061187204, -0.047594935, -0.013933175, -0.02564496, -0.015054868, -0.04535155, -0.020861274, 0.098708905, -0.049706355, -0.07170032, 0.0335188, -0.029098012, 0.012536558, -0.013867193, 0.036114085, -0.0070985514, 0.018991787, 0.020652331, -0.025403026, -0.03530031, -0.004170605, -0.051773787, 0.035278317, -0.009116498, -0.043262124, 0.006939095, -0.016957344, -0.045923393, 0.05300545, 0.009226467, -0.020003509, -0.00746695, -0.04535155, -0.03629004, 0.05278551, -0.03640001, -0.00024537015, -0.06321065, -0.017496197, -0.005998853, -0.015439762, 0.007708884, -0.0016467979, 0.04913451, -0.016517466, -0.031121457, -0.044427805, 0.01718828, 0.01642949, -0.030439643, 0.017397225, 0.042250402, -0.026854629, -0.015076861, 0.040820792, 0.01318538, -0.023225624, 0.011260909, -0.014428039, -0.0026805142, -0.021103207, -0.02447928, 0.0033458315, 0.003417312, 0.007983808, -0.013592268, 0.009924776, 0.050762065, -0.017892089, -0.013702239, -0.01318538, 0.03186925, 0.0037252274, -0.008825078, 0.033716746, -0.057932097, 0.009094504, 0.015670698, 0.00710405, -0.028526168, -0.050718077, -0.016011605, 0.032155175, 0.032353118, 0.01792508, 0.048298743, 0.018683871, -0.002455076, -0.008588642, 0.0019423418, 0.015109852, 0.019090759, -0.025776925, -0.020630337, -0.0028427197, -0.00035035695, 0.02392943, -0.041942485, 0.040292937, -0.009006527, 0.010067736, -0.017155292, -0.006669669, -0.02167505, -0.010507615, -0.009963265, -0.016649429, 0.02181801, 0.042316385, 0.019794567, -0.013350335, 0.022785746, -0.022939702, -0.008214745, 0.0146699725, 0.031451367, -0.025007134, 0.007851845, 0.0041733542, 0.017804112, -0.053709257, -0.011381876, -0.0019657104, 0.005861391, -0.009198975, -0.007923325, -0.00936393, -0.0029444417, 0.00972683, -0.0028784599, -0.046275295, -0.029273964, -0.008737101, 0.056656446, -0.029955776, -0.031341396, 0.0032441095, 0.011101453, -0.0065871915, 0.023445563, 0.013548281, -0.023137648, 0.031055475, 0.002046813, 0.0005701247, -0.006433234, 0.0046902127, 0.024743207, -0.00036461867, -0.0036592456, 0.04961838, 0.010122721, 0.035168346, 0.032221153, 0.011150938, -0.012052692, 0.0026351516, -0.006097826, -0.005998853, -0.025930882, 0.0025952875, -0.030549614, -0.012723507, 0.04530756, 0.05577669, 0.025622966, 0.00826973, 0.011128945, 0.010513114, 0.0051163454, 0.038731366, -0.012338613, 0.006680666, 0.03186925, -0.010925501, -0.016264535, 0.029493904, 0.0008447056, -0.025512997, 0.004011149, 0.014592994, -0.005740424, -0.008588642, -0.009770818, 0.010799035, -0.021521091, -0.022719763, 0.022422845, 0.020201454, -0.01143686, -0.014340064, 0.00939692, -0.0553808, 0.019420668, 0.024677226, 0.023445563, 0.008407192, -0.004280575, -0.01573668, 0.0143290665, -0.029427921, 0.026612695, -0.039039284, 0.0062737777, -0.036048103, -0.03257306, 0.0026997589, -0.0247652, -0.0070710587, 0.009539881, 0.032177165, 0.01718828, -0.009204473, 0.0013794338, -0.014801936, 0.018815834, -0.030087741, 0.031165445, -0.0054764966, 0.011711785, 0.021949975, -0.009605863, -0.00779686, 0.019981515, -0.01854091, 0.0016138069, -0.00033386148, -0.02826224, -0.039061278, 0.01606659, 0.032353118, -0.014274081, -0.015208825, 0.029273964, -0.025908887, -0.01923372, -0.010771543, 0.0038489434, 0.0046902127, 0.025381032, 0.0036619948, -0.05300545, -0.017870095, -0.0017746378, -0.06140714, -0.03890732, 0.017793115, 0.00203994, 0.0013017677, 0.008852569, -0.022719763, -0.015582723, 0.014603991, 0.0005079231, -0.031341396, 0.0012302872, -0.009864292, 0.005883385, -0.01413112, -0.02200496, -0.012668522, -0.0062132943, -0.0022818735, 0.00830822, 0.024963148, -0.013603265, 0.013790214, -0.023027679, 0.012866468, -0.0042310883, 0.029757831, -0.019464657, 0.015285804, 0.005047614, -0.021466108, -0.007967313, -0.037389737, -0.002094925, 0.019838555, 0.01526381, 0.001269464, 0.0068016327, -0.015868643, 0.022565804, -0.0125695495, -0.010177706, -0.010804534, -0.05639252, 0.04574744, -0.018189007, -0.023731485, 0.05894382, -0.009275953, 0.001291458, -0.037829615, -0.03635602, 0.017452208, -0.01187674, -0.029010037, -0.010166709, -0.016396498, 0.027382484, -0.005591965, -0.024391305, 0.06835724, -0.008115772, 0.0167594, 0.024721215, 0.0043548048, 0.020828282, -0.0073404848, -0.073899716, -0.034772456, 0.007362479, 0.016220547, -0.014977888, 0.03980907, 0.010573598, 0.00407988, -0.058767866, -0.014362058, -0.016880367, -0.027118556, -0.01879384, -0.055864666, 0.001799381, -0.007587917, 0.0444498, 0.0014323568, -0.01708931, 0.0073019955, 0.04022696, 0.011623809, -0.010771543, -0.0127455015, 0.009204473, -0.02167505, -0.025051123, -0.012470577, 0.0116897905, -0.016737405, -0.025930882, -0.04389995, 0.0013498794, -0.021367135, -0.014603991, 0.018782843, 0.050806053, 0.008115772, 0.0065981885, 0.009160485, 0.0003611821, 0.011205924, -0.0019519641, 0.00014528043, 0.016407495, 0.02826224, 0.020608343, -0.028064296, 0.009583869, -0.007351482, -0.039281216, 0.029493904, 0.0019327195, 0.01067257, -0.0015588221, 0.06747748, -0.016506469, -0.0018956047, -0.00068834226, -0.041062728, 0.053093426, -0.0018543659, -0.013691242, -0.028900066, -0.048254754, 0.013636257, 0.028042302, 0.01613257, 0.025271062, -0.044933666, 0.01956363, -0.013636257, 0.016649429, -0.03347481, 0.025051123, 0.010755047, -0.054105148, 0.05023421, 0.0069995783, 0.035168346, 0.011854745, -0.004404291, 0.0426243, 0.007027071, 0.0071095484, -0.014812933, -0.011359882, -0.02692061, 0.0031781276, -0.066069864, 0.012184655, 0.03543227, -0.017881092, 0.04101874, -0.018254988, 0.03875336, -0.026194809, -0.004269578, -0.042096443, 0.009056014, -0.023841456, 0.0066751675, 0.017452208, -0.0071755303, 0.003931421, 0.022301877, 0.029207982, -0.038423453, 0.0284162, 0.0053775236, 0.005289548, -0.012272631, -0.04495566, 0.01132689, -0.030769553, -0.013603265, -0.015318795, -0.011777767, -0.02964786, 0.0020358162, -0.0440759, -0.030923512, -0.041502606, 0.039347198, 0.044273846, -0.0037389735, -0.0011959217, 0.043042183, -0.0071370406, -0.012162661, 0.02175203, -0.040798802, 0.004385046, 0.016220547, 0.020014506, -0.000121052704, -0.0012392224, 0.0017430215, 0.00025705443, 0.010447132, 0.027272513, 0.047155056, 0.015637707, 0.0059658624, -0.010733054, 0.014571, -0.05722829, -0.0466272, 0.023621516, -0.0033018435, -0.008726104, -0.0077803642, -0.028174266, 0.031935234, -0.05023421, 0.024237346, -0.012503567, 0.0240394, 0.013262359, 0.012833477, 0.014340064, -0.013757223, 0.009160485, 0.016715411, 0.03879735, -0.03543227, 0.00739547, 0.024149371, -0.015571726, 0.04350406, 0.01038115, -0.04346007, -0.0071095484, 0.0062352885, 0.010804534, -0.002094925, -0.0043548048, 0.0145050185, -0.016517466, -0.0038819343, 0.030505626, -0.028064296, -0.0017636409, 0.007082056, 0.01376822, 0.0032138678, 0.0062627806, 0.0076923883, -0.028460188, 0.013306348, -0.0025155596, 0.036268044, 0.038885325, 0.030065747, 0.03147336, -0.035058375, -0.011370879, 0.012228643, -0.009275953, 0.0071865274, 0.030989492, -0.06989681, -0.001050899, -0.0066641704, -0.0066311797, 0.009809307, 0.017067315, -0.018496923, -0.014911907, 0.02786635, 0.010848522, -0.04983832, 0.029823814, 0.009820304, -0.034838438, 0.024413299, 0.0129214525, 0.058284, 0.005121844, -0.003103898, -0.0023244868, 0.032177165, 0.008099277, 0.014658976, -0.006746648, 0.01948665, 0.016242541, -0.029911788, 0.019332692, -0.028394205, 0.027778374, -0.013317344, -0.03820351, 0.015373779, -0.014318069, 0.02524907, -0.0026928857, 0.01515384, -0.0012131045, 0.0042200917, 0.036575958, 0.011117948, 0.018716862, -0.050366174, -0.006097826, -0.016814385, 0.034068648, -0.01307541, 0.01799106, 0.012085683, 0.04284424, -0.01934369, -0.03285898, 0.027118556, 0.021356137, 0.0043025687, -0.026414748, -0.034354568, 0.023511546, 0.006537705, 0.046935115, 0.013504293, 0.035058375, -0.013438311, 0.014801936, 0.0013801211, 0.006554201, 0.007730878, -0.002859215, -0.016660426, 0.019189732, -0.009100002, -0.031165445, 0.03492641, -0.029185988, -0.0027231274, 0.006713657, 0.0338707, -0.025293056, 0.032001216, -0.024523268, -0.017199278, 0.009352933, 0.023467558, 0.005556225, -0.036773905, 0.024567256, -0.016308524, -0.0042833243, 0.03558623, 0.0024413299, 0.015120849, 0.019134747, 0.00480843, 0.007373476, 0.008484171, -0.0035217833, -0.010216195, 0.036378015, -0.0009429911, -0.013053416, -0.008258733, 0.037983574, -0.025798919, -0.03318889, 0.008071784, 0.018485926, 0.002163656, 0.03653197, 0.00859414, -0.00928695, 0.008275229, 0.004385046, -0.034266595, 0.027404478, -0.030043753, 0.0078023584, 0.0153847765, 0.014483024, -0.017430214, -0.0020646832, 0.011920728, 0.04057886, 0.050278198, -0.016044596, -0.016638432, 0.013218371, -0.008060787, -0.001435106, 0.015659701, -0.029559886, 0.01315239, -0.013350335, -0.018672874, -0.013856196, 0.010843024, 0.012074686, 0.013108402, -0.008473174, -0.028306229, 0.008588642, 0.012426589, 0.0019093509, 0.0059823575, -0.028482182, -0.014450033, 0.002450952, 0.028108284, -0.01799106, -0.030549614, 0.0026640187, 0.0013814957, -0.047374994, -0.020520367, 0.015186831, -0.007170032, -0.002808354, -0.06633379, 0.015131846, 0.0026076592, -0.010067736, 0.0020303177, 0.02736049, 0.009825802, 0.027712392, 0.030131727, -0.0053307866, 0.026964597, 0.0072855, 0.0053692763, 0.012646528, -0.0036949858, 0.008885561, 0.0038132032, -0.009836799, -0.03257306, 0.00834121, 0.0038764358, -0.018672874, 0.01398816, -0.0020083238, -0.011986709, -0.036443997, 0.0020962995, -0.025293056, 0.03598212, 0.0025884144, 0.011898734, 0.031011486, 0.0123935975, 0.007422962, 0.0052400613, -0.032792997, -0.0037719645, 0.0011835501, 0.004470273, 0.013669248, 0.011975712, -0.004761693, 0.0070435666, 0.04596738, 0.01751819, 0.02859215, -0.006108823, -0.03052762, 0.0033568286, 0.023335595, -0.026128827, -0.026172815, 0.024787195, 0.006983083, 0.01854091, 0.0058338987, -0.02364351, -0.016187556, 0.047111068, -0.02175203, -0.0059823575, 0.016451484, 0.004489518, -0.02958188, -0.0025334295, 0.022125926, 0.012437586, 0.0142081, -0.002801481, -0.0008027796, 0.005556225, -0.007241512, -0.02087227, 0.016165562, 0.00023849703, 0.012074686, 0.032045204, 0.027470458, -0.02370949, -0.0005769979, 0.019387677, -0.017936077, -0.016110577, -0.0066201827, 0.03519034, -0.01734224, 0.009836799, -0.011128945, 0.004214593, -0.02320363, 0.016506469, 0.04433983, 0.018211002, -0.0034695475, -0.008214745, -0.0011141316, 0.028526168, 0.010518612, -0.032836985, 0.029999765, 0.01679239, 0.0064387326, -0.032727014, -0.02892206, -0.013328341, -0.0036235054, 0.002335484, 0.0193107, 0.014592994, -0.03063759, 0.003620756, -0.039105266, -0.014581997, -0.020927256, -0.020190457, 0.0067191557, 0.012305622, -0.043174148, -0.014955894, -0.022092935, -0.008836075, 0.0051823272, 0.012371603, 0.012437586, 0.005767917, 0.021796016, 0.024985142, 0.0123826, -0.00928695, 0.023379581, -0.03719179, -0.045659468, -0.008583143, -0.008660123, -0.0020784293, -0.008093778, -0.0059163757, -0.00038077048, -0.020443387, -0.011359882, -0.009842298, 0.019222723, -0.00035912017, 0.02458925, -0.0033430823, 0.030813541, 0.03664194, -0.005883385, 0.0072030225, -0.007219518, 0.027184537, -0.049750343, 0.004415288, 0.029625867, -0.03796158, -0.014186106, -0.0052345633, -0.0118657425, -0.0016454234, -0.009446407, -0.0006495092, 0.006873113, -0.009380425, -0.0021540336, -0.019079762, -0.0014323568, 0.0138452, -0.010205198, -0.01923372, -0.0065596993, 0.00943541, -0.02181801, 0.0071590347, 0.024567256, -0.009468401, 0.015659701, -0.029955776, 0.010722057, 0.030395657, 0.00378846, -0.024237346, -0.0016701665, 0.00034726405, 0.007351482, 0.007747373, 0.016858373, -0.008077282, -0.01584665, 0.00042441473, -0.05089403, -0.013251362, 0.06677367, -0.02269777, 0.0035712696, -0.017661152, -0.018232996, 0.0098477965, 0.026612695, -0.011887737, 0.022565804, 0.005413264, -0.011227918, 0.019299703, 0.019222723, -0.0049596387, 0.005613959, -0.03857741, 0.009259458, 0.015142843, -0.004819427, 0.03281499, 0.012547555, 0.018090034, -0.0076923883, -0.00023059295, 0.03602611, 0.04451578, 0.023555534, -0.0053170403, 0.011370879, -0.0005914314, -0.0070985514, 0.035520248, 0.008577646, -0.011832751, -0.0109859845, 0.039281216, -0.01490091, -0.03063759, 0.007923325, 0.0047534453, 0.0024468284, -0.009089005, -0.04222841, 0.02964786, -0.00502837, 0.0024578252, -0.021301152, -0.0040523876, 0.025952876, 0.0100237485, -0.01526381, 0.008803084, -0.035872154, -0.022741757, 0.013834203, 0.024875171, -0.014175109, 0.0053857714, 0.004563747, -0.0129214525, 0.03624605, 0.018211002, 0.0034365566, 0.022543812, -0.012437586, 0.0042228405, 0.010628582, 0.027646411, 0.022279885, -0.002119668, 0.004104623, -0.013163387, -0.0033595779, -0.042910222, -0.0030214207, 0.0074724485, 0.031957228, 0.016088583, -0.013350335, 0.035322305, -0.0075494274, 0.024061395, -0.049706355, -0.016946347, -0.007554926, 0.015230819, 0.0073239896, 0.0015464504, 0.01817801, 0.0003075718, -0.007631905, 0.0032880974, -0.013350335, 0.034442544, 0.035498254, -0.0011574322, 0.02054236, 0.01340532, -0.032375112, 0.054149136, -0.011832751, 0.0015588221, 0.019695593, 0.00082889746, 0.02615082, 0.007318491, -0.020355413, 0.02375348, -0.0015244565, 0.017023327, -0.012811483, -0.045923393, -0.027998313, -0.030351669, 0.023687497, 0.008775591, -0.014999882, -0.019717587, -0.015021876, -0.019717587, 0.00892405, -0.0016811634, 0.0031451366, 0.009600365, -0.012184655, -0.023159642, -0.013394323, -0.004462025, 0.028548162, 0.008885561, -0.02881209, 0.0045664962, 0.01937668, 0.011799761, 0.028152272, -0.035828166, -0.015076861, 0.011535834, -0.0058558923, 0.018309973, -0.012316619, 0.006086829, 0.042822246, -0.0037609676, 0.073415846, -0.01781511, -0.0102821775, 0.007016074, 0.04247034, 0.0010144715, -0.013284354, 0.012404595, 0.00090931286, -0.013592268, -0.010991483, -0.003340333, 0.0006178929, -0.023973418, 0.00035138792, -0.039941035, 0.012811483, 0.020014506, 0.03453052, -0.03835747, 0.011821755, -0.010733054, -0.009968763, 0.015582723, 0.0021540336, -0.030615596, -0.0052538076, 0.015758675, -0.038841337, 0.010777041, -0.014197103, 0.015340788, -0.0353443, -0.017100306, 0.047199044, 0.04539554, 0.019255714, 0.005514986, 0.0093199415, -0.017716136, -0.0024921908, 0.00896254, -0.06963289, -0.02189499, -0.0023574778, 0.017573176, 0.01981656, -0.032507077, -0.028614145, -0.0011443733, 0.00045534375, -0.00081102736, 0.0130974045, -0.02458925, -0.0141531145]"
../../../gradio,../../../gradio/gradio/components,color_picker.pyi,"""""""gr.ColorPicker() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class ColorPicker(Component):
    """"""
    Creates a color picker for user to select a color as string input. Can be used as an input to pass a color value to a function or as an output to display a color value.
    Demos: color_picker
    """"""

    EVENTS = [Events.change, Events.input, Events.submit, Events.focus, Events.blur]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: default text to provide in color picker. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be rendered as an editable color picker; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> str:
        return ""#000000""

    def example_value(self) -> str:
        return ""#000000""

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: Color as hex string
        Returns:
            Passes selected color value as a hex `str` into the function.
        """"""
        if payload is None:
            return None
        else:
            return str(payload)

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a hex `str` returned from function and sets color picker value to it.
        Returns:
            A `str` value that is set as the color picker value.
        """"""
        if value is None:
            return None
        else:
            return str(value)

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def submit(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def focus(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def blur(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `ColorPicker` component in Gradio, which allows users to select a color as a string input. The component can be used as an input to pass a color value to a function or as an output to display a color value. It provides methods for handling events such as change, input, submit, focus, and blur. The component can be customized with various parameters such as label, info, scale, interactive, and visibility. The component also includes methods for preprocessing and postprocessing color values, as well as defining example payloads and values.","[-0.0037398771, 0.001512872, -0.0035276448, 0.03427838, 0.013514034, -0.04347894, 0.0021352288, 0.0009650833, -0.0103821745, -0.032649357, 0.022393374, -0.005257051, -0.015636357, 0.0020176407, 0.023494687, -0.032878798, -0.00052341074, -0.0062465123, -0.049742658, 0.03244286, 0.0034100567, -0.027785221, -0.02048902, 0.06369263, -0.016026406, -0.077413164, -0.020133387, 0.073788, -0.010852527, 0.0019932627, -0.05144052, -0.034301326, -0.058094285, -0.034737263, -0.009711062, -0.032626413, 0.023437329, 0.06594115, -0.044259038, -0.01838964, -0.059149712, -0.025261378, -0.018848522, 0.013112513, 0.016806502, 0.05823195, -0.021028204, 0.007927163, -0.0032408445, 0.03774293, -0.058048397, -0.00013372068, -0.022439262, -0.013617283, 0.0033670366, 0.05066042, -0.068510875, -0.012883074, 0.00017172174, -0.016439399, 0.0032924684, -0.025008993, -0.014810372, -0.010823847, 0.00040725656, 0.002298705, 0.0015386841, 0.0016820843, 0.016083766, 0.009951973, 0.06158178, 0.007565794, 0.031915147, -0.047998913, -0.017575128, 0.044924412, 0.0038287851, -0.055708107, 0.042492345, 0.024274785, -0.025261378, 0.0026830176, -0.06383029, -0.033658892, -0.018814106, -0.015452805, 0.0024922953, 0.0034559446, 0.0035276448, -0.043157723, -0.023460273, -0.027762277, -0.027073957, 0.07814737, 0.0128257135, 0.032534637, -0.06667536, -0.028817704, 0.020007195, 0.044649083, 0.013720531, -0.033314735, 0.0023574992, -0.04469497, 0.04090921, -0.03682517, -0.01343373, 0.041069817, -0.021131452, -0.002165343, -0.0055524553, 0.010995927, -0.05355137, 0.054377355, 0.0063899127, -0.040725656, -0.0048039067, -0.060709905, -0.019628618, -0.039532565, 0.0065619927, 0.029689576, 0.0027246037, -0.024963105, -0.0024320672, -0.011741607, -0.018194616, -0.06360085, -0.022611342, 0.00435363, -0.01030187, -0.005300071, 0.022347486, -0.040496215, 0.00737077, -0.008586803, -0.08094654, -0.024114177, -0.038316533, 0.007588738, 0.044373754, -0.03967023, 0.02510077, 0.0039807893, -0.01821756, -0.050063875, -0.043341275, 0.047953025, -0.03627451, 0.019490954, -0.02794583, 0.01906649, -0.043387163, -0.0061031124, 0.017506296, 0.013250178, 0.050063875, -0.029574856, -0.039991446, -0.037375826, -0.008443403, 0.038110036, 0.015131588, -0.024940161, -0.011013135, -0.04735648, -0.030263176, 0.023586463, -0.030653225, 0.06773078, 0.006435801, -0.014672708, -0.029460136, 0.036687505, 0.011013135, 0.0020577929, 0.037467603, 0.015120116, 0.0024793893, 0.00023051581, -0.0049186265, 0.032580525, 0.01058867, 0.025146658, 0.013112513, -0.037238162, -0.01809137, -0.043914877, -0.021028204, -0.033796556, 0.03370478, 0.014535043, 0.029919017, -0.0062407763, -0.009120252, -0.023930624, 0.028450599, -0.02482544, -0.0041958895, -0.048457794, 0.01775868, 0.02828999, 0.014707124, -0.025674371, -0.023632351, 0.012160337, 0.009963445, 0.0016820843, 0.02879476, -0.0295978, 0.02737223, -0.018710857, 0.015808437, -0.0117588155, -0.05708475, 0.01610671, 0.007192954, 0.0468976, -0.012894546, 0.005039083, -0.032809965, -0.0077493466, 0.060342804, -0.023999456, 0.017988121, -0.011483488, 0.031089162, -0.008300004, 0.018229032, -0.01183912, 0.02248515, 0.00047967365, 0.0056298915, 0.0042274375, 0.048733123, -0.07365034, 0.03051556, -0.0051968233, 0.042928282, -0.013330482, -0.04178108, -0.040932152, 0.010909887, -0.017058887, 0.018194616, 0.040266775, -0.015865797, -0.004161474, 0.026133252, 0.042790618, -0.01189648, 0.010210094, -0.010175678, -0.0096651735, 0.010227302, 0.031112107, 0.032764077, 0.038821302, 0.009189084, -0.026362691, -0.025903812, -0.04405254, -0.019146794, 0.035264976, 0.0023732733, 0.06483983, 0.02748695, 0.002929666, -0.029735465, 0.0045199743, 0.0026328275, -0.036045074, 0.051945288, 0.0054262634, 0.024366561, -0.0018541645, 0.0313186, 0.039601397, -0.015234836, 0.02686746, -0.06818966, 0.005165275, 0.013904083, 0.0167262, -0.03409483, 0.014385908, 0.018366696, -0.010927095, 0.015923157, -0.07163127, -0.0023890473, -0.030813834, 0.035471473, -0.00033806596, 0.006045752, 0.017988121, 0.03079089, 0.022680175, 0.026156195, -0.023655295, -0.018653497, -0.007319146, -0.01627879, -0.04731059, -0.014087635, 0.0032293724, 0.0031892203, 0.014351492, -0.02879476, -0.0147989, 0.027119845, -0.0003699725, 0.00047322063, -0.0265233, -0.07658718, 0.040542103, 0.021773886, 0.03790354, -0.0042962697, -0.033360623, 0.036412176, 0.020454604, 0.04070271, -0.024733666, -0.020649629, -0.039417844, -0.071218275, -0.018733801, 0.050109763, -0.020902012, 0.022347486, -0.026890405, -0.039096627, 0.034874927, 0.023953568, -0.012366833, -0.04854957, 0.038660694, -0.07199837, 0.00048039065, -0.026179139, -0.0228752, 0.022691647, 0.006923361, 0.04581923, -0.032924686, -0.060893457, 0.008443403, -0.0018627685, -0.02555965, -0.023540575, 0.0017121984, -0.005225503, -0.026225027, 0.05231239, -0.0228752, -0.052908935, -0.02225571, -0.09099603, 0.009980653, -0.0145694595, 0.041597527, -0.0030859723, 0.0032035604, -0.0107148625, -0.021039676, -0.06493161, -0.03482904, 0.017448936, -0.05249594, -0.005168143, 0.0042102295, -0.015166004, 0.0019172606, -0.053643145, -0.0068487935, 0.044649083, -0.024458338, 0.00040403006, -0.02606442, 0.031777482, 0.010175678, 0.0026529036, -0.0086097475, -0.0031720123, -0.030859722, 0.021360893, 0.012252113, 0.0020162067, 0.009951973, -0.0044884263, -0.040565047, -0.02498605, -0.034393102, 0.03978495, 0.032924686, -0.025766147, 0.024963105, 0.013892611, 0.023540575, -0.014592404, -0.046851713, -0.015865797, 0.039647285, -0.04951322, -0.03774293, 0.03244286, 0.008661372, 0.005931032, -0.028496487, 0.04184991, -0.00024844083, 0.0393949, 0.017001526, 0.0048985505, -0.029161863, 0.013697587, -0.026890405, -0.008994061, 0.064748056, 0.012710993, -0.020328412, -0.0070782336, -0.03716933, 0.0026371295, 0.029138919, 0.020271052, -0.007330618, 0.0016562722, -0.030745002, -0.017185079, 0.0010425195, 0.04474086, 0.024894273, 0.023035808, -0.04735648, 0.022680175, 0.0075026983, 0.037467603, 0.0072331056, -0.021074092, 0.023586463, -0.0034645486, 0.045498013, -0.01286013, 0.008242643, 0.026959237, -0.016554119, -0.060296915, -0.029460136, -0.013984387, 0.035769746, 0.0010296134, 0.023517631, 0.029896073, 0.025766147, -0.009074364, 0.009143196, 0.018171672, -0.019261515, -0.002228439, 0.026959237, -0.042882394, 0.03533381, 0.00025453535, -0.01055999, -0.014787428, 0.0010618784, 0.03244286, 0.002159607, 0.017058887, 0.069979295, 0.02544493, 0.00734209, -0.009785629, 0.017942233, 0.02624797, 0.016118182, -0.06158178, -0.000741379, -0.00298846, 0.04070271, 0.015303669, -0.009917557, 0.031341545, 0.11279286, -0.0068487935, -0.020190747, -0.029850185, -0.009097308, -0.002879476, -0.021693582, -0.02748695, -0.008661372, 0.002218401, 0.03359006, -0.016026406, 0.0068430575, -0.018802634, -0.027578725, 0.011919424, -0.029873129, -0.002321649, 0.033888333, 0.038500085, 0.016232902, 0.05896616, 0.00034039622, -0.005314411, -0.04832013, 0.0057044597, -0.002896684, -0.002209797, -0.0061719446, -0.002162475, -0.04040444, -0.0047092624, -0.01770132, -0.028244102, 0.012275057, -0.009475885, 0.031731594, -0.016496759, -0.009596341, 0.0034903607, -0.015728133, -0.018596137, -0.0561211, 0.031662762, -0.019169739, -0.027326342, -0.033888333, -0.021991855, 0.014053219, -0.061168786, -0.021991855, -0.028634151, 0.0038316532, -0.0040037334, -0.017208023, -0.01764396, -0.06153589, -0.004643298, 0.00022675155, 0.00286657, 0.060296915, 0.009538981, -0.022014799, 0.0178734, 0.034507822, 0.035196144, -0.044534363, 0.007382242, -0.021246172, 0.01050263, 0.008288532, 0.015521637, 0.021532973, -0.026133252, -0.044534363, -0.0042561176, 0.010611614, 0.025605539, 0.018171672, 0.013238706, -0.016645895, 0.02897831, -0.023999456, -0.028083494, 0.011070495, -0.035861522, 0.026959237, -0.002229873, -0.00054492074, 0.020844651, -0.0054692836, -0.011294199, -0.019594202, 0.012607745, 0.0022628552, 0.009481621, 0.0007507, 0.0076403623, -0.0030802363, -0.021039676, -0.0075199064, 0.005721668, -0.02828999, 0.016645895, -0.013273122, -0.022290125, 0.0062924004, -0.005936768, 0.03705461, -0.023586463, 0.01027319, -0.020076027, 0.032374028, -0.012515969, 0.0038718053, 0.0032781283, -0.013766418, -0.0035563249, 0.018481417, 0.053918473, 0.0044970303, 0.015211892, -0.0048956824, -0.026615076, -0.00070517045, -0.015074229, 0.03370478, -0.042675897, -0.020534908, -0.013754946, 0.0075141704, -0.029919017, -0.0013709059, 0.029689576, 0.033131182, -0.029437192, 0.007307674, 0.019559786, -0.0070610256, 0.021613277, 0.016703255, 0.010628822, -0.03863775, 0.01645087, -0.0034014527, 0.034576654, -0.041551642, 0.008758884, 0.009183348, 0.011363031, -0.008173811, 0.017058887, -0.02714279, 0.0012633557, -0.029620744, 0.005036215, 0.046461664, -0.007973051, -0.02441245, 0.0200875, -0.009831517, 0.005936768, 0.021039676, 0.036894, 0.0036251568, -0.01998425, 0.0018699386, 0.021705054, -0.017093303, -0.00298846, -0.008414723, -0.03654984, 0.0056786477, -0.014718596, 0.01320429, -0.011156535, -0.023540575, -0.01958273, -0.0055209077, 0.009728269, 0.0124700805, -0.011374503, -0.0039635813, -0.026798628, 0.03840831, -0.035196144, 0.03751349, -0.007927163, 0.029230695, 0.017793097, -0.023070224, 0.014557987, -0.004637562, -0.000724888, -0.003917693, -0.023701183, 0.017965177, -0.05777307, -0.039027795, 0.011047551, -0.024871329, 0.0018025404, 0.006699657, 0.022829311, -0.023999456, 0.0017380103, 0.006665241, 0.021395309, 0.025926756, -0.018297864, 0.04524563, 0.012389777, -0.005142331, 0.01577402, -0.030033737, 0.042721786, 0.008667108, -0.0024980314, -0.0382477, -0.015670773, -0.021211756, -0.019663034, 0.00092062925, 0.0024349352, -0.0313186, 0.016703255, 0.022404846, -0.0027532838, 0.012997794, -0.0027475478, -0.010812375, 0.024274785, 0.02106262, 0.010915623, -0.0033871126, -0.042905338, 0.00573314, -0.04519974, -0.029184807, 0.0085982755, -0.04643872, -0.0054205274, 0.0021423989, -0.020041611, 0.0086154835, -0.01468418, -0.0030687642, 0.013915555, 0.006888945, -0.0013271688, 0.04178108, -0.003020008, -0.021762414, 0.026798628, -0.008948172, 0.006481689, 0.016313206, -0.03847714, -0.031157995, -0.009739741, 0.010800903, 0.026821572, -0.009774157, -0.02737223, -0.0010719164, -0.015888741, 0.006590673, -0.024228897, 0.019743338, -0.004442538, 0.006757017, -0.0048039067, -0.04386899, -0.028381767, -0.006728337, 0.017380103, 0.017689848, -0.015085701, 0.01050263, -0.014546515, -0.001431134, 0.04965088, -0.028702984, -0.011586736, 0.011615416, 0.027073957, 0.0021094168, -0.014466211, 0.008500763, 0.031226827, 0.002307309, -0.027211621, -0.053459592, -0.0047866986, 0.016255846, 0.010479686, -0.012401249, -0.0056012115, -0.0025754676, 0.03216753, -0.0077264025, -0.0036280248, 0.022909615, 0.010755015, -0.030240232, -0.0013501128, -0.0010912755, -0.031043274, -0.027326342, 0.02714279, -0.0034444726, 0.014867732, -0.058553167, -0.013812306, 0.017988121, -0.024917217, -0.024458338, -0.045452125, 0.04781536, 0.051991176, 0.018148728, 0.005959712, -0.037490547, -0.0063841767, 0.00433929, 0.014970981, 0.011133591, -0.007301938, 0.041872855, -0.017907817, -0.033888333, 0.012768353, 0.023494687, -0.039211348, -0.019284459, -0.032374028, -0.016622951, 0.0014046049, -0.007560058, 0.0040840376, 0.030584393, 0.02698218, 0.017735736, 0.019685978, -0.0063210805, 0.026041476, -0.0010238774, 0.0036136848, 0.0028149458, -0.032809965, 0.017035943, -0.00012036654, 0.029620744, -0.015567525, -0.0025195414, 0.008586803, 0.030125514, 0.005317279, 0.0049473066, 0.039830837, 0.0228752, 0.0093152765, 0.0010023674, 0.005770424, 0.035976242, -0.02748695, -0.007158538, -0.013582867, -0.021337949, 0.041689303, -0.009229236, 0.0042102295, -0.012332417, -0.01679503, 0.05970037, 0.01696711, -0.03359006, -0.030859722, 0.028817704, -0.024068289, -0.019858059, -0.0077034584, -0.02640858, 0.055753995, -0.010181414, 0.013927027, -0.037375826, 0.009911821, 0.03398011, -0.025123714, -0.036916945, 0.015785493, -0.00054743025, 0.0002147418, -0.02936836, -0.0017523504, 0.0048383228, 0.03590741, -0.02293256, -0.033613004, -0.032121643, 0.006676713, -0.0121144485, 0.013250178, 0.023311136, -0.032075755, 0.0023474612, -0.020121915, 0.045406237, 0.030446729, 0.02498605, 0.01206856, 0.0024076893, 0.0077837626, -0.01661148, -0.03528792, 0.011472016, -0.055708107, -0.036458064, -0.02948308, 0.0008130791, -0.036090963, 0.010869735, -0.015533109, 0.00040761507, -0.022886671, -0.03040084, 0.015154532, 0.014707124, 0.008191019, 0.01821756, -0.014144995, 0.030859722, 0.010594406, 0.008380308, -0.020982316, -0.00062988536, 0.011489224, -0.01044527, -0.015521637, 0.011064759, 0.0228752, 0.045658622, 0.003679649, 0.004861267, 0.04758592, 0.027418118, 0.0023689712, -0.027922885, 0.008930964, -0.046255168, 0.014144995, -0.0008080601, 0.018515833, -0.02083318, -0.011202423, -0.048503682, 0.0047207344, 0.010737807, 0.005268523, -0.025307266, 0.018068425, -0.014982453, -0.03221342, 0.0032351085, -0.020167803, 0.013066626, 0.09618138, 0.019410651, -0.019433595, 0.018229032, -0.0002507711, 0.02868004, -0.0067856973, 0.010324814, -0.03354417, -0.03505848, -0.02048902, 0.02606442, 0.021980383, -0.021670638, 0.036228623, -0.016060822, -0.01833228, 0.027165733, 0.018871466, 0.019708922, 0.041391034, 0.0138811385, -0.00049186265, 0.011988256, -0.00049616466, -0.039532565, 0.082827955, 0.02259987, 0.028312935, 0.023815904, 0.019341819, -0.005096443, -0.07429277, -0.019823642, 0.005936768, -0.022118047, 0.05088986, 0.0069864574, -0.05144052, 0.034507822, -0.009625021, 0.01525778, 0.013858194, 0.028152326, -0.009613549, 0.02475661, -0.0009908953, -0.006040016, -0.025376098, -0.0029397039, 0.0038890133, -0.0051968233, 0.022209821, 0.006481689, 0.03352123, -0.02202627, -0.010800903, -0.0025941096, 0.018492889, 0.024389505, 0.015475749, -0.027601669, 0.011930896, -0.0413222, -0.005787632, -0.0027862657, 0.00584786, -0.020729933, -0.01474154, 0.02014486, -0.00589088, 0.0078009707, -0.031272713, 0.012527441, 0.026156195, 0.028817704, 0.01747188, 0.0027991717, -0.027693445, 0.045107964, -0.01752924, -0.0265233, -0.009263652, 0.040840376, 0.04531446, 0.012676577, 0.015613413, -0.018401112, -0.013445202, 0.022336014, 0.0049157585, 0.008127923, 0.002965516, -0.01964009, -0.0003620855, -0.03528792, -0.0021079828, 0.03260347, -0.022049215, 0.027441062, 0.010089638, 0.022737535, -0.0017939365, 0.015957573, -0.031043274, -0.018137256, -0.0027446798, 0.020672573, -0.027624613, 0.03113505, 0.026225027, -0.014993925, -0.01895177, -0.020924956, -0.012883074, 0.016072294, 0.0063038724, -0.0070839697, -0.0047465465, 0.010846791, -0.008667108, 0.0026428655, 0.018412584, -0.011282727, -0.025903812, -0.029345416, 0.033498287, -0.034737263, 0.017850457, -0.020121915, 0.003814445, 0.005245579, 0.009538981, 0.02817527, 0.015923157, 0.017793097, 0.002932534, -0.033567116, -0.023024336, 0.02624797, -0.011730136, -0.03221342, -0.009619285, -0.0026615076, 0.002994196, 0.044190206, 0.020179275, -0.0062579843, 0.050476868, 0.009120252, 5.8838894e-05, 0.0020563588, 0.006424329, -0.009797101, 0.0063038724, -0.004379442, 0.013961443, -0.011472016, -0.01343373, 0.058828495, 0.01992689, -0.040794488, -0.022519566, 0.012080032, 0.0054922276, 0.012206225, 0.018882938, 0.00147989, 0.028083494, 0.0040524895, -0.037261106, -0.0048067747, 0.027051013, -0.01326165, 0.02156739, -0.02555965, 0.00048361716, -0.0009787063, 0.0038201811, 0.009114516, -0.009418525, -0.0234488, -0.008099243, 0.01291749, 0.010818111, -0.00023320457, -0.008001731, -0.015349557, 0.0011816176, -0.013651699, 0.013904083, 0.06809788, -0.019445067, -0.046645217, 0.00031565968, 0.0206611, 0.017322743, 0.00023159132, 0.012561857, 0.053643145, 0.009785629, -0.010577198, 0.021131452, 0.030859722, -0.03329179, -0.01337637, 0.015969045, -0.0005183917, 0.023632351, -0.034966704, -0.030974442, -0.014523571, 0.001457663, 0.03829359, -0.015051285, -0.030079626, 0.023540575, 0.04102393, 0.028450599, 0.008489291, -0.011632624, 0.017770153, -0.022863727, 0.011047551, -0.01645087, 0.00757153, 0.0047207344, 0.037238162, 0.022737535, -0.021613277, -0.021464141, -0.008535179, -0.011305671, 0.037536435, -0.021211756, -0.002222703, 0.014202355, 0.006487425, -0.0035104367, -0.00074353, -0.009395581, 0.017793097, 0.002954044, 9.4733754e-05, -0.04201052, 0.028955366, 0.03420955, 0.0019100906, -0.011603944, 0.0034071887, -0.03806415, -0.025284322, 0.012378305, 0.000737794, -0.0009830083, -0.027280454, 0.052725382, 0.0024263314, 0.017368631, 0.012607745, -0.008236907, 0.01525778, -0.002238477, 0.007451074, 0.016244374, -0.009751213, 0.009183348, 0.0072789937, -0.0077034584, 0.012619217, -0.0027876997, 0.041987576, 0.01514306, 0.009957709, -0.032511692, -0.02606442, -0.037375826, -0.017552184, -0.01577402, -0.050339203, 0.017884873, -0.0009600643, 0.025307266, -0.00023105356, 0.012435664, 0.031915147, 0.013743475, 0.0055180397, 0.02379296, -0.013915555, -0.003682517, 0.017196551, 0.014810372, 0.032741133, 0.0030400841, 0.0028436258, 0.01520042, -0.008179547, -0.017999593, 0.008076299, 0.019135322, 0.0026356955, 0.0002229873, -0.021303533, 0.00055316626, -0.0035276448, 0.0089596445, -0.021074092, 0.008397515, -0.0030515562, -0.01303221, -0.018366696, -0.013514034, -0.03471432, -0.01661148, 0.026362691, 0.012309473, 0.020913484, 0.0056987237, 0.016978582, 0.005343091, 0.0047494145, -0.020764349, 0.055708107, -0.024160065, -0.019169739, 0.007560058, -0.014064691, -0.0048067747, -0.033016462, -0.027693445, 0.041391034, -0.03170865, 0.035379697, -0.01633615, -0.008018939, 0.0038804093, 0.04212524, 0.0070266095, 0.07360445, 0.019594202, 0.013341954, -0.002912458, -0.009366901, 0.020454604, -0.034461934, 0.0047379425, -0.012676577, 0.00415287, -0.03416366, -0.022829311, 0.01747188, 0.005165275, -0.030194344, -0.015441333, -0.036756337, -0.010462478, 0.018859994, -0.003685385, 0.00028662113, 0.014064691, -0.003570665, 0.0026615076, 0.000745681, -0.03551736, -0.01286013, -0.013582867, 0.007158538, 0.0013221498, 0.004428198, -0.015085701, -0.0131698735, 0.03567797, 0.008925228, 0.009883141, -0.048687235, -0.02413712, 0.048962563, -0.0012031277, 0.021773886, -0.005314411, -0.023081696, -0.011248311, -0.008535179, 0.0011701456, 0.03602213, -0.013296066, 0.017770153, -0.0055610593, 0.014993925, 0.026087364, 0.058599055, 0.0021022467, 0.019307403, -0.01044527, 0.009854461, 0.013949971, 0.025582595, 0.020580797, -6.0452145e-05, -0.04969677, 0.0023646692, -0.007324882, -0.018768217, 0.008328684, 0.016565591, 0.015372501, 0.018251976, 0.038683638, 0.0040696976, -0.008500763, 0.051715847, -0.016037878, 0.02333408, -0.012745409, 0.028886534, -0.018733801, 0.0046662423, -0.01206856, -0.02748695, 0.02886359, 0.0051968233, -0.0025138054, -0.010921359, -0.012401249, -0.0062465123, 0.0075371144, -0.03778882, 0.0076518343, -0.005799104, -0.0018756746, -0.026660964, -0.007984523, -0.032580525, -0.013502562, -0.03432427, 0.0025998454, -0.015464277, -0.03563208, 0.027785221, 0.045888063, -0.009148932, -0.0061203204, 0.03079089, 0.002919628, 0.035815634, -0.016060822, 0.021188812, -0.01883705, -0.013686115, 0.009590605, 0.007554322, 0.021693582, 0.03124977, 0.0038201811, -0.016680311, -0.035609137, 0.018653497, -0.015739605, 0.004562994, 0.02828999, 0.03113505, 0.019261515, 0.011265519, 0.0041012457, 3.5222674e-05, 0.048182465, -0.054331467, -0.013949971, 0.0100035975, 0.039417844, 0.0295978, -0.00885066, 0.0022413451, -0.0068143774, 0.024963105, 0.0064071207, -0.04058799, 0.019376235, -0.0033211485, 0.02755578, 0.008231171, 0.0041385298, 0.006516105, 0.0149480365, 0.03154804, -0.0011414655, -0.0025209754, 0.009475885, 0.014122051, 0.02254251, -0.013273122, 0.01485626, -0.00079085206, -0.02168211, -0.0032035604, -0.03455371, -0.01690975, -0.024894273, 0.024618946, 0.007605946, -0.022645758, -0.019949835, -0.02202627, -0.029345416, 0.019250043, 0.023724128, -0.0007331335, -0.016714728, -0.0014110579, -0.008460611, -0.0083631, 0.005041951, -0.025972644, -0.0077149305, -0.0069463053, 0.0069348332, 0.0040066014, -0.013594339, 0.013307538, -0.018699385, -0.0074682822, -0.01058867, 0.01349109, -0.018183144, 0.027303398, 0.01525778, 0.025789091, 0.010038014, 0.021269117, -0.014431795, -0.035723858, 0.0025510895, -0.005724536, -0.000373199, 0.013858194, 0.004557258, -0.012401249, 0.019972779, 0.019903947, 0.014821844, 0.0086097475, -0.026454467, -0.013123985, -0.022324542, -0.042836506, -0.015108644, 0.0065390486, 0.021693582, 0.04754003, 0.008443403, 0.018412584, 0.014466211, -0.019341819, 0.02452717, 0.022106575, -0.026615076, -0.013284594, 0.027395174, -0.0089596445, -0.008300004, 0.0055008316, -0.018251976, 0.017012998, 0.011265519, -0.022416318, 0.005136595, 0.041069817, -0.024068289, -0.010456742, -0.027922885, -0.09260211, -0.037490547, -0.0005617703, 0.005758952, 0.014603876, -0.015211892, 0.0024263314, 0.00017270762, -0.010800903, -0.016817974, -0.023184944, 0.007818178, 0.00089768524]"
../../../gradio,../../../gradio/gradio/components,model3d.pyi,"""""""gr.Model3D() component.""""""

from __future__ import annotations

from pathlib import Path
from typing import Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.data_classes import FileData
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Model3D(Component):
    """"""
    Creates a component allows users to upload or view 3D Model files (.obj, .glb, .stl, .gltf, .splat, or .ply).

    Guides: how-to-use-3D-model-component
    """"""

    EVENTS = [Events.change, Events.upload, Events.edit, Events.clear]

    data_model = FileData

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        clear_color: tuple[float, float, float, float] | None = None,
        camera_position: tuple[
            int | float | None, int | float | None, int | float | None
        ] = (
            None,
            None,
            None,
        ),
        zoom_speed: float = 1,
        pan_speed: float = 1,
        height: int | str | None = None,
        label: str | None = None,
        show_label: bool | None = None,
        every: float | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: path to (.obj, .glb, .stl, .gltf, .splat, or .ply) file to show in model3D viewer. If callable, the function will be called whenever the app loads to set the initial value of the component.
            clear_color: background color of scene, should be a tuple of 4 floats between 0 and 1 representing RGBA values.
            camera_position: initial camera position of scene, provided as a tuple of `(alpha, beta, radius)`. Each value is optional. If provided, `alpha` and `beta` should be in degrees reflecting the angular position along the longitudinal and latitudinal axes, respectively. Radius corresponds to the distance from the center of the object to the camera.
            zoom_speed: the speed of zooming in and out of the scene when the cursor wheel is rotated or when screen is pinched on a mobile device. Should be a positive float, increase this value to make zooming faster, decrease to make it slower. Affects the wheelPrecision property of the camera.
            pan_speed: the speed of panning the scene when the cursor is dragged or when the screen is dragged on a mobile device. Should be a positive float, increase this value to make panning faster, decrease to make it slower. Affects the panSensibility property of the camera.
            height: The height of the model3D component, specified in pixels if a number is passed, or in CSS units if a string is passed.
            interactive: if True, will allow users to upload a file; if False, can only be used to display files. If not provided, this is inferred based on whether the component is used as an input or output.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            show_label: if True, will display label.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.clear_color = clear_color or [0, 0, 0, 0]
        self.camera_position = camera_position
        self.height = height
        self.zoom_speed = zoom_speed
        self.pan_speed = pan_speed
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: FileData | None) -> str | None:
        """"""
        Parameters:
            payload: the uploaded file as an instance of `FileData`.
        Returns:
            Passes the uploaded file as a {str} filepath to the function.
        """"""
        if payload is None:
            return payload
        return payload.path

    def postprocess(self, value: str | Path | None) -> FileData | None:
        """"""
        Parameters:
            value: Expects function to return a {str} or {pathlib.Path} filepath of type (.obj, .glb, .stl, or .gltf)
        Returns:
            The uploaded file as an instance of `FileData`.
        """"""
        if value is None:
            return value
        return FileData(path=str(value), orig_name=Path(value).name)

    def process_example(self, input_data: str | Path | None) -> str:
        return Path(input_data).name if input_data else """"

    def example_payload(self):
        return file(
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/demo/model3D/files/Fox.gltf""
        )

    def example_value(self):
        return ""https://raw.githubusercontent.com/gradio-app/gradio/main/demo/model3D/files/Fox.gltf""

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def edit(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def clear(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Model3D` component that allows users to upload or view 3D model files such as .obj, .glb, .stl, .gltf, .splat, or .ply. It provides functionalities for setting initial camera position, background color, zoom speed, pan speed, and other visual properties. The component includes methods for preprocessing and postprocessing file data, as well as for handling events like change, upload, edit, and clear. Each event method takes parameters for defining the behavior when the event is triggered, such as the function to call, inputs, outputs, API documentation settings, and concurrency limits.","[-0.05927626, 0.059324924, 0.002614324, -0.023128934, -0.029954463, -0.046355203, -0.011972052, -0.011862552, -0.006606529, -0.008833039, 0.020148087, -0.03920117, 0.005371607, -0.023420935, -0.044676196, 0.017593076, 0.035210487, -0.034139816, 0.05830292, 0.032996144, 0.05470157, 0.008328119, -0.0025261152, 0.014283729, -0.052316897, 0.019405918, -0.012580388, 0.02645045, -0.0229221, -0.010943964, -0.034626484, -0.03297181, -0.051684227, -0.008638371, -0.02674245, -0.0032941394, -0.006025568, 0.03976084, -0.008242953, -0.017726911, -0.025452778, 0.014952899, 0.001183974, 0.0070566973, -0.013273891, 0.04139118, -0.039420173, 0.012848056, -0.03650016, 0.03990684, -0.015074566, -0.014040395, 0.014892065, -0.013480726, 0.0039663506, -0.001805237, 5.52255e-05, -0.00088817056, -0.040953178, 0.008699205, 0.020148087, -0.0043161437, -0.036256824, 0.031171136, 0.0007528158, -0.01361456, -0.036548827, 0.0064361948, -0.008005702, 0.0034948902, -0.011132549, 0.0044986447, -0.006630862, -0.008887789, -0.008066535, -0.0122214705, -0.017507909, 0.040490843, 0.017045574, -0.019235585, 0.010694547, 0.009502208, 0.011929469, 0.01387006, -0.046282202, -0.005021814, -0.022739599, -0.016473738, -0.05567491, -0.00037051464, -0.0834637, 0.015476068, -0.029224461, 0.060054928, 0.056258913, 0.0007474928, -0.030368133, -0.052024893, 0.030246465, 0.04061251, -0.011156882, 0.007823201, -0.021121426, -0.04684187, 0.05849759, 0.01902875, 0.019478919, -0.008875622, 0.014709564, -0.0020546548, -0.040198844, 0.008644454, 0.008042201, 0.040515177, -0.03141447, -0.024807941, 0.005176939, 0.02395627, -0.0047632707, -0.045722533, -0.037473496, 0.043386523, 0.017970245, -0.040125843, 0.042899854, -0.029808464, -0.0021611135, -0.047717877, -0.009684709, -0.008279453, -0.018493414, -0.008090869, 0.052803565, -0.082101025, -0.007154031, -0.013030557, -0.060784932, -0.025428444, -0.03494282, 0.039712172, -0.010061877, -0.030343799, 0.007184448, -0.0134320585, -0.023214102, -0.025988113, -0.018116245, 0.061417602, -0.026523449, 0.004814979, -0.019649252, 0.00975771, 0.037619498, -0.015597735, -0.0058369837, -0.02118226, 0.066965625, -0.013200891, 0.021973096, -0.03579449, -0.0228491, -0.002965638, 0.03737616, -0.006977614, -0.008924289, 0.04090451, -0.0109804645, -0.010341712, -0.027886122, -0.042267185, 0.04484653, 0.035526823, -0.034018148, -0.011716551, 0.03333681, 0.010524212, 0.0048727714, -0.06346161, -0.008242953, -0.023274936, 0.0057183583, 0.016887408, -0.042048182, -0.029832797, -0.00031728524, 0.05056489, -0.040052842, 0.028664792, -0.045041196, 0.03946884, -0.022532765, 0.02121876, -0.0113333, -0.011655717, 0.003088826, -0.02681545, 0.015695069, 0.015792402, 0.04822888, 0.015488234, 0.019710086, 0.022654433, 0.004638562, -0.03000313, -0.012330971, -0.021875761, 0.028543124, 0.057913586, -0.04316752, 0.013067057, -0.015171899, 0.021790596, 0.025501445, -0.010013211, -0.05674558, -0.019539751, -0.0230681, 0.024236105, -0.0027648872, 0.02395627, -0.033750482, 0.017739078, 0.05017555, -0.020123754, 0.0062019853, -0.026499115, 0.0038446835, -0.021887928, 0.062974945, -0.039225504, 0.02525811, -0.0063510276, -0.0035374737, -0.0034005982, 0.03163347, -0.06365628, -0.00916154, -0.029735463, 0.020719923, 0.019454585, 0.0078049507, -0.0152084, -0.0304898, -0.0019162584, 0.06657629, 0.042121183, 0.00461727, -0.016923908, -0.025623111, 0.029881464, 0.03494282, -0.014660898, -0.02017242, -0.034553483, 0.009386624, 0.01383356, -0.024722775, 0.050418887, -0.011369799, -0.02017242, -0.02076859, -0.020829424, -0.002329927, -0.009246707, -0.005657525, 0.074508995, 0.003003659, 0.008760038, -0.010384295, -0.0078171175, 0.049640216, -0.012884556, 0.017155075, -0.030027464, -0.031244136, 0.036086492, 0.023201935, 0.055820912, 0.0534849, 0.020002088, 0.008942539, 0.016242571, 0.009599542, 0.030733135, -0.034577817, 0.029394794, -0.0012029844, 0.0012212344, -0.0039876425, -0.04917788, 0.045722533, -0.033653148, -0.01977092, -0.024783608, 0.016631907, 0.034358818, -0.007202698, -0.012002469, -0.009672542, -0.011607051, -0.0080300355, -0.008899955, -0.019430252, -0.0060134013, -0.028883792, 0.036475826, 0.0018599873, 0.002148947, 0.019746587, -0.022447597, 0.010694547, -0.00539594, -0.03623249, -0.039858174, -0.053728234, -0.010286962, 0.014855565, 0.097966425, -0.022350265, 0.044822197, 0.019186918, -0.020379256, -0.0071296976, -0.042753853, -0.014016061, -0.018444747, -0.056258913, 0.018201413, -0.014308062, -0.052122228, 0.012288387, -0.011114298, -0.02985713, -0.03156047, 0.07480099, -0.0032059306, 0.0007414095, 0.046720203, -0.018237913, 0.008443704, -0.061660934, -0.025525779, -0.026280114, 0.04725554, 0.005675775, 0.03404248, -0.011345467, 0.019223418, 0.037911497, -0.042340185, -0.026839783, -0.055188242, 0.0014098187, 0.04180485, 0.038154833, 0.016668405, -0.04477353, -0.008595788, -0.016863074, -0.0054537323, -0.012282304, 0.034845486, -0.01205722, 0.008236869, -0.023846772, 0.034480482, -0.07265965, -0.04625787, -0.039566174, -0.04362986, -0.019016583, 0.02243543, -0.017410576, -0.0016668406, -0.017045574, 0.0015345275, 0.012087636, 0.021279592, -0.015536902, -0.03749783, 0.04866688, 0.0047450205, 0.027253453, -0.06594362, -0.019345084, -0.020865925, 0.010226128, -0.00018991489, -0.0038538084, -0.0040819347, 0.03557549, -0.004276602, -0.015184066, -0.012142386, 0.03912817, 0.014259395, 0.0834637, 0.013103557, 0.017885078, -0.019199084, 0.0017276742, -0.022459764, -0.029516462, -1.7679764e-05, -0.00847412, -0.04017451, 0.0152084, 0.031171136, 0.0230316, -0.006290194, 0.057134915, -0.054312237, 0.028859459, -0.025550112, 0.0051738974, -0.020707756, -0.0018995291, -0.02080509, 0.019040916, 0.08112769, -0.0014197042, -0.0027694495, 0.009204123, -0.0016409863, -0.027837455, 0.045235865, 0.040247507, -0.037546497, 0.027496787, -0.06866897, -0.00919804, 0.0141742285, -0.0041579767, 0.042924188, -0.016011404, -0.067890294, 0.024528107, -0.02589078, 0.025209444, 0.029078461, -0.031730805, -0.0017139866, -0.006782946, -0.024077939, 0.0306358, -0.031390138, -0.031122468, 0.032728475, -0.019418085, -0.014344563, -0.04316752, 0.03508882, -0.04161018, 0.0026629907, 0.035259154, -0.02344527, 0.01828658, -0.034821153, 0.04216985, 0.029200127, -0.00095204584, 0.04462753, 0.01998992, 0.022788266, 0.0014508814, 0.013979561, 0.007944868, 0.02645045, -0.04117218, -0.027837455, -0.0020835507, 0.01846908, 0.054847572, -0.0030660133, -0.026401782, -0.022484098, -0.0043374356, -0.037400495, -0.025501445, 0.010883131, 0.044797864, 0.025988113, -0.017520076, -0.012994057, -0.0009018581, 0.12322454, -0.012324887, -0.035137486, -0.014271562, 0.02210693, -0.034699485, -0.0033975565, 0.019430252, -0.011661801, 0.02132826, 0.008413287, -0.08005702, -0.036719162, -0.0021352593, 0.0064179446, 0.03156047, -0.023858938, -0.02477144, -4.7573776e-05, -0.016060071, -0.013237392, 0.006150277, -0.016400738, 0.014283729, 0.024747107, -0.00045130926, -0.0024470314, 0.04229152, 0.01616957, 0.013711893, -0.032144472, -0.019685753, 0.037181497, -0.01803108, 0.0129332235, -0.0126898885, 0.03316648, 0.00063038815, -0.030222133, -0.028640458, -0.002728387, -0.020342756, -0.06034693, -0.020476589, -0.0376925, 0.014721731, -0.05085689, 0.0029854088, -0.042705186, -0.026353115, 0.0032302642, 0.011321133, 0.002489615, 0.014721731, -0.034261484, 0.004504728, 0.001863029, 0.0075129494, 0.009271041, -0.002024238, 0.030295132, -0.022411099, -0.014113395, 0.0027405536, 0.038544167, 0.042388853, -0.025160776, -0.0073486986, -0.016047904, 0.012860223, 0.046452537, -0.020160254, 0.023360102, -0.014417563, -0.0067342795, -0.010311295, 0.015536902, 0.03793583, 0.010943964, 0.033555813, -0.03126847, -0.0115158, -0.034967154, -0.016850907, 0.018615082, -0.033069145, 0.0304168, 0.0024470314, 0.027326453, -0.025087776, 0.003090347, 0.018371748, -0.0056879413, -0.01620607, -0.042705186, 0.010566796, -0.012367471, -0.0058004837, 0.011467134, -0.036913827, 0.019466752, 0.010414712, 0.02900546, -0.011369799, 0.04180485, 0.017240241, -0.047644876, -0.018018913, 0.004799771, 0.00066498725, 0.013407725, 0.014867731, 0.0068985303, -0.037546497, -0.004398269, -0.0004482676, 0.0048241043, -0.010670213, 0.031122468, -0.009191956, -0.00025626153, 0.008218619, -0.016826574, -0.057767585, -0.010883131, -0.0039967676, 0.0681823, -0.009496124, -0.06000626, 0.0042036017, -0.024747107, -0.010755381, 0.0023770728, 0.06385095, 0.0062658605, -0.021668928, 0.040807176, 0.07100498, -7.1289374e-05, 9.386434e-05, 0.024138773, -0.0005052991, -0.023603436, -0.029613797, 0.0044438946, -0.01966142, -0.0152084, 0.049786218, 0.00075623766, 0.01146105, 0.026912784, 0.0042613936, -0.023189768, 0.0066004456, -0.041585848, -0.01758091, 0.018785415, 0.049713217, -0.04136685, 0.030660134, -0.0045746868, -0.05163556, 0.020829424, -0.015147566, -0.025477111, -0.011023048, -0.008206452, -0.016437238, -0.0001218573, 0.008249036, -0.0096786255, -0.014429729, 0.023226269, 0.0115705505, 0.037789833, -0.021790596, -0.0014470792, -0.026985785, 0.0035861407, -0.016607573, 0.03396948, -0.005064397, -0.012446554, -0.01312789, 0.028591791, -0.02596378, 0.01973442, -0.017714744, 0.044311192, 0.027375119, -0.0029732422, -0.0021200508, -0.05080822, 0.020354923, 0.035332154, 0.020865925, -0.013505059, -0.033920813, 0.021851428, 0.017142909, -0.017714744, -0.020671258, 0.009398791, -0.0007330449, -0.035964824, -0.009733376, -0.0058156922, 0.0051830225, 0.0015185587, 0.0014698919, 0.0147947315, -0.0152084, -0.032850143, 0.017483577, -0.040150177, 0.018821916, 0.0018569456, -0.036451492, -0.055285573, 0.004875813, -0.019929087, -0.007044531, 0.020026421, 0.060054928, -0.019637085, 0.0009155457, 0.02214343, -0.008656621, 0.016449405, 0.0010752339, -0.009897627, -0.00345839, 0.04195085, -0.00014020244, 0.028762126, -0.037546497, -0.01279939, -0.027034452, -0.037254497, 0.0036743493, -0.011053465, -0.03163347, 0.011345467, -0.025379777, -0.025574446, 0.015561234, 0.043897524, 0.0016318613, -0.022873433, -0.017228074, 0.0033945148, 0.004702437, 0.0057274834, 0.011856468, 0.016157404, 0.00827337, 0.012251887, -0.04487086, 0.032120142, 0.026158448, -0.04470053, 0.004011976, 0.0046993955, 0.007896201, -0.008224702, 0.015670735, 0.00849237, -0.020403588, -0.0010212441, -0.029467795, -0.010007127, -0.011673967, -0.017532242, -0.004921438, -0.0121302195, 0.03516182, 0.03523482, 0.022642266, -0.013456392, -0.017167242, -0.013042724, 0.01984392, 0.012403971, 0.033507146, -0.018943584, -0.00680728, 0.008334203, -0.023992771, 0.011521883, 0.051392224, -0.013334725, -0.023712937, 0.007920534, 0.036524493, -0.022277264, -0.014064728, 0.010755381, 0.050710887, -0.0383495, 0.003592224, 0.002138301, 0.0020105503, -0.0013755998, -0.012282304, -0.026620783, -0.00923454, 0.005371607, -0.006618696, 0.01225797, 0.0078049507, -0.04129385, 0.023725104, -0.062634274, -0.03601349, 0.016875241, -0.012063303, -0.020452255, -0.022520598, 0.011880802, 0.0070871143, 0.05037022, -0.02013592, -0.0035496405, -0.032022808, 0.0011048903, -0.0077502006, 0.029394794, -0.048058543, 0.021827096, -0.022277264, -0.047012206, 0.0064970283, 0.0617096, 0.016047904, -0.023262769, 0.035624154, -0.021632427, -0.036451492, -0.017921578, 0.0042340183, 0.040928844, 0.019491086, 0.005462857, 0.011047382, 0.0029215335, 0.025696112, -0.0386415, 0.0072148647, 0.009100706, 0.024698442, 0.0055541075, -0.0308548, 0.01694824, -0.0059647346, -0.015038066, -0.026182782, 0.01361456, -0.012604722, 0.004945772, 0.025696112, -0.005493274, -0.042145517, 0.008011785, -0.023019433, 0.016412904, 0.00045473114, -0.014040395, 0.009131123, -0.019211251, 0.031803805, -0.021522928, 0.0006201225, -0.035551157, -0.014295896, -0.022776099, -0.0022858225, -3.231785e-05, -0.009094623, -0.0017732994, 0.0305628, -0.066381626, -0.022642266, -0.027569788, 0.068717636, 0.005788317, 0.015828902, 0.026158448, 0.0074642827, 0.011941635, 0.043313522, -0.0037868915, -0.022374598, -0.014952899, 0.016485905, 0.008717455, -0.015695069, 0.007068864, 0.0127507225, -0.01079188, -0.015390901, -0.0055419407, -0.008315953, 0.023128934, 0.009763793, 0.012233636, -0.0033488895, -0.0070566973, -0.0085897045, -0.007780617, -0.016108736, 0.01783641, 0.004221852, 0.032631144, -0.026353115, -0.010822297, 0.021790596, 0.021267427, -0.008614037, 0.0048727714, -0.035964824, -0.021024091, -0.016656239, -0.00070871145, -0.022411099, -0.043605525, -0.01576807, -0.040052842, 0.010372128, 0.07032364, 0.003278931, 0.01591407, -0.01825008, -0.005548024, 0.007701534, -0.04406786, -0.001758091, 0.009861127, 0.03226614, 0.015111066, 0.01977092, -0.011886885, 0.03277714, 0.011132549, 0.026620783, 0.020598257, 0.03209581, -0.022131264, 0.010305212, -0.044457193, 0.024138773, -0.054166235, -0.009477874, 0.01573157, -0.0033002228, 0.008267286, -0.013261724, 0.011582717, 0.022496264, -0.020257588, -0.0019542794, 0.0023208018, 0.010943964, 0.044116527, 0.0045199366, -0.014089062, -0.0041640596, 0.02451594, 0.012270137, -0.040636845, -0.047620542, -0.035818823, 0.018542081, 0.0035983075, 0.014940732, -0.028981127, -0.048983213, 0.00048210626, 0.0021154885, 0.036086492, -0.0041640596, -0.03409115, 0.03832517, 0.001354308, 0.0020774675, 0.027569788, -0.0059069423, 0.03404248, 0.032168806, 0.00045206968, -0.01218497, -0.004957938, 0.012178887, -0.0032758892, 0.01924775, -0.007999619, 0.019576252, 0.026304448, 0.009569125, -0.022982934, -0.03630549, -0.0085592875, 0.041123513, 0.011102132, 0.013711893, 0.02540411, -0.03572149, 0.02666945, 0.0014181833, -0.0051647727, 0.018152745, -0.010305212, 0.011065632, 0.008145619, 0.02645045, -0.04165885, -0.032387808, -0.043459523, -0.0018706332, -0.019491086, -0.0034979319, -0.022776099, 0.036281157, -0.022155596, -0.006983697, -0.023542603, 0.006576112, -0.0070262807, -0.0027405536, -0.011917302, 0.005179981, -0.09086107, -0.024832275, 0.01973442, -0.021681095, -0.03601349, -0.019162584, -0.0057244417, -0.016631907, -0.02971113, -0.02017242, 0.00849237, 0.04032051, 0.0061441935, 0.03233914, 0.018627249, -0.010785797, 0.011643551, -0.025671778, -0.008991206, -0.005076564, 0.031219803, 0.024102272, 0.0066673625, 0.016364237, -0.015743736, -0.043337855, 0.0070262807, 0.0053259814, 0.018736748, 0.008620121, 0.004288769, 0.0038538084, -0.020683425, 0.008236869, -0.0075859497, -0.016790073, 0.051051557, -0.006074235, 0.029832797, 0.027545454, -0.017191576, -0.01576807, -0.020221088, 0.037473496, 0.015865402, -0.0037078077, -0.018870583, 0.024175271, -0.034918487, 0.02228943, 0.015050232, 0.014697397, -0.0034370983, 0.0230681, 0.005207356, -0.019722253, 0.008151703, 0.04362986, -0.0006106172, -0.03557549, 0.026134115, 0.0061259433, -0.03920117, 0.035770155, 0.000950525, -0.014016061, 0.0038629335, -0.014308062, 0.004389144, 0.021766262, 0.018201413, -0.013213058, 0.0034370983, 0.0452602, -0.0016136112, -0.037181497, 0.04776654, -0.00910679, -0.018055413, -0.015609901, 0.024880942, -0.012458721, 0.014977232, -0.012264053, 0.0020637799, 0.0040454343, 0.015390901, -0.019126084, 0.008358536, -0.0075433664, -0.010621547, -0.0026645116, -0.005179981, -0.0055084825, 0.004732854, 0.023384435, 0.002585428, 0.043921858, -0.012306637, 0.017264575, 0.0010790359, -0.0030112632, 0.0039207255, 0.015585568, -0.01062763, 0.012349221, -0.009879377, -0.03742483, 0.009258874, 0.019722253, -0.02730212, 0.023712937, 0.01806758, -0.011150799, 0.008741789, 0.00018839406, -0.020671258, -0.005806567, -0.019722253, -0.013444225, 0.002976284, 0.0020440088, -0.005189106, -0.018420413, -0.020525256, 0.011497551, -0.024442941, 0.013578059, 0.026353115, -0.0057731085, -0.0024409483, -0.009070289, 0.03197414, -0.0007794305, -0.00840112, -0.013419892, 0.053922903, 0.0304168, 0.053728234, 0.054652907, -0.009191956, -0.0013946103, 0.0027800954, 0.0035465988, -0.02114576, -0.036816493, 0.023128934, -0.013979561, -0.024503773, -0.031171136, 0.0077137, -0.007482533, 0.008699205, 0.022362432, 0.04017451, 0.0039207255, 0.0052986066, -0.019186918, 0.048155878, 0.019053083, -0.020537423, 0.024540273, -0.005283398, 0.004808896, 0.022824766, 0.011941635, -0.018773248, 0.017179409, 0.0024303023, -0.00012451877, 0.01595057, -0.031244136, -0.00050453865, -0.006977614, 0.037741166, 0.0025139486, 0.011655717, -0.026864117, -0.006928947, -0.013918728, 0.0065700286, -0.022374598, 0.014417563, 0.02985713, 0.00840112, 0.0108587975, 0.011473217, -0.010731047, 0.010244378, 0.02440644, -0.010755381, -0.020038588, -0.02525811, -0.0043404773, -0.03404248, 0.046452537, 0.0036560993, 0.021267427, -0.044457193, 0.0007345657, 0.008139536, 0.044968195, 0.04917788, 0.016047904, 0.02033059, -0.0032302642, 0.01661974, 0.010968298, 0.016863074, 0.013213058, 0.0049001463, 0.016315572, 0.0070506143, 0.008115202, 0.027545454, 0.014064728, -0.039371505, 0.0037138911, -0.004884938, -0.007233115, 0.0005710754, 0.011710468, 0.031025136, 0.01906525, 0.016461572, 0.0015710277, -0.00503398, 0.040588178, 0.0018189246, -0.048520878, 0.03360448, 0.0072270315, -0.014016061, -0.030441133, 0.0036469742, 0.0306358, 0.003382348, 0.01613307, -0.015646402, -0.020342756, -0.009052039, -0.024941776, -0.011205549, 0.017130742, 0.008772205, -0.012957556, -0.023493936, 0.0028165956, -0.038787503, 0.024309106, 0.0054111485, -0.042461853, 0.040004175, -0.004848438, -0.003269806, -0.013602393, 0.0039420174, 0.011832135, 0.008747872, -0.011345467, 0.032509476, -0.004903188, -0.029686796, -0.003345848, -0.005733567, -0.02837279, -0.013310391, 0.0071601146, 0.01638857, -0.045795534, -0.013894394, 0.018177079, -0.036548827, 0.0037655998, 0.029930132, -0.039955508, 9.048998e-05, 0.0073791156, -0.0007490137, 0.016315572, -0.013322558, 0.0080300355, 0.0014668502, -0.018481247, -0.0015710277, -0.033142146, 0.0056696916, -0.0116009675, 0.01229447, -0.0019299459, -0.03175514, -0.02581778, 0.018383913, 0.0006646071, -0.020683425, -0.0009048998, -0.007884035, 0.010761464, -0.017714744, 0.006290194, -0.0019664462, 0.010578963, -0.02774012, 0.000738748, 0.0046446454, -0.0068559465, 0.022021763, -0.027886122, 0.010171378, 0.008279453, -0.019418085, -0.03630549, -0.009076373, -0.003555724, 0.035916157, -0.015500401, 0.02808079, 0.017313242, -0.004389144, -0.002024238, -0.040417843, -0.025525779, 0.032290474, -0.009112873, -0.011637468, 0.020853758, 0.011053465, -0.010074044, 0.040247507, -0.010110544, 0.021522928, -0.013809227, -0.0024379066, 0.003926809, 0.0014508814, -0.008340286, 0.04796121, -0.009538708, 0.026523449, 0.05163556, -0.0091797905, 0.00691678, 0.0123431375, -0.040417843, -0.017313242, 0.023384435, -0.0051252306, 0.03282581, 0.02069559, 0.043897524, 0.045357533, -0.010724964, 0.01906525, 0.035137486, 0.0039998093, -0.02525811, 0.018602915, 0.020999758, -0.011363716, -0.0050796056, 0.001377881, 0.0009246707, -0.005064397, -0.035843156, 0.030100465, 0.02458894, 0.03494282, -0.0050796056, -0.03467515, 0.020318422, -0.0054658987, -0.019272083, 0.002603678, 0.010293045, -0.029419128, -0.022557098, 0.019904753, 0.042461853, 0.016960407, 0.0034249316, -0.024382107, 0.007482533, 0.010767547, 0.0460632, -0.0035891824, -0.008565371, 0.0080300355, 0.012069386, -0.022155596, 0.011363716, 0.015695069, 0.010560713, 0.018201413, -0.022301598, 0.026693784, -0.020403588, 0.019272083, 0.03309348, -0.017483577, 0.008163869, -0.0077623674, 0.029954463, -0.0053776903, 0.0011816927, -0.044481527, 0.03389648, -0.02625578, 0.013103557, 0.024041438, -0.009435291, 0.024686275, 0.013383392, 0.02415094, -0.0052590645, -0.027423786, 0.008620121, 0.0009482437, 0.02415094, 0.0050491886, 0.012848056, -0.010244378, 0.01966142, 0.012969723, -0.000258923, 0.016790073, -0.0046659373, 0.009569125, 0.006247611, -0.043118853, 0.0072270315, -0.024248272, 0.037254497, 0.007488616, -0.034480482, 0.018420413, -0.01694824, 0.010140961, 0.005380732, -0.0012668597, -0.048253212, -0.028762126, -0.006223277, 0.013529392, -0.012038969, -0.034261484, 0.004039351, -0.034748152, -0.022715267, -0.011211633, -0.009490041, 0.011394133, 0.03486982, -0.0021018009, 0.02051309, 0.0052408148, 0.0057822336, 0.05470157, 0.028056456, -0.0034066816, -0.03460215, 0.026012447, 0.011077798, -0.002214343, 0.032485142, 0.0034705568, -0.011838218, -0.0021641552, -0.008267286, -0.019186918, 0.052365564, -0.018104078, -0.00459902, -0.02766712, -0.02808079, 0.0031542222, 0.009563042, -0.006271944, 0.03309348, -0.021729762, -0.014819065, -0.018359581, -0.0050704805, 0.007774534, 0.023141101, 0.005417232, -0.002652345, 0.0028029082, -0.012178887, -0.0061624437, 0.016303405, -0.005949526, -0.021693261, -0.0011299842, 0.0076528667, -0.031609137, 0.012227553, 0.017069908, 0.015196233, -0.009453542, -0.018152745, 0.02659645, -0.0033032645, 0.001890404, -0.007111448, 0.02033059, -0.0068863635, -0.0022599683, -0.013930894, -0.04039351, -0.01779991, -0.010931797, -0.003479682, 0.0003425692, -0.018955749, -0.022520598, 0.031171136, -0.006661279, 0.042972855, 0.014843398, -0.011503633, 0.020829424]"
../../../gradio,../../../gradio/gradio/components,code.py,"""""""gr.Code() component""""""

from __future__ import annotations

from pathlib import Path
from typing import Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.events import Events


@document(""languages"")
class Code(Component):
    """"""
    Creates a code editor for viewing code (as an output component), or for entering and editing code (as an input component).
    """"""

    languages = [
        ""python"",
        ""markdown"",
        ""json"",
        ""html"",
        ""css"",
        ""javascript"",
        ""typescript"",
        ""yaml"",
        ""dockerfile"",
        ""shell"",
        ""r"",
        ""sql"",
        ""sql-msSQL"",
        ""sql-mySQL"",
        ""sql-mariaDB"",
        ""sql-sqlite"",
        ""sql-cassandra"",
        ""sql-plSQL"",
        ""sql-hive"",
        ""sql-pgSQL"",
        ""sql-gql"",
        ""sql-gpSQL"",
        ""sql-sparkSQL"",
        ""sql-esper"",
        None,
    ]

    EVENTS = [
        Events.change,
        Events.input,
        Events.focus,
        Events.blur,
    ]

    def __init__(
        self,
        value: str | Callable | tuple[str] | None = None,
        language: Literal[
            ""python"",
            ""markdown"",
            ""json"",
            ""html"",
            ""css"",
            ""javascript"",
            ""typescript"",
            ""yaml"",
            ""dockerfile"",
            ""shell"",
            ""r"",
            ""sql"",
            ""sql-msSQL"",
            ""sql-mySQL"",
            ""sql-mariaDB"",
            ""sql-sqlite"",
            ""sql-cassandra"",
            ""sql-plSQL"",
            ""sql-hive"",
            ""sql-pgSQL"",
            ""sql-gql"",
            ""sql-gpSQL"",
            ""sql-sparkSQL"",
            ""sql-esper"",
        ]
        | None = None,
        *,
        every: float | None = None,
        lines: int = 5,
        label: str | None = None,
        interactive: bool | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default value to show in the code editor. If callable, the function will be called whenever the app loads to set the initial value of the component.
            language: The language to display the code as. Supported languages listed in `gr.Code.languages`.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            interactive: Whether user should be able to enter code or only view it.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        if language not in Code.languages:
            raise ValueError(f""Language {language} not supported."")

        self.language = language
        self.lines = lines
        super().__init__(
            label=label,
            every=every,
            interactive=interactive,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the code
        Returns:
            Passes the code entered as a `str`.
        """"""
        return payload

    def postprocess(self, value: tuple[str] | str | None) -> None | str:
        """"""
        Parameters:
            value: Expects a `str` of code or a single-element `tuple`: (filepath,) with the `str` path to a file containing the code.
        Returns:
            Returns the code as a `str`.
        """"""
        if value is None:
            return None
        elif isinstance(value, tuple):
            with open(value[0]) as file_data:
                return file_data.read()
        else:
            return value.strip()

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    def example_payload(self) -> Any:
        return ""print('Hello World')""

    def example_value(self) -> Any:
        return ""print('Hello World')""

    def process_example(self, value: str | tuple[str] | None) -> str | None:
        if isinstance(value, tuple):
            return Path(value[0]).name
        return super().process_example(value)
","The code defines a `Code` component that can be used in Gradio interfaces for viewing or entering and editing code. It supports various programming languages such as Python, Markdown, JSON, HTML, CSS, JavaScript, etc. The component can be set to be interactive or read-only. It includes methods for preprocessing and postprocessing code inputs and outputs, as well as providing API information, example payloads, and example values. The component also has methods for processing example values and rendering the component.","[-0.032686953, 0.014741887, -0.013285899, 0.0010586253, 0.040306628, -0.025407007, -0.005830022, -0.0016546707, 0.012115041, -0.0026420131, 0.024921676, 0.0014355141, -0.04028236, -0.00963986, 0.009973524, -0.018260527, 0.007916939, 0.0027178458, 0.0027193625, 0.045620985, -0.0062425523, -0.06391791, -0.0033912407, 0.066587225, -0.0003306308, -0.02882858, -0.04833883, 0.0700816, 0.009542794, 0.0013164566, -0.022300897, -0.032541353, 0.018879322, 0.014754021, 0.012339506, -0.065810695, 0.012982568, -0.0012095325, 0.032589886, -0.01849106, -0.031279493, -0.028100586, -0.035574663, 0.008426536, -0.048217498, 0.05222147, -0.02744539, 0.00564499, -0.004631865, 0.034870934, -0.030478701, 0.008402269, -0.019085588, -0.023405021, -0.04200528, 0.017884396, -0.07993379, 0.05440545, -0.015130151, -0.018867189, 0.01182991, -0.0048168967, -0.032031756, 0.035550397, -0.05144494, 0.013334432, -0.020820642, -0.017641732, 0.009997791, -0.004146535, 0.032929614, 0.009712659, 0.026741663, -0.050183084, -0.013795495, -0.013018968, -0.036229856, 0.004880596, 0.050086018, -0.009378995, -0.005623757, 0.02051731, -0.045062855, -0.021439437, -0.013807628, 0.020335311, -0.006837081, 0.028149119, -0.02365982, -0.049163893, -0.04882416, -0.014474956, -0.056152638, 0.070955195, 0.0173748, 0.032978147, -0.07284798, -0.016998671, 0.008074672, 0.03717625, 0.0217185, -0.043752465, -0.012193907, -0.025552604, 0.062364858, 0.010337521, 7.1424976e-05, 0.018855056, -0.033851743, 0.0070918794, -0.025552604, 0.015906679, -0.02557687, 0.022033965, -0.011387046, -0.049018294, 0.046130583, -0.039675698, -0.034725334, -0.034385603, 0.007170745, 0.029532308, -0.025140075, -0.04166555, -0.0028877114, -0.018782256, -0.01662254, -0.034579735, -0.023223022, 0.009409328, -0.023368621, -0.008001872, -0.0047562304, -0.03455547, -0.041422885, 0.043000206, -0.071294926, -0.032468554, -0.011180782, 0.020262511, 0.02958084, -0.034240007, 0.024727546, 0.021245304, -0.02242223, -0.067849085, -0.06450031, 0.021730633, -0.07362451, 0.0031698092, -0.0045408653, 0.05557024, -0.0351136, -0.011120115, 0.006027187, 0.022288764, 0.026644597, -0.01640414, 0.002365982, -0.013577096, -0.010586252, 0.028949913, 0.009045331, 0.0028877114, 0.008414403, -0.008735933, -0.0114355795, 0.036860786, -0.032589886, 0.043339938, 0.010707585, -0.03559893, -0.052706797, 0.01651334, 0.023380755, -0.044820193, 0.005320426, -0.029774973, -0.0043376335, -0.0039554364, -0.010719718, -0.0029423109, -0.028513117, 0.024873143, 0.013455764, -0.01658614, -0.009912858, -0.047440972, -0.05780276, -0.008711667, 0.021657836, -0.0027648623, 0.025552604, 0.030988296, 0.0071646785, -0.052997995, 0.044334862, -0.034870934, -0.030721366, -0.0064002844, 0.04484446, 0.036084257, -0.0088148, -0.0055479244, -0.0059695547, -0.01954665, -0.016088678, -0.03613279, 0.03538053, -0.026960062, 0.010404254, 0.017581066, -0.0063820845, -0.009724792, -0.026960062, -0.019121988, 0.023186624, 0.03863224, 0.00834767, -0.01272777, -0.07697328, 0.0077895406, -0.006509484, -0.027057126, 0.02979924, 0.0055084913, 0.041617017, -0.024800343, 0.037977044, -0.003567173, 0.049697753, -0.0030317935, 0.01651334, -0.0027421124, 0.06076327, -0.012800569, -0.00068476977, -0.035817325, 0.037467446, 0.01976505, -0.03462827, -0.027202725, 0.030163236, -0.01482682, 0.031279493, 0.036666654, -0.021208905, -0.034773868, -0.00035243272, 0.047974832, 0.017484, -0.0069159474, 0.071440525, -0.009597394, -0.0048502632, 0.007929073, 0.011198982, 0.03351201, 0.02231303, -0.03208029, -0.014317224, -0.06338405, -0.036885053, 0.014365757, 0.016197877, 0.04414073, 0.016307076, 0.02365982, -0.006564083, -0.01534855, 0.020420244, -0.024873143, 0.025843803, 0.005496358, 0.020796375, 0.0042891004, 0.05057135, 0.05387159, 0.017289868, 0.006564083, -0.040452223, 0.023089558, 0.01128998, 0.039069034, -0.04904256, 0.022446496, 0.0016850039, 0.009451794, 0.00820207, -0.067703485, 0.05236707, 0.0175204, 0.04443193, -0.03394881, -0.026304865, 0.010167656, 0.0612486, 0.0031061096, 0.053434793, 0.003558073, -0.022131031, 0.0117025105, 0.0067521487, -0.02841605, -0.025940869, 0.015846012, -0.006891681, -0.01631921, 0.005311326, -0.011484113, 0.02751819, 0.015955212, -0.0045347987, -0.0044528996, -0.08857266, 0.0019185687, 0.02564967, 0.019934915, -0.014923886, -0.011053382, 0.028173385, 0.0012383489, 0.04855723, -0.04234501, -0.060180873, -0.012048308, -0.034943733, 0.0035338064, 0.03729758, -0.028391784, 0.03737038, 0.012921901, -0.0041829348, 0.045887917, 0.027057126, -0.010343588, -0.05207587, 0.060423538, -0.047780704, 0.04020956, -0.033924542, 0.0020201846, 0.0011420413, 0.031328026, 0.0037188383, 0.039505832, -0.03654532, 0.0060484204, -0.0055843242, -0.037879977, -0.013188832, -0.030090436, 0.014317224, -0.017787332, 0.056395303, -0.005954388, -0.047271106, -0.026935795, -0.06226779, -0.020213978, -0.04979482, 0.0031455427, -0.012812702, 0.044262063, -0.035356265, 0.011047316, -0.07124639, -0.04096182, 0.012958301, -0.043558333, 0.016428407, 0.016950138, -0.023866085, -0.046664443, -0.03538053, -0.008105005, 0.006855281, -0.007910873, -0.021694234, -0.022846892, 0.018090662, 0.019534517, 0.004907896, 0.04159275, 0.019825716, 0.013382965, 0.022288764, 0.018114928, -0.0026935795, 0.03096403, -0.006843148, -0.027542457, -0.0077228076, -0.031425092, 0.041544218, -0.0040434026, 0.029508041, 0.012667104, 0.022082498, -0.0022021832, -0.0015030052, -0.03766158, -0.004046436, 0.03778291, 0.013480031, -0.03591439, 0.066441625, 0.016962271, 0.00011365434, -0.012958301, 0.032856815, 0.025140075, 0.030114703, -0.00060742034, 0.0173384, -0.051056676, 0.0008857266, -0.029241111, 0.01830906, 0.034870934, 0.012357706, -0.02785792, -0.020565843, -0.07842927, 0.017144268, 0.037151985, 0.0070858127, -0.009682327, -0.0005441, -0.04979482, 0.0025358472, 0.019000655, 0.018248394, 0.0005562333, 0.010513453, -0.025212875, 0.029508041, 0.0152393505, 0.038049843, 0.02478821, -0.05057135, 0.033050947, -0.011562979, 0.004741064, -0.032832548, -0.015858145, -0.0043164003, -0.02586807, 0.0013210066, -0.040136762, 0.0052476265, -0.0033882074, -0.007134346, -0.010173722, 0.016840938, 0.00174567, 0.03208029, 0.020796375, 0.016270677, 0.016197877, -0.01172071, 0.05222147, -0.058385156, 0.029192578, -0.01976505, -0.016877338, 0.013407231, 0.013091767, 0.013213099, -0.0052658264, 1.2903417e-05, 0.02557687, 0.0042982004, -0.015287884, -0.010816785, -0.009021064, 0.0122363735, -0.027057126, -0.056298237, -0.0005433417, -0.03717625, -0.012739903, 0.020857042, -0.0008978598, 0.0043588667, 0.090853706, -0.04054929, -0.03829251, 0.010586252, -0.01879439, -0.018102795, -0.016015878, 0.019534517, -0.010919916, 0.00962166, 0.017095737, -0.06464591, 0.0129704345, -0.021572903, -0.035065066, 0.00038731578, -0.00034807235, -0.0024994477, 0.06178246, -0.009846125, -0.00056684983, 0.06367525, 0.015530548, 0.027348325, 0.00829307, -0.0010677252, -0.013577096, 0.017678132, 0.0024524312, 0.016015878, -0.050328683, -0.04668871, 0.023756886, -0.049843352, 0.008232404, 0.0001098627, 0.013031101, -0.013795495, -0.018818656, 0.00022863576, -0.0072132116, -0.01132638, -0.042320743, 0.002567697, -0.021208905, -0.017010804, -0.003315408, -0.0021642668, 0.050522815, -0.06649016, -0.019534517, -0.012406238, 0.008638867, -0.009706592, -0.034919467, -0.0025934803, -0.015154418, 0.0061181867, 5.066576e-05, 0.0072132116, 0.0436554, -0.03863224, -0.038389575, -0.013868295, 0.037952777, 0.067218155, -0.055279046, 3.4835673e-05, -0.03771011, 0.021669969, 0.0217185, 0.010440654, 0.011496246, -0.020153314, -0.0019822682, -0.0024691145, -0.003100043, 0.034773868, 0.02137877, -0.0061242534, -0.026013669, -0.0049139624, -0.05028015, -0.038850635, 0.028367518, -0.0074073435, -0.0018033029, -0.0069766133, -0.014268692, 0.024800343, -0.019752916, -0.007874473, -0.015494148, 0.02141517, -0.017678132, 0.028197652, -0.013795495, 0.0075832754, -0.015773213, -0.029677907, -0.00067832397, 0.016064411, 0.008414403, 0.021172505, -0.026596064, 0.007589342, 0.020468777, -0.018697323, 0.03586586, -0.03654532, 0.02766379, -0.012048308, 0.03256562, -0.052803863, 0.023975283, 0.022179564, -0.023963151, -0.0019125021, -0.0051384275, 0.015300017, -0.0131039005, 0.02654753, 0.00784414, -0.008141405, 0.005414459, -0.030454434, 0.048435897, -0.021293838, -0.04137435, -0.026426198, 0.0012193907, -0.02257996, 0.02890138, 0.0148389535, -0.025164342, 0.0015818713, -0.017471867, 0.028124852, -0.029022712, -0.005599491, 0.027251258, 0.023028892, 0.0034761734, 0.03234722, 0.0070190798, 0.017047204, 0.0068977475, 0.018357594, -0.008001872, 0.009609527, -0.01789653, -0.009597394, -0.023392888, 0.0072617447, -0.050474282, 0.0152393505, 0.028173385, 0.01087745, 0.014911753, 0.04758657, 0.005077761, 0.005623757, 0.008572134, 0.03620559, -0.0023068325, 0.0014370307, 0.014462823, 0.004731964, 0.009706592, -0.013941093, -0.015409216, -0.008086805, -0.012752036, 0.017981462, 0.022337297, -0.012752036, -0.038268242, -0.0062061525, 0.0041435016, -0.0059119216, 0.0019898515, -0.004283034, -0.0005789831, -0.00700088, 0.06357818, -0.058530755, 0.0012830902, 0.013358698, 0.0031425094, 0.048508696, 0.006248619, 0.020881308, -0.018624526, -0.004871496, 0.022228098, -0.015081618, 0.0016652873, -0.043873798, -0.014778287, 0.008074672, -0.013989626, -0.02148797, 0.040670622, 0.020857042, -0.02586807, 0.0015492631, -0.0036126724, -0.015190817, 0.025601137, -0.014851087, 0.01707147, 0.021354504, -0.0013452731, 0.027081393, -0.037467446, 0.028440317, 0.010816785, -0.0003863679, 0.0049442956, -0.004055536, -0.004446833, 0.0040707025, 0.011126182, 8.68759e-05, -0.0348224, -0.015142284, 0.026741663, -0.029896306, -0.019485984, -0.030988296, -0.0002546085, -0.0019898515, 0.01883079, 0.023223022, -0.023332221, -0.0352592, 0.010640852, -0.048096165, -0.03574453, 0.0017578033, -0.031061096, -0.010841051, 0.00045689236, -0.020638643, 0.00789874, -0.01640414, 0.0071464786, 0.03538053, 0.007747074, -0.015033085, 0.033293612, -0.034992266, -0.007207145, -0.0048745293, -0.018952122, -0.013346565, 0.012545771, -0.0065458836, -0.0352592, -0.013176699, -0.030575767, 0.0073709437, 0.008020072, 0.0009850675, -0.008159605, -0.0060787536, 0.008408336, -0.019995581, -0.011453779, -0.027833654, 0.018466793, -0.01538495, -0.01448709, -0.046591643, -0.009864325, -0.02958084, 0.0043376335, -0.026183534, -0.015445615, -0.00078866066, -0.016853072, 0.0218277, -0.011823843, 0.01351643, 0.05129934, 0.020323178, 0.0036217724, -0.006015054, -0.016343476, 0.029216845, -0.02257996, -0.052124403, 0.005981688, 0.014802554, 0.012788435, -0.0133708315, 0.0056783566, 0.025164342, 0.011423446, 0.05207587, -0.0037977044, 0.0055570244, 0.019255454, 0.014183759, -0.03137656, -0.01938892, -0.0058360887, 0.0052051605, -0.0028300784, 0.04469886, -0.0050292285, 0.028440317, -0.05765716, -0.002915011, 0.005535791, 0.004007003, -0.01938892, -0.026717396, 0.022992492, 0.04001543, 0.033269346, -0.025673937, -0.039360233, 0.0016015877, 0.01007059, -0.029289644, -0.0039857696, -0.022167431, 0.035065066, -0.041422885, -0.013856161, 0.021269571, 0.028707247, -0.027906453, 0.010962383, -0.020080514, -0.009463928, -0.010398188, -0.006679349, -0.0075529423, 0.0031364427, 0.057560094, 0.015324283, -0.0027512123, 0.009779392, 0.012715637, -0.0018533525, -0.015967345, 0.02254356, 0.0041981013, 0.04855723, -0.043485533, 0.019413184, 1.9621726e-05, -0.03433707, 0.021973299, 0.014195892, 0.01184811, -0.011114049, 0.02972644, -0.021063305, -0.0014051809, -0.0143050905, -0.0004072219, 0.019121988, -0.04132582, 0.028585915, -0.02489741, -0.06838295, 0.030017639, -0.00928193, 0.009524594, 0.04717404, -0.03729758, 0.039117567, -0.01182991, 0.0037916377, -0.01845466, 0.026401931, -0.01396536, -0.06454884, -0.006327485, -0.007176812, 0.027251258, -0.0076136086, -0.011926976, -0.022470761, -0.0029271443, 0.007941206, -0.018296927, 0.002752729, 0.009021064, -0.01669534, -0.030405901, -0.026668863, 0.00350044, 0.019971315, 0.017738799, -0.014948153, 0.032856815, -0.046373248, 0.0119694425, -0.006873481, 0.011629711, 0.022810493, -0.007959406, 0.0013968394, -0.0022264498, 0.036229856, 0.018879322, 0.025115808, -0.023271555, 0.022228098, 0.026935795, 0.01493602, -0.005711723, -0.0025191642, -0.014644822, -0.0350408, -0.024084482, -0.040791955, -0.02466688, 0.020832775, -2.7607863e-05, -0.026013669, -0.0217913, -0.04435913, 0.022470761, 0.044868726, -0.0010593836, -0.0131039005, 0.017302, 0.005180894, 0.011933043, 0.017265601, -0.0307699, 0.0002166921, 0.009215197, 0.003016627, 0.015045218, 0.011247514, 0.0025570805, 0.01396536, -0.010349655, -0.0054508583, 0.04435913, 0.04234501, 0.0011162582, -0.023198757, 0.03649679, -0.05600704, -0.005311326, 0.005438725, -0.0010851667, 0.008420469, -0.021779167, -0.056055572, -0.002805812, -0.04151995, 0.028124852, -0.03227442, 0.0016410208, -0.008984664, -0.031085363, 0.013795495, -0.02448488, 0.036326922, 0.08007939, -0.003697605, -0.019631583, 0.0086874, -0.02662033, -0.0005638165, 0.04028236, -0.0016698373, -0.04484446, -0.034968, -0.0062910854, 0.020784242, 0.021463703, -0.013443631, 0.020165447, -0.012309173, 0.0015431966, 0.060666203, 0.0055843242, 0.01644054, 0.025018742, 0.031619225, -0.020687176, 0.00823847, -0.021111839, -0.011854176, 0.029483775, 0.015979478, 0.052270003, 0.024120882, 0.012715637, 0.026984328, -0.09662913, -0.047416706, 0.014754021, 0.011453779, 0.041714083, 0.033148013, -0.035210665, 0.012127174, -0.022167431, 0.013067501, 0.040840488, 0.054939315, 0.0062182858, -0.003864437, 0.046179116, 0.0029453442, -0.038583707, -0.00015934357, 0.024084482, -0.013176699, 0.02557687, 0.0021794334, 0.057899825, -0.013031101, -0.010143389, -0.0016956204, 0.008353736, -0.005711723, 0.03807411, -0.047829237, 0.002986294, -0.005526691, -0.02148797, 0.0054265917, -0.008268803, -0.011478046, -0.024048083, 0.006837081, 0.021572903, -0.016489074, -0.0042011347, -0.020165447, 0.021585036, 0.0113688465, -0.0018017862, 0.0098339915, -0.013613496, 0.019219054, -0.04132582, -0.0035762726, -0.008644934, 0.04450473, 0.018187728, 0.001440064, 0.0073770103, -0.0033123747, -0.024278615, -0.027396858, 0.0070554796, 0.0117025105, 0.0131039005, -0.029629374, -0.0050898944, -0.025916602, -0.009221263, 0.037418913, -0.00392207, 0.023247289, 0.0016395042, 0.02773659, -0.015421349, -0.0038492708, -0.01007059, -0.010816785, -0.021876233, 0.041617017, -0.026013669, 0.0037218716, 0.0067036157, -0.044334862, -0.023307955, 0.0053234594, 0.025334207, 0.0032699085, 0.010792518, -0.0076136086, -0.0055175913, 0.028561648, -0.0007598442, -0.016161477, -0.044674594, -0.023405021, -0.016671073, -0.023332221, 0.023611287, -0.021245304, 0.003900837, 0.02358702, -0.021706367, -0.0017760032, -0.006333552, 0.013346565, 0.0017487033, 0.0022112832, 0.021657836, -0.03280828, -0.012752036, 0.033342145, -0.008936132, -0.04219941, -0.020735709, 0.008384069, -0.0012527572, 0.025843803, 0.035137866, 0.028610181, 0.02586807, -0.013698429, 0.0029362442, -0.009021064, -0.032589886, 0.016331343, 0.017350534, -0.015627613, 0.01579748, -0.019680116, 0.018090662, 0.059889678, 0.003324508, -0.037200518, 0.0007564317, 0.0036824385, 0.0062182858, 0.013285899, 0.013395098, -0.017617466, 0.023429288, -0.010009924, -0.02156077, -0.0009994757, 0.00823847, 0.0069705467, -0.008105005, -0.012679237, -0.009445728, 0.026013669, 0.003991836, 0.007868406, 0.008784466, -0.0034337072, 0.006770348, 0.0010207089, 0.0042102346, -0.023453554, -0.013807628, -0.01089565, -0.01852746, -0.030818433, -0.0035459397, 0.032832548, -0.015008819, -0.011447713, -0.006200086, 0.030017639, 0.021936899, 0.023417154, 0.021354504, 0.056249704, 0.051493473, 0.007904806, 0.028052052, -0.004010036, -0.028610181, 0.010470986, -0.007067613, 0.009882525, -0.015324283, -0.014669088, -0.015057351, -0.008893666, 0.0082991365, 0.010659052, -0.002409965, -0.009021064, -0.0044953655, 0.040452223, 0.0037006384, 0.0015318217, -0.021949032, 0.004119235, 0.0023310988, 0.016756006, -0.0066854157, 0.013856161, 0.016040144, 0.04040369, 0.016452674, -0.03613279, 0.014741887, 0.004295167, -0.025601137, -0.005329526, -0.012181774, 0.0037431049, 0.011429513, 0.014195892, -0.011660044, 0.0118359765, -0.013977493, 0.008566068, 0.0014848054, 0.012533638, -0.02014118, 0.023235155, 0.024436347, 0.04241781, 0.00569049, 0.022325164, -0.02676593, 0.008250603, 0.024873143, -0.0037006384, -0.007273878, -0.033075213, 0.024339281, 0.0016956204, 0.010386054, -0.004028236, 0.0024084484, -0.021475837, -0.014026026, 0.0010828917, -0.007832007, 0.02530994, -0.013467898, -0.0043528, 0.022980358, 0.007728874, 0.001226974, 0.026498998, -0.030478701, 0.020165447, 0.0014878387, -0.016452674, -0.0025176476, -0.019595183, 0.020493044, -0.043752465, 0.033900276, 0.0061363867, 0.00525066, -0.012982568, 0.014280824, 0.036569588, 0.0055115246, -0.0042982004, 0.0124365715, 0.020832775, 0.01972865, 0.010907783, 0.0049837288, 0.028658714, 0.013200966, -0.0029514108, -0.012679237, -0.01233344, -0.013528563, -0.023574887, 0.016270677, -0.0023781152, -0.005981688, -0.0098339915, 0.029216845, -0.0035156065, -0.0175204, -0.034992266, 0.007941206, 0.019449584, -0.019231187, -0.039263166, -0.013419365, -0.024679013, -0.03426427, 0.03870504, 0.0048411633, 0.0054114256, 0.0013793978, 0.014195892, 0.004798697, 0.019376786, -0.02875578, 0.040452223, -0.03965143, -0.010404254, 0.0122363735, -0.008196004, -0.0076985415, -0.029265378, 0.0044528996, 0.04234501, -0.0077228076, 0.017083604, -0.0011359747, 0.002431198, 0.014329357, 0.027833654, 0.004116202, 0.05634677, 0.011532646, 0.007819873, 0.0067946147, -0.010258655, 0.020614376, -0.0348224, -0.0064609507, -0.00820207, -0.007850206, -0.04040369, 0.00055547495, -0.018806523, 0.009469994, -0.021208905, -0.003315408, -0.030454434, -0.01179351, -0.0028907447, -0.02448488, -0.010737918, 0.017957196, -0.010361788, 0.011617578, -0.011180782, -0.016416274, -0.024472747, -0.0038765704, 0.029774973, 0.015736813, 0.028076319, -0.0392389, 0.005035295, 0.023453554, -0.0018488026, 0.002854345, -0.013043234, -0.008911866, 0.04392233, -0.015603348, 0.021572903, -0.00074050686, -0.0025176476, -0.011817777, -0.025164342, 0.0113688465, 0.036326922, 0.006922014, 0.012472971, -0.0087966, -0.005475125, 0.019862115, 0.042927407, -0.01631921, 0.022203831, 0.005808789, -0.022373697, 0.011229314, 0.028246185, 0.020796375, 0.0037764711, -0.05489078, 0.004101035, 0.0064791506, 0.0027117792, 0.016574007, 0.031182429, -0.02766379, 0.025043009, 0.038583707, 0.043412734, 0.029823506, 0.029144045, -0.024497014, 0.036593854, 0.011120115, 0.022143165, 0.021136105, 0.013431498, -0.026183534, -0.023065291, 0.040500756, -0.039117567, -0.019449584, -0.012357706, -0.025601137, 0.00825667, 0.0012284906, -0.0174112, 0.017665999, -0.017083604, 0.011957309, -0.029532308, -0.049066827, -0.018952122, 0.018187728, -0.0006764282, -0.006406351, -0.02778512, -0.049843352, 0.024048083, 0.021403037, -0.024157282, -0.028221918, 0.02227663, -0.009488194, 0.038996235, 0.013759095, 0.0018245361, -0.026401931, -0.028367518, -0.013759095, -0.005074728, 0.021427304, 0.039748497, -0.023247289, -0.012193907, -0.0022143165, 0.0068613477, -0.0063699516, 0.010616586, 0.013140299, 0.021475837, 0.010040257, -0.005083828, 0.02014118, 0.008602467, 0.009057464, -0.05916168, 0.000119815755, 0.013200966, 0.026207801, 0.042150877, 8.0513055e-06, -0.009894658, -0.0016774206, 0.015300017, -0.00029461025, -0.050474282, 0.02059011, 0.003734005, 0.0133708315, 0.027809387, 0.0023295823, 0.0012368322, 0.03649679, -0.004695564, 0.011805643, 0.009075664, -0.008511469, 0.03642399, 0.0002104359, -0.030818433, 1.4621503e-05, 0.023283688, -0.01636774, -0.008268803, 0.010561986, -0.0030939763, -0.010592319, 0.015469882, 0.012715637, -0.021208905, -0.030163236, 0.0005338626, -0.025067275, 0.010179789, -0.0059938207, 0.008475069, -0.029847773, -0.009039264, 0.00091605965, -0.0020308013, -0.025843803, -0.03103683, 0.00053348346, -0.02254356, 0.009385061, -0.005253693, -0.015457748, 0.020323178, -0.025746737, -0.015930945, -0.03096403, 0.017132135, 0.024315014, 0.028658714, 0.03821971, 0.041422885, 0.0023917651, 0.0352592, -0.017144268, -0.034604, 0.008111072, 0.016913738, -0.0009274346, -0.02369622, 0.012618571, 0.019849982, 0.013528563, -0.0034974066, 0.036084257, 0.0003158434, -0.016828805, -0.0012717153, -0.008026139, -0.026596064, -0.00913633, 0.02897418, -0.011405246, 0.022300897, 0.0050170952, 0.005208194, 0.007923006, -0.033997342, 0.0054205256, 0.026911529, -0.03193469, -0.0066854157, 0.03584159, -0.017192801, 0.026814463, -0.00829307, -0.026935795, 0.026596064, 0.024096616, -0.0119027095, -0.012800569, 0.032056022, -0.02227663, -0.005293126, -0.0012087742, -0.075614356, -0.0066732825, 0.0032517086, -0.003636939, 0.035137866, -0.023744753, -0.0022143165, 0.019340387, -0.013807628, 0.017678132, -0.031400826, -0.010337521, -0.0062364857]"
../../../gradio,../../../gradio/gradio/components,clear_button.pyi,""""""" Predefined buttons with bound events that can be included in a gr.Blocks for convenience. """"""

from __future__ import annotations

import copy
import json
from typing import Any, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components import Button, Component
from gradio.data_classes import GradioModel, GradioRootModel
from gradio.utils import resolve_singleton

set_documentation_group(""component"")

from gradio.events import Dependency

@document(""add"")
class ClearButton(Button):
    """"""
    Button that clears the value of a component or a list of components when clicked. It is instantiated with the list of components to clear.
    Preprocessing: passes the button value as a {str} into the function
    Postprocessing: expects a {str} to be returned from a function, which is set as the label of the button
    """"""

    is_template = True

    def __init__(
        self,
        components: None | list[Component] | Component = None,
        *,
        value: str = ""Clear"",
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = None,
        min_width: int | None = None,
        api_name: str | None | Literal[""False""] = None,
        show_api: bool = False,
    ):
        super().__init__(
            value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )
        self.api_name = api_name
        self.show_api = show_api

        if Context.root_block:
            self.add(components)

    def add(self, components: None | Component | list[Component]) -> ClearButton:
        """"""
        Adds a component or list of components to the list of components that will be cleared when the button is clicked.
        """"""
        from gradio.components import State  # Avoid circular import

        if not components:
            # This needs to be here because when the ClearButton is created in an gr.Interface, we don't
            # want to create dependencies for it before we have created the dependencies for the submit function.
            # We generally assume that the submit function dependency is the first thing created in an gr.Interface.
            return self

        if isinstance(components, Component):
            components = [components]
        none_values = []
        state_components = []
        initial_states = []
        for component in components:
            if isinstance(component, State):
                state_components.append(component)
                initial_states.append(copy.deepcopy(component.value))
            none = component.postprocess(None)
            if isinstance(none, (GradioModel, GradioRootModel)):
                none = none.model_dump()
            none_values.append(none)
        clear_values = json.dumps(none_values)
        self.click(
            None,
            [],
            components,
            js=f""() => {clear_values}"",
            api_name=self.api_name,
            show_api=self.show_api,
        )
        if state_components:
            self.click(
                lambda: resolve_singleton(initial_states),
                None,
                state_components,
                api_name=self.api_name,
                show_api=self.show_api,
            )
        return self

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the button label
        Returns:
            (Rarely used) the `str` corresponding to the button label when the button is clicked
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: string corresponding to the button label
        Returns:
            Expects a `str` value that is set as the button label
        """"""
        return value

    def example_payload(self) -> Any:
        return ""Clear""

    def example_value(self) -> Any:
        return ""Clear""","This code defines a `ClearButton` class that inherits from the `Button` class. The `ClearButton` class represents a button that, when clicked, clears the value of one or more specified components. The class includes methods for adding components to be cleared, preprocessing the button value, postprocessing the button label, providing an example payload, and providing an example value. The class also includes various parameters for customizing the appearance and behavior of the button.","[-0.008152853, -0.000749653, 0.0031702193, 0.04559335, 0.029191306, -0.05496251, -0.00023257306, 0.054384463, -0.00055207877, 0.022772592, 0.024603069, -0.005690137, -0.03533304, -0.016751282, 0.024157492, 0.038753144, 0.044557687, 0.032177877, 0.022375185, 0.026180651, -0.05708201, -0.007442338, 0.038488206, 0.0373562, -0.010844378, -0.051157042, -0.0016257535, 0.02047245, 0.016426131, 0.025096817, -0.0059189466, -0.025000475, -0.011055123, 0.019220019, -0.018160269, -0.007520615, 0.030106544, 0.01830478, 0.017305242, -0.02548218, -0.09595558, -0.007677169, 0.030708676, -0.002976032, -0.0051271445, 0.00132243, -0.04434092, 0.03892174, -0.0402946, 0.0009370662, -0.05727469, 0.019617425, 0.000327785, -0.007899958, -0.021423817, 0.008550259, -0.04424458, 0.050530825, -0.029769352, 0.0012102831, 0.0062079695, -0.0046905996, -0.031045869, 0.03730803, 0.011043081, 0.033382136, -0.029721182, 0.02603614, 0.019954618, 0.0066354824, 0.04833907, -0.018364992, -0.053517394, -0.028878199, 0.009525711, -0.034658656, 0.015715616, 0.034634568, 0.025048645, -0.0026704506, 0.017425667, 0.001720589, -0.009917096, -0.034706824, -0.041908313, 0.018449292, -0.022640122, 0.029552585, 0.0037753608, -0.042004652, -0.06888378, -0.019725809, -0.017871246, 0.06825756, -0.01903938, 0.00510607, -0.016257534, -0.015414551, 0.026373334, 0.0147040365, 0.0835276, -0.036079682, 0.0014428562, 0.0069666547, 0.0003582679, -0.041522946, -0.04660493, 0.012993985, -0.050145462, 0.014065778, -0.007912, 0.035164446, -0.015029187, 0.02911905, -0.044798538, -0.030973613, -0.020725345, 0.02851692, -0.018882826, -0.06127284, 0.008682728, -0.021279305, 0.04255861, -0.074856915, 0.0024326087, -0.042534526, 0.033863842, -0.00883326, 0.026662357, -0.009435391, 0.026590101, 0.03109404, -0.011012974, -0.0046725357, -0.0028315205, 0.08453918, -0.031985193, 0.0014405982, -0.033550736, -0.0036549347, 0.045376584, -0.02179714, 0.016341833, -0.011886064, -0.036392793, 0.012981942, 0.017461795, -0.03220196, -0.06527099, -0.018654015, 0.026662357, 0.027312657, 0.020544706, -0.003651924, -0.020990284, -0.045039393, 0.058527123, 0.004603291, -0.0049194093, -0.020412238, 0.015667446, -0.03822327, 0.0039830958, -0.013210752, 0.007797595, -0.038512293, 0.025891628, -0.010591483, -0.058864318, -0.0023031507, 0.04530433, 0.015125528, -0.014162119, -0.037404373, -0.038102843, 0.027264487, -0.0186781, -0.0009882473, -0.051638745, -0.04171563, 0.06661976, -0.009236688, -0.010356652, -0.058286272, -0.06498197, -0.0022519697, 0.032490984, -0.010693844, 0.0054914337, 0.003353869, 0.021857351, -0.0066716103, 0.024025023, -0.0063825874, 0.028276067, 0.013812883, 0.009314965, -0.048363153, -0.010182033, -0.035501637, -0.022001863, 0.02217046, 0.03477908, 0.016402045, 0.011892085, 0.03357482, 0.015414551, -0.0060785115, -0.007809638, 0.05134972, 0.021002326, -0.011597041, 0.002291108, -0.0031160275, -0.059779555, -0.007851787, 0.00602733, 0.044678114, 0.044220492, 0.036176026, -0.023723958, 0.013861054, 0.06763134, -0.02492822, 0.013608159, -0.027288573, -0.044172324, 0.011880043, -0.0107661, 0.02488005, 0.02217046, 0.0064969924, 0.04161929, -0.041330267, 0.004211906, -0.019749893, 0.023820298, -0.012066703, 0.014691994, -0.018413164, -0.08237151, 0.0047026426, 0.0063464595, -0.0016122055, -0.0024807793, 0.036898583, -0.020761473, -0.033695247, 0.0030663516, -0.00030257078, 0.03711535, 0.013162581, 0.005479391, -0.0039710533, -0.025819372, 0.0073098694, 0.068546586, 0.00065557, 0.03909034, -0.018593803, -0.0068703135, -0.03942753, -0.025650777, 0.0076229773, -0.018846698, 0.03256324, 0.03215379, 0.0093029225, -0.038608633, 0.03660956, 0.01605281, 0.026758697, 0.033598904, -0.000495629, 0.015017144, -0.017811032, -0.00282851, 0.02603614, 0.02437426, -0.007899958, -0.043449767, -0.018918954, 0.042775378, -0.00331172, -0.009778606, 0.017835118, 0.019509042, -0.0071954643, 0.0073158904, -0.040318687, -0.016016683, 0.00262228, -0.015354338, -0.002980548, -0.07249656, 0.027962958, 0.0417638, -0.022110246, 0.03270775, -0.004347385, 0.0055365935, 0.026060225, -0.050482657, -0.020761473, 0.027722107, -0.0014180182, -0.0180278, -0.008899495, 0.021327477, -0.027794363, 0.009628073, -0.002801414, 0.01797963, -0.015426594, -0.016293662, -0.014728121, 0.022652164, 0.042775378, -0.03615194, 0.019701723, 0.01564336, 0.025241328, -0.021773053, -0.0062742042, 0.045135733, 0.024277918, -0.044509515, 0.02543401, 0.03554981, 0.004808015, 0.027192231, 0.011645212, 0.039668385, -0.016534515, 0.009441413, -0.020327939, -0.02065309, -0.0037512756, -0.03959613, -0.023832342, -0.016823538, 0.0051542404, 0.005202411, 0.025458094, 0.019509042, 0.034369633, -0.004949516, 0.029456243, 0.008285321, 0.027577596, 0.013198709, -0.03347848, 0.042293675, -0.033767503, 0.004130618, -0.041667458, -0.053469226, -0.050771676, -0.024494685, 0.025217243, 0.007207507, 0.027818447, -0.0064247367, -0.006936548, -0.016161194, 0.004211906, -0.041787885, -0.0851654, 0.019003252, -0.02217046, 0.0012366263, 0.019244103, 0.053324714, 0.027119976, -0.040366855, -0.04108941, -0.002635828, 0.00081814534, 0.0005675084, -0.047809195, 0.020400194, -0.02111071, -0.02280872, -0.01853359, 0.032731835, -0.022688292, 0.058816146, 0.009363135, -0.005924968, 0.047038466, 0.040535454, 0.0072255707, 0.044967137, -0.004558131, 0.039668385, 0.071292296, -0.040920816, -0.0054854127, 0.018425206, 0.012126916, -0.00782168, 0.023832342, -0.005115102, -0.009212603, 0.011892085, -0.028637346, 0.047182977, -0.013391391, 0.019111635, -0.022387227, 0.028998625, 0.0367059, 0.05790091, 0.008953687, 0.02553035, -0.011283933, 0.0010635137, -0.021002326, 0.008700792, 0.028492834, 0.04443726, -0.03270775, 0.019159805, -0.047351573, 0.032129705, 0.04672536, -0.029094966, 0.008176938, 0.0018440259, -0.073989846, -0.010609547, 0.03256324, -0.007598892, -0.0023994916, 0.0111936135, -0.032226045, -0.039018083, 0.0021420808, -0.00084072526, 0.04732749, -0.053469226, 0.010940718, 0.03145532, 0.06088748, -0.027987044, 0.016269578, -0.01071793, -0.057563715, -0.034562312, -0.030299228, -0.0345864, 0.024711452, -0.041330267, 0.054384463, 0.023025487, -0.0006326138, 0.00092878693, -0.023615574, -0.0052505815, -0.011344146, 0.022158418, 0.014210289, 0.028155642, 0.05009729, -0.028661432, 0.047761023, 0.013969437, 0.013981479, 0.023037529, -0.04884486, -0.014824463, 0.00018421443, 0.052457646, 0.037765652, -0.026903208, 0.014920804, 0.014908761, 0.06657159, -0.00014865107, 0.01002548, -0.010266332, -0.007893936, 0.019268189, -0.037380286, 0.0010823302, 0.078084335, -0.020592878, -0.037910163, -0.014740164, -0.006454843, -0.03634462, 0.01632979, -0.004853175, -0.011687361, -0.007978234, -0.04525616, 0.0033779545, 0.007183422, 0.019882362, -0.04872443, 0.044918966, -0.007610935, 0.022784634, 0.011332104, -0.017762862, -0.026855038, 0.041522946, -0.0058165845, 0.039018083, -0.032081533, -0.044003725, -0.03656139, 0.007207507, -0.01402965, -0.0053378902, -0.005280688, 0.0066475254, 0.01918389, -0.009658179, -0.01481242, -0.008285321, 0.06310332, -0.011922192, 0.0012080251, 0.0040944903, 0.03362299, -0.033454392, -0.05915334, -0.0014850054, 0.028276067, -0.032418728, -0.00998333, -0.006605376, 0.055733237, -0.026397418, 0.012765175, -0.0085020885, 0.018148225, -0.0018109087, -0.0013141508, 0.0012908181, -0.010374716, 0.015474765, -0.008586387, 0.00015448421, 0.040872645, -0.007303848, -0.03757297, 0.038608633, 0.011982405, 0.026662357, -0.005533583, 0.029094966, -0.03615194, 0.037380286, -0.008947665, -0.040655877, 0.010471056, -0.007598892, -0.012072724, -0.010133863, -0.02318204, -0.0046815677, 0.039716553, -0.014884676, -0.033767503, 0.012945814, 0.003320752, 0.03280409, -0.014523397, -0.046050973, 0.007111166, -0.006864292, 0.036176026, -0.0045250137, 0.035525724, 0.03730803, -0.027818447, -0.039716553, -0.019629467, 0.0016784399, -0.048290897, 0.007972213, -0.017305242, -0.034538228, 0.054721657, 0.06016492, -0.03412878, 0.0027020625, 0.028131556, -0.041233923, 0.0015316705, -0.0065572057, 0.03579066, -0.021640584, 0.0018831644, 0.0058858297, 0.005587775, -0.048652176, 0.014908761, -0.04125801, -0.011301997, 0.018280694, -0.008207045, 0.046026886, -0.031648, -0.0004293946, -0.033743415, 0.00034471994, 0.028444665, -0.005497455, 0.053565565, 0.011006953, 0.00565702, 0.020327939, -0.015715616, -0.049133882, 0.02254378, 0.007839744, -0.00951969, 0.006840207, 0.02047245, 0.009995373, -0.01623345, 0.039210763, 0.046845783, 0.0144390995, -0.031720255, 0.06724598, 0.016305706, 0.013728584, 0.010627611, -0.002175198, 0.0109226545, -0.016582685, 0.01430663, 0.054769825, 0.028950455, 0.012175087, -0.052168623, 0.012476153, 0.02902271, 0.00422997, -0.0035796682, -0.017630393, 0.03256324, 0.0111875925, 0.032346472, 0.032442812, 0.014270502, -0.025361754, -0.020002788, 0.016341833, -0.04460586, 0.025289498, -0.00869477, -0.014475227, 0.030419653, -0.0035134337, 0.006828164, -0.028492834, 0.019846234, -0.04925431, 0.005271656, -0.022134332, 0.015005102, -0.016390003, 0.00019343455, -0.012000469, 0.0026975465, -0.07345997, 0.031648, 0.0020306865, 0.044798538, 0.01858176, 0.030251056, 0.007797595, -0.025313582, -0.008345534, -0.015257997, -0.048266813, -0.006551184, -0.02097824, 0.00845994, -0.01044095, -0.040222343, 0.0006789026, 0.017232986, 0.017835118, -0.018437248, -0.021736925, -0.0011997458, 0.008393705, 0.022929145, -0.025915714, 0.021640584, -0.0014541461, 0.00033324183, 0.003275592, -0.01614915, -0.043666534, -0.003353869, -0.022772592, 0.006048405, 0.0012802809, 0.009116262, -0.0141741615, -0.0007963181, 0.00542821, -0.0172089, 0.016510429, 0.01117555, -0.019629467, 0.008881431, -0.018702187, -0.0109226545, -0.006930527, 0.010230204, 0.0015196279, -0.034851335, -0.023627616, 0.03680224, -0.028444665, -0.025915714, 0.0049013454, -0.03610377, 0.009074112, 0.017630393, -0.039307106, 0.040415026, -0.01089857, -0.003275592, -0.034754995, 0.048531752, -0.031262636, 0.0035345084, 0.0038446058, 0.019677637, 0.024603069, -0.012500238, -0.03398427, 0.042438187, -0.00039138508, 0.010326545, -0.0007658352, -0.033285797, -0.0014564041, -0.033863842, -0.01840112, 0.028974539, 0.023880512, 0.008032426, -0.024025023, 0.03169617, -0.004540067, -0.01711256, -0.023350636, -0.005690137, -0.0015151119, 0.010422886, 0.00450695, 0.042414103, 0.0022700336, 0.0035284872, 0.009266795, -0.04761651, 0.022074118, -0.012885601, -0.016377961, 0.037091263, -0.01807597, 0.001255443, 0.010314503, -0.03574249, -0.0027547488, -0.022555824, -0.011109315, -0.030491909, -0.019749893, -0.019195933, -4.459532e-05, -5.1087045e-05, 0.027914789, 0.013704499, 0.0001765937, -0.013174624, 0.010272353, 0.010964803, -0.032129705, -0.0017220944, 0.021303391, 0.0015218859, 0.0035947214, 0.010633632, 0.04691804, -0.012391854, 0.014125991, -0.051638745, 0.023446977, 0.008881431, -0.027360829, -0.053565565, -0.0223511, -0.0125604505, -0.007147294, 0.017786946, -0.013849011, -0.0032364535, 0.009001857, 0.0037241797, 0.024651239, 0.020255683, -0.024639197, 0.021038454, -0.020905985, -0.018654015, -0.005635945, 0.0012163044, -0.029528499, -0.032129705, -0.000575035, -0.032852262, 0.012608621, -0.0018319832, -0.0026237855, 0.010103757, 0.013343221, 0.006960633, 0.036778156, -0.02047245, -0.004958548, -0.033695247, -0.004452758, 0.013945351, -0.031648, 0.03697084, -0.040415026, 0.017257072, -0.017317284, -0.012620664, -0.039764725, -0.008893473, -0.0114585515, 0.018593803, 0.015342295, 0.007093102, -0.011518764, 0.006936548, -0.019689681, 0.030299228, -0.0004862207, 0.008201023, -0.022399269, -0.027457168, 0.0038205206, -0.00676193, 0.029793438, 0.01817231, 0.020665133, 0.016980091, 0.0012155517, -0.007905979, -0.028035214, -0.0040222346, 0.03766931, -0.027746191, 0.0026283015, 0.008098661, 0.026252907, -0.010308481, 0.036826327, 0.018617887, 0.032418728, 0.021363605, -0.017690606, 0.03179251, -0.015860127, 0.021375647, 0.011049102, 0.009682265, 0.013499775, -0.049182054, 0.022278843, -0.038247354, -0.004958548, 0.018521547, -0.0007026115, -0.01623345, -0.008182959, 0.046339996, -0.0244706, -0.0011440488, 0.009591945, -0.028348323, -0.0017190838, -0.014872633, -0.0028315205, 0.009447434, 0.0045189923, -0.018870782, 0.0031702193, -0.02497639, -0.0038476165, 0.0077072755, 0.020990284, -0.018160269, -0.007285784, -0.013367306, -0.00602733, -0.03159983, 0.00020980499, -0.038151015, -0.022423355, 0.022074118, 0.0038927763, -0.0012682382, -0.011916171, 0.01195832, 0.036079682, -0.0032876348, -0.035862915, -0.03559798, -0.022640122, -0.008122746, 0.006418715, 0.013006028, 0.020255683, -0.0020126225, 0.043714702, 0.0034471995, 0.013740627, 0.00045686684, 0.006960633, -0.040366855, 0.01946087, -0.072641075, -0.03398427, 0.0103988005, -0.02318204, -0.009874946, 0.026156567, -0.02907088, 0.020219555, 0.013608159, -0.011350168, -0.021327477, 0.0044467365, -0.009411306, 0.019725809, 0.015980555, 0.042847633, -0.033141285, 0.026782783, -0.012921729, -0.0125604505, -0.0019313348, 0.059297852, -0.011952299, 0.0149810165, 0.037693396, -0.042100992, -0.011518764, 0.0120064905, -0.01734137, 0.008574344, -0.036272366, 0.05303569, 0.00021074581, -0.0052234856, 0.023940725, 0.008953687, 0.016125066, 0.020954156, 0.01641409, 0.011055123, 0.013945351, -0.007616956, 0.013150539, 0.0073941676, -0.020075044, -0.0015173699, 0.014077821, 0.033526648, 0.007899958, -0.00883326, 0.013186667, -0.0039078295, -0.0077554462, -0.0072135283, 0.032274216, -0.039957408, 0.042438187, -0.013451604, -0.02603614, -0.008941644, -0.023736, 0.029841607, -0.003808478, -0.0017973607, -0.0111936135, -0.014017607, 0.0309977, -0.013788798, 0.027144061, 0.030275142, 0.018280694, 0.026325163, -0.04434092, -0.048146386, 0.018340908, 0.006509035, -0.0025816362, 0.007171379, -0.017449753, -0.023097742, -0.0019448828, 0.017690606, 0.023013443, -0.025361754, 0.015077358, 0.006292268, -0.03383976, -0.0002743459, -0.008423812, -0.0027351796, 0.02345902, 0.032009277, -0.013283008, 0.02065309, 0.016377961, 0.00892358, -0.011338125, -0.029841607, -0.00597916, 0.0032545174, 0.022278843, 0.011723489, 0.033358052, 0.018786484, 0.0077674887, -0.018497461, -0.024904134, 0.0026162588, 0.016992135, -0.01683558, -0.0016663973, -0.032539155, -0.0058015315, -0.045569267, 0.03836778, -0.023097742, 0.010705887, 0.009820755, 0.007641041, -0.031021785, 0.006707738, -0.0053800396, -0.016907835, 0.0066113975, 0.027023636, -0.040993072, -0.024097279, 0.038102843, 0.012656791, 0.022025948, -0.034658656, 0.0006352481, 0.03969247, 0.042847633, -0.021652628, 0.0014707047, 0.030515995, -0.012777218, -0.025795288, -0.034610484, -0.044316836, -0.037019007, 0.0066535464, 0.010266332, -0.022158418, 0.036368705, 0.00080610276, 0.01402965, 0.020400194, 0.009254752, 0.06319966, -0.023266338, 0.0012607116, 0.017774904, -0.0074363165, -0.015703574, 0.019376572, 0.005681105, 0.02060492, -0.039885152, 0.0074363165, -0.00883326, 0.0425827, 0.023772128, -0.02957667, 0.050289974, 0.021917565, 0.008303385, -0.0106697595, -0.001469952, 0.039957408, 0.009170454, -0.006490971, -0.0043955557, 0.008761005, -0.014222332, 0.039957408, 0.019773979, -0.02654193, -0.03169617, 0.0069907396, 0.0111936135, -0.029408073, 0.032587323, 0.0087730475, 0.026132481, -0.007869851, -0.009471519, 0.017678563, 0.01048912, -0.043208912, 0.049206138, -0.022941187, -0.034851335, 0.016992135, -0.009423349, 0.007887915, 0.044870794, -0.027312657, -0.014679952, -0.01779899, 0.004157714, -0.0051391874, -0.010254289, -0.009122283, -0.017317284, 0.015751744, 0.0034471995, 0.008465961, -0.009899032, 0.0012102831, -0.026975464, 0.045376584, 0.00496758, 0.007388146, -0.050434485, 0.0046845786, -0.011169529, -0.016197322, -0.016197322, -0.0063043106, 0.007478466, -0.041161668, -0.0020939102, -0.022146374, 0.0063223746, 0.0053288583, -0.019990746, -0.025072731, -0.010278375, 0.016630856, -0.021231135, -0.011229741, 0.006840207, 0.0038717017, -0.027481254, -0.009808713, -0.0117355315, 0.031648, 0.04475037, 0.022712378, -0.025915714, 0.02962484, 0.032515068, -0.011994448, -0.0055937963, -0.020785559, -0.005115102, 0.0067137596, -0.00070110615, -0.005855723, -0.012060682, -0.025096817, -0.025626691, 0.025747117, 0.021833267, 0.03215379, 0.023109784, 0.011861979, -0.004025245, -0.010826314, 0.01504123, 0.008893473, -0.016859666, -0.019111635, 0.013234837, -0.011982405, 0.0003891271, -0.011446509, 0.022664208, 0.028950455, -0.0030603304, -0.0065812906, 0.025144987, 0.029480329, -0.0013164087, -0.0025906682, -0.020038916, -0.0028766803, -0.0144390995, 0.005301763, 0.04752017, -0.0381751, 0.009092176, 0.02967301, 0.0044316836, -0.015330253, -0.0044467365, -0.0072616986, -0.0077373823, 0.0066716103, -0.008339513, 0.0031822617, 0.0009905053, 0.0054763807, 0.028468749, -0.024494685, -0.0061236713, -0.0052505815, 0.017088475, -0.028757771, -0.0079541495, -0.0012735069, 0.00869477, -0.010459014, -0.0117415525, 0.0017100518, -0.010477078, 0.0001241895, -0.006828164, 0.0040764264, -0.012921729, -0.023254296, -0.024253832, 0.0025876577, -0.02244744, -0.042895805, 0.0010958782, 0.008616493, -0.022772592, -0.011121358, 0.022146374, -0.0041336287, -0.015667446, -0.026084311, 0.009622051, 0.0071051447, -0.008285321, 0.0030196866, -0.025409924, -0.028227897, -0.034562312, 0.026879124, -0.024735538, 0.022013906, -0.021917565, 0.00038762178, 0.0053288583, -0.007887915, -0.007032889, 0.02567486, -0.020845773, -0.0037934247, 0.022423355, 0.010699866, -0.0006830422, -0.027698021, 0.015836043, -0.015017144, -0.03610377, -0.0018620898, 0.022567866, -0.029191306, -0.016871708, 0.035116274, 0.006111629, 0.023085698, 0.010964803, -0.005952064, -0.025891628, -0.0018651005, -0.0008941644, -0.00611765, 0.01080825, 0.019376572, -0.018943038, -0.02230293, -0.028709602, -0.0012945815, 0.0141741615, -0.004034277, -0.032490984, 0.00501274, -0.0044858754, -0.031744342, -0.030877274, -0.053324714, 0.021676712, -0.0021044475, -0.029528499, 0.016498387, 0.017811032, -0.03766931, 0.012801303, 0.0129699, 0.0059279785, 0.030347398, 0.0019524095, 0.039114423, -0.007996298, -0.04672536, 0.002971516, -0.026421504, -0.0070810593, 0.031864766, -0.0025921736, -0.027890703, -0.0352367, -0.013222795, -0.019147763, -0.006605376, 0.0027532435, 0.042076908, 0.0062802252, 0.028468749, 0.0017792968, 0.024855964, 0.01324688, 0.031118125, 0.011825851, 0.024073193, -0.013885139, 0.021700798, -0.009236688, 0.01835295, -0.035381213, -0.0019102603, -0.017546095, -0.005178326, 0.025096817, 0.022050034, 0.01577583, -0.02313387, 0.017088475, 0.020797601, 0.0004399319, 0.021905523, 0.03013063, 0.020893943, -0.04282355, 0.0022459482, 0.016895793, -0.023519233, 0.039379362, 0.041330267, -0.016883751, -0.038704973, 0.026252907, -0.007093102, -0.006822143, 0.01430663, -0.0079541495, -0.033526648, 0.004007181, -0.021556286, 0.012024554, 0.0057714246, 0.0070208465, 0.019075507, -0.00814081, -0.026638271, -0.035862915, -0.010290417, 0.0006280978, -0.013379348, 0.0019238082, -0.008170917, 0.025626691, -0.0015896256, -0.02497639, 0.008393705, 0.011705425, 0.029335817, 0.031840682, -0.0045099603, 0.014005565, 0.019123677, -0.0165586, -0.009206582, 0.006012277, 0.029937949, -0.05110887, 0.0068703135, -0.03434555, 0.0344178, -0.035260785, 0.005693148, -0.023567403, -0.003293656, 0.013379348, 0.0076350197, 0.02603614, -0.024952305, 0.0019238082, -0.057322863, 0.009471519, -0.028348323, 0.024651239, 0.005283699, 0.0042630867, 0.008767026, 0.0071051447, -0.007912, -0.0082251085, -0.022230674, -0.0021044475, 0.0064006513, 0.054769825, 0.008291342, -0.0048742495, -0.021604456, 0.025385838, -0.010001394, 0.004531035, 0.044003725, 0.022748506, 0.029913863, 0.00087233714, -0.030780932, -0.0016091948, -0.03321354, 0.008074575, -0.005666052, -0.012777218, -0.03408061, -0.0021164902, -0.016016683, 0.009248731, -0.022603994, -0.011440488, -0.004946505, 0.00805049, 0.019846234, 0.014872633, -0.015534977, 0.01048912, -0.03583883, -0.026614185, 0.0023693852, -0.0050729527, 0.009194539, -0.0155108925, 0.013162581, 0.0031822617, 0.008002319, 0.0021240169, 0.013186667, -0.018437248, -0.03094953, 0.010452992, 0.009917096, 0.015872171, -0.014402972, 0.025361754, 0.05838261, -0.027336743, 0.048146386, 0.005422189, -0.017088475, -0.04609914, 0.010868463, -0.00805049, -0.040679965, 0.031864766, -0.0054613273, -0.0039861067, -0.00924271, 0.004844143, 0.009640115, 0.008092639, 0.007713297, 0.012325619, -0.014824463, -0.019521084, -0.0075326576, 0.017702648, 0.03877723, 0.027119976, 0.011813808, -0.04843541, 0.006430758, -0.025337668, -0.009959245, 0.01531821, -0.056407623, -0.0065331203, -0.037380286, -0.0072436347, 0.0034863378, -0.01641409, 0.059442364, 0.02902271, -0.016353875, -0.029408073, 0.019123677, -0.020219555, 0.016317748, 0.03058825, -0.029263562, 0.015101443, 0.02179714, 0.030106544, 0.04590646, -0.03841595, 0.04337751, -0.0021450913, -0.0117415525, 0.024386302, 0.008062533, -0.012391854, -0.035814747]"
../../../gradio,../../../gradio/gradio/components,__init__.py,"from gradio.components.annotated_image import AnnotatedImage
from gradio.components.audio import Audio
from gradio.components.bar_plot import BarPlot
from gradio.components.base import (
    Component,
    FormComponent,
    StreamingInput,
    StreamingOutput,
    _Keywords,
    component,
    get_component_instance,
)
from gradio.components.button import Button
from gradio.components.chatbot import Chatbot
from gradio.components.checkbox import Checkbox
from gradio.components.checkboxgroup import CheckboxGroup
from gradio.components.clear_button import ClearButton
from gradio.components.code import Code
from gradio.components.color_picker import ColorPicker
from gradio.components.dataframe import Dataframe
from gradio.components.dataset import Dataset
from gradio.components.download_button import DownloadButton
from gradio.components.dropdown import Dropdown
from gradio.components.duplicate_button import DuplicateButton
from gradio.components.fallback import Fallback
from gradio.components.file import File
from gradio.components.file_explorer import FileExplorer
from gradio.components.gallery import Gallery
from gradio.components.highlighted_text import HighlightedText
from gradio.components.html import HTML
from gradio.components.image import Image
from gradio.components.image_editor import ImageEditor
from gradio.components.json_component import JSON
from gradio.components.label import Label
from gradio.components.line_plot import LinePlot
from gradio.components.login_button import LoginButton
from gradio.components.logout_button import LogoutButton
from gradio.components.markdown import Markdown
from gradio.components.model3d import Model3D
from gradio.components.multimodal_textbox import MultimodalTextbox
from gradio.components.number import Number
from gradio.components.paramviewer import ParamViewer
from gradio.components.plot import Plot
from gradio.components.radio import Radio
from gradio.components.scatter_plot import ScatterPlot
from gradio.components.slider import Slider
from gradio.components.state import State
from gradio.components.textbox import Textbox
from gradio.components.upload_button import UploadButton
from gradio.components.video import Video
from gradio.layouts import Form

Text = Textbox
DataFrame = Dataframe
Highlightedtext = HighlightedText
Annotatedimage = AnnotatedImage
Highlight = HighlightedText
Checkboxgroup = CheckboxGroup
Json = JSON

__all__ = [
    ""Audio"",
    ""BarPlot"",
    ""Button"",
    ""Chatbot"",
    ""ClearButton"",
    ""Component"",
    ""component"",
    ""get_component_instance"",
    ""_Keywords"",
    ""Checkbox"",
    ""CheckboxGroup"",
    ""Code"",
    ""ColorPicker"",
    ""Dataframe"",
    ""DataFrame"",
    ""Dataset"",
    ""DownloadButton"",
    ""DuplicateButton"",
    ""Fallback"",
    ""Form"",
    ""FormComponent"",
    ""Gallery"",
    ""HTML"",
    ""FileExplorer"",
    ""Image"",
    ""JSON"",
    ""Json"",
    ""Label"",
    ""LinePlot"",
    ""LoginButton"",
    ""LogoutButton"",
    ""Markdown"",
    ""Textbox"",
    ""Dropdown"",
    ""Model3D"",
    ""File"",
    ""HighlightedText"",
    ""AnnotatedImage"",
    ""CheckboxGroup"",
    ""Text"",
    ""Highlightedtext"",
    ""Annotatedimage"",
    ""Highlight"",
    ""Checkboxgroup"",
    ""Number"",
    ""Plot"",
    ""Radio"",
    ""ScatterPlot"",
    ""Slider"",
    ""State"",
    ""UploadButton"",
    ""Video"",
    ""StreamingInput"",
    ""StreamingOutput"",
    ""ImageEditor"",
    ""ParamViewer"",
    ""MultimodalTextbox"",
]
","The code imports various components from the Gradio library, such as AnnotatedImage, Audio, BarPlot, Button, Chatbot, Checkbox, Dropdown, File, Image, JSON, Label, LinePlot, Markdown, Textbox, Video, and others. It also assigns aliases to some components for easier reference. Finally, it defines the list of all components that can be accessed from the Gradio library.","[-0.06689036, 0.013152021, 0.01591343, -0.03508918, 0.028050795, -0.014757492, -0.046622887, -0.0071860896, -0.036527682, -0.06873986, 0.016118933, 0.0025189845, 0.004591648, 1.5929286e-06, 0.043155067, 0.0018093662, -0.039122123, -0.022502286, -0.028564544, 0.04384863, 0.033059865, -0.010063094, -0.00694848, 0.049602643, 0.013768522, -0.04490182, -0.038788185, 0.05933822, 0.008740186, 0.016581308, -0.040355127, -0.03727262, 0.0057315324, 0.0012659141, -0.007661309, -0.048703577, 0.018096872, -0.0018575303, -0.0036508418, -0.021680284, -0.040586315, -0.06976736, -0.04084319, 0.026586605, -0.017043684, -0.0048003593, -0.021500472, 0.023748131, 0.010833721, 0.05764284, -0.08137813, -0.030542485, -0.035808433, 0.012130941, -0.011552972, 0.026560917, -0.04973108, 0.010030985, 0.005641626, -0.027716856, 0.005795751, 0.0020726635, -0.0033650678, 0.026239824, -0.01294652, 0.008309919, -0.024749946, -0.03591118, 0.040175315, -0.020126188, 0.031364486, -0.00059683394, -0.018263841, -0.087389015, -0.00609758, 0.016170306, -0.012818083, -0.008637436, 0.050527394, 0.0028015473, -0.000601249, 0.006306291, -0.052608084, -0.019561062, -0.013055692, -0.015168493, -0.0019089053, 0.036142368, -0.008162216, -0.045081634, -0.025841666, -0.03886525, -0.06498948, 0.041511066, 0.0068393075, 0.009414484, -0.02313163, -0.018751904, 0.049448516, 0.039327625, 0.037632246, -0.042898193, -0.037812058, -0.0395845, 0.040072564, -0.030747985, 0.022322472, -0.023080256, -0.02684348, 0.00984475, -0.061136346, 0.00262334, -0.017493214, 0.029129671, -0.020460127, -0.024788477, 0.022296784, -0.008624592, -0.02841042, -0.031878237, -0.028179232, 0.008220013, 0.03008011, -0.03804325, 0.07254162, -0.029052608, -0.01430796, -0.030336985, -0.065657355, -0.02146194, 0.012554785, -0.020588564, -0.0014802446, -0.049063202, -0.016786808, 0.02946361, -0.05985197, 0.0058952905, -0.029386546, 0.00879156, 0.017210653, -0.04228169, 0.009022749, -0.014153834, -0.006534268, -0.022335317, -0.026034322, 0.00090869673, -0.04544126, -0.043155067, -0.011296096, 0.030670924, -0.087389015, -0.017210653, -0.0090291705, 0.029103983, 0.0387625, -0.013922647, -0.010037406, 0.011398846, -0.011745628, 0.0022797692, 0.026381103, 0.014346492, -0.028153544, -0.023337131, -0.022116972, 0.0019923898, -0.039456062, 0.03293143, -0.014012554, -0.03478093, -0.051041145, -0.021577533, 0.0075200275, -0.014873086, 0.009330999, 0.0057251104, 0.006383354, 0.00020550033, -0.00035661532, 0.02799942, -0.011848378, -0.0059498767, -0.034395617, -0.025931573, -0.0073145274, -0.05389246, -0.014269428, 0.014423554, 0.03508918, 0.0025607266, 0.013871272, 0.046417385, 0.023183005, -0.028667295, 0.007648465, -0.006762245, -0.0017708348, -0.002990993, 0.027716856, 0.026920542, 0.013344677, -0.023054568, -0.05137508, -0.0016761121, -0.016992308, -0.01979225, 0.023927944, -0.0011535311, 0.027716856, -0.045312822, -0.032520425, -0.003910928, -0.06766098, -0.0061746426, -0.03383049, 0.03182686, -0.013691459, 0.010043829, -0.011321783, 0.02319585, 0.03665612, -0.04564676, 0.019162904, -0.0069163702, 0.051837455, -0.027177418, 0.038916625, 0.004081108, 0.068071984, 0.016478557, 0.0037086387, -0.0008388588, 0.033804804, -0.04677701, 0.029746171, -0.037015747, 0.056872215, 0.020254625, -0.037118495, 0.009478702, 0.012824505, 0.01025575, 0.013948334, 0.012227269, 0.012830926, -0.048164137, 0.013537334, 0.058670342, -0.025674697, 0.032546114, 0.03308555, 0.02684348, -0.016106088, 0.023221537, 0.005185672, 0.038608372, -0.026483854, 0.004065053, -0.020254625, -0.017069371, -2.6866559e-05, 0.032032363, -0.014025398, 0.024069225, -0.007166824, 0.059903346, -0.024557289, -0.009074124, 0.0041549597, -0.009074124, 0.032751612, -0.013280459, 0.0109621575, -0.010037406, 0.029309483, 0.05229983, 0.016851027, 0.024338944, -0.032828677, 0.035757057, 0.013537334, 0.057077713, -0.04312938, 0.0060526268, 0.042050503, -0.0048998985, -0.0010756658, -0.059132718, 0.054560337, 0.021808721, 0.052762207, -0.05702634, 0.011809846, -0.0067237136, 0.052479647, -0.0103328135, 0.02745998, 0.010191532, 0.0059209783, 0.0061714314, 0.0038948734, -0.012516255, -0.015168493, 0.022232566, -0.002742145, 0.014346492, -0.016825339, 0.019984907, 0.036373556, 0.016067557, 0.018957404, -0.01624737, -0.065760106, -0.008643857, 0.03886525, -0.038377184, 0.03948175, -0.035577245, -0.015284087, -0.01730056, 0.04104869, 0.00037106455, -0.041485377, -0.038993686, -0.037734997, -0.009523655, -0.026137073, -0.029771859, 0.033136927, 0.0053333757, -0.02230963, 0.052916333, 0.02364538, -0.041434, -0.060417097, 0.026997605, -0.07105174, 0.01597765, -0.011463065, -0.019034468, 0.008913577, 0.019445468, 0.030465422, 0.026304042, -0.057694215, 0.012439191, -0.014911617, -0.050707206, -0.02558479, -0.009305311, -0.020074813, -0.028487483, 0.02544351, -0.013678615, -0.04063769, -0.048010014, -0.03768362, 0.015361149, -0.031621363, 0.023889413, -0.012863036, 0.022630723, 0.012663958, 0.004649445, -0.021680284, -0.047059573, 0.004472843, -0.0379405, 0.040483564, -0.035320368, -0.016812496, -0.025905885, -0.05368696, 0.026920542, 0.028975546, -0.02946361, -0.035757057, -0.009934656, 0.014128148, -0.028127857, 0.05055308, -0.05368696, 0.02632973, -0.009311734, -0.013986866, 0.021577533, 0.0032478685, 0.05430346, 0.0034517632, -0.045595385, -0.0020453704, -0.022900442, 0.027485669, -0.017904216, 0.031878237, 0.030722298, 0.022579348, 0.023208693, -0.00148185, 0.00470082, -0.0018286319, 0.03989275, 0.0073145274, -0.014796023, 0.034729555, 0.03989275, -0.02606001, -0.011450221, 0.028770046, -0.011758472, 0.03185255, -0.015129961, 0.016221682, -0.023247223, -0.0033682787, -0.05296771, 0.016953778, 0.06709585, 0.026997605, -0.028127857, 0.001159953, -0.0806075, -0.0117392065, 0.042435817, 0.068123356, -0.03344518, 0.0055388757, -0.055947464, -0.057283215, 0.011655722, 0.040766127, 0.03226355, 0.026817793, -0.020999564, 0.0097612655, 0.040406503, 0.016709745, 0.045389883, -0.04878064, 0.0013839162, 0.034215804, 0.035320368, -0.052864958, -0.00044190598, -0.0125740515, -0.014372179, -0.017274871, -0.016568463, -0.014500617, -0.04587795, -0.036990058, 0.012991474, 0.01764734, 0.006877839, 0.035988245, 0.0012940099, 0.00037648302, -0.021924315, -0.008830092, 0.06134185, -0.04878064, 0.04839533, -0.0056159385, -0.018751904, -0.001606274, 0.013986866, 0.034909368, -0.01127683, -0.0004663894, 0.0036058885, -0.00906128, 0.019805094, -0.026715042, -0.022733474, 0.019573906, 0.0034838726, -0.04053494, -0.018032653, -0.019509686, 0.014166678, -0.00442789, -0.044131193, 0.0078025903, 0.09997591, 0.0001908504, -0.03501212, 0.023247223, -0.023594007, -0.025815979, -0.012028191, 0.006376932, -0.01389696, 0.0021609643, -0.016311588, -0.063139975, -0.006534268, 0.008284232, -0.047367826, 0.028770046, -0.034524053, -0.026406791, 0.04795864, 0.017351933, 0.0036219433, 0.045184385, -0.00045113743, 0.029052608, -0.0001097741, -0.012985052, -0.034318555, 0.0072888397, 0.010782345, 0.029797547, -0.017865684, -0.027408605, 0.021166533, -0.017942747, -0.009742, 0.009742, 0.015104274, -0.0057315324, -0.025340758, 0.00906128, 0.015258399, -0.0061714314, -0.03426718, 0.0074044336, -0.007924606, -0.0074879183, -0.03529468, -0.018006966, -0.007096183, -0.047984324, -0.0071796677, 0.0008420697, -0.0029572782, 0.021012409, -0.035243306, 0.01958675, 0.016568463, 0.01791706, -0.011026377, -0.008464045, 0.030003047, 0.0064539947, -0.04564676, 0.01352449, 0.05181177, 0.07202786, -0.05188883, 0.04420826, -0.025597634, 0.0067044483, 0.034010302, 0.002143304, 0.03529468, -0.02527654, -0.029566359, -0.009003483, -0.0073723244, 0.009934656, 0.03290574, 0.008810827, 0.0031515402, 0.000310458, -0.019072998, -0.014038241, 0.02653523, -0.0103328135, -0.013948334, -0.012374973, 0.031236049, 0.0025687541, -0.0068585733, 0.00885578, -0.015181337, 0.0071925116, -0.048523765, -0.0006911554, 0.007674153, 0.0027726488, -0.011642878, -0.039327625, 0.007205355, 0.009157608, 0.010711704, -0.010705283, -0.01171994, -0.0021192222, 0.01073097, -0.00347424, 0.00637051, -0.016619839, 0.031158987, 0.015579494, 0.015759306, -0.014038241, 0.032443363, 0.005911345, -0.018507874, -0.0112704085, 0.02214266, 0.02466004, -0.024544446, 0.031621363, -0.008785139, -0.055279586, 0.008508998, -0.02385088, 0.010364923, -0.033881865, -0.044054132, -0.03508918, -0.0001296418, -0.03768362, 0.030722298, 0.0006249297, -0.029797547, -0.032366302, -0.016799651, 0.02449307, -0.020241782, 0.005413649, 0.056050215, 0.014436398, -0.02214266, 0.013434583, 0.016054712, 0.022322472, -0.012561208, 0.037863433, -0.001791706, 0.03919919, -0.02234816, -0.00773195, 0.00019777399, 0.007828278, -0.04574951, 0.024467383, 0.031210361, -0.0057861186, -0.0141409915, 0.03290574, 0.013030005, -0.0017082215, 0.023594007, 0.055947464, -0.007879653, -0.003515982, 0.0071218708, 0.010769501, 0.004199913, -0.01645287, -0.013460271, -0.017364778, -0.0058503374, 0.0006638624, 0.011392424, -0.029797547, -0.032006677, 0.009851172, -0.0037921232, -0.021500472, 0.025610479, 0.008772295, 0.031878237, -0.017762935, 0.024300413, -0.039969813, 0.025571946, 0.012246535, 0.033239678, 0.042435817, -0.007096183, -0.016003339, -0.015309774, 0.012047457, 0.0021079837, -0.036990058, 0.017788623, -0.056050215, 0.010878674, 0.03293143, -0.032340612, 0.018944561, 0.016311588, 0.0022845857, -0.024480226, -0.0065182135, 0.013498803, 0.018520717, 0.008213591, -0.018109716, 0.030465422, 0.031107612, -0.008919998, 0.016709745, -0.040406503, -0.0066081197, -0.0060718926, 0.024441695, -0.025186634, -0.015720775, -0.005599884, 0.006768667, -0.001900878, 0.010551157, -0.022219723, -0.022373848, 0.040457875, 0.011983237, 0.0057283216, 0.010101626, 0.0011037615, 0.0058471262, -0.023183005, 0.018071184, -0.03634787, -0.032623176, 0.010056672, -0.058362093, -0.0021176166, 0.010647486, -0.03008011, -0.013652928, -0.008528263, -0.030773673, 0.018918874, -0.017570278, -0.012246535, 0.0103585, 0.0079310285, -0.018366592, 0.04880633, -0.010808033, -0.009054858, 0.016029024, -0.017326247, -0.016183151, -0.004604492, -0.0060686814, -0.02616276, -0.015643712, -0.016979463, 0.011097018, -0.014089616, -0.02585451, 0.016799651, -0.011578659, 0.010223641, -0.019895, -0.0028705827, -0.033239678, -0.013819897, 0.017146433, -0.0048966873, -0.011225455, 0.020447282, 0.014295116, 0.030414049, -0.0032815833, 0.014115304, -0.022605035, -0.018700529, 0.038197372, -3.4994257e-05, 0.012541941, 0.02486554, -0.003955881, 0.011687831, 0.027845293, -0.022386692, 0.05440621, -0.028333357, -0.029592047, -0.009446593, 0.0019988117, 0.005924189, -0.009786953, -0.017968435, 0.018199623, 0.005866392, 0.05481721, 0.01410246, -0.009106233, 0.031621363, -0.016568463, -0.020087657, 0.01178416, 0.0027549886, 0.0057925405, -0.0048774215, 0.024313258, 0.016581308, 0.023324287, -0.0626776, -0.023349974, 0.032854363, -0.019124374, -0.017621653, -0.017326247, 0.029746171, 0.04282113, 0.045800883, -0.017865684, -0.043411944, -0.006890683, -0.005407227, 0.0017050105, 0.0041581704, -0.023735287, 0.047085263, 0.021294972, 0.012291488, 0.0015741646, 0.04731645, -0.012208004, -0.006595276, -0.019394092, -0.018340904, -0.007950294, -0.0033136928, -0.006216385, 0.010564001, 0.046648573, 0.0117392065, 0.0005093358, -0.016645527, 0.031980988, -0.0021994957, 0.008162216, 0.026239824, -0.018906029, 0.038248748, -0.01604187, 0.023093099, -0.011424534, -0.05158058, -0.008097997, -0.00253825, 0.028102169, -0.018173935, 0.038248748, -0.0020325265, 0.014603367, -0.008187903, -0.012188738, 0.018700529, 0.0073530586, 0.007064074, 0.010133735, -0.039070748, 0.040380813, -0.0071282927, 0.008303498, 0.022168348, -0.003042368, 0.049679704, -0.014796023, 0.013306146, -0.0205115, -0.0030937432, -0.017737247, -0.04854945, -0.007770481, -0.023876568, 0.025417821, -0.013062115, -0.020447282, -0.02820492, 0.034935053, 0.005204938, -0.041485377, 0.0050636563, -0.006084736, -0.0043797255, -0.012599738, -0.02745998, -0.009472281, 0.012252957, 0.0064443615, -0.008997061, -0.021192221, -0.04176794, 0.0086631235, 0.02299035, 0.014025398, 0.041074377, 0.0010764685, 0.0023423827, -0.019368406, 0.024056382, 0.0027598052, 0.016645527, -0.022232566, 0.019869313, -0.004517796, 0.0023712812, -0.012985052, 0.012792395, -0.015001523, -0.049756765, -0.016273057, -0.0018495029, -0.039045062, 0.008470466, -0.006832886, -0.008759451, -0.041639503, -0.037041433, 0.00671087, 0.00347424, 0.0008613354, -0.007886075, 0.0097612655, 0.0041485378, 0.008399826, 0.002480453, 0.015245555, 0.006929214, 0.001706616, 0.022116972, -0.038582686, 0.026586605, 0.0089264205, 0.053275958, -0.02108947, -0.031467237, 0.009016327, 0.02323438, 0.019265655, -0.013974022, 0.055382337, -0.04323213, 0.011944707, 0.0014866664, 0.010384188, -0.016106088, 0.0028689771, -0.056050215, 0.016696902, -0.014359335, 0.04030375, -0.037015747, -0.025674697, 0.037991874, -0.01031997, 0.027331544, 0.0121630505, 0.0072374647, 0.07428837, 0.016414339, -0.011951128, 0.0023391717, 0.005631993, 0.013306146, 0.025212321, 0.0003501934, -0.06822611, 0.002820813, 0.008342029, -0.0038338655, -0.025661852, -0.024043538, 0.02527654, -0.0020116556, 0.012118097, 0.032391988, 0.029283796, 0.013190552, 0.050193455, 0.026201291, -0.0072824177, 0.019779406, -0.00681362, -0.03812031, 0.04169088, 0.007109027, 0.027896669, 0.008842936, 0.017891372, -0.007263152, -0.05805384, -0.0311333, 0.005387962, -0.016388651, 0.004138905, -0.0028256294, -0.04793295, 0.004524218, -0.0089264205, 0.021872941, 0.060314346, 0.017390465, 0.0160804, 0.007096183, 0.0634996, 0.034292866, -0.027896669, -0.008817248, 0.020498658, -0.039327625, 0.012561208, 0.03760656, 0.018983092, -0.0062324395, -0.023889413, 0.018443653, 0.003215759, 0.009215405, 0.042872503, -0.03293143, 0.029797547, -0.051529206, -0.019625282, 0.0027148519, -0.013986866, -0.0042898194, -0.020614251, 0.014731805, 0.038377184, -0.024094913, -0.03218649, 0.00013144796, 0.016645527, 0.0317498, 0.018161092, 0.015682243, 0.0042320224, -0.00031788333, -0.039122123, -0.032417677, 0.024351789, 0.03853131, 0.009112655, -0.026047166, -0.0114309555, -0.00817506, -0.02902692, 0.009870438, 0.012850192, 0.031801175, 0.0028015473, -0.04585226, 0.009138343, -0.002824024, 0.0020309212, 0.034626804, -0.0092924675, -0.0073980116, -3.64743e-05, 0.031878237, -0.017865684, 0.008252122, -0.03308555, -0.0026137072, 0.013331833, 0.012047457, -0.04127988, 0.01921428, 0.030825049, -0.023966474, -0.031929612, -0.012342863, 0.00510861, 0.019368406, 0.017210653, 0.015258399, 0.00010034195, -0.00031828467, -0.015939118, -0.003583412, -0.009138343, -0.035474494, -0.02779392, -0.045287132, 0.032006677, -0.0317498, 0.0055388757, 0.00043989913, -0.022258254, -0.011386002, 0.00016777175, 0.015271243, 0.004241655, 0.0006654679, 0.025803134, -0.008149372, -0.03508918, 0.01420521, 0.003971936, -0.04294957, -0.022335317, 0.023170162, -0.011032798, 0.023825195, 0.017313402, -0.012387817, 0.028256295, 0.0008476888, 0.011585081, -0.035782743, -0.019509686, 0.019496843, -0.0147703355, -0.0039269826, 0.03488368, -0.030619549, -0.006922792, 0.03516624, -0.008817248, -0.03038836, -0.014025398, 0.0018446865, -0.006595276, 0.014128148, 0.011809846, -0.0010612165, 0.010538314, -0.008862201, -0.016542776, -0.00057114643, 0.041125752, -0.013614397, 0.0034292866, 0.021757348, -0.010975001, 0.008117263, 0.004582015, 0.002997415, 0.0033779116, -0.034010302, 0.007141136, 0.0017050105, -0.013807053, -0.013396053, 0.012773129, -0.014796023, 0.006935636, -0.012233691, -0.01141169, 0.021539003, -0.037991874, -0.019329874, -0.0052306256, 0.05214571, 0.011591502, -0.0016729011, 0.018417967, 0.042769756, 0.019573906, -0.016067557, 0.0146675855, 0.0002954067, -0.020408751, -0.008097997, -0.011713519, 0.012503411, -0.034524053, -0.02510957, -0.041999128, -0.006049416, 0.021924315, 0.020922503, -0.019355562, 0.01604187, 0.0014617816, 0.047470573, 0.019509686, 0.015797837, -0.039224874, 0.03205805, -0.002343988, 0.0160804, -0.004418257, 0.042076193, 0.008817248, 0.035397433, 0.03645062, -0.040612, 0.011032798, -0.016773963, -0.0145648355, 0.02006197, -0.047573324, 0.009677781, 0.018816123, 0.0053783287, 0.009986032, 0.003637998, -0.010679595, 0.008072309, -0.0026345784, -0.013055692, -0.039327625, 0.008329185, 0.03059386, 0.01352449, 0.008374138, 0.0066980263, -0.018238153, -0.0014481351, 0.029694797, 0.01812256, -0.014166678, -0.030876424, 0.018405123, 0.029052608, -0.015245555, 0.01897025, 1.5477746e-05, -0.0038306545, -0.025019664, 0.01509143, -0.020755533, -0.002599258, -0.011797003, 0.013152021, 0.021320658, -0.0059209783, -0.005089344, 0.0050604455, -0.022849068, 0.046622887, 0.017351933, 0.0059274, -0.028564544, 0.00011348675, 0.011103439, -0.04628895, 0.02510957, 0.0072310427, 0.00040939517, -0.0160804, 0.017737247, 0.0311333, 0.0062452834, -0.0061617987, 0.03516624, 0.0013044454, -0.010095203, -0.0033201147, 0.023183005, 0.042024817, -0.013460271, 0.004363671, 0.0009785347, -0.037734997, -0.00916403, -0.0065760105, 0.021449097, 0.0156694, -0.006922792, -0.030670924, 0.012124519, 0.02385088, 0.016337276, -0.042872503, 0.024403164, 0.010037406, -0.02725448, -0.02871867, 0.00053823425, -0.032520425, -0.0108594075, 0.034395617, 0.025045352, 0.0043090847, 0.001144701, 0.0033650678, 0.0018992726, 0.014603367, -0.01362724, 0.03863406, -0.0126768015, -0.015964806, 0.0067750886, -0.0057283216, -0.003124247, -0.0132033955, -0.030568173, 0.026072854, -0.015348306, 0.0045531164, -0.014577679, -0.012246535, 0.009491546, 0.035217617, 0.011668566, 0.06586286, -0.0058471262, -0.011976816, 0.005648048, -0.018161092, 0.0028288404, -0.01771156, -0.035757057, -0.008374138, -0.018880343, -0.0033714897, -0.036630433, 0.015052899, -0.031107612, -0.01655562, -0.009754843, -0.019535374, -0.0017467528, 0.008027356, -0.021436252, 0.027023293, 0.009363108, -0.018161092, 0.014847399, -0.0011198162, -0.026458167, -0.0074879183, -0.009851172, 0.0052242037, 0.007064074, 0.0024916914, -0.016016182, -0.0039398265, 0.012830926, 0.024531601, 0.007847544, -0.010300703, -0.0012370156, 0.041639503, -0.0065760105, 0.009812641, -0.0003231011, 0.019021625, -0.004065053, -0.023632538, 0.027639793, 0.014796023, 0.010249329, 0.032802988, -0.000106462816, 0.0325718, 0.019740876, 0.043694507, -0.017159278, 0.00028035542, 0.030208549, -0.006357666, 0.024505913, 0.030157173, -0.008887889, 0.0030905323, -0.035679992, -0.030131485, 0.01645287, -0.025160946, -0.0006951691, 0.001032318, -0.020871127, 0.03758087, 0.032135114, 0.02026747, 0.010833721, 0.043745883, -0.029592047, 0.03624512, 0.0021095893, 0.012965786, 0.028102169, 0.022784848, -0.036116682, 0.00045996753, 0.03655337, 0.0010596111, 0.0024210508, 0.0066723386, -0.0049416404, 0.012554785, -0.013884116, -0.036501996, -0.011090595, -0.0010379372, -0.0027309067, -0.013049271, -0.019907843, -0.026715042, -0.00130284, -0.027896669, 0.009677781, -0.0074108555, -0.014834555, 0.03177549, 0.025507728, 0.0013686643, -0.039558813, 0.010769501, 0.020383064, 0.024030695, 0.00024363027, 0.0031467236, -0.034524053, -0.0037632247, -0.010249329, 0.00575722, 0.010576845, 0.024428852, -0.00521136, -0.03416443, -0.019522531, -0.0016431998, 0.008020935, 0.031569988, -0.00020178767, 0.020023437, 0.013640084, -0.020755533, 0.025777446, -0.021140845, 0.040457875, -0.040278062, 0.0036058885, 0.008695233, 0.042795442, 0.021616066, 0.00017760527, -0.013473115, -0.013768522, 0.015720775, 0.014718961, -0.009208984, 0.01076308, 0.04898614, -0.0021738082, 0.008065888, 0.007866809, -0.009819062, 0.026971918, -0.004630179, 0.025289383, -0.005037969, -0.00865028, 0.01591343, 0.010403454, -0.0059562987, 0.038197372, 0.028847108, -0.0055324542, 0.0019779406, 0.0029701218, -0.0035063494, -0.029848922, -0.00014981054, 0.021397721, -0.021988535, -0.0049416404, -0.027716856, -0.01839228, 0.039867062, 0.027614105, -0.0049320078, -0.023054568, -0.021577533, -0.017120745, -0.014128148, 0.0074044336, 0.0037279043, 0.013819897, 0.0027790708, -0.0042191786, -0.02360685, -0.01352449, 0.03634787, -0.007378746, -0.028025107, -0.0024643985, 0.011225455, 0.01362724, 0.018071184, 0.025430664, 0.03419012, 0.0037568028, 0.009928235, -0.0060173064, -0.02449307, -0.0010315153, 0.0067815105, 0.00081036164, -0.042589944, 0.015476743, -0.019239968, 0.014821711, 0.003267134, 0.023889413, -0.0075585586, -0.048857704, 0.001639989, -0.031236049, -0.0026474223, -0.0016889558, 0.025880197, -0.016465714, 0.03675887, -0.0019474367, -0.009157608, 0.0057925405, -0.015168493, -0.0012619004, 0.0076998402, -0.030979173, -0.021025252, 0.0142437415, -0.0005872011, 0.021346346, 0.0043797255, 0.0058631813, 0.048934765, -0.015181337, 0.004376515, -0.023337131, 0.03935331, -0.024351789, 0.0014473323, -0.027100354, -0.073877364, -0.012657535, 0.017069371, 0.007160402, 0.013922647, -0.005590251, 0.00548429, -0.014038241, 0.009009905, 0.00034878863, -0.012503411, -0.0011422929, 0.0055003446]"
../../../gradio,../../../gradio/gradio/components,highlighted_text.pyi,"""""""gr.HighlightedText() component.""""""

from __future__ import annotations

from typing import Any, Callable, List, Union

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.data_classes import GradioModel, GradioRootModel
from gradio.events import Events

set_documentation_group(""component"")


class HighlightedToken(GradioModel):
    token: str
    class_or_confidence: Union[str, float, None] = None


class HighlightedTextData(GradioRootModel):
    root: List[HighlightedToken]

from gradio.events import Dependency

@document()
class HighlightedText(Component):
    """"""
    Displays text that contains spans that are highlighted by category or numerical value.

    Demos: diff_texts
    Guides: named-entity-recognition
    """"""

    data_model = HighlightedTextData
    EVENTS = [Events.change, Events.select]

    def __init__(
        self,
        value: list[tuple[str, str | float | None]] | dict | Callable | None = None,
        *,
        color_map: dict[str, str]
        | None = None,  # Parameter moved to HighlightedText.style()
        show_legend: bool = False,
        combine_adjacent: bool = False,
        adjacent_separator: str = """",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        interactive: bool | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show. If callable, the function will be called whenever the app loads to set the initial value of the component.
            color_map: A dictionary mapping labels to colors. The colors may be specified as hex codes or by their names. For example: {""person"": ""red"", ""location"": ""#FFEE22""}
            show_legend: whether to show span categories in a separate legend or inline.
            combine_adjacent: If True, will merge the labels of adjacent tokens belonging to the same category.
            adjacent_separator: Specifies the separator to be used between tokens if combine_adjacent is True.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            interactive: If True, the component will be editable, and allow user to select spans of text and label them.
        """"""
        self.color_map = color_map
        self.show_legend = show_legend
        self.combine_adjacent = combine_adjacent
        self.adjacent_separator = adjacent_separator
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            interactive=interactive,
        )

    def example_payload(self) -> Any:
        return [
            {""token"": ""The"", ""class_or_confidence"": None},
            {""token"": ""quick"", ""class_or_confidence"": ""adj""},
        ]

    def example_value(self) -> Any:
        return [(""The"", None), (""quick"", ""adj""), (""brown"", ""adj""), (""fox"", ""noun"")]

    def preprocess(
        self, payload: HighlightedTextData | None
    ) -> list[tuple[str, str | float | None]] | None:
        """"""
        Parameters:
            payload: An instance of HighlightedTextData
        Returns:
            Passes the value as a list of tuples as a `list[tuple]` into the function. Each `tuple` consists of a `str` substring of the text (so the entire text is included) and `str | float | None` label, which is the category or confidence of that substring.
        """"""
        if payload is None:
            return None
        return payload.model_dump()  # type: ignore

    def postprocess(
        self, value: list[tuple[str, str | float | None]] | dict | None
    ) -> HighlightedTextData | None:
        """"""
        Parameters:
            value: Expects a list of (word, category) tuples, or a dictionary of two keys: ""text"", and ""entities"", which itself is a list of dictionaries, each of which have the keys: ""entity"" (or ""entity_group""), ""start"", and ""end""
        Returns:
            An instance of HighlightedTextData
        """"""
        if value is None:
            return None
        if isinstance(value, dict):
            try:
                text = value[""text""]
                entities = value[""entities""]
            except KeyError as ke:
                raise ValueError(
                    ""Expected a dictionary with keys 'text' and 'entities' ""
                    ""for the value of the HighlightedText component.""
                ) from ke
            if len(entities) == 0:
                value = [(text, None)]
            else:
                list_format = []
                index = 0
                entities = sorted(entities, key=lambda x: x[""start""])
                for entity in entities:
                    list_format.append((text[index : entity[""start""]], None))
                    entity_category = entity.get(""entity"") or entity.get(""entity_group"")
                    list_format.append(
                        (text[entity[""start""] : entity[""end""]], entity_category)
                    )
                    index = entity[""end""]
                list_format.append((text[index:], None))
                value = list_format
        if self.combine_adjacent:
            output = []
            running_text, running_category = None, None
            for text, category in value:
                if running_text is None:
                    running_text = text
                    running_category = category
                elif category == running_category:
                    running_text += self.adjacent_separator + text
                elif not text:
                    # Skip fully empty item, these get added in processing
                    # of dictionaries.
                    pass
                else:
                    output.append((running_text, running_category))
                    running_text = text
                    running_category = category
            if running_text is not None:
                output.append((running_text, running_category))
            return HighlightedTextData(
                root=[
                    HighlightedToken(token=o[0], class_or_confidence=o[1])
                    for o in output
                ]
            )
        else:
            return HighlightedTextData(
                root=[
                    HighlightedToken(token=o[0], class_or_confidence=o[1])
                    for o in value
                ]
            )

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","This code defines a `HighlightedText` component that displays text with highlighted spans based on categories or numerical values. It allows users to interactively label spans of text. The component has various parameters such as `color_map`, `show_legend`, `combine_adjacent`, `adjacent_separator`, `label`, `every`, `show_label`, `container`, `scale`, `min_width`, `visible`, `elem_id`, `elem_classes`, `render`, and `interactive` that can be customized. The component also includes methods for preprocessing and postprocessing data, as well as defining event handlers for `change` and `select` events.","[-0.051044095, 0.0062031164, 0.03227452, 0.022466268, -0.020451972, -0.022981286, -0.010363325, -0.023828207, 0.016228817, 0.020486306, 0.012898361, 0.03195406, 0.012989921, -0.014821099, 0.07947314, 0.009138724, -0.017316079, 0.029367521, -0.012097221, 0.054157097, -0.025750944, -0.010443439, -0.004529305, 0.058323026, -0.0412244, -0.008926994, -0.05534736, 0.05635451, 0.02774235, 0.002160218, 0.016034255, -0.03293832, 0.017453417, 0.0035336018, -0.046855275, 0.028268814, 0.01555357, 0.044200066, 0.030924022, 0.0072789337, -0.003390541, 0.019971287, -0.030626455, 0.011610814, 0.0012074332, 0.032984097, -0.014981327, 0.02442334, 0.023851097, 0.10208819, -0.0077023935, 0.04202554, 0.0003274304, -0.021253113, 0.023336077, -0.0070786485, -0.049808048, 0.046397477, 0.017144406, -0.025613606, 0.04362782, -0.021607904, -0.08052606, 0.019570718, -0.0080342945, 0.0010951305, -0.040583488, 0.0019055698, -0.027238777, -0.03772227, 0.08464622, 0.0013440562, 0.006700968, -0.0045350273, -0.0078053973, -0.010431994, -0.058735043, 0.023015622, -0.0040715104, -0.0023547807, 0.021104328, -0.008017127, -0.040972613, -0.015965585, -0.028383262, -0.03440326, -0.0053561963, 0.017659426, -0.052509036, -0.031152919, -0.017487751, -0.018815357, -0.023233075, -0.0008254608, 0.017991327, 0.021184443, -0.10126416, -0.020303188, -0.015049996, 0.018781021, 0.04870934, -0.026643643, 0.0016037115, -0.02616296, 0.053653523, -0.0029842483, 0.03305277, 0.026254518, -0.012703799, 0.03259497, -0.029550638, 0.039004095, -0.059467513, 0.059421733, 0.028429043, -0.071599066, -0.0020472, -0.046855275, 0.0033562065, -0.019170146, 0.016698057, -0.02515581, 0.020623645, 0.0035994097, -0.040629268, -0.016720947, 0.008646594, -0.03618866, -0.03964501, -0.019513493, -0.007164485, -0.01305859, -0.01717874, -0.018071441, -0.049075577, 0.057132762, -0.06821139, 0.02190547, -0.06303831, 0.0488009, -0.028245924, -0.010746728, 0.052646376, 0.016526384, -0.0070099793, -0.034220144, -0.0129670305, 0.045115653, -0.019467713, 0.035021283, 0.0034506265, 0.030466229, -0.038180068, -0.0068783634, 0.015633684, -0.016080033, 0.041682195, 0.017132962, -0.016022809, -0.04310136, 0.015301784, -0.020097181, -0.0036137158, 0.027856799, 0.0056737913, -0.008652317, 0.0014177326, -0.0073418804, -0.02948197, -0.003948478, 0.02103566, -0.0588266, -0.008326138, -0.0029584973, 0.005682375, 0.031542044, -0.015198779, 0.026712313, 0.01265802, 0.008623705, 0.0022503464, 0.030718016, -0.046145692, 0.029069955, -0.019753836, -0.00632901, 0.028085696, 0.0072388765, 0.01635471, 0.006168782, -0.013676613, -0.011238856, -0.008452032, 0.033396114, -0.035685085, -0.007462051, 0.07645169, 0.032503415, 0.004137318, -0.0011208814, -0.0034735163, 0.028772388, -0.0058712154, 0.019650832, -0.016881175, 0.04371938, -0.061527587, -0.0033619287, 0.01947916, -0.04477231, 0.015324673, -0.008806823, 0.029893985, 0.022866838, -0.033991247, -0.053699303, -0.014042848, -0.0100199785, 0.014019959, 0.033808127, -0.025888283, 0.0007803967, 0.029047064, -0.043124247, -0.017522087, -0.0044749416, 0.017052848, -0.0066780783, -0.04465786, 0.01642338, 0.026643643, -0.022512047, 0.04729018, 0.0149584375, 0.0032617862, -0.082631916, 0.009836861, 0.010231708, 0.050128505, 0.01435186, -0.0106666135, -0.01635471, 0.015061441, -0.007948458, 0.03767649, 0.024171554, -0.02774235, -0.047335956, -0.005124438, 0.046145692, 0.045459, 0.009419123, -0.02228315, -0.024263112, -0.010563609, -0.0045779455, -0.02261505, 0.04806843, 0.025705164, -0.05823147, -0.02108144, -0.06619709, -0.035730865, -0.017510641, -0.03600554, 0.0045235823, 0.01771665, 0.014466308, -0.02185969, -0.032366075, 0.0051616337, 0.016389046, 0.033121437, -0.0067353025, 0.004145902, 0.0057167094, 0.027879689, 0.046511926, 0.0034506265, 0.01682395, 0.013379046, 0.027948357, 0.026689423, 0.037607823, -0.024606457, -0.012143001, 0.00475248, -0.021413341, -0.00074534677, -0.036509115, 0.018712353, -0.020806763, 0.03518151, -0.0077138385, -0.003193117, 0.06921854, 0.023244519, 0.0096823545, 0.011278913, -0.044200066, -0.008223135, -0.010397659, -0.006889808, -0.02310718, 0.059971087, -0.007622279, 0.008955606, 0.0068039717, -0.031564936, -0.026437636, 0.011015682, -0.052646376, 0.02145912, -0.049808048, -0.012085777, -0.016537828, 0.051913902, 0.051730786, -0.0016451993, 0.0093504535, 0.0020572143, -0.0067467475, 0.053378846, -0.004572223, -0.0019255984, -0.03362501, -0.04117862, 0.030534897, 0.0109927915, -0.0062031164, 0.046855275, -0.018529234, -0.027833909, 0.006008554, 0.030099992, -0.051959682, -0.005802546, 0.008102964, -0.058460366, 0.021413341, 0.0013075757, -0.038042728, -0.008841158, -0.01113013, 0.034151476, -0.0026051372, -0.03705847, 0.005138744, -0.001040052, -0.029207293, -0.04559634, -0.011238856, 0.029367521, -0.054889567, 0.020509196, -0.043147136, -0.062397398, -0.008555036, -0.028017027, 0.003416292, 0.036623564, 0.018334672, 0.005419143, 0.00715304, -0.0040829554, -0.017808208, -0.057132762, -0.014637981, -0.0012761024, -0.01129608, 0.0046580597, -0.00042954006, 0.0090815, -0.035730865, -0.019902619, -0.0074277166, 0.010042869, -0.020760983, -0.009230283, -0.0049041244, 0.024698017, -0.060337324, -0.01178821, -0.029115735, 0.0028311731, -0.026002731, 0.034082804, -0.0066208537, -0.03616577, 0.006901253, 0.0227295, -0.0018554985, -0.027856799, 0.019170146, 0.018403342, 0.04035459, -0.029092845, 0.028772388, 0.064182796, 0.028886836, 0.0012911237, -0.027444784, -0.0073075457, 0.01075245, 0.0017267439, 0.0037453317, 0.007376215, 0.030832464, 0.010929845, -0.0060028313, 0.048297327, -0.0041287346, 0.028589271, 0.002127314, 0.04616858, 0.024514899, 0.035730865, -0.036783792, -0.04962493, 0.011290358, 0.010769617, -0.035524856, 0.038408965, -0.060291544, 0.008560758, 0.04788531, 0.027192997, -0.032228738, -0.012795358, -0.030191552, -0.011519256, 0.024514899, 0.08569914, 0.049167138, -0.00039270188, -0.046077024, 0.018437676, 0.02952775, 0.03373946, -0.048297327, 0.009218838, 0.012543571, -0.015725244, -0.018037105, 0.011668039, 0.011713819, 0.012394788, -0.04358204, -0.050036944, -0.043032687, -0.027124329, 0.07713839, -0.061893824, 0.009304674, 0.020829653, 0.035524856, 0.01435186, 0.026002731, 0.018254558, -0.004609419, 0.0048497613, 0.0058712154, -0.014821099, 0.038431853, -0.03181672, -0.021676572, 0.026208738, 0.01435186, 0.06491527, 0.016366156, 0.056720745, 0.0260714, 0.070134126, 0.0016394767, 0.008120131, 0.020360414, 0.028429043, 0.010323267, 0.0046780882, -0.014786764, 0.027215887, -0.015187334, -0.0059570516, -0.013379046, 0.033419, 0.08739298, -0.011170187, -0.0090299975, -0.016492048, -0.008102964, -0.012944141, -0.014145852, -0.006082945, -0.008904104, -0.00059549056, 0.011713819, -0.04202554, -0.01684684, 0.013287487, -0.039301664, 0.050815195, -0.034769498, -0.02854349, 0.028451933, -0.0045779455, -0.02513292, 0.029962653, -0.018300338, -0.02689543, 0.008652317, -0.02776524, -0.02155068, 0.038042728, -0.020383302, -0.010271765, -0.033235885, 0.004912708, -0.00990553, -0.035410408, -0.027879689, -0.015198779, 0.013047145, 0.010277488, -0.009293229, -0.030695125, -0.0023490584, 0.009728135, -0.07260622, -0.034037024, -0.00028236627, -0.028268814, -0.026025621, 0.00527036, -0.005819713, -0.037378926, 0.0070385914, -0.03284676, -0.005044324, 0.012692355, -0.021665128, 0.01724741, 0.028863948, 0.014454863, 0.003233174, -0.011902658, 0.01684684, 0.016034255, 0.010214541, -0.014420529, 0.029642198, 0.0016223094, -0.05745322, 0.045893904, -0.05305839, 0.00858937, -0.004689533, -0.0040285923, 0.027238777, -0.01435186, -0.024034215, 0.01925026, -0.009396234, -0.009842583, 0.019524937, 0.0024506315, -0.012097221, 0.015793912, 0.021276003, -0.015153, 0.023347523, -0.013733837, -0.008205968, 0.0053190007, 0.016640833, 0.024057103, -0.039851017, -0.0054592, -0.01842623, 0.012806803, 0.008452032, -0.022294596, 0.02767368, 0.0083661955, -0.040537708, -0.037447594, -0.009968476, 0.006340455, 0.013596498, -0.026414746, -0.014695206, -0.00079255685, -0.012875472, -0.00072174176, 0.04216288, -0.028177256, -0.02689543, 0.020509196, -0.05154767, 0.019639386, 0.0009627992, 0.022969842, -0.0035021284, -0.012497791, -0.006786804, -0.036600675, 0.030512007, -0.0057167094, 0.0118111, -0.02098988, -0.00046029812, -0.04962493, -0.009556461, -0.0169384, -0.015049996, -0.01896414, 0.025293149, 0.002886967, 0.0061745043, 0.038935427, -0.042597786, 0.00027592853, 0.02950486, -0.008766766, -0.020371858, 0.023187295, 0.011204522, 0.030489117, -0.012600795, 0.06303831, 0.0011902659, -0.0017610785, -0.01927315, 0.01258935, 0.0062317285, -0.014145852, -0.0024763825, 0.0017281745, -0.0025393292, 0.03293832, -0.0027353226, 0.009401956, 0.03460927, 0.02440045, 0.012131556, 0.045871016, 0.02536182, 0.012371898, 0.0021945527, 0.014466308, 0.017636536, 0.018506344, 0.01724741, -0.012978476, -0.014145852, 0.009184503, 0.012268894, 0.01178821, -0.0034277367, 0.010323267, -0.002120161, -0.019570718, 0.014111517, 0.0059169945, 0.0036652177, -0.034082804, 0.0017381887, 0.002708141, -0.029893985, 0.028818168, 0.025476268, -0.031656493, 0.031175809, 0.023713758, 0.014214521, 0.021047104, 0.001211725, -0.00092345744, -0.028314594, -0.02698699, 0.013001366, -0.031633604, 0.02863505, -0.030145772, -0.02943619, -0.013825396, 0.011616537, 0.03964501, 0.048388883, 0.02185969, -0.06207694, -0.00037803815, -0.0027653652, -0.008732432, 0.0054134205, 0.032343186, 0.01157648, 0.012143001, 0.0023304604, -0.006586519, -0.03129026, -0.0028054223, -0.0083661955, 0.000698852, -0.011936993, 0.009756747, -0.003510712, -0.032480523, 0.01261224, 0.03618866, -0.0103404345, 0.00078111194, 0.017533531, -0.00776534, -0.033281665, -0.00578824, -0.0015479178, 0.004331881, 0.024904024, -0.010180207, -0.025842503, -0.040102802, -0.026735201, -0.032343186, -0.03559353, -0.010552164, 0.0007181652, 0.025064252, 0.0075707776, -0.0003192044, 0.0076337242, 0.0010264613, -0.007112983, 0.02359931, -0.0016337543, -0.0059284396, 0.026460527, -9.236363e-05, -0.027811019, 0.0022031362, -0.008062907, -0.0015779607, 0.006082945, 0.013665168, 0.01011726, -0.005819713, -0.013894065, -0.012108666, -0.030695125, -0.022855394, -0.017819652, -0.03623444, 0.006844029, 0.00036695096, -0.01011726, -0.025018472, -0.012120111, -0.009407679, -0.00922456, -0.002755351, 0.017487751, -0.02355353, 0.03783672, -0.012234559, 0.018254558, -0.025499158, -0.026529195, 0.03529596, 0.009779637, -0.022763835, 0.015061441, 0.027559232, -0.03767649, -0.011055739, -0.013001366, 0.031450488, -0.045916796, 0.001715299, -0.032182958, 0.021390451, 0.015896916, -0.0018011355, -0.022077143, -0.0066208537, -0.027856799, 0.021470565, 0.0071988194, 0.009155891, -0.0051759398, -0.013333267, -0.075993896, -0.026391856, -0.021150108, 0.01773954, -0.004394828, -0.013676613, -0.0031444763, 0.024720905, -0.06889808, -0.032480523, 0.00022549959, -0.022340374, -0.015347563, -0.038317405, 0.010655168, 0.04362782, 0.01590836, -0.020921212, 0.009499237, -0.004291824, -0.01820878, 0.021413341, -0.018758131, -0.017190186, 0.00014180903, -0.008555036, -0.029138625, -0.021585014, -0.0020958406, 0.011044294, -0.024217332, -0.012131556, -0.029779537, -0.01117591, -0.010317544, -0.006872641, 0.013401936, 0.06605975, 0.0075879446, -0.0011709527, -0.0016294625, 0.02315296, 0.0068783634, 0.005619428, 0.010128705, -0.00088697695, -0.014489198, -0.0061001126, 0.008629427, -0.0020200184, -0.027215887, -0.009951309, 0.03547908, -0.003298982, -0.007393382, 0.025728054, -0.011462031, -0.0050414624, -0.014374749, 0.015427677, 0.052097023, 0.02618585, 0.003854058, -0.010557887, -0.02948197, -0.0017911212, 0.015736688, 0.06615131, 0.005098687, -0.0113246925, 0.04149908, 0.0038426132, 0.0063919565, -0.011278913, -0.019708056, 0.019662276, -0.0269641, -0.01475243, 0.0251787, -0.013768171, -0.021848245, -0.039255884, 0.020131515, 0.00082903734, -0.003007138, -0.024171554, -0.0057453215, 0.010706671, 0.03383102, -0.015679464, -0.0020214492, 0.020451972, 0.027215887, 0.037584934, 0.014580756, -0.014180186, -0.020760983, 0.018071441, 0.02854349, 0.009985643, -0.00691842, -0.012257449, 1.636258e-05, -0.03227452, 0.019685166, 0.028337482, 0.04806843, -0.015565015, 0.05891816, 0.0050128503, -0.01811722, -0.01891836, -0.061115574, -0.032160066, -0.018105775, -0.004226016, -0.0019785308, -0.021951249, 0.010060036, -0.007965625, -0.023118624, -0.009321841, -0.039507672, 0.004783953, 0.023461971, 0.015095776, 0.022031363, -0.0218368, 0.0077939522, -0.0027796715, 0.009430568, -0.05031162, -0.002371948, 0.020463416, -0.012520681, 0.0014978466, -0.01686973, 0.024469119, 0.030832464, -0.007885511, 0.021607904, 0.0022803892, 0.01800277, -0.016789615, -0.013527829, 0.037607823, -0.019101478, -0.0008605107, -0.01178821, -0.0053533353, 0.036669344, -0.010969902, -0.008246024, -0.016617943, -0.022340374, -0.029939765, -0.03959923, 0.017865432, -0.012726689, 0.03724159, -0.0023147238, 0.013070035, 0.016503494, 0.03776805, 0.023713758, -0.055210024, -0.01258935, 0.031427596, -0.02101277, -0.006580797, 0.017384749, -0.027490564, -0.009487792, -0.004743896, -0.007021424, 0.012818248, -0.024835356, 0.046969723, -0.031542044, -0.025499158, -0.005444894, -0.008995663, -0.017533531, 0.037630714, 0.037218697, -0.027101438, 0.02437756, 0.007204542, -0.042872462, 0.056491848, 0.008835435, 0.018929806, 0.050906755, 0.00081544655, 0.027490564, -0.035410408, -0.031702273, 0.020829653, 0.0063919565, -0.003991396, 0.029825315, -0.021069994, -0.0031444763, -0.024171554, 0.031427596, 0.02861216, -0.0016308931, 0.017384749, -0.025888283, 0.007776785, 0.005030018, 0.0037968336, 0.017167296, 0.04284957, -0.030855354, -0.020554977, 0.029047064, 0.026597863, -0.0016151564, 0.034952614, -0.030466229, 0.007828287, 0.01588547, -0.0032646474, 0.036394667, 0.014317525, 0.0041516246, -0.02364509, 0.006689523, -0.043902498, -0.00083046796, -0.018460566, 0.005710987, 0.00715304, 0.023896877, 0.0103461575, 0.0038969761, 0.016801061, -0.0026223045, -0.018380452, 0.015427677, -0.0046466147, 0.025041362, -0.0048039816, -0.032411855, -0.0027911162, 0.0047238674, 0.028886836, 0.027971247, 0.004240322, -0.008738154, -9.433072e-06, 0.013321822, -0.018838245, 0.023942655, 0.00096852164, -0.02849771, -0.003207423, -0.044085614, -0.0028640772, 0.060383104, -0.02776524, -0.03177094, -0.01562224, 0.014534977, 0.0118111, 0.00051752245, -0.004411995, 0.0012725259, 0.0016237401, 0.033350334, -0.03513573, -0.019513493, 0.025430487, -0.019593608, -0.00736477, 0.020955546, 0.017144406, -0.0073189903, 0.02952775, 0.007215987, -0.0077882297, -0.010947012, 0.045413222, -0.029069955, -0.017567866, 0.0010143011, 0.006786804, -0.0005303979, 0.052051242, 0.008726709, 0.006861196, 0.03628022, 0.020131515, 0.0037968336, 0.006786804, 0.012577905, -0.0015264588, 0.034197252, -0.0072789337, -0.025430487, -0.04218577, 0.025750944, -0.017281745, -0.029344631, -0.01889547, 0.035662197, 0.0430098, 0.055164244, -0.008978495, -0.004220294, 0.0029899706, 0.019421935, 0.01221167, -0.004929875, -0.03529596, 0.0010407673, -0.0093504535, 0.022466268, 0.0155993495, -0.008961328, 0.040629268, 0.020440526, -0.002442048, 0.03882098, -0.026803872, 0.032137178, -0.033899687, 0.001063657, 0.032366075, 0.024629347, -0.004240322, 0.0055707875, -0.00390556, 0.014569312, -0.020932656, -0.022431934, -0.016057145, -0.02524737, -0.0034992672, 0.0047210064, 0.022225926, 0.0010793938, -0.021230223, -0.022786723, -0.018643683, 0.024079993, 0.0096766325, 0.008148743, 0.014878323, 0.005301833, -0.029161513, 0.003945617, -0.008949883, -0.0037911113, -0.022077143, -0.015175889, 3.09369e-05, 0.028406153, 0.029161513, -0.030512007, 0.017773874, 0.01814011, 0.038431853, -0.0019112923, 0.0066952454, 0.012909806, -0.007622279, -0.00795418, -0.003522157, 0.0018469149, -0.014420529, 0.008097242, 0.0136308335, -0.02310718, -0.034632158, 0.0096995225, -0.04534455, -0.017613646, 0.0022017057, 0.006014276, 0.009808249, -0.03801984, 0.019582162, 0.03891254, 0.017476307, 0.014008514, -0.022924062, -0.0023032788, -0.014809654, 0.030969802, -0.0077023935, -0.05296683, 0.009516404, 0.003072946, -0.007536443, 0.04866356, -0.02698699, -0.024743795, 0.019124368, 0.02609429, 0.009304674, 0.014374749, 0.0049241525, -0.019238817, -0.0142946355, -0.004952765, -0.03181672, -0.026346076, 0.006912698, 0.006786804, -0.015290339, 0.010460606, -0.009939864, -0.0019484881, 0.011112963, -0.012978476, -0.014843988, -0.00084691995, 0.032091398, -0.033212997, -0.008360473, 0.013699503, -0.013001366, 0.0129670305, -0.00050250103, -0.021653682, 0.0027710877, -0.036966912, -0.00010497086, -0.0005761774, 0.030191552, 0.029092845, 0.009253172, 0.022889728, 0.023896877, 0.04275801, 0.0037996948, -0.032457635, -0.0041945428, -0.013504939, -0.0054534776, -0.019879729, -0.020074291, -0.010237431, -0.013504939, 0.016480604, 0.018609349, 0.046145692, 0.036966912, 0.014443418, 0.00015575744, -0.016640833, -0.02185969, -0.01820878, 0.027078548, 0.050220065, -0.039026987, 0.035021283, 0.017602202, -0.014100073, 0.0054248655, -0.014065738, 0.0015450566, -0.029848205, -0.006082945, -0.024011325, -0.03199984, -0.009173059, -0.0033819573, 0.011250301, -0.004440607, -0.0019456269, 0.023667978, -0.045573447, -0.0113304155, -0.07571922, -0.024286002, -0.0066208537, -0.020074291, 0.026689423, 0.00035371783, 0.019616498, 0.008967051, 0.0062717856, -0.014397639, -0.006340455, -0.024194442, -0.020600755, 0.0142603, 0.00028862516, -0.013413381, -0.028909726, 0.004477803, -0.003098697, -0.026552085, -0.02609429, 0.017613646, 0.0052789436, 0.007336158, 0.011599369, -0.02308429, 0.054065537, 0.044108506, -0.014077183, -0.008835435, -0.015565015, -0.007868344, -0.056812305, -0.012486347, 0.016343266, -0.021413341, -0.007668059, 0.0032274516, -0.047381736, 0.014821099, 0.0057939626, 0.02437756, -0.009218838, -0.006105835, -0.027902579, -0.03641756, 0.031610716, -0.02538471, -0.024675127, 0.0022889727, 0.0069813672, 0.011055739, -0.023828207, -0.004955626, 0.0012467749, -0.03202273, 0.023919765, -0.026735201, -0.01800277, 0.03538752, 0.004537889, -0.023404747, -0.0027038492, -0.021585014, 0.016034255, -0.0106723355, 0.005719571, -0.038225845, -0.03211429, -0.008383363, -0.020852542, -0.027078548, 0.046489038, -0.02433178, 0.013527829, 0.014569312, -0.018803911, 0.05466067, 0.035158623, 0.01668661, 0.011198799, 0.027925469, -0.0035450466, -0.044840977, 0.03227452, -0.0010064327, 0.008326138, -0.017052848, -0.011221689, -0.00028361805, -0.030054213, 0.0011287497, 0.008297526, -0.0051702172, 0.022683721, -0.001886972, 0.012555016, 0.0014062877, -0.00036766625, 0.015095776, 0.045848124, -0.025773834, 0.017361859, 0.00017516006, -0.003444904, -0.026346076, -0.03868364, 0.016480604, 0.011147298, -0.06056622, -0.016068589, -0.0020085736, 0.003937033, -0.030374669, -0.0206122, 0.03701269, -0.010077203, 0.014889768, -0.0169384, -0.014855433, 0.037562042, -0.009407679, -0.029321741, 0.000706005, -0.04209421, -0.011421974, -0.0029899706, 0.056903865, -0.004898402, 0.022626497, 0.021951249, -0.010271765, 0.021974139, 0.018906916, 0.02952775, -0.035410408, -0.05722432, 0.015118665, 0.023244519, 0.01722452, 0.0013826826, -0.0060428884, -0.014855433, -0.028154366, -0.023416191, -0.031381816, 0.0048669283, 0.005456339, 0.040629268, 0.0016180177, -0.007565055, 0.034815278, -0.004466358, 0.030443339, -0.028154366, -0.0023876848, -0.012143001, 0.031519156, 0.0072560436, -0.013138704, 0.0008984218, -0.001350494, -0.015381897, 0.0047496185, -0.02181391, 0.012051442, 0.027147217, -0.01896414, -0.0062317285, -0.0119827725, -0.02364509, 0.0015994197, -0.0032217293, 0.020978436, -0.0014434835, -0.040057026, 0.021356117, -0.005851187, -0.02771946, 0.015484901, -0.019879729, -2.053146e-05, 0.004440607, -0.026025621, -0.043444704, -0.023313187, 0.011467754, 0.037264477, -0.0075135534, 0.016755281, -0.024789575, -0.007839732, 0.018277448, -0.01722452, -0.013161594, -0.01976528, -0.010929845, 0.006712413, -0.012703799, -0.006958477, 0.011702374, 0.012738134, -0.017556421, 0.028062807, -0.01388262, -0.00081258535, -0.0025078559, -0.02515581, -0.02533893, 0.018849691, 0.04543611, -0.0061916714, 0.035868205, 0.028062807, 0.016732391, 0.00882399, 0.03181672, -0.022386154, -0.039118547, 0.02364509, 0.012051442, 0.0030414725, -0.026849652, 0.012806803, 0.00043311657, -0.00079255685, 0.033487674, 0.01430608, -0.0109927915, -0.03861497, 0.011936993, -0.017235965, -0.0036337443, 0.0038225846, 0.027444784, -0.03270942, 0.046878163, -0.033212997, 0.026208738, -0.019467713, -0.016114369, -0.014821099, 0.034769498, -0.012486347, -0.024171554, 0.0012317535, -0.033190105, 0.015805358, 0.016148703, -0.00055471825, 0.030122882, 0.005230303, 0.021401895, 0.024308892, 0.03460927, -0.015061441, 0.011616537, -0.009447735, -0.05640029, -0.021069994, -0.0090299975, -0.028291704, 0.012955586, -0.02691832, -0.026437636, 0.012143001, 0.005075797, 0.0018068579, 0.021894025, -0.0055049798, -0.015175889]"
../../../gradio,../../../gradio/gradio/components,json_component.pyi,"""""""gr.JSON() component.""""""

from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class JSON(Component):
    """"""
    Used to display arbitrary JSON output prettily. As this component does not accept user input, it is rarely used as an input component.

    Demos: zip_to_json, blocks_xray
    """"""

    EVENTS = [Events.change]

    def __init__(
        self,
        value: str | dict | list | Callable | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default value. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: dict | list | None) -> dict | list | None:
        """"""
        Parameters:
            payload: JSON value as a `dict` or `list`
        Returns:
            Passes the JSON value as a `dict` or `list` depending on the value.
        """"""
        return payload

    def postprocess(self, value: dict | list | str | None) -> dict | list | None:
        """"""
        Parameters:
            value: Expects a `str` filepath to a file containing valid JSON -- or a `list` or `dict` that is valid JSON
        Returns:
            Returns the JSON as a `list` or `dict`.
        """"""
        if value is None:
            return None
        if isinstance(value, str):
            return json.loads(value)
        else:
            return value

    def example_payload(self) -> Any:
        return {""foo"": ""bar""}

    def example_value(self) -> Any:
        return {""foo"": ""bar""}

    def read_from_flag(self, payload: Any):
        return json.loads(payload)

    def api_info(self) -> dict[str, Any]:
        return {""type"": {}, ""description"": ""any valid json""}

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `JSON` component in Gradio, which is used to display arbitrary JSON output in a pretty format. The component does not accept user input and is rarely used as an input component. It includes methods for preprocessing and postprocessing JSON data, as well as providing example payloads and values. Additionally, it includes a method for handling changes in the component's value and an API info method. The `change` method is used to define event triggers and their behavior, such as specifying the function to call when the event is triggered, input and output components, API documentation settings, and other event-related configurations.","[-0.04470518, 0.0030005246, -0.029083202, -0.013473644, 0.02627671, -0.0073266816, -0.027990408, -0.007947587, 0.020862415, -0.04003597, 0.03663341, 0.01815527, -0.019036954, -0.0043277093, 0.0009926723, -0.016714768, -0.009381878, 0.00832634, -0.0019015223, 0.014069713, -0.0029493, -0.045499936, 0.001994658, 0.056328524, 0.031616494, -0.023358455, -0.048852824, 0.10421274, 0.012442941, 0.00635807, -0.021048687, -0.04107909, 0.021632338, -0.0020443306, 0.027071469, -0.047809705, 0.012132488, -0.009742003, 0.017062476, -0.013510898, -0.024724446, -0.01619321, -0.035739306, 0.023097675, 0.004914465, 0.033056997, -0.03588832, 0.03355372, -0.017273584, 0.04443198, -0.03996146, -0.0016857578, -0.027940735, -0.02325911, -0.034621675, -0.01146812, -0.060252644, 0.02771721, -0.0049889735, -0.0029632703, 0.018304287, -0.028859675, 0.008506401, 0.03747784, 0.008916199, 0.011524001, -0.0013737528, -0.012672676, 0.0053677256, -0.0054670707, 0.04410911, -0.016888622, 0.006625059, -0.030647883, -0.009717167, 0.01415664, 0.010511925, -0.0411536, 0.050094634, 0.0020489872, -0.02325911, -0.00265437, -0.07296878, -0.04671691, -0.017248748, -0.012623004, -0.04120327, -0.0028701345, -0.009524686, -0.020589218, -0.03847129, -0.01998073, -0.058216076, 0.058414765, -0.020340856, -0.009586777, -0.02659958, -0.003151094, 0.015386032, 0.019769622, 0.0016671306, -0.071180575, -0.02851197, -0.033578556, 0.040408514, -0.011685437, 0.0045108767, 0.011536419, -0.0077551063, -0.034696184, -0.007817197, 0.02960476, -0.052404404, 0.02469961, -0.010120755, -0.03067272, -0.00068066735, -0.012281505, -0.021644756, -0.02948058, -0.0051783496, -0.020961761, -0.006867212, -0.021458484, -0.00016890562, -0.026872778, -0.023408128, -0.02189312, -0.03740333, 0.029728943, 0.008686464, 0.021768937, 0.026649253, -0.06298463, -0.024885882, 0.014206312, -0.06795187, -0.021595085, -0.020452619, 0.028412623, 0.043016315, -0.030747227, 0.02987796, -0.009853766, -0.021955209, -0.062289212, -0.03839678, 0.009344623, -0.054838352, -0.023271529, -0.023383291, 0.044506487, -0.060401663, -0.015435704, 0.025109408, 0.031293623, 0.048256755, -0.012666467, 0.0030750332, -0.0062928745, 0.0069603478, 0.009443969, 0.025258426, -0.0062618293, -0.011995889, -0.0065940134, -0.01303901, 0.0077675246, -0.03812358, 0.059010834, -0.004402218, -0.03812358, -0.04920053, 0.025730314, -0.011884126, -0.017608872, 0.017199075, -0.034422986, 0.0014389479, 0.0043929047, 0.0010438969, 0.0054794885, -0.043065988, -0.004597803, 0.017807562, -0.023010748, -0.024736864, -0.017882071, -0.009394296, -0.011095577, -0.0034367105, -0.0043152915, 0.027170813, 0.009065216, 0.025121827, -0.047859374, 0.038371943, -0.028040081, -0.043860745, 0.03956408, 0.05011947, 0.022874149, 0.0044922493, -0.013808932, -0.038595468, 0.007630925, 0.0019636129, -0.021595085, 0.027369503, -0.04172483, 0.00211263, 0.008307712, 0.020477455, 0.012020726, -0.023172183, -0.015050743, -0.029008692, 0.03722948, -0.026574744, -0.020589218, -0.026972124, 0.05086456, 0.0072459644, -0.016913459, 0.03956408, -0.013225282, 0.028213935, -0.0293564, 0.043612383, -0.018416049, 0.053000472, -0.0057620006, -0.0042283647, -0.0015833083, 0.02856164, -0.03335503, 0.005907913, -0.06134544, 0.060252644, 0.04870381, -0.050591357, -0.028586477, 0.02181861, -0.005988631, 0.036608573, 0.04016015, -0.011045904, -0.03740333, 0.0420477, 0.07724061, 0.0004059168, 0.0066064317, 0.0452019, -0.013957949, -0.012647839, 0.010511925, 0.0032411253, 0.046741746, 0.00058791967, -0.0024168736, 0.013659915, -0.05478868, -0.03179035, 0.042171884, -0.015895175, 0.054937694, 0.01605661, 0.018366378, -0.02771721, 6.7863e-05, 0.02148332, -0.024078704, 0.029803451, 0.011114203, -0.017571619, 0.06675973, 0.0497966, 0.06432578, -0.0008118336, 0.03400077, -0.042147048, -0.0018456408, -0.017596455, 0.01244915, -0.021545412, 0.041054256, -0.014752708, -0.012238042, -0.0011261669, -0.03347921, 0.04487903, 0.044655506, 0.06929302, -0.00028018348, -0.021570249, 0.008115231, 0.05463966, 0.008307712, 0.004666103, -0.032684453, 0.0010827035, 0.0013279611, -0.0073825633, -0.026922451, -0.028362952, -0.0092080245, 0.0161187, -0.008723719, 0.030349849, -0.012691303, 0.031020425, 0.043984927, 0.008729927, -0.0054950113, -0.07137927, 0.0022507815, 0.06964073, 0.020676145, 0.0035484734, -0.0006143081, -0.0070410655, -0.012343596, 0.014243566, -0.019123882, -0.0428673, -0.07729028, -0.06700809, -0.016627843, 0.025332933, 0.002826671, 0.03072239, 0.004495354, 0.0112135485, 0.051907677, 0.038570635, -0.0077861515, -0.042569265, 0.030498866, -0.060650025, 0.012952084, -0.01683895, -0.014305657, 0.008152486, -0.00497966, 0.003203871, 0.015572303, -0.045922153, 0.036608573, -0.031243952, -0.055831797, 0.011424656, 0.02227808, -0.0071466193, -0.058613453, 0.053646214, -0.01205177, -0.026624417, 0.006885839, -0.03280863, -0.004880315, -0.029704107, 0.042569265, -0.026823107, 0.03787522, -0.004436368, 0.0056657605, -0.021682011, -0.027220486, 0.009797885, -0.05911018, 0.0006663089, 0.00043463366, -0.006736822, 0.010791333, -0.06656104, -0.0235944, 0.028189098, 0.00074586243, -0.004020361, -0.01827945, 0.03583865, 0.0055260565, -0.02240226, -0.017571619, -0.01271614, -0.0099096475, 0.0122877145, 0.032535434, -0.0007625492, 0.0006600999, -0.0041973195, -0.030151159, -0.041426796, -0.02751852, 0.016801696, 0.011312894, 0.0095371045, 0.024364322, 0.024351904, 0.0022259452, 0.0030222563, -0.024500921, -0.017050058, 0.024712028, -0.021768937, -0.035217743, 0.022004882, 0.03288314, -0.021880701, -0.023495054, 0.046766583, 0.036906607, 0.03638505, -0.0062618293, 0.021595085, -0.03439815, 0.017348092, -0.028859675, -0.012033143, 0.045425426, 0.008413266, -0.016764442, 0.009965529, -0.03459684, -0.0043463367, 0.042296063, 0.05920952, -0.019769622, 0.030871408, -0.023842761, -0.0018782384, 0.020949343, 0.016752023, 0.024202887, 0.03588832, -0.03335503, 0.017012803, -0.0058178823, 0.033131503, 0.004141438, -0.020278765, 0.043364022, -0.006395324, 0.03243609, -0.049374383, -0.022911403, 0.0014032458, -0.022961076, 0.01382135, -0.016764442, -0.007804779, -0.021085942, -0.031144606, -0.018291868, 0.019111464, -0.0015972788, 0.04331435, -0.008636792, 0.028834838, 0.0011184056, -0.012505031, 0.021185286, -0.07465765, 0.06094806, 0.0027583714, -0.012455359, 0.024413994, 0.012964501, -0.005876868, 0.0025519205, -0.011114203, 0.01965786, 0.018850682, 0.004358755, -0.0058178823, 0.021470902, -0.00042648427, -0.009599195, -0.011673018, 0.01827945, -0.015808247, 0.0068299575, 0.0020505395, -0.04594699, 0.019086627, 0.103219286, -0.02523359, -0.022253243, -0.014491929, -0.026847942, 0.016590588, -0.017807562, 0.010083501, -0.012169743, 0.031939365, 0.012026935, -0.061246093, -0.012442941, 0.007351518, -0.05379523, 0.020676145, -0.0060134674, 0.011393611, 0.06621333, 0.020142166, -0.025779985, 0.052851453, -0.019943476, 0.010331864, 0.0007051155, 6.243008e-05, -0.018887937, 0.0043929047, -0.02575515, 0.006131439, -0.04810774, -0.048902497, 0.0023051107, -0.031219115, 0.03191453, -0.01008971, 0.017447438, 0.0046692076, -0.0056254016, -0.0032349164, 0.03243609, 0.020676145, -0.051659316, 0.013076264, -0.021396395, -0.010586434, 0.008407057, -0.031740677, 0.06964073, -0.046890765, -0.031219115, -0.046294693, -0.0009895677, -0.0014350673, -0.038098745, -0.0025534728, 0.0015507109, 0.005687492, -0.011741318, 0.0017354301, 0.054987367, -0.013399135, -0.05280178, -0.0077675246, 0.032212563, 0.049920782, -0.0471888, 0.018589903, -0.040930074, -0.0030346743, 0.0044394727, 0.035664797, -0.0248983, -0.034100115, -0.036087014, 0.00014795008, 0.011486747, 0.020787908, 0.042022865, -0.0045170854, -0.031368133, 0.02143365, -0.03400077, -0.03695628, 0.0047033574, 0.0069168843, 0.002506905, 0.0054950113, 0.0024587847, 0.016429152, -0.014131803, 0.012349805, -0.024575429, 0.011654391, -0.011461911, 0.00227717, -0.006848585, -0.03996146, -0.0136847515, -0.04626986, -0.014467092, 0.010896887, 0.015410868, 0.013051428, -0.006199739, -0.013771678, 0.013448807, 0.00060189003, 0.014914144, -0.013597825, 0.03335503, -0.0102821905, 0.024575429, -0.04594699, 0.02365649, 0.011697855, -0.017186657, -0.009605404, 0.04016015, 0.0017866548, -0.0117289, 0.0334047, 0.0011230623, -0.009201815, 0.008164904, -0.03238642, 0.04251959, -0.040656876, -0.047089454, -0.034100115, 0.0012992442, -0.040011134, 0.026251873, 0.0020132852, -0.0008560731, -0.0072708004, 0.009841348, 0.033007324, 0.0020086283, 0.018391212, 0.05612983, 0.023010748, 0.009555732, -0.00050836615, 0.00016473392, 0.011238385, -0.030647883, 0.027866228, -0.007947587, 0.0012224072, 0.007748897, -0.010151801, 0.0003492592, -0.023110094, -0.044754848, 0.012952084, 0.032609943, 0.037130132, 0.010723034, 0.05712328, 0.03067272, -0.009325997, 0.011058322, 0.034522332, 0.002955509, -0.0011649735, 0.01120113, 0.0036198776, 0.010400163, -0.0010648525, -0.0069541386, -0.024500921, -0.015634393, 0.005727851, 0.03211322, -0.037428167, -0.03387659, -0.014044876, 0.040930074, 0.008202158, 0.04415878, 0.007252173, 0.0079972595, -0.019471588, 0.047859374, -0.046021495, -0.001398589, -0.00074702664, 0.0028452983, 0.044978376, -0.017509528, 0.004479831, -0.020253928, 0.0005906361, -0.0037099088, -0.023768252, 0.004343232, -0.049771763, -0.057371642, 0.007916542, -0.027245322, 0.01854023, 0.008077977, 0.038421616, -0.010865842, -0.016404316, -0.0027459534, 0.015249433, 0.0073080547, 0.0024665461, 0.049448892, 0.023023166, 0.013349462, 0.010480881, -0.01952126, 0.024736864, -0.011579882, 0.010996232, -0.024004197, -0.007842033, 0.015249433, 0.012113861, -0.0042221555, 0.0033156339, -0.038222928, -0.021706847, 0.042842463, 0.0014956055, 0.0036354002, 0.011418447, 0.0014063504, 0.028785167, 0.0319642, 0.0015375166, -0.03412495, -0.022414679, 0.014628528, -0.045822807, -0.03146748, 0.02253886, -0.07341584, -0.00078078837, 0.025953839, -0.038222928, 0.00036090118, -0.04207254, 0.014765127, 0.029033529, 0.005681283, -0.024873463, 0.06243823, -0.0028934183, -0.025506787, -0.0024029033, -0.006649895, 0.025295679, 0.011828245, 0.005929645, -0.03504389, 0.013113518, -0.028338116, 0.01271614, 0.012442941, -0.0011556599, -0.023370873, -0.014032458, 0.009133516, 0.004035884, -0.00020625695, -0.016168373, -0.01382135, 0.0146782, -0.0029865543, -0.006494669, -0.00023245139, -0.020253928, 0.012964501, 0.0031945575, 0.007320473, -0.014727872, -0.013659915, 0.027493684, 0.0007179217, 0.03372757, 0.03283347, -0.0062835612, 0.0007734151, 0.0046009077, -0.022377424, 0.027245322, -0.020750653, -0.037005953, -0.03216289, 0.016255299, 0.015535049, 0.025419861, -0.0036260865, 0.027841391, -0.026127692, 0.0382726, 0.0011424656, -0.009934484, 0.013746842, 0.0039551663, -0.046294693, 0.005299426, -0.009661285, 0.029331563, -0.0026062496, 0.029803451, 0.0336779, -0.00084986404, -0.08419475, -0.020626472, 0.016503662, -0.035490945, -0.02960476, -0.037676528, 0.02097418, 0.027245322, 0.032460924, -0.024687191, -0.06661072, -0.027369503, 0.002856164, 0.013088683, -0.0030082858, -0.015100416, 0.027220486, -0.015572303, -0.017149402, 0.023942105, 0.060252644, -0.008152486, 0.016590588, -0.030995589, 0.0009740451, 0.010040037, -0.0038278808, 0.011710273, 0.051758662, 0.036260866, 0.03755235, 0.009357042, -0.0014676647, -0.0022911404, 0.005901704, -0.011815826, 0.018900355, -0.012865157, 0.030225666, -0.04162549, 0.025829658, -0.02214148, -0.015882757, 0.017422602, 0.008866527, 0.011176295, -0.02135914, 0.026549907, 0.004951719, 0.020614054, 0.026872778, 0.0033590973, -0.00034072174, -0.039489575, -0.007363936, 0.014206312, -0.042618934, 0.03472102, -0.029257055, -0.002631086, 0.01998073, -0.0353916, 0.022923822, -0.033429537, 0.003958271, -0.03747784, 0.006342547, -0.021657174, -0.03238642, -0.009543314, -0.005870659, 0.036260866, -0.0037533722, 0.004507772, -0.016590588, -0.00041600651, -0.004399114, -0.029455744, 0.0025705476, -0.005032437, 0.0071714553, -0.029977305, 0.0045853853, 0.026425727, 0.00890999, 0.013833769, -0.008313921, -0.017869653, -0.016987968, 0.0013838426, 0.01573374, -0.010307027, 0.024848627, -0.01592001, 0.027220486, -0.006972766, 0.018776175, 0.013846187, 0.03139297, -0.031815186, 0.029803451, 0.029232219, -0.0150383245, -0.013361881, -0.0030626152, -0.0004975003, -0.04731298, -0.014628528, 0.011648182, -0.035341926, 0.030424356, -0.011604719, -0.010083501, -0.032336745, -0.0379994, 0.014367747, 0.020216675, -0.009742003, -0.0033373656, 0.032212563, -0.010542971, 0.005510534, 0.008425684, 0.011294266, -0.008214576, 0.04559928, 0.0070596924, 0.004023466, 0.00383409, 0.028611314, 0.014318075, 0.015423286, -0.009990365, 0.043140497, 0.0056843874, 0.010040037, -0.024476085, 0.03996146, -0.040184986, -0.0075626257, -0.0065940134, -0.018391212, -0.0040917657, -0.030349849, -0.04470518, -0.007606089, -0.024798956, 0.041749667, -0.04480452, -0.0052093947, -0.008214576, -0.03184002, 0.013523316, -0.04540059, 0.019744787, 0.0727701, 0.011772363, -0.016627843, 0.0022212884, 0.0084629385, 0.006867212, 0.04815741, 0.03896801, -0.04587248, -0.002843746, -0.0026481608, 0.037651695, -0.023110094, -0.02679827, 0.02535777, -0.044928703, 0.01965786, 0.023743417, -0.016540915, 0.004324605, 0.01493898, -0.0029337772, 0.021880701, 0.0017121462, 0.0017866548, -0.016590588, 0.028785167, 0.004116602, 0.040334005, 0.024302231, 0.009512268, 0.00082269945, -0.07306813, -0.033826917, 0.007575044, -0.010834796, 0.04696527, 0.031616494, -0.041575816, -0.0064636236, -0.013448807, -0.004169379, 0.02313493, 0.04194836, -0.00026737733, 0.006395324, 0.04304115, 0.0038682397, -0.042941805, 0.051758662, 0.030101486, -0.027965572, 0.015758576, 0.011908962, 0.034845203, -0.002826671, -0.026723761, -0.008282876, 0.012827902, -0.016106281, 0.014839635, -0.027220486, 0.018502977, 0.0020163897, -0.020427782, -0.00060809904, 0.0006011139, -0.012964501, -0.0036043548, 0.0073018456, 0.046816256, 0.0004288127, -0.0022787221, -0.01840363, 0.008077977, 0.0012829455, 0.022327753, -0.007748897, -0.014690618, 0.054689333, -0.015609558, -0.014703036, 0.014988652, 0.017248748, 0.038446452, -0.017422602, -0.0042035286, 0.02876033, -0.044183616, -0.03591316, -0.001581756, 0.028362952, 0.028412623, -0.007233546, 0.016789278, -0.013063846, 0.0030983172, 0.02089967, -0.01743502, 0.008301503, 0.0044580996, 0.005380144, -0.008357384, -0.009810302, -0.011567465, 0.0043649636, 0.0044177407, 0.027294993, -0.031368133, 0.01415664, 0.020986598, -0.045499936, -0.007084529, 0.011573673, -0.011418447, 0.010133173, 0.018043507, 0.005917227, -8.129978e-05, 0.0161187, 0.017372929, -0.019260481, -0.03946474, -0.009599195, 0.0124739865, -0.049523402, 0.029381236, -0.011107995, 0.0073328908, -0.0016578169, -0.01781998, -0.0026403996, 0.0115860915, 0.0012775125, 0.012523659, -0.0025270844, 0.0023020061, -0.026227036, -0.024078704, 0.009785467, -0.007972423, -0.033975936, -0.012672676, 0.015845502, -0.010592643, 0.03295765, 0.03931572, -0.005299426, 0.025854494, -0.019123882, 0.010046246, -0.004399114, -0.0010524343, 0.026698925, 0.0002755267, -0.017323256, 0.0131259365, -0.003061063, 0.00084055046, 0.044009764, 0.0074136085, -0.046890765, -0.027866228, 0.027369503, -0.0056781783, 0.006556759, 0.0071279923, -0.0037130134, 0.018565066, -0.00832634, -0.026053185, 0.011592301, 0.036683083, -0.013957949, 0.025059735, -0.0023501264, -0.008630583, 0.016280135, 0.0003665281, 0.017658545, 0.0025286365, -0.044382308, 0.0041755876, -0.010760288, -0.012629213, -0.04035884, -0.0068113306, -0.019359825, -0.015013489, -0.013746842, 0.014914144, 0.06492185, -0.016292553, -0.016714768, -0.028884511, 0.04030917, 0.0018083865, 0.0057868366, -0.009872394, 0.06094806, 0.03491971, 0.0025224276, 0.030002141, -0.004827538, -0.00956815, -0.0048399563, 0.00383409, -0.0042563053, -0.00838843, -0.0060569304, -0.046692073, -0.028164262, 0.03583865, 0.0016888622, -0.019347407, -0.023023166, 0.023023166, 0.04428296, 0.01959577, 0.0011820483, 0.0067244037, 0.013076264, -0.0046723117, 0.010698197, 0.008568493, -0.0029306728, 0.016416734, 0.025779985, 0.03270929, -0.033255685, 0.022240825, 0.009717167, 0.0047809705, -0.012244252, -0.03794973, 0.012262878, -0.00048818675, 0.020278765, -0.0077302703, -0.0016733396, -0.0019465379, 0.008338758, 0.0043028733, -0.012616795, -0.04895217, 0.018950028, 0.022104226, 0.027543357, 0.0080903955, 0.036285702, -0.036981117, -0.042171884, 0.024587847, -0.015535049, 0.0046816254, -0.009251488, 0.009052798, 0.04212221, 0.022427097, -0.0040327795, 0.0020862415, -0.020763071, 0.006249411, -0.0054142936, -0.005345994, 0.014988652, 0.015237015, -0.0016950713, 0.017447438, -0.0074136085, 0.0038309854, 0.030424356, -0.013808932, 0.022563696, -0.012877575, -0.025345352, -0.020564381, -0.009692331, 0.0382726, -0.035217743, 0.03067272, 0.0051938724, 0.00527459, 0.005293217, 0.017000385, 0.028114589, -0.0052404404, -0.009319788, 0.024736864, 0.014727872, 0.011815826, 0.013026592, -0.01893761, 0.03616152, -0.00028522834, 0.0048244335, -0.016329808, -0.010766497, 0.00278476, 0.0038402989, 0.0062835612, 0.010238728, -0.006736822, -0.0062152613, 0.03323085, 0.0019791354, -0.00080795295, -0.054291952, 0.0007823406, 0.0024510233, -0.00042027523, -0.04756134, 0.008661628, -0.02089967, -0.03956408, 0.033454373, 0.010859633, 0.0077302703, 0.00027358637, 0.0031945575, 0.02463752, 0.0014529183, -0.026053185, 0.05911018, -0.046543058, -0.028462296, 0.017633708, -0.004296664, -0.010331864, -0.01644157, -0.012002098, 0.03211322, -0.008680255, 0.01048709, 0.008692673, -0.011250803, 0.0032442298, 0.020986598, 0.019384662, 0.06616366, 0.025370188, -0.0057092234, 0.001469217, -0.00013766633, 0.007016229, -0.035937995, -0.011573673, 0.00087935705, -0.010592643, -0.016987968, -0.0035826233, -0.015075579, 0.009319788, -0.020527128, -0.02313493, -0.007885496, -0.022066971, -0.0025301888, -0.005789941, -0.005023123, 0.014976234, -0.0066809403, 0.0073266816, -0.0005444563, -0.039340556, 0.00224302, 0.008500192, 0.022576114, 0.0054484433, -0.0014234253, -0.040582366, 0.0035826233, 0.03623603, 0.028710658, 0.007630925, -0.014901726, -0.007804779, 0.02031602, -0.0016376376, 0.018763756, 0.0012852738, 0.0072894273, -0.01048709, -0.028735494, 0.027096305, 0.036658246, 0.022961076, 0.026251873, -0.008767182, -0.014044876, 0.01257954, 0.06526956, -0.02627671, -0.006637477, -0.017546782, -0.008146277, 0.021781355, 0.023507472, -0.000489739, 0.011908962, -0.02247677, -0.018726502, -0.0011044352, -0.006904466, 0.02856164, 0.006507087, -0.0008358937, 0.030945918, 0.045897316, 0.035739306, 0.008543656, 0.030151159, 0.001356678, 0.028362952, -0.0056843874, 0.024451248, -0.0022166318, -0.013448807, -0.026376054, -0.010766497, 0.004992078, -0.012877575, 0.0054018754, 0.031740677, -0.0015250985, 0.021011433, -0.002011733, -0.02070098, -7.84863e-05, -0.012877575, -0.008127649, -0.028288443, -0.029033529, -0.001457575, -0.019409498, -0.000531262, 0.018825848, -0.013523316, 0.0013993651, 0.052851453, 0.026947288, -0.028785167, -0.025655804, 0.028288443, -0.016367063, 0.022948658, 0.012889992, 0.010710616, -0.006168694, -0.013970368, 0.008028305, 0.0054236073, 0.023333618, 0.014889307, -0.0041041835, 0.011790991, -0.012803066, 0.003700595, 0.00047072378, -0.008500192, 0.019620605, 0.028387787, -0.013784097, -0.0008708196, 0.025196334, 0.019334989, 0.012461568, -0.06119642, -0.0010066426, 0.016826533, 0.016689932, 0.038893506, -0.023184601, -0.008158695, -0.017211493, 0.010294609, -0.03546611, -0.036062177, 0.018391212, 0.025183916, 0.009294951, -0.0032535435, 0.015572303, 0.008630583, 0.035689633, 0.009611613, 0.018565066, 0.019645441, -0.012175952, 0.046071168, 0.050020125, -0.015559886, 0.03387659, 0.026251873, -0.022973495, 0.01329979, -0.017248748, -0.015187342, -0.0063052927, -0.00046412667, 0.01205798, -0.04612084, -0.0443078, -0.010449835, -0.016180791, 0.00759988, -0.008009678, 0.00023691416, -0.022551278, -0.010828587, -0.0042625144, 0.0097233765, -0.0009763735, 0.012225624, 0.022712713, -0.0007970871, 0.011480538, -0.0038899714, -0.023681326, 0.022389842, -0.017050058, -0.017646126, -0.0058271955, 0.012033143, 0.008146277, 0.011393611, 0.023482636, 0.028462296, -0.007463281, 0.025047317, -0.0066685225, -0.037924893, 0.017869653, -0.012952084, 0.0053180535, -0.021682011, 0.002235259, -0.013622661, 0.0026000408, -0.011691646, 0.017633708, -0.015833084, -0.030647883, -0.009928275, -0.002595384, -0.002731983, -0.024140796, 0.010493299, -0.027742047, 0.021706847, -0.0026233247, -0.026872778, 0.02535777, -0.046443712, -0.039986297, 0.014044876, -0.029778615, -0.032138053, 0.004961033, -0.00273664, 0.019831713, -0.016404316, -0.040135313, 0.019769622, 0.02247677, -0.012411896, -0.0037068042, 0.032932814, -0.017807562, -0.017372929, -0.010977604, -0.07639618, -0.01585792, 0.009543314, 0.006513296, 0.024736864, -0.007103156, -0.01303901, 0.007873079, 0.00035508018, -0.0020443306, -0.03531709, 0.0039303303, -0.010400163]"
../../../gradio,../../../gradio/gradio/components,paramviewer.pyi,"from __future__ import annotations

from typing import Literal, TypedDict

from gradio.components.base import Component
from gradio.events import Events


class Parameter(TypedDict):
    type: str
    description: str
    default: str

from gradio.events import Dependency

class ParamViewer(Component):
    """"""
    Displays an interactive table of parameters and their descriptions and default values with syntax highlighting. For each parameter,
    the user should provide a type (e.g. a `str`), a human-readable description, and a default value. As this component does not accept user input,
    it is rarely used as an input component.Internally, this component is used to display the parameters of components in the Custom
    Component Gallery (https://www.gradio.app/custom-components/gallery).
    """"""

    EVENTS = [
        Events.change,
        Events.upload,
    ]

    def __init__(
        self,
        value: dict[str, Parameter] | None = None,
        language: Literal[""python"", ""typescript""] = ""python"",
        linkify: list[str] | None = None,
        every: float | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: A list of dictionaries with keys ""type"", ""description"", and ""default"" for each parameter.
            language: The language to display the code in. One of ""python"" or ""typescript"".
            linkify: A list of strings to linkify. If any of these strings is found in the description, it will be rendered as a link.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. Queue must be enabled. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.value = value or {}
        self.language = language
        self.linkify = linkify
        super().__init__(
            every=every,
            value=value,
            render=render,
        )

    def preprocess(self, payload: dict[str, Parameter]) -> dict[str, Parameter]:
        """"""
        Parameters:
            payload: A `dict[str, dict]`. The key in the outer dictionary is the parameter name, while the inner dictionary has keys ""type"", ""description"", and (optionally) ""default"" for each parameter.
        Returns:
            (Rarely used) passes value as a `dict[str, dict]`. The key in the outer dictionary is the parameter name, while the inner dictionary has keys ""type"", ""description"", and (optionally) ""default"" for each parameter.
        """"""
        return payload

    def postprocess(self, value: dict[str, Parameter]) -> dict[str, Parameter]:
        """"""
        Parameters:
            value: Expects value as a `dict[str, dict]`. The key in the outer dictionary is the parameter name, while the inner dictionary has keys ""type"", ""description"", and (optionally) ""default"" for each parameter.
        Returns:
            The same value.
        """"""
        return value

    def example_payload(self):
        return {
            ""array"": {
                ""type"": ""numpy"",
                ""description"": ""any valid json"",
                ""default"": ""None"",
            }
        }

    def example_value(self):
        return {
            ""array"": {
                ""type"": ""numpy"",
                ""description"": ""any valid json"",
                ""default"": ""None"",
            }
        }

    def api_info(self):
        return {""type"": {}, ""description"": ""any valid json""}

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","This code defines a `ParamViewer` class that extends the `Component` class from the Gradio library. The `ParamViewer` class is used to display an interactive table of parameters with descriptions and default values. It is typically used to display parameters of components in the Custom Component Gallery. The class includes methods for preprocessing and postprocessing data, providing example payloads and values, and defining API information.

The class includes methods for handling events such as `change` and `upload`, which are used to trigger functions when certain events occur. These methods define parameters such as the function to call, input and output components, API documentation settings, batch processing, preprocessing, postprocessing, and other event-related configurations.

Overall, the `ParamViewer` class provides a structured way to display and interact with parameter information, as well as handle events related to those parameters.","[-0.059171338, 0.032193977, -0.006188522, -0.0149418805, -0.012880075, -0.054998044, -0.026256971, -0.0016022465, 0.017885543, -0.029883761, 0.0202206, -0.050154045, -0.010954895, 0.00022589814, 0.016357819, -0.030951926, 0.010371131, 0.02598372, -0.017227255, 0.064189225, 0.024965238, -0.022853749, -0.01324027, 0.0049744165, -0.016767697, -0.042503007, -0.052812032, 0.06071148, 0.010886583, -0.029635351, -0.0044123884, -0.026281811, 0.00397146, -0.014755573, 0.005943217, -0.025909197, 0.013302373, 0.019376004, -0.048440013, 0.025163965, -0.030281218, -0.033411186, -0.018904025, 0.06041339, 0.002783748, -0.0008368323, -0.031895883, 0.029784398, -0.007005171, -0.00079336046, -0.046179477, -0.008750253, 0.017276937, -0.014581686, -0.008899299, 0.011811911, -0.037013136, 0.0008865143, -0.019785881, 0.008588787, 0.026430858, -0.0005697912, 0.011967167, 0.063195586, -0.023536878, 0.029411782, -0.035547517, 0.01997219, 0.026555063, -0.010886583, 0.037832893, 0.011973377, -0.009476854, -0.052911397, 0.005996004, 0.013215429, -0.04260237, 0.027349977, 0.005275614, 0.0022698492, -0.009750105, 0.032591432, -0.059320383, -0.014084865, -0.029759556, -0.004722901, -0.015985204, -0.008396269, -0.005052045, -0.018879184, -0.03326214, 0.0045303833, -0.047048915, 0.07402627, 0.014022763, 0.038602963, -0.034702923, 0.009706633, 0.042950146, 0.031871043, 0.049433652, 0.031721998, -0.054749634, -0.038602963, 0.058376424, -0.033386346, -0.016929163, 0.032864686, -0.038776852, -0.0004304485, -0.026132766, 0.004254027, -0.083366506, 0.040565405, -0.017624712, -0.0041267164, 0.017910384, 4.563084e-05, -0.008601207, -0.008818567, -0.053308856, 0.00385036, 0.0046794293, -0.06180449, 0.017835861, -0.062450353, 0.004359601, -0.045086473, -0.029411782, -0.027499022, 0.0038938317, -0.008899299, 0.037410595, -0.08038558, -0.010663013, 0.003204493, -0.04362085, -0.021201821, -0.03728639, 0.0012047901, 0.052017123, -0.004614222, 0.029188212, 0.0063189375, -0.024157904, -0.034702923, -0.012352203, 0.029163372, -0.043670535, -0.03418126, -0.009837049, 0.018171215, -0.022481134, -0.031796522, 0.0013841112, 0.03728639, 0.019649256, 0.005083096, -0.004763268, -0.0027387238, 0.0064586685, -0.032293342, -0.006961699, -0.008563946, -0.02961051, -0.003999406, -0.04133548, -0.007408838, -0.044614494, -0.0031439431, -0.005725858, 0.02000945, -0.025586262, 0.019226959, 0.01563743, 0.0060705272, -0.0017233466, -0.030132173, -0.0046732193, -0.044117674, -0.014395378, -0.005825222, -0.022853749, -0.0019282851, 0.011221936, 0.011650444, -0.01855625, -0.016804958, -0.008054704, -0.006427617, 0.06806443, 0.019959768, 0.015438701, 0.046875026, 0.018804662, -0.022953114, 0.01082448, -0.021549596, 0.0047291117, 0.010631962, 0.039596606, -0.009805997, 0.018432045, -0.029560829, -0.03442967, -0.0026067558, 0.006762971, 0.024890713, -0.015612588, -0.041037384, -0.009017294, 0.0028691392, 0.051172525, 0.002120803, -0.04650241, -0.0022791647, -0.023288468, 0.07248613, -0.045682658, -0.025586262, -0.043645695, 0.022419032, 0.03515006, -0.031076131, -0.007359156, -0.00052593125, 0.018444465, -0.03008249, -0.013501101, -0.032020092, 0.036019497, -0.011731178, -0.011892644, 0.026331494, 0.025313012, -0.050874434, 0.032243658, -0.045682658, 0.03035574, 0.0071852687, -0.009327807, 0.042428482, 0.013612886, 0.002744934, 0.0027263032, 0.039050102, -0.006089158, -0.035944972, 0.011662864, 0.10284187, 0.014283594, -0.02382255, -0.0039435136, -0.02044417, -0.018941287, 0.013737091, -0.036739886, 0.04990563, -0.0031253123, -0.0040366678, -0.020990672, -0.0038814112, -0.030455105, 0.033808645, 0.014966722, 0.039845016, 0.02670411, 0.021723483, -0.008514264, -0.010644382, 0.026256971, 0.013749511, 0.045061633, 0.004909209, -0.028691392, 0.014296014, 0.0736785, 0.042974986, 0.0064338273, -0.015674692, -0.0071231658, -0.0058128014, 0.0055178143, 0.062003214, -0.012408095, 0.029436624, 0.039223988, -0.018692877, -0.0017512927, -0.045732338, 0.008017443, 0.044192195, 0.030678675, -0.010899003, -0.007396417, 0.057929285, 0.052513942, -0.017363882, 0.025635945, 0.017165152, 0.014966722, 0.014171809, -0.033808645, -0.0069803298, -0.0051607243, -0.017376302, -0.0009967464, -0.0077876635, -0.050228566, -0.02739966, 0.013811613, 0.009135289, -0.0010557439, -0.037907414, -0.059320383, 0.012190737, 0.07372818, 0.020083975, -0.0021052775, 0.0020152286, -0.011737388, 0.0082099615, -0.014084865, -0.008371428, -0.021872528, -0.038354553, -0.044415765, 0.019574733, 0.020083975, -0.00529735, 0.055395503, -0.020083975, -0.021798005, 0.04689987, -0.0057165422, -0.012880075, -0.058773883, 0.02429453, -0.022642601, 0.026107924, -0.010191034, -0.030479947, -0.018841922, 0.06950521, 0.021711063, -0.005098622, -0.04354633, 0.030653834, -0.013811613, -0.043223396, -0.016283296, -0.009905362, -0.004452755, -0.009079397, 0.029287577, -0.0015680902, -0.024903135, -0.05075023, -0.046129797, -0.008855828, -0.0061046835, 0.006806443, 0.0009059214, -0.034106735, -0.004617327, 0.008135438, -0.022294827, -0.008607417, -0.047794145, -0.045657817, -0.01684222, 0.012501249, -0.010520177, 0.001842894, -0.06662365, -0.03994438, -0.005393609, -0.0093837, -0.03375896, -0.02455536, 0.024778929, -0.013923398, 0.017351462, -0.006231994, 0.020767102, 0.014308434, 0.03972081, 0.040043745, -0.03149843, 0.019462949, -0.0068747555, -0.027523864, -0.041062225, -0.036739886, 0.02844298, 0.064537, 0.0024328686, 0.021959472, 0.041832298, 0.0063903555, 0.008520474, -0.016059726, 0.001438451, 0.010749957, -0.02670411, -0.032392707, 0.0122838905, 0.010787218, 0.021301186, 0.0005150633, 0.029784398, -0.013004281, 0.012408095, 0.007415048, 0.050650865, -0.035448153, -0.04158389, -0.0062972014, -0.0013126932, 0.046154637, 0.02672895, -0.010663013, -0.014730732, 0.005104832, -0.0012078952, 0.03485197, 0.035423312, -0.015302076, -0.008290694, -0.04468902, 0.017674394, 0.05147062, 0.0045552244, 0.0042447113, 0.00939612, -0.038826533, 0.054749634, -0.005083096, 0.03390801, 0.025710467, -0.030231535, -0.025412375, 0.00024938068, 0.049334288, -0.0044154935, 0.009228444, 0.020854047, 0.019487789, -0.017438404, -0.027722592, 0.031697158, 0.027846796, -0.02145023, 0.028095206, -0.0038627805, -0.00037804944, 0.020531112, 0.035795927, 0.0019189697, -0.034330305, 0.054749634, 0.05758151, -0.03370928, 0.027300294, -0.011501398, -0.0142463315, -0.02045659, 0.016991265, -0.006626345, -0.04424188, -0.018456887, 0.0031066816, 0.01663107, 0.017189994, -0.015860999, -0.006402776, -0.045682658, -0.0132651115, -0.02357414, -0.012892496, 0.0009486169, 0.01564985, 0.035174903, 0.012172106, -0.004989942, 0.09846985, -0.009967464, -0.021239081, 0.020083975, 0.016196353, -0.0065642428, -0.002103725, -0.007588935, -0.012501249, 0.006231994, -0.009365069, -0.053110126, -0.02048143, 0.013650147, 0.036218226, 0.05390504, -0.006384145, -0.014966722, 0.0606618, 0.021027934, 0.005250773, 0.027027043, 0.03030606, -0.01588584, 0.007104535, -0.0443164, -0.0023971596, 0.0044869115, -0.016146671, 0.034032214, -0.015972784, 0.015898261, -0.022319667, 0.015910681, 0.02455536, 0.03731123, 0.03589529, 0.01082448, -0.0083465865, -0.0021937736, 0.008520474, 0.011265408, -0.04963238, -0.02045659, -0.023412673, -0.018171215, -0.013997922, -0.016283296, 0.032243658, -0.044664174, -0.019090334, 0.023151841, 0.0018071851, -0.00093231496, -0.048017714, 0.015774054, -0.004288183, -0.005207301, -0.009209813, 0.021487493, 0.044937428, 0.04260237, -0.04088834, 0.012687557, 0.03413158, 0.04116159, -0.07233708, 0.013650147, -0.00818512, 0.0062164683, -0.0031222072, -0.018394785, 0.007837346, -0.009787367, -0.030927084, -0.010613331, 0.021872528, 0.06642492, 0.0030492367, -0.011364772, 0.010482916, 0.0139606595, -0.05390504, -0.022406612, 0.020990672, -0.021412969, 0.008470792, -0.032914367, 0.016444763, 0.009955044, -0.029784398, 0.013625306, -0.0082161715, -0.021512333, -0.027325135, -0.00542466, -0.004477596, -0.011234357, 0.030032808, -0.020158498, -0.00062024954, 0.0110169975, 0.008588787, -0.0021363287, -0.015202711, -0.0043937573, -0.014892199, -0.002926584, 0.039074942, 0.0084894225, 0.029411782, -0.0087750945, -0.008309325, -0.0404412, 0.01639508, 0.0010619541, -0.04314887, -0.0061978376, 0.02717609, -0.0029172688, -0.003165679, 0.014035183, 0.010135141, -0.02166138, 0.004359601, -0.03346087, 0.048415173, -0.045061633, -0.031324543, -0.028616868, -0.021624118, -0.0030927085, 0.010178613, 0.012221788, -8.6701024e-05, -0.0049744165, 0.02166138, 0.016767697, 0.0061419453, 0.012929757, 0.035820767, 0.026654428, -0.0015874972, 0.009917782, 0.021760743, 0.026107924, 0.020791944, 0.04359601, 0.019922508, 0.020071553, 0.0447387, -0.012675136, -0.037659004, 0.013948239, -0.06558032, -0.006880966, 0.036019497, 0.020295123, -0.001017706, 0.020170918, -0.007812505, -0.02045659, 0.01492946, 0.027598387, -0.020754682, -0.0342061, 0.004257132, -0.012110003, 0.0069058067, 0.007321894, -0.00021114877, -0.035646882, 0.017202415, -0.0035926343, 0.03035574, -0.045806862, -0.052364897, -0.0022900326, -0.026778633, 0.005610968, 0.0031780996, 0.019301482, 0.0073094736, -0.009923993, 0.015749214, -0.041211274, -0.017525349, 0.019525051, 0.04784383, 0.01687948, -0.03276532, 0.014171809, 0.018394785, -0.01851899, 0.026629586, -0.03274048, 0.023623822, -0.017935226, -0.024642304, 0.009172551, 0.0058128014, -0.0026874891, 0.027648069, 0.032392707, -0.032815002, -0.015612588, -0.01877982, 0.011911275, -0.010631962, -0.017686814, 0.051569983, -0.0139606595, -0.008458371, 0.04332276, -0.040565405, 0.021226661, 0.023300888, -0.028815597, -0.03390801, 0.007396417, 0.010967315, -0.012880075, -0.002327294, 0.0025229172, -0.037659004, -0.009259495, -0.014010342, -0.036541156, 0.005151409, 0.026232129, 0.0037137342, -0.020642897, 0.02650538, 0.017960066, 0.011830541, -0.040366676, 0.045210678, -0.052215848, -0.018394785, 0.004788109, -0.017711656, 0.0070548533, 0.028045526, -0.056190412, 0.025660787, 0.015028824, -0.0067753913, 0.016010046, 0.0071666376, -0.019264221, 0.0054060295, -0.02889012, -0.022493554, -0.014730732, -0.009545167, 0.0047477423, 0.009930203, -0.0017512927, 0.0033255932, 0.0303309, 0.008048494, -0.0056885965, 0.028542345, -0.008390059, 0.021003092, -0.013004281, 0.009184971, -0.03370928, -0.0056233886, -0.00056901487, -0.033535395, -0.0057382784, 0.0035677932, -0.036491476, 0.021015514, 0.0107437465, 0.029411782, 0.007297053, -0.016146671, -0.014047603, -0.084409826, 0.0361437, -0.009439592, 0.029759556, 0.0027263032, 0.01084932, 0.014979143, -0.01468105, -0.026232129, 0.042006183, -0.009545167, 0.020183338, -0.035497833, -0.0027371712, 0.047123436, -0.002181353, -0.00028838887, 0.029660191, -0.022717124, 0.051917758, 0.0033845906, -0.0011178465, 0.009483064, -0.0240337, -0.020257862, 0.0014640683, -0.027797114, -0.02263018, -0.0074895713, 0.070349805, -0.021052774, 0.023213943, -0.07278422, -0.024455996, 0.014556845, -0.033858325, -0.0047539524, -0.029386941, 0.032690797, 0.03659084, 0.03306341, -0.029685033, -0.008477002, -0.010153771, 0.0032075983, 0.014171809, -0.026654428, -0.03780805, -0.0010456522, -0.024530519, -0.0062475195, 0.0114392955, -0.011594552, -0.029908603, -0.023276048, -0.0515203, 0.009402331, -0.01976104, -0.004884368, 0.0023055582, 0.047272485, 0.0066884477, -0.0036919983, 0.0048781577, 0.005511604, 0.042155232, 0.00180408, -0.01420907, 0.003999406, -0.010277977, 0.046328526, -0.02648054, -0.008868248, -0.013451419, -0.02381013, 0.028989485, 0.055445183, 0.016718015, 0.01687948, 0.06602746, -0.026579903, 0.023189103, 0.0041236114, -0.012110003, -0.01639508, -0.021822847, -0.005027204, -0.014507162, -0.046303682, 0.012339783, 0.03609402, 0.016966425, 0.0033100676, -0.0025555212, 0.050476976, -0.020344805, -0.0379571, -0.016755275, 0.0066760276, -0.019053072, -0.028343618, -0.018469308, -0.03780805, 0.07516896, -0.015339337, 0.012134844, -0.015774054, 0.031821363, 0.02213336, -0.026877997, 0.0066511864, -0.0052166167, 0.016159091, -0.04088834, -0.051569983, 0.007390207, -0.0053625577, 0.015128189, -0.038652647, -0.016531706, -0.01684222, 0.006638766, -0.01855625, 0.002199984, 0.020083975, -0.03368444, 0.0030989188, -0.016978845, 0.012954598, 0.031399064, 0.028815597, -0.004862632, 0.009327807, 0.014469901, 0.0082037505, -0.025188806, -0.0069741197, 0.0048998934, 0.0027154353, -0.029660191, -0.032392707, -0.033162776, -0.010073039, 0.0025694943, -0.029933443, -0.027995843, -0.014296014, 0.013749511, 0.043422125, 0.0022403505, 0.005825222, 0.002032307, 0.020555954, 0.01325269, 0.008477002, 0.0036205803, -0.04088834, 0.007924289, -0.0075206226, -0.010079249, 0.03661568, 0.0007363037, 0.0022061942, 0.01009788, -0.0057196477, 0.013811613, 0.00517625, 0.00649593, 0.0011054259, 0.028914962, -0.029933443, -0.015215132, 0.014904619, -0.0074895713, -0.0006800232, 0.0063903555, 0.009079397, 0.009532746, -0.020071553, -0.0068250736, 0.033411186, 0.03678957, 0.029014325, -0.006787812, -6.355811e-05, -0.0032883317, -0.003390801, 0.06652428, 0.015115768, -0.014867358, -0.019202117, 0.0042478163, -0.03395769, 0.037211865, -0.01516545, -0.053805675, 0.006818863, 0.008719202, 0.0020524904, -0.002092857, -0.027598387, 0.036715046, -0.009706633, -0.03254175, 0.057432465, -0.0044465447, 0.030057648, 0.04766994, 0.01156971, -0.011824331, 0.015115768, 0.0187674, -0.0032075983, 0.028840438, 0.016047306, 0.015910681, 0.020866467, -0.005558181, 0.02023302, -0.05102348, -0.0059835836, -0.0021549596, -0.017214835, 0.023127, 0.001600694, -0.049756587, 0.0045552244, 0.013525942, 0.017972486, 0.006477299, 0.015960364, 0.0059307963, 0.031399064, 0.037162185, -0.029685033, -0.009812208, 0.023512037, 0.022642601, -0.011209516, -0.02844298, -0.0023661084, 0.040043745, 0.007626197, -0.039074942, -0.0046670088, -0.018618353, -0.004508647, 0.009719054, 0.00012886286, -0.0017606082, -0.025685627, 0.003924883, 0.0155008035, -0.011209516, -0.04791835, -0.0064586685, 0.0020602532, 0.008619838, -0.0049651014, 0.015103348, -0.015761634, -0.00022648035, -0.0009152368, 0.035994656, -0.012004429, 0.021040354, 0.010066828, -0.03276532, -0.017388722, 0.0020012558, 0.014469901, 0.020170918, 0.0024111327, 0.00018320262, -0.0008158726, -0.029386941, -0.022257565, 0.00866331, 0.036963455, 0.02046901, -0.03490165, 0.0037137342, -0.028542345, 0.010557438, 0.0054836576, -0.007539253, 0.034081895, 0.034255784, 0.022977954, -0.020307543, -0.0010658355, -0.030256378, -0.009445802, -0.009445802, 0.04096286, -0.029014325, 0.0342061, 0.013575624, -0.040813815, 0.010880372, 0.013153327, 0.019090334, 0.0142463315, 0.0103525, -0.020878887, -0.017115472, -0.00013381166, -0.012656506, -0.0038006778, 0.014594106, 0.018196056, 0.009706633, -0.01155729, 0.024120642, -0.013538362, -0.015202711, 0.014146968, 0.016146671, 0.0006547941, 0.00421987, 0.012234208, 0.012917337, -0.021400549, -0.0030958136, -0.013985501, -0.042726576, 0.045310043, -0.0069741197, -0.03728639, -0.0017419774, 0.01732662, -0.007315684, 0.06885934, -0.008681941, 0.002838088, 0.032665957, 0.01562501, -0.010712695, 0.0030011071, -0.012830393, -0.025834674, 0.009781157, -0.008160279, -0.0065828734, 0.006384145, 0.0155132245, 0.050228566, 0.0009889835, -0.032367866, -0.022468714, 0.018283, 0.014258753, 0.00028508966, 0.01902823, -0.045434248, 0.012159686, 0.009793577, -0.029188212, 0.021065196, 0.021860108, -0.031821363, -0.01275587, 0.010377341, 0.028989485, 0.03445451, -0.018171215, 0.0012808657, 0.0070859045, -0.01685464, -0.035025854, 0.018705297, 8.665251e-05, -0.004185714, 0.0012769843, -0.012687557, -0.008880669, -0.05271267, -0.022083677, 0.04650241, -0.0035802138, -0.028045526, 0.011532449, 0.049756587, 0.00865089, -0.00028838887, 0.018196056, 0.014892199, 0.010892793, 0.023027636, 0.008737833, -0.00589664, -0.0070424327, -0.0046794293, -0.0074460995, -0.0012055663, -0.007179058, -0.032889526, -0.0394724, -0.009098028, -0.02576015, 0.016171511, -0.013178168, -0.010799639, -0.0064710886, 0.026157606, 0.00865089, 0.016320558, -0.03152327, -0.013091224, -0.019611994, -0.009805997, 0.01923938, 0.014966722, 0.039074942, 0.032616276, 0.02359898, -0.033808645, 0.00625994, 0.024108222, -0.0019702043, 0.019040652, 0.010178613, 0.036193382, 0.0020074658, 0.052364897, -0.050178885, -0.0048191603, -0.021586856, -0.00793671, 0.008303115, -0.034752604, -0.048564218, 0.0100295665, 0.025685627, -0.028492663, 0.017376302, 0.016531706, -0.01974862, -0.016519286, 0.005166935, 0.016121829, 0.0009703528, -0.001540144, 0.020878887, -0.0005938559, 0.004791214, 0.02551174, 7.306757e-05, 0.019313902, -0.016581388, 0.013600465, -0.027871639, -0.004760163, 0.03587045, 0.032193977, -0.007619987, 0.014283594, -0.015562907, 0.015774054, -0.007290843, 0.012644085, -0.022518396, -0.018034589, -0.045359723, -0.020705, 0.025784992, -0.0606618, 0.0155132245, 0.010383551, 0.0030678674, -0.028815597, 0.025089443, 0.024021277, 0.024505679, -0.0107375365, 0.039447557, -0.027101565, 0.009576218, 0.0043689166, 0.0073839966, 0.052414577, 0.02528817, -0.009942623, 0.007899448, -0.016556548, -0.0069430685, -0.020729842, 0.0017435299, 0.023959175, -0.00988052, -0.042155232, -0.02383497, 0.0026145186, 0.00017408129, -0.033162776, 0.016221194, -0.018034589, -0.025126703, -0.021251503, -0.020978251, 0.0016301927, -0.0067505506, 0.031697158, 0.027995843, 0.007328104, -0.029213054, 0.030206695, 0.021624118, 0.002951425, -0.03775837, -0.0026517801, 0.013339634, -0.03820551, 0.012066531, -0.015041245, -0.006713289, -0.014842517, 0.00021444797, 0.0134017365, -0.017115472, -0.01877982, 0.02358656, -0.033162776, -0.028517505, 0.03664052, 0.00577554, 0.0077938735, -0.00020493851, -0.0004913867, 0.009458223, -0.030902244, -0.008327956, -0.032889526, 0.024418734, 0.0060581067, 0.0058438526, 0.0060612117, -0.026530223, -0.0037634163, -0.010054408, -0.02019576, -0.043496646, -0.0015494594, -0.022071257, 0.010209664, 0.013997922, 0.009793577, -0.0050365194, -0.00866331, -0.003133075, -0.00961969, -0.033336665, -0.019289061, -0.004688745, 0.019624416, -0.004726006, 0.029163372, -0.01686706, 0.02212094, 0.022779226, 0.011756019, -0.027076725, -0.023487195, -0.005207301, 0.048290968, -0.046800505, 0.008247223, 0.011712546, 0.00028450743, -0.028592028, -0.025660787, -0.014991563, 0.03927367, 0.003322488, 0.03664052, 0.012830393, 0.017773759, 0.022741964, 0.026530223, -0.027349977, 0.005722753, -0.01661865, -0.00032215714, -0.004167083, 0.012656506, 0.0022605339, -0.013898557, -0.017761339, -0.007955341, 0.0038130984, -0.02911369, -0.0037447857, 0.009967464, 0.0019515735, -0.0019034441, 0.02961051, 0.009234654, 0.03318762, 0.019226959, 0.022456292, 0.024493257, 0.021512333, 0.045632977, 0.023300888, -0.0077069304, -0.033560235, 0.016022466, 0.034479354, -0.00072621205, -0.028244253, 0.003828624, -0.029560829, 0.007986392, -0.01805943, -0.014805255, 0.0045365933, -0.029958285, -0.019413266, 0.0076448275, 0.0138240345, -0.040143106, -0.006377935, -0.05946943, 0.005676176, -0.027871639, -0.0400189, 0.017276937, 0.036764726, -0.011836751, -0.007433679, 0.03010733, 0.00053757546, 0.005222827, 0.02381013, 0.018394785, 0.006194732, -0.009265705, -6.292738e-05, 0.011147413, 0.013588045, 0.013215429, 0.024344211, -0.020903729, -0.06274845, 0.0063965656, -0.018283, -0.0017652658, -0.0028613764, -0.00010538031, -0.019326324, -0.006231994, 0.02961051, 8.349886e-05, 0.0136874085, -0.034752604, 0.03393285, -0.0051824604, 0.026306653, 0.018916447, -0.010209664, 0.033386346, 0.008762674, -0.017425984, 0.03296405, -0.021040354, 0.031026449, 0.027995843, 0.05296108, -0.010700274, 0.010805849, -0.0017637133, 0.03442967, 0.021251503, 0.01562501, -0.028840438, -0.01275587, 0.019053072, 0.032218818, -0.022741964, 0.012979439, 0.005024099, 0.019127594, -0.035497833, 0.016506866, -0.017475666, 0.008005023, -0.021947052, -0.0037199445, -0.006806443, -0.0043502855, -0.029784398, -0.012880075, 0.014184229, -0.0062226783, 0.0008624496, -0.0023195313, -0.032641117, -0.005123463, -0.011656654, 0.008917931, 0.023984017, 0.009805997, 0.0035025855, 0.013314793, 0.024095802, 0.0033131726, 0.051122844, -0.030281218, -0.0027433815, -0.023524458, -0.00057134376, -0.004937155, 0.028070366, 0.048042554, 0.040118266, 0.0059587425, 0.042751417, -0.004623537, -0.025635945, 0.02357414, -0.008545315, 0.022232724, -0.03803162, 0.02551174, 0.013650147, 0.0155008035, 0.0034777445, 0.02335057, -0.018109113, -0.022953114, -0.008340376, -0.021127298, -0.025313012, 0.010234505, 0.0048284754, -0.016506866, 0.055892322, 0.015525645, -0.0055457605, 0.0060953684, -0.04429156, 0.0045924857, -0.003005765, 0.007576515, -0.04111191, 0.00088496174, -0.031672318, 0.022903431, -0.031697158, -0.014457481, 0.02985892, 0.015202711, 0.0060301605, 0.0112964595, 0.0044900165, -0.05996625, -0.00987431, -0.0068437043, -0.047520895, -0.02481619, 0.018618353, 0.03393285, 0.023052478, 0.041459683, -0.0007285409, 0.024369052, -0.027225772, -0.025586262, 0.014035183, 0.026256971, -0.028144889]"
../../../gradio,../../../gradio/gradio/components,plot.pyi,"""""""gr.Plot() component.""""""

from __future__ import annotations

import json
from types import ModuleType
from typing import Any, Callable, Literal

import altair as alt
import pandas as pd
from gradio_client.documentation import document, set_documentation_group

from gradio import processing_utils
from gradio.components.base import Component
from gradio.data_classes import GradioModel
from gradio.events import Events

set_documentation_group(""component"")


class PlotData(GradioModel):
    type: Literal[""altair"", ""bokeh"", ""plotly"", ""matplotlib""]
    plot: str


class AltairPlotData(PlotData):
    chart: Literal[""bar"", ""line"", ""scatter""]
    type: Literal[""altair""] = ""altair""

from gradio.events import Dependency

@document()
class Plot(Component):
    """"""
    Creates a plot component to display various kinds of plots (matplotlib, plotly, altair, or bokeh plots are supported). As this component does
    not accept user input, it is rarely used as an input component.

    Demos: blocks_kinematics, stock_forecast
    Guides: plot-component-for-maps
    """"""

    data_model = PlotData
    EVENTS = [Events.change, Events.clear]

    def __init__(
        self,
        value: Any | None = None,
        *,
        format: str = ""png"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Optionally, supply a default plot object to display, must be a matplotlib, plotly, altair, or bokeh figure, or a callable. If callable, the function will be called whenever the app loads to set the initial value of the component.
            format: File format in which to send matplotlib plots to the front end, such as 'jpg' or 'png'.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.format = format
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def get_config(self):
        try:
            import bokeh  # type: ignore

            bokeh_version = bokeh.__version__
        except ImportError:
            bokeh_version = None

        config = super().get_config()
        config[""bokeh_version""] = bokeh_version
        return config

    def preprocess(self, payload: PlotData | None) -> PlotData | None:
        """"""
        Parameters:
            payload: The data to display in the plot.
        Returns:
            (Rarely used) passes the data displayed in the plot as an PlotData dataclass, which includes the plot information as a JSON string, as well as the type of chart and the plotting library.
        """"""
        return payload

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        return None

    def postprocess(self, value: Any) -> PlotData | None:
        """"""
        Parameters:
            value: Expects plot data in one of these formats: a matplotlib.Figure, bokeh.Model, plotly.Figure, or altair.Chart object.
        Returns:
            PlotData: A dataclass containing the plot data as a JSON string, as well as the type of chart and the plotting library.
        """"""
        import matplotlib.figure

        if value is None:
            return None
        if isinstance(value, (ModuleType, matplotlib.figure.Figure)):  # type: ignore
            dtype = ""matplotlib""
            out_y = processing_utils.encode_plot_to_base64(value, self.format)
        elif ""bokeh"" in value.__module__:
            dtype = ""bokeh""
            from bokeh.embed import json_item  # type: ignore

            out_y = json.dumps(json_item(value))
        else:
            is_altair = ""altair"" in value.__module__
            dtype = ""altair"" if is_altair else ""plotly""
            out_y = value.to_json()
        return PlotData(type=dtype, plot=out_y)

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def clear(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...


class AltairPlot:
    @staticmethod
    def create_legend(position, title):
        if position == ""none"":
            legend = None
        else:
            position = {""orient"": position} if position else {}
            legend = {""title"": title, **position}

        return legend

    @staticmethod
    def create_scale(limit):
        return alt.Scale(domain=limit) if limit else alt.Undefined","This code defines a `Plot` component that can display various kinds of plots using matplotlib, plotly, altair, or bokeh libraries. The component does not accept user input and is typically used to display plots. It includes methods for preprocessing and postprocessing plot data, as well as methods for handling events like `change` and `clear`. Additionally, there is a static class `AltairPlot` that provides methods for creating legends and scales for Altair plots.","[-0.07272532, -0.0051309974, -0.003788253, 0.0042139315, 0.013884548, -0.030260315, -0.04582472, -0.023655156, -0.008365012, -0.005959499, 0.01707285, -0.025026469, -0.01358743, -0.0029011848, 0.005410974, -0.008702126, -0.011770439, 0.03160877, -0.022695236, 0.0026683472, 0.006588018, -0.023815142, -0.011953281, 0.0024412235, -0.021963868, 0.01306176, -0.02923183, 0.02664919, -0.010461979, 0.05457827, -0.018341316, -0.026626334, -0.0028611883, 0.01627292, 0.005579531, -0.055538192, -0.009976305, -0.039448116, 0.016844299, -0.035996977, -0.008450719, 0.0016127216, 0.019061256, 0.005790942, -0.02923183, 0.0190384, -0.041642215, 0.028729014, -0.011233342, 0.05434972, -0.039105285, -0.0015698681, 0.0005456684, -0.01607865, -0.033985715, 0.054989666, -0.05233846, 0.050830014, 0.021735316, -0.017644232, 0.03693404, 0.009850601, -8.70909e-05, 0.05965213, -0.04148223, 0.0096391905, -0.05316125, -0.012387531, -0.018295607, 0.032180153, 0.04477338, 0.009513486, -0.01732426, -0.027723385, -0.021461055, -0.018192757, -0.016227208, 0.009456349, 0.006313755, -0.011336191, -0.021689607, 0.0411394, -0.014627342, 0.023118058, -0.013747416, -0.07190253, -0.038122512, 0.012981767, -0.011216201, -0.02722057, -0.009793463, -0.017678514, -0.027311992, 0.04433913, 0.007976472, 0.076199315, -0.01836417, 0.014055962, 0.012638938, 0.03247727, 0.036248382, -0.0074222335, -0.036248382, -0.030854551, 0.045367617, -0.016135788, -0.029094698, -0.014044534, 0.03999664, 0.035174187, -0.042876396, 0.0039625242, -0.019895472, 0.0341457, -0.066051595, -0.036865473, 0.036202673, -0.0029283254, 0.012936056, -0.004762457, -0.021232503, 0.003991093, 0.05137854, -0.012833208, 0.03229443, -0.0124103855, -0.02765482, -0.05037291, -0.018718427, 0.021506764, 0.0004031804, -0.027837662, -0.051789936, -0.039105285, -0.009062096, 0.024340812, -0.02109537, -0.002648349, -0.029071843, 0.0026083523, 0.037345435, 0.03969952, 0.039402403, -0.027289135, 0.018021343, -0.002442652, 0.009124948, -0.02062684, -0.017369969, 0.035105623, -0.0025869254, 0.079719014, -0.0018955551, -0.0070165535, -0.015541552, 0.026854886, 0.062166207, -0.048864465, -0.021278212, -0.0060109235, 0.008325015, -0.013576002, -0.0038939586, -0.0046253256, -0.025986388, 0.004033947, -0.0334829, -0.0118161505, -0.048498783, -0.020158306, -0.0030511722, 0.0209011, -0.03841963, -0.034557097, 0.035814133, -0.0028726158, 0.014821612, -0.024043694, -0.0044624824, -0.0051824218, 0.01540442, -0.008907823, -0.04740173, -0.03266011, -0.016090076, 0.050738595, -0.0033682885, 0.04909302, 0.0018741282, 0.044430554, 0.02306092, 0.026717756, -0.041847914, -0.0035397026, 0.007256533, -0.040728007, 0.037391145, 0.009302076, 0.0010806235, 0.0046281824, -0.00870784, 0.015073019, -0.022752374, 0.020843962, 0.027334847, 0.054943956, -0.0031625915, -0.029643225, 0.0063994625, -0.021072514, -0.0011206202, 0.009239224, 0.03716259, 0.001645576, -0.019769767, -0.017484246, -0.03462566, -0.00019516217, -0.03291152, 0.010604823, -0.054852534, 0.011416184, 0.006879422, -0.035654146, 0.009262079, 0.00770221, 0.06536594, -0.03266011, 0.025300732, 0.010210571, -0.004059659, -0.013598857, 0.026077809, 0.04118511, -0.0350142, -0.06426889, -0.007107974, -0.03247727, -0.0138616925, -0.0036025546, -0.003408285, 0.0057680868, -0.008742123, 0.0038739603, 0.051972777, 0.018821277, -0.007713638, -0.07258819, -0.004139652, 0.051104277, 0.008742123, 0.025529284, 0.010599109, -0.012913201, -0.04621326, -0.038145367, 0.021632468, 0.022889506, 0.006907991, -0.056955215, -0.03163163, -0.033437192, -0.058097977, 0.010701958, 0.015141585, -0.009142089, 0.022283843, 0.027426267, -0.06330897, -0.0046481807, 0.0024655072, 0.008742123, 0.03885388, -0.06362894, -0.023038065, -0.0052081337, 0.040545166, 0.06349181, -0.0015741534, 0.044202, 0.0029283254, 0.02376943, -0.016055794, 0.047767416, -0.01914125, 0.012467524, -0.020261155, -0.01818133, 0.0010549114, -0.058006555, 0.05014436, 0.0017427107, -0.002838333, 0.01109621, 0.016832871, 0.016067222, 0.02870616, 0.011896144, 0.04845307, -0.0049795816, 0.009604908, -0.028454753, -0.0089306785, -0.055538192, 0.050692882, -0.012238972, 0.028066214, 0.06788001, 0.017152844, -0.014273087, 0.020672549, -0.030146038, 0.00463961, -0.0017755651, -0.0343514, 0.016432906, 0.043310646, 0.027609108, -0.0034282834, -0.032385852, -0.056635242, -0.026146375, 0.011976137, -0.0033454332, -0.029711789, -0.028637594, -0.033757165, -0.01334745, -0.016147215, 0.016010083, 0.017198555, -0.021472482, -0.051698513, 0.030306024, 0.01535871, 0.027860517, -0.0009584909, -0.03636266, -0.032180153, 0.035425596, -0.037756827, 0.0072222506, -0.0003946097, 0.04125368, 0.027494833, 0.0121475505, -0.013198891, -0.009439207, 0.034122847, 0.0022698094, -0.039310984, -0.027403412, 0.010719099, -0.005796656, 0.012593227, -0.033437192, -0.05210991, -0.014627342, -0.02367801, 0.006622301, -0.008399295, -0.01627292, -0.039745234, -0.038351063, 0.02095824, 0.0026097808, -0.06138913, -0.054075457, 0.0037853962, 0.017918494, -0.0066851526, 0.022112427, -0.048133098, 0.0020641123, 0.012650366, -0.0297575, 0.0112561975, -0.0511957, -0.037071172, -0.021826738, -0.028774725, -0.005145282, 0.0065080244, -0.038991008, -0.005648097, -0.017061424, 0.01665003, -0.0140102515, -0.009547769, 0.031951603, 0.029894631, -0.027426267, -0.046533234, 0.0037825394, 0.04248786, -0.02142677, 0.018021343, 0.03080884, 0.024752205, -0.008387866, -0.065228805, -0.012970339, 0.0138616925, 0.032317284, -0.034374256, -0.0035768424, 0.02411226, 0.025117889, 0.02402084, 0.03359718, 0.042259306, -0.03483136, 0.018786993, -0.043219227, 0.049001597, -0.01846702, 0.026352072, -0.035174187, -0.0106791025, 0.031174524, -0.008970675, -0.07469087, 0.020443996, -0.010296278, -0.017404253, 0.042373583, 0.08122746, -0.057823714, 0.011541887, -0.068108566, 0.037414, 0.04109369, 0.0040196623, -0.0066051595, -0.038808167, -0.051149987, -0.013964541, -0.0044053444, 0.02621494, 0.021232503, -0.021015378, 0.0049824384, 0.0026940594, 0.008416436, -0.061251998, -0.037871104, 0.0042824973, -0.011627595, -0.03186018, 0.0031311654, -0.005528107, 0.026534913, -0.025826402, -0.016570037, 0.010604823, -0.008330729, 0.01732426, 0.003916814, 0.017427107, 0.025369298, 0.033048652, 0.07601647, -0.04017948, 0.07930762, -0.007759348, 0.011793295, 0.039219562, 0.007050836, 0.022649525, -0.049732964, 0.0026697756, 0.010170574, 0.059423577, -0.014375935, -0.06262331, -0.012616083, 0.02133535, 0.0118504325, -0.037916813, -0.019792622, 0.02463793, 0.020558273, -0.0334829, 0.018409882, 0.023186624, 0.06623443, -0.022478111, -0.040636584, 0.0070794052, -0.013644568, -0.062257625, -0.0049824384, -0.029940343, -0.009244937, 0.029734645, -0.037573986, -0.08502143, 0.0038968155, 0.0012756072, -0.00284119, 0.043470632, 0.0026326359, 0.011604739, 0.010096295, -0.0026940594, -0.000911352, 0.013964541, 0.001484161, -0.021735316, 0.014753046, -0.06385749, 0.0017412823, 0.04909302, -0.0072393916, -0.022855222, 0.008153601, -0.0029068987, 0.028020503, 0.00552525, -0.026672045, -0.029597513, 0.004262499, -0.013941686, -0.032500125, 0.0039625242, 0.026672045, -0.017347114, -0.07523939, -0.003731115, -0.031197378, -0.020341149, -0.026992017, -0.01463877, 0.02100395, -0.049687255, 0.03352861, -0.013598857, 0.031768758, -0.0025326444, -0.024226535, 0.024500798, 0.0022326696, -0.0076507856, -0.019826906, -0.0030483154, 0.025529284, -0.015712965, -0.020146878, 0.014147383, 0.04717318, 0.07267961, -0.045550458, -0.014261659, -0.00052602723, -0.011747585, 0.021735316, -0.03903672, 0.02080968, -0.013690278, -0.015107302, -0.0037711118, 0.044316277, 0.01045055, 0.029437527, 0.047264602, 0.007090833, -0.006222334, -0.013050332, -0.030328881, 0.01569011, -0.03505991, -0.016387194, -0.028523318, -0.015850097, -0.008599278, -0.015472986, 0.046327535, -0.027334847, -0.010290564, -0.011113352, -0.019164104, 0.01201042, -0.020146878, -0.031037392, -0.01358743, 0.008627847, -0.008644988, 0.014330224, 0.0116675915, 0.0051967064, -0.034054283, 0.005176708, -0.037254013, -0.00037354004, -0.015998656, -0.011113352, -0.009102092, -0.004439627, -0.02133535, -0.033117216, 0.009896311, 0.0046596085, -0.016204353, 0.009622049, -0.026923452, -0.011884715, 0.033894297, 0.037756827, -0.049687255, -0.012044703, -0.018695572, 0.022889506, 0.0058052265, -0.041322242, -0.015564406, 0.044430554, -0.026603479, 0.016032938, 0.01975834, -0.04148223, 0.007147971, 0.024180826, -0.019484077, 0.025460718, 0.0021598185, 0.023038065, 0.018329889, 0.009930594, 0.0027483406, 0.03181447, -0.011119066, 0.029551802, 0.05160709, 0.022775229, 0.045139063, -0.016970003, 0.003202588, -0.015804386, 0.024043694, -0.016032938, -0.0015827242, 0.027129149, 0.026329216, 0.02818049, 0.010290564, -0.032637257, -0.025117889, 0.023083774, 0.058920763, -0.012330392, 0.018009916, 0.03291152, 0.028089069, 0.02229527, -0.006942274, -0.009856314, 0.027586253, -0.010142005, 0.00071922527, -0.0036911184, -0.014364507, 0.0012034703, -0.00088778255, -0.020649694, -0.04625897, 0.037916813, 0.035151333, -0.0026526342, 0.044133436, 0.016112931, -0.0017669944, 0.042647846, 0.0010484833, 0.032408707, 0.011930427, -0.01908411, -0.029368961, -0.021129653, -0.027906226, 0.012456097, -0.015278717, 0.0033311488, -0.033368625, 0.017209982, 0.0068108565, -0.021106798, 0.018672718, 0.008125031, -0.007427947, -0.040728007, -0.0014770188, 0.03464852, -0.0008620704, 0.0125818, -0.018649861, 0.01654718, 0.019015545, -0.010279137, 0.012638938, -0.013267457, -0.0133017395, 0.0064223176, 0.028980423, -0.02779195, 0.037642553, 0.011896144, 0.019986892, 0.0020826822, 0.03679691, -0.04625897, -0.03019175, 0.019301236, -0.018444164, 0.0072279642, -0.021072514, 0.032797243, 0.03947097, 0.016478615, -0.026900597, 0.01573582, -0.05544677, 0.0101020085, -0.061114866, -0.014764474, 0.033322915, 0.018672718, 0.00028819006, 0.025917822, 0.0049195867, -0.021266785, 0.026260652, -0.0065365937, 0.026077809, -0.022101, -0.00012659651, 0.0069194185, -0.012798925, 0.016512899, -0.0035939838, 0.00552525, 0.0024326527, 0.01569011, 0.007690782, -0.026192086, 0.010753382, -0.016227208, -0.029894631, -0.015541552, -0.0016998572, -0.0021155365, 0.016832871, 0.006525166, 0.01712999, -0.015153012, -0.07597076, 0.0027326276, -0.02984892, -0.028111923, -0.024706496, 0.0133017395, -0.0051852786, 0.0061137723, 0.012650366, -0.015061592, -0.018809848, -0.054623984, 0.04481909, -0.013336022, -0.02310663, -0.009290648, -0.024866482, -0.017027142, 0.0068965633, -0.046761785, 0.012193262, 0.0053024115, -0.0027526258, 0.0009806319, 0.001272036, -0.00939921, 0.00971347, -0.0020384002, -0.0119647095, -0.0036796909, 0.02114108, 0.024912193, -0.022363836, -0.024843628, -0.014753046, -0.025734982, -0.029300395, -0.02315234, 0.0503272, 0.0077479207, 0.05028149, -0.027929083, 0.026100663, -0.058829345, -0.028294766, -0.052201327, -3.7653088e-05, -0.02325519, -0.014913033, 0.0064794556, 0.0266949, 0.027197715, -0.040979415, -0.012467524, -0.011713302, -0.019815478, 0.01487875, 0.037436854, -0.020592555, 0.014033107, 0.000911352, -0.02148391, -0.01627292, -0.003054029, 0.0053938325, -0.020146878, -0.013324595, -0.01574725, -0.015175868, 0.0056652385, 0.005856651, -0.0037768255, 0.027014874, 0.015175868, -0.01439879, -0.013118898, -0.02061541, -0.0053395513, 0.023883708, 0.030854551, 0.016375767, 0.0073593818, -0.026009243, -0.011353332, 0.0005167423, -0.028386187, 0.0034654231, 0.044133436, -0.02219242, -0.032568693, 0.04731031, -0.027334847, 0.019541215, -0.00770221, -0.01861558, 0.022260986, 0.021803882, 0.020112596, 0.01593009, -0.050098646, -0.0040625157, -0.0068679946, 0.009604908, 0.010987648, 0.006473742, 0.05247559, -0.017907066, -0.039859507, -0.0020184019, -0.0022440972, -0.01083909, -0.07171969, 3.8166436e-05, -0.030648854, 0.025986388, 4.304884e-06, -0.003973952, -0.0010906226, -0.01040484, 0.014261659, -0.0036139821, -0.025437864, 0.0031483069, 0.03320864, 0.00024480087, -0.0006960129, 0.008267877, -0.0014998739, 0.020866819, -0.013267457, 0.0027040585, -0.004711033, 0.0031054534, -0.025095034, 0.03115167, 0.013804554, -0.018489875, 0.034099992, -0.0030911688, 0.0064280313, -0.005465255, 0.018855559, 0.012478951, -0.0025683555, -0.0011463322, 0.023312327, 0.011501891, -0.008159314, 0.01914125, -0.008576422, -0.01888984, -0.030260315, -0.010924797, -0.036911186, -0.04315066, -0.0341457, -0.03163163, -0.0067822873, 0.010336274, 0.03316293, -0.0075136544, -0.01334745, 0.018707, -0.00052459876, 0.022352409, 0.004288211, 0.013484581, 0.015267288, 0.02367801, 0.012490379, -0.023472313, 0.037733972, -0.00094277796, 0.037276868, -0.01545013, -0.019278381, 0.03309436, 0.034054283, -0.012467524, -0.03147164, 0.008576422, -0.02818049, 0.0056280987, 0.009553483, 0.028911857, 0.013610285, -0.011553315, 0.012021847, 0.017358541, -0.001022057, 0.012250399, -0.02980321, 0.022375263, 0.042442147, 0.043264937, 0.038693894, 0.040728007, -0.036956895, 0.059515, 0.0049338713, -0.032020167, -0.012844635, -0.008085035, 0.0032997227, 0.0019369802, 0.015027309, -0.020866819, -0.007645072, 0.020638267, 0.017575666, 0.025803545, -0.01966692, 0.034419965, -0.027586253, -0.0065365937, 0.015655827, 0.008822116, -0.028111923, 0.014055962, 0.043699186, -0.013838837, -0.007782203, 0.011090497, -0.014524494, 0.004619612, 0.009610621, 0.029460382, 0.04253357, -0.0019726914, 0.020169733, -0.03816822, -0.013667423, 0.008524998, -0.0004892446, -0.004885304, 0.01746139, -0.020672549, -0.0021683893, 0.021323923, 0.0071936813, 0.01707285, 0.007165112, 0.018912697, 0.027837662, 0.0151644405, -0.00406823, -0.010393413, 0.050738595, 0.0049110157, -0.029003277, -0.019186959, 0.0050938576, 0.026420638, -0.024615075, -0.0038282499, -0.00046817496, 0.009067809, -0.017427107, 0.025026469, 0.0022598102, 0.010896227, -0.0726339, -0.0024183684, 0.012593227, -0.020843962, -0.029071843, -0.013758844, -0.00062601885, -0.0031225947, -0.006673725, -0.030123184, 0.016318629, 0.017038569, -0.026489204, 0.03462566, 0.039402403, -0.0059652133, -0.024592219, -0.025803545, 0.0004885304, 0.020832535, 0.051881354, -0.018832704, 0.0049452987, 0.012284682, 0.028294766, -0.036476936, -0.012284682, 0.009330644, 0.021643896, 0.015130158, -0.014935888, 0.0072393916, -0.0054881102, 0.00786791, 0.019335518, 0.003413999, -0.014798757, -0.036156964, 0.02062684, 0.004993866, 0.012387531, -0.012113268, -0.022272414, 0.033048652, 0.02525502, -0.01358743, -0.027494833, 0.03357432, -0.021586757, -0.017278548, -0.018158475, 0.0047510294, -0.016375767, 0.008056466, 0.010970507, -0.030740274, -0.0010556256, -0.0017598522, -0.03697975, -0.029894631, -0.03080884, -0.0027040585, -0.0012756072, 0.022375263, -0.035722714, -0.010576255, 0.013176036, 0.027197715, -0.01975834, 0.021026805, -0.007770776, -0.0035025629, 0.033140074, 0.00030104612, 0.008970675, -0.01947265, 0.002768339, -0.021941014, -0.02980321, 0.015107302, 0.008902109, 0.016055794, 0.053618353, -0.032271575, -0.031700194, 0.03816822, 0.020066885, -0.014421646, -0.020981094, -0.009496345, 0.0025997816, 0.025734982, -0.009153517, 0.00705655, 0.00403109, 0.020238299, 0.060200658, 0.026283506, 0.0105134025, -0.02306092, 0.012730359, -0.0043024956, -0.011610453, 0.05549248, -0.020398287, 0.008822116, 0.00034479247, 0.015084447, -0.0055623897, 0.023449458, -0.024683641, 0.005293841, -0.018101336, 0.026877742, -0.004273927, -0.019061256, -0.0021869591, -0.008330729, -0.021655323, -0.00041032268, 4.593364e-05, 0.027517688, -0.02358659, -0.023140913, 0.0084850015, -0.0151644405, -0.016924292, -0.012718932, 0.020409714, -0.019484077, -0.02142677, 0.022523822, 0.041345097, 0.02043257, 0.0075936476, -0.0050367196, 0.06074918, 0.042419292, 0.008039325, 0.04836165, -0.016570037, -0.004262499, 0.015427276, 0.018707, -0.022558104, -0.018387027, -0.0017427107, 0.011907571, -0.0059880684, -0.008033611, 0.011433325, -0.018729854, -0.0141131, 0.0058080833, 0.03487707, 0.017529955, -0.016044367, -0.006370893, 0.007942189, 0.024066549, -0.031197378, 0.013461726, 0.040408034, -0.006119486, 0.0150158815, -0.015587262, -0.004616755, 0.010221998, -0.004319637, -0.027289135, 0.005099572, -0.005468112, -0.03864818, 0.024683641, 0.016204353, -0.003991093, 0.03167734, -0.011501891, -0.04285354, 0.010804807, -0.00073422404, -0.021495337, -0.0005185279, 0.038053945, 0.008325015, 0.010633392, -0.0009920595, -0.018044198, -0.0015298715, 0.011976137, -0.0055681034, 0.0024597934, 0.0036939753, 0.026809176, 0.017118562, 0.020238299, 0.029711789, -0.01855844, -0.020386858, -0.0019226955, 0.02166675, 0.023220906, 0.00018052055, 0.0074565164, 0.0016941434, 0.01693572, 0.0059080753, 0.027814806, 0.028614739, -0.010341988, 0.038533904, 0.006679439, -0.03330006, -0.051104277, 0.019906899, 0.0005974498, -0.035562728, -0.0314945, -0.02927754, 0.03330006, -0.033848584, 0.026969163, 0.027563399, -0.0127075035, -0.008684984, -0.007142257, -0.0029254686, 0.010793379, -0.03387144, 0.028911857, 0.05649811, 0.024843628, 0.0022412403, -0.013975969, -0.041390806, 0.009753467, -0.007530796, 0.01995261, -0.008764978, -0.0062966137, -0.016478615, -0.019598354, -0.025849257, -0.018238468, -0.0070736916, -0.015130158, 0.009959163, 0.02932325, -0.012433241, -0.013141753, -0.019004118, -0.057320897, 0.052612722, -0.002148391, -0.0065937317, -0.022546677, 0.035562728, 0.032888666, 0.029711789, -0.018192757, 0.013324595, -0.012524662, -0.02980321, 0.0059994957, 0.012913201, 0.0035225612, -0.0093535, 0.038122512, 0.026809176, -0.019301236, -0.028294766, -0.010261995, -0.061114866, 0.024340812, 0.010279137, -0.033505756, 0.028637594, 0.0026083523, -0.013450298, 0.024249392, -0.013244602, 0.029391816, -0.03912814, -0.012318965, 0.018707, -0.020535417, -0.02984892, -0.05128712, -0.01617007, 0.03224872, 0.0058623645, -0.0064280313, -0.0019284094, -0.014135955, 0.012718932, -0.03204302, 0.016147215, 0.0010213428, -0.022101, -0.010193429, -0.00022426687, 0.028500462, 0.00042389295, -0.0029368962, 0.017289976, -0.02559785, 0.02244383, -0.02358659, 0.009959163, 0.018432736, -0.0077307792, -0.016307201, -0.01956407, 0.002895471, 0.05348122, -0.008764978, 0.021369632, 0.033048652, -0.027677674, -0.023163768, -0.02664919, -0.018409882, 0.06495454, -0.003705403, -0.006462314, -0.0033968575, 0.009747752, 0.019312663, 0.032408707, -0.017404253, 0.037345435, 0.0035911268, 0.027517688, 0.00870784, 0.033414334, -0.015770104, 0.0075079408, -0.04401916, -0.023815142, -0.004448198, -0.0048538777, 0.01803277, -0.00014623771, -0.011404756, -0.006268045, 0.0121475505, 0.02765482, -0.0025840686, 0.02507218, 0.027380556, 0.021838166, -0.016570037, 0.021369632, 0.013907403, 0.009902026, -0.020409714, -0.008250736, 0.015518696, 0.022398118, -0.04717318, 0.01851273, -0.030351736, -0.019655492, -0.01607865, -0.017015712, 0.01100479, -0.021015378, 0.0067422907, 0.02472935, -0.0023398034, 0.05668095, 0.019495504, 0.015050164, -0.0030568861, -0.04043089, -0.031517353, 0.029871777, 0.0055052517, -0.00077922025, 0.019655492, -0.0099534495, -0.033414334, 0.029346107, 0.003762541, 0.012478951, -0.0141131, 0.0051024286, 0.008976389, -0.017164271, 0.0112561975, 0.009696328, 0.029346107, 0.02043257, -0.00875355, -0.013141753, 0.009673473, -0.019792622, 0.0077079237, -0.004439627, -0.015084447, -0.034031425, 0.016535753, 0.017381396, 0.02205529, -0.032385852, 0.026489204, 0.008570708, 0.0049767247, -0.0019741198, 0.028729014, -0.011656163, 0.014273087, 0.02722057, 0.024935048, -0.005373834, 0.006233762, 0.015221578, 0.000103652004, 0.015221578, 0.0209011, -0.0027012017, 0.0035082768, 0.0020898245, 0.016341485, 0.016512899, 0.017872784, 0.04808739, -0.050235778, -0.024775062, 0.024500798, 0.017518528, 0.012364675, -0.015518696, -0.0029311823, -0.0015655827, -0.032134444, 0.009427779, -0.010267708, -0.022169566, -0.03396286, -0.04655609, -0.0026440637, 0.04395059, 0.000273727, 0.013815982, -0.0103648435, 0.012673221, -0.01995261, -0.022592388, -0.013770272, 0.0012906059, -0.001994118, 0.0027640534, -0.02109537, 0.020341149, -0.00092635077, 0.04950441, 0.010393413, -0.020581128, 0.009239224, -0.003731115, 0.001446307, 0.02463793, 0.03268297, 0.035791278, 0.011507604, 0.0036682633, -0.013610285, -0.011204773, 0.021323923, 0.012890345, -0.005590959, -0.033757165, -0.0018112764, -0.019346947, -0.0016912865, 0.0064566005, 0.03487707, -0.015301571, -0.0045139063, -0.014490211, -0.014444501, -0.0034797078, 0.0056081004, -0.0078050587, -0.036225528, 0.019244097, -0.010256281, -0.015175868, 0.013793127, -0.010610537, -0.0064508864, 0.02167818, 0.011839005, -0.029117554, 0.031974457, -0.01669574, -0.010816234, -0.008970675, -0.014901605, 0.016764306, -0.028134778, 0.04100227, -0.012844635, 8.1064616e-05, -0.014364507, -0.0031025964, -0.028134778, -0.051698513, -0.002854046, -0.017472818, -0.024295101, 0.027106294, -0.003676834, -0.008793547, 0.0008784976, -0.0057195197, 0.00810789, -0.03631695, 0.019895472, -0.010999076]"
../../../gradio,../../../gradio/gradio/components,checkbox.pyi,"""""""gr.Checkbox() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import FormComponent
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Checkbox(FormComponent):
    """"""
    Creates a checkbox that can be set to `True` or `False`. Can be used as an input to pass a boolean value to a function or as an output
    to display a boolean value.

    Demos: sentence_builder, hello_world_3
    """"""

    EVENTS = [Events.change, Events.input, Events.select]

    def __init__(
        self,
        value: bool | Callable = False,
        *,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: if True, checked by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, this checkbox can be checked; if False, checking will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""boolean""}

    def example_payload(self) -> bool:
        return True

    def example_value(self) -> bool:
        return True

    def preprocess(self, payload: bool | None) -> bool | None:
        """"""
        Parameters:
            payload: the status of the checkbox
        Returns:
            Passes the status of the checkbox as a `bool`.
        """"""
        return payload

    def postprocess(self, value: bool | None) -> bool | None:
        """"""
        Parameters:
            value: Expects a `bool` value that is set as the status of the checkbox
        Returns:
            The same `bool` value that is set as the status of the checkbox
        """"""
        return value

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Checkbox` component in Gradio, which creates a checkbox that can be set to `True` or `False`. It can be used as an input to pass a boolean value to a function or as an output to display a boolean value. The component has various parameters such as `value`, `label`, `info`, `every`, `show_label`, `container`, `scale`, `min_width`, `interactive`, `visible`, `elem_id`, `elem_classes`, and `render`. The component also includes methods for API information, example payload, preprocessing, postprocessing, and handling events like `change`, `input`, and `select`.","[-0.036742367, 0.018676054, -0.04096537, 0.029854586, 0.0004273107, 0.02286518, 0.019601952, -0.013436822, 0.012759335, 0.0044431845, 0.042026766, -0.0037064175, 0.0030797422, -0.001601974, 0.01011149, -0.01131403, -0.02818345, 0.006515165, 0.012691586, 0.045933604, -0.0048835506, -0.021668287, -0.0067748684, 0.03324202, 0.0013542679, -0.0497727, -0.045459364, 0.019680992, 0.009891308, -0.0032801654, -0.058896188, -0.03330977, 0.026083242, -0.016022563, -0.024050782, -0.03136764, -0.002978119, 0.00995341, -0.017840486, -0.02739305, -0.078949794, 0.0020451634, -0.011088201, 0.020076193, 0.0018447401, 0.040333048, -0.031954795, 0.026896227, -0.010941412, 0.0003556806, -0.043065578, 0.033219438, -0.048327394, -0.019161586, 0.017975984, 0.03708111, -0.075652696, 0.02106984, 0.019421289, -0.005961884, 0.020708514, -0.017366245, 0.0044008414, 0.026309071, -0.004327447, 0.002918839, 0.0014050794, 0.007249109, 0.039113574, -0.007610435, 0.090557404, 0.023079718, -0.0013740279, -0.01614677, 0.0057219407, -0.003926601, 0.008197591, -0.008558917, 0.027370468, 0.017027501, -0.015977398, 0.0014368367, -0.044443134, -0.03642621, -0.018664762, 0.01928579, -0.027528547, 0.015232162, -0.060205996, -0.039474897, -0.023892703, -0.019861655, -0.0069724685, 0.06499357, 0.015943523, -0.0066675995, -0.03263228, -0.0037798118, 9.4742296e-05, -0.005185597, 0.025089595, -0.013131953, -0.024141114, -0.02075368, 0.044601217, -0.04900488, -0.030893398, 0.022131236, -0.015796734, -0.0223119, 0.0056795976, -0.01684684, -0.10893988, 0.045594864, -0.021600537, -0.03753277, 0.032135457, -0.021047257, -0.026467152, -0.02169087, -0.017919526, -0.04564003, 0.036584288, -0.043991476, 0.024818601, -0.046227183, -0.0017840486, -0.013696525, -0.029448094, 0.011810853, 0.0034664741, 0.021340834, 0.021261794, -0.04932104, 0.00442907, 0.03988139, -0.04166544, -0.042207427, -0.039994303, 0.02106984, 0.017580783, -0.02418628, 0.04317849, -0.025812248, -0.013651359, -0.012465757, -0.023892703, 0.008169361, -0.065400064, 0.0066675995, 0.00036167915, 0.028047955, -0.011483401, -0.020595599, -0.008045156, 0.043494653, 0.04611427, 0.0043218015, -0.005160191, -0.02488635, 0.012047973, 0.008643603, 0.040039472, -0.012160888, -0.035071235, -0.019522911, 0.00421171, 0.017433994, -0.014532092, 0.050766345, 0.005312626, 0.035771303, -0.0092928605, 0.018630886, 0.0027339417, 0.013594902, 0.02840928, -0.009998576, -0.0049089566, -0.0072547547, 0.00421171, 0.012589963, -0.025225092, 0.011059972, -0.0045476304, -0.019387415, 0.0040564523, -0.05876069, -0.038752247, -0.023260381, 0.010935767, -0.009428358, 0.028160868, 0.018777676, -0.0048299166, -0.025112178, 0.037961844, -0.026309071, 0.018992214, -0.032587115, 0.051443834, 0.002011289, 0.0016400827, -0.01647422, -0.042297762, 0.021589246, -0.0069498857, -0.03145797, 0.00174594, -0.009727581, -0.013583611, -0.02504443, -0.007531395, -0.0010973875, -0.05681856, 0.01881155, -0.0005783338, 0.03215804, 0.0015709226, -0.005640078, -0.06016083, -0.006119964, 0.017185582, -0.036200378, -0.011048681, -0.026173573, 0.0149385845, -0.0063175648, 0.0103486115, 0.008880723, 0.035071235, -0.023644289, 0.02248127, 0.002182072, 0.027551131, -0.048011232, 0.046791755, -0.03012558, 0.029854586, -0.015345076, -0.033354934, -0.0048073335, 0.038052175, -0.02958359, 0.016372599, 0.043336574, -0.016914587, -0.028431863, 0.019364832, 0.044646382, 0.00799999, 0.035455145, 0.03114181, 0.0043133325, 0.00710232, 0.015040208, -0.008683123, 0.040220134, 0.05230198, 0.002420604, -0.018551847, -0.04557228, -0.039949138, 0.018043732, -0.0316838, 0.058670357, 0.008694414, 0.018043732, -0.017332371, -0.0037064175, -0.010134074, 0.020595599, 0.09683545, 0.011178533, 0.0324742, 0.0014608309, 0.027867291, 0.05672823, -0.009614667, 0.05392795, -0.045323867, -0.0007025397, 0.022357065, 0.047243413, 0.0012949879, -0.013922354, 0.022469979, -0.0069329483, 0.017332371, -0.021724744, 0.04044596, 0.032587115, 0.051940657, -0.003573743, -0.0002836976, 0.010901892, 0.06237395, -0.027280135, 0.015378951, -0.017163, 0.012149597, 0.005609026, -0.036335874, -0.007717704, 0.0013902594, 0.00030804478, -0.009614667, 0.029854586, 0.00037120632, -0.002938599, 0.04283975, 0.032361288, -0.009450941, -0.038887743, -0.0650839, 0.012962581, 0.018698636, 0.0076838294, 0.006266753, -0.04159769, -0.0014142537, 0.02130696, 0.015943523, 0.009129135, -0.03595197, -0.00438955, -0.06517423, -0.0061764214, 0.031480554, -0.056141075, 0.039316818, 0.015232162, -0.005261814, 0.019522911, 0.009078323, -0.017287206, -0.06174163, 0.06219329, -0.06955531, 0.023983033, -0.016270975, 0.0053803744, 0.0299675, 0.0752462, 0.011410007, -0.005761461, -0.03464216, -0.0018038086, 0.030644987, -0.032203205, 0.0141256, -0.00538602, 0.0044431845, 0.012623837, -0.014882127, -0.0130867865, -0.0054791747, -0.028748024, -0.05157933, 0.017196873, -0.022221567, 0.04019755, -0.0016697227, 0.05392795, -0.014803086, -0.0070628, -0.060838316, -0.036155213, 0.017806612, 0.0008553271, 0.012623837, 0.0042992183, -0.003971766, -0.031751547, -0.040287882, -0.02084401, 0.024231445, -0.005792512, -0.01934225, -0.015040208, 0.037894096, -0.020268148, 0.0027339417, -0.019409997, -0.015028915, -0.01310937, -0.054515105, 0.044194724, -0.00014131951, 0.008079031, 0.004121378, -0.01662101, 0.02121663, -0.039068405, 0.037894096, 0.01662101, -0.024208862, 0.052076153, 0.014035269, 0.009733227, -0.0015130539, -0.043359157, -0.032609697, 0.06883266, -0.03902324, -0.019827781, 0.020584308, 0.0162371, 0.016045146, -0.010839789, 0.04566261, 0.055192593, 0.045278702, -0.027122056, 0.014362721, -0.026467152, 0.0041552526, -0.031074062, 0.002083272, 0.020064902, 0.039452314, -0.008457294, 0.012318969, -0.029312596, 0.026783312, 0.0020846834, -0.0026097356, 0.04166544, 0.036110047, -0.054831266, -0.04261392, 0.02022298, 0.017298497, 0.03129989, 0.04986303, -0.030261077, 0.0088073285, 0.013922354, 0.021397293, 0.003347914, -0.045459364, 0.034461495, 0.008050801, 0.023599124, -0.014486927, 0.014486927, 0.009975993, -0.051940657, -0.029064184, -0.056457233, -0.01458855, 0.014949876, -0.062328786, 0.018235687, 0.015085373, 0.038819995, 0.044985123, 0.01404656, 0.029086767, -0.025338007, -0.024005616, 0.0006612554, 0.013628776, 0.045865856, -0.017896943, 0.028025372, 0.03143539, 0.005041631, 0.0039463607, -0.02567675, -0.036945615, -0.020900467, 0.04697242, 0.036245544, -0.019398706, 0.033851758, 0.027980205, 0.041326694, 0.018303435, -0.0012787563, -0.013177118, 0.021035966, 0.014419178, -0.0055243406, 0.030035248, 0.08346637, 0.003774166, -0.04403664, -0.0053182715, -0.03997172, 0.005614672, 0.0006400839, -0.009411421, -0.007943532, 0.024434691, -0.009298506, -0.056863725, 0.036719784, 0.016429055, -0.033129103, 0.027325302, 0.0014820024, -0.0029865878, 0.04089762, 0.024796017, -0.020098776, 0.048733886, -0.0158419, -0.00624417, -0.015277328, -0.029019019, -0.011421299, 0.057812206, 0.005369083, -0.015638653, -0.06413542, -0.006995051, 0.017242039, -0.041620273, 0.00710232, -0.03527448, 0.020923052, -0.020934343, 0.0018122772, 0.0071700686, 0.0376231, 0.0044460073, -0.039700728, 0.017219456, -0.012273802, -0.037035946, -0.015649945, 0.026963975, 0.022910345, -0.038142506, -0.02770921, -0.0051206714, -0.004412133, 0.029064184, -0.028002787, 0.012431883, -0.024705686, -0.017648531, -0.01178827, 0.012623837, 0.04331399, -0.028025372, -0.057225052, 0.015695112, 0.027822126, 0.03416792, -0.0668002, 0.022515144, -0.014599841, 0.035906803, 0.031006314, 0.016880713, 0.015006333, -0.011059972, -0.037329525, -0.0044770585, 0.0007268869, 0.0018334487, 0.028702859, -0.022278024, -0.030644987, -0.034055002, -0.0038870806, 0.008666186, 0.029131932, -0.0077854525, 0.03642621, -0.010246988, 0.048914548, 0.013843314, -0.0015215224, 0.003912486, -0.018167937, 0.0069724685, 0.0030119934, 0.010563148, -0.04611427, 0.015412825, 0.010026805, -0.036019716, 0.010709938, 0.018551847, 0.017501744, 0.017603366, -0.008265339, -0.011291447, 0.0036979488, -0.0047847508, 2.3420931e-05, -0.0046859505, 0.044894792, -0.032338705, 0.042478424, -0.03518415, 0.02130696, 0.01135355, 0.011026097, 0.017840486, 0.008191945, 0.045865856, 0.0053352085, 0.025925161, -0.016214518, -0.017456576, 0.011218052, -0.042817168, 0.049185544, -0.04128153, -0.017490452, -0.005185597, -0.013357782, -0.010393777, 0.024728268, 0.014577258, -0.01763724, -0.013707817, 0.020268148, -0.0030289306, -0.0046266704, -0.00023288609, 0.036855284, 0.03441633, 0.00049717654, 0.04410439, 0.029832002, -0.012860958, -0.015706403, 0.015232162, 0.025609002, -0.0015031738, -0.031390224, 0.019771323, 0.008801683, -0.0023119238, -0.011946351, 0.034213085, 0.0074354177, -0.006108673, -0.014667589, 0.01981649, -0.014859544, 0.018484099, 0.046385262, 0.05541842, -0.0057417005, 0.032587115, 0.009371901, -0.02761888, -0.025563836, -0.014012686, -0.0035539828, -0.029673923, 0.011167241, 0.004242761, -0.00059950526, -0.033422682, -0.024412109, 0.006678891, -0.0076838294, -0.013459405, 0.04783057, 0.015175705, 0.0070289257, -0.021194046, 0.01576286, -0.039474897, -0.00095977297, -0.008903306, 0.021600537, -0.001361325, 0.0056598377, -0.021340834, -0.004239938, 0.009857433, 0.034845404, -0.04814673, 0.0042032413, -0.020110067, -0.041846104, -0.0008412128, -0.05487643, 0.03082565, 0.0151305385, 0.011370487, -0.03005783, -0.0012900478, 0.031028897, 0.004962591, 0.043426905, -0.044827044, 0.04223001, 0.028002787, -0.004996465, 0.04096537, -0.040852454, 0.03245162, 0.029086767, 0.015875774, -0.046611093, -0.025631584, 0.015457991, -0.008338734, 0.021860242, -0.015345076, -0.017287206, -0.03464216, 0.05175999, 0.026467152, -0.0020663347, -0.024750851, -0.025609002, -0.011878602, 0.005609026, 0.01778403, -0.005755815, -0.039226487, 0.0043189786, -0.036200378, -0.025902579, 0.037397273, -0.04688209, -0.028748024, -0.017535618, -0.050585683, -0.0068087424, -0.0318193, -0.009185592, -0.0055892663, 0.03441633, -0.0069498857, 0.063774094, 0.009450941, -0.028318949, 0.011297093, -0.0036358458, 0.006390959, 0.04602394, 0.007926595, -0.0073789605, -0.0009004929, -0.016677467, 0.023305546, -0.035861634, -0.013583611, -0.005798158, 0.005854615, 0.0059054266, -0.01732108, 0.0036217317, -0.031480554, -0.016575845, 0.0014417766, -0.047966067, -0.0047847508, 0.019184168, -0.0020395175, 0.012669004, -0.017501744, -0.004937185, -0.026263906, -0.031390224, 0.0027297074, -0.019251917, 0.018009858, 0.021498915, -0.0008602671, -0.01155115, -0.01646293, 0.012296386, 0.058941353, -0.009524335, -0.017242039, -0.029899752, 0.0043218015, 0.021047257, -0.005860261, 0.0011474933, 0.0047621676, -0.010681708, 0.022695808, 0.027347885, 0.0047480534, 0.041236363, 0.009343673, -0.037126277, -0.00020218747, 0.028454445, -0.044759296, -0.047649905, 0.05103734, 0.040716957, -0.016801672, -0.052030988, -0.0074523548, 0.03543256, -0.021329543, -0.031006314, -0.023215216, 0.041326694, 0.04168802, 0.010551857, -0.014848253, -0.052392315, -0.006492582, 0.008948471, -0.011150304, -0.016959753, -0.008716997, 0.013335199, 0.0068708453, 0.032903276, 0.01849539, 0.037871514, -0.000691954, -0.01622581, -0.02013265, 0.0058320323, 0.02013265, -0.0012582906, 0.00031316123, 0.019082544, -0.024592772, 0.030780485, 0.04557228, 0.011020452, 0.00016372598, 0.008203236, -0.009021866, 0.030102998, -0.027054306, 0.019455163, 0.0066675995, 0.058038037, -0.020471394, -0.02357654, 0.0034580056, 0.021532789, 0.019014796, -0.0013274507, 0.03581647, -0.00040014065, -0.0051347855, 0.009913891, 0.002725473, 0.041326694, -0.018845424, 0.0051517226, 0.011946351, -0.024479857, 0.014227223, -0.0065377476, -0.00932109, 0.014803086, 0.0032293538, 0.04525612, 0.012228637, -0.015649945, -0.01849539, 0.035771303, -0.022345774, -0.04017497, -0.025247674, -0.014611132, 0.025609002, 6.280867e-05, -0.015074082, -0.010388131, 0.02396045, -0.015932232, -0.018529264, -0.019014796, 0.022650642, 0.00015684526, 0.013470696, -0.03441633, 0.004965414, 0.02301197, 0.017366245, -0.028160868, -0.020166524, -0.019839073, -0.007576561, -0.021826366, 0.011449527, -0.0030966792, -0.009896954, 0.027438216, 0.0015384597, 0.0038532063, -0.024683103, 0.02926743, -0.028860938, 0.0058489693, 0.00803951, -0.0013754393, -0.048327394, 0.027664045, -0.027189804, -0.020561725, -0.014656298, -0.011020452, -0.031254724, -0.0043951957, -0.0128948325, -0.0025970328, -0.0204601, -0.058941353, -0.01849539, 0.022221567, 0.019951986, 0.019635826, 0.021182755, 0.027076889, 0.010568794, 0.005021871, -0.051308334, 0.008299214, -0.009750164, -0.016508095, -0.033738844, 0.0064022504, -0.010444588, -0.011968934, 0.0072773374, -0.004412133, 0.017129125, 0.008378253, 0.006899074, -0.016835548, 0.010517983, -0.061380304, -0.034529246, -0.0053973114, -0.019918112, -0.02739305, -0.0068539083, -0.029944917, -0.0183486, 0.010681708, -0.0063401475, -0.051308334, 0.00022971038, -0.013843314, -0.022119945, -0.0014495394, 0.014148183, -0.0018193343, 0.06237395, 0.03981364, -0.020471394, 0.0030289306, 0.021318251, -0.013154536, 0.009947765, -0.0016457284, -0.047469243, -0.016982336, 0.007548332, -0.012352843, 0.012883541, -0.01013972, 0.033896923, -0.029019019, 0.005281574, 0.019059962, 0.010941412, -0.0095525645, 0.05596041, -0.0060239867, 0.03597455, 0.0090331575, -0.0017106542, -0.034235667, 0.037329525, 0.0107833315, 0.023170048, 0.028454445, 0.030938564, -0.030080415, -0.033377517, 0.0034608284, -0.014498218, 0.013843314, 0.025609002, 0.020177815, -0.06517423, -0.007745933, -0.0016259684, 0.012172179, 0.027686628, 0.019150294, 0.005126317, 0.016993627, 0.027889874, -0.014374012, -0.015457991, 0.022492561, 0.00034580057, 0.016282266, 0.00068207394, -0.0016965399, 0.05230198, -0.012815792, -0.049817864, 0.008491168, 0.012002808, 0.029741671, -0.0068651997, -0.016395181, 0.027483381, -0.040762123, 0.00889766, 0.034371164, 0.011697939, -0.027980205, -0.025225092, -0.0019576547, 0.03229354, 0.024931515, -0.022379648, -0.0046436074, 0.012906124, -0.006995051, 0.01833731, 0.0034241313, -0.012386717, 0.022616768, -0.020493977, -0.0043782587, -0.005860261, 0.021115005, 0.0021016207, -0.007898367, -0.0030966792, 0.017343663, -0.018292144, -0.012138305, 0.0013726165, 0.044827044, 0.011991517, -0.0022681693, -0.01590965, -0.020798845, 0.022526437, -0.003082565, -0.01607902, 0.011743105, -0.011505985, 0.019793907, -0.01990682, 0.012206054, -0.007068446, -0.004087504, -0.013019038, 0.03832317, -0.0037431146, 0.01318841, 0.04353982, -0.027867291, -0.0051714825, 0.0048835506, -0.035003487, 0.032225788, 0.021137588, 0.015943523, -0.016417764, -0.0011757219, 0.01444176, -0.011116429, -0.0265349, -0.03489057, -0.00803951, -0.024005616, 0.0027706388, -0.009078323, 0.0070176343, -0.0019054316, -0.013617485, 0.04150736, 0.018280853, 0.007057154, -0.017704988, 0.01013972, 0.018845424, -0.0002951655, -0.032880694, 0.029448094, -0.007988699, -0.055373255, -0.02965134, -0.017354954, 0.009338027, 0.039361984, 0.013256159, 0.010681708, 0.022605477, -0.0047028875, 0.0141594745, 0.011765688, 0.029019019, -0.0056626606, 0.007864493, -0.021995738, 0.023824953, 0.011720522, -0.024728268, 0.048056398, 0.009338027, -0.028499613, -0.017445285, 0.023824953, -0.024615355, 0.00698376, 0.019218042, -0.019172877, 0.031864464, -0.025473503, 0.0126351295, -0.008474231, 0.028160868, -0.019522911, 0.00905574, -0.031796716, -0.004454476, 0.017275915, -0.010839789, 0.007949179, 0.014272389, -0.028996436, -0.000791107, 0.023215216, 0.015040208, -0.017919526, 0.018743802, -0.02051656, -0.00032798125, 0.008124196, 0.014893418, 0.06526456, -0.030599821, -0.0038757892, -0.026241323, 0.021284377, 0.0128948325, 0.0080112815, -0.01248834, 0.03310652, -0.0013500336, 0.00065949105, 0.027505964, 0.016090311, -0.038142506, -0.026173573, 0.015887065, -0.011844728, -0.011585024, -0.03215804, -0.00905574, -0.032316122, 0.005371906, 0.023373295, -0.015469282, -0.02044881, -0.0009943531, 0.03527448, 0.037690848, -0.029606173, -0.02723497, 0.032880694, -0.0027113587, 0.015006333, -0.014340137, -0.010568794, -0.0021538434, 0.02504443, 0.01817923, -0.026941393, 0.01607902, -0.013786857, 0.011415653, 0.039361984, -0.034845404, -0.0076047895, 0.025112178, -0.0039096633, 0.0078080357, 0.01803244, -0.011980225, 0.0016894827, 0.019455163, -0.02380237, -0.02840928, 0.030532073, -0.015491866, 0.009704999, 0.012556089, 0.0021270262, -0.027596297, -0.020810137, -0.0050585684, -0.00722088, 0.019534202, -0.0058884895, 0.065309726, -0.015446699, -0.00012561734, -0.019014796, 0.011449527, 0.007429772, -0.02513476, 0.0077854525, 0.005733232, 0.0026520786, 0.01025828, 0.027776958, 0.026083242, 0.0034325998, -0.01725333, 0.031006314, -0.01655326, -3.0544245e-05, -0.018461516, -0.018235687, -0.03066757, -0.019093838, 0.029470677, -0.034461495, 0.048011232, 0.00010426946, -0.0024982325, -0.0070966743, 0.016711341, 0.03407759, 0.024818601, 0.04401406, 0.021882825, 0.0095695015, -0.018156646, 0.027257552, 0.012285094, 0.024163697, 0.0095186895, 0.03681012, -0.018303435, -0.033738844, -0.012646421, -0.014554675, 0.03245162, 0.011212407, -0.010241343, 0.015514448, 0.009936473, -0.008457294, 0.022176402, -0.051985823, 0.03482282, -0.0030966792, -0.00013073378, -0.014554675, 0.007446709, -0.0231023, 0.024615355, 0.018856715, -0.02888352, -0.023237798, -0.006966823, 0.017366245, -0.017625948, 0.001572334, 0.005654192, 0.05907685, -0.028296366, 0.0175582, 0.011054327, -0.016293557, -0.00803951, -0.030622404, -0.018326018, 0.010156657, -0.011347904, -0.030464323, 0.040152386, -0.032248374, -0.014170766, 0.062057793, -0.0040338696, 0.071361944, -0.014769212, -0.003655606, 0.0057812207, -0.013278741, -0.00823711, -0.04688209, -0.017863069, 0.010698646, -0.017761447, 0.0020578662, 0.008299214, 0.033354934, 0.011088201, -0.05288914, -0.009377547, -0.016643593, 0.006695828, 0.0003179248, -0.0036894802, -0.010371194, 0.040152386, 0.001906843, 0.014690173, -0.0040705665, -0.020945635, 0.028748024, 0.022300608, 0.0016104426, 0.007994344, 0.0141594745, -0.034980904, -0.0057417005, 0.0050952653, 0.024050782, 0.01701621, 0.008756517, 0.02856736, 0.047107916, 0.032180622, 0.0057417005, -0.03489057, -0.017535618, -0.00526746, 0.023734622, 0.028838355, 0.02278614, -0.013075495, 0.04846289, -0.002961182, 0.016959753, -0.0025292842, 0.032564532, 0.007282983, 0.012680295, -0.008835557, 0.020471394, 0.0118221445, -0.0011072675, 0.003390257, -0.022119945, -0.049546868, -0.023305546, 0.040310465, -0.0003092798, 0.01522087, 0.012849666, 0.031277306, 0.012973872, 0.01590965, 0.030712735, -0.011618899, 0.009123489, -0.03238387, -0.0050613913, 0.024389526, 0.03294844, 0.017840486, 0.03285811, -0.023824953, -0.01506279, 0.027505964, -0.010320382, -0.0009237815, -0.0039350693, -0.02052785, 0.0025786841, 0.014012686, -0.034755073, -0.0035201085, -0.015299911, -0.008457294, -0.031164393, -0.003878612, -0.015887065, -0.046927255, -0.02341846, 0.008688768, -0.019658409, 0.007700767, 0.06743252, 0.030757902, -0.043404322, -0.030509489, 0.026489735, 0.006724057, 0.0034749429, 0.029380346, 0.0026069127, 0.0108341435, -0.017603366, -0.0009654187, 0.0064587076, 0.002961182, 0.02348621, -0.03254195, -0.034958318, -0.021894116, 0.012883541, 0.0074692923, 0.020098776, 0.009428358, 0.02965134, -0.012375426, -0.010958349, 0.017592074, 2.9551833e-05, 0.0149385845, -0.062238455, 0.0027960446, 0.032700032, 0.03613263, 0.03292586, -0.0030035248, -0.01103739, -0.007898367, -0.0136061935, -0.011585024, -0.01013972, 0.010924475, -0.001621734, 0.033196855, -0.00616513, -0.008095968, -0.024728268, 0.03963298, 0.0013662651, -0.0007402955, 0.025496088, -0.006436125, 0.017625948, 0.01708396, -0.0351164, 0.051443834, -0.003105148, -0.00061009097, -0.008344379, -0.0054989345, -0.026399402, -0.014035269, 0.025383173, 0.012951289, -0.019951986, -0.025879996, 0.00042342927, -0.014678881, 0.0021100892, 0.035161566, -0.015186996, -0.023000678, -0.002482707, 0.023847535, -0.020663347, 0.005004934, 0.021555372, -0.0154241165, -0.017140416, 0.012307677, -0.03209029, -0.039926555, 0.0071079656, -0.0033959027, -0.034619577, -0.018246979, 0.010410714, 0.0063401475, -0.00013558558, 0.001235002, 0.055915244, -0.0058150953, 0.02239094, -0.024321776, -0.007745933, 0.00013011628, 0.0026266729, 0.012386717, -0.006752285, 0.00616513, -0.01717429, 0.00033574412, 0.0028821419, 0.027167222, 0.007401543, -0.013301324, 0.011534213, -0.008632312, -0.018822841, 0.010444588, 0.023057135, -0.005038808, -0.0029555361, -0.013719108, 0.0054227174, 0.029561007, 0.018800259, 0.024141114, 0.01631614, -0.03369368, 0.002427661, 0.011867311, -0.005103734, 0.0080620935, 0.0018546202, -0.03489057, 0.025157344, 0.032677446, 0.017750155, -0.01881155, 0.023441045, -0.01919546, 0.00040508065, 0.012206054, -0.058896188, -0.0027932217, 0.0143853035, 0.029335178, 0.014193349, -0.021081131, 0.01444176, 0.014577258, 0.013402947, 0.0067071193, -0.013075495, 0.012815792, -0.0017586428]"
../../../gradio,../../../gradio/gradio/components,image_editor.pyi,"r""""""gr.ImageEditor() component.""""""

from __future__ import annotations

import dataclasses
import warnings
from pathlib import Path
from typing import Any, Iterable, List, Literal, Optional, TypedDict, Union, cast

import numpy as np
from gradio_client import utils as client_utils
from gradio_client.documentation import document, set_documentation_group
from PIL import Image as _Image  # using _ to minimize namespace pollution

import gradio.image_utils as image_utils
from gradio import utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events

set_documentation_group(""component"")
_Image.init()  # fixes https://github.com/gradio-app/gradio/issues/2843


class EditorValue(TypedDict):
    background: Optional[Union[np.ndarray, _Image.Image, str]]
    layers: list[Union[np.ndarray, _Image.Image, str]]
    composite: Optional[Union[np.ndarray, _Image.Image, str]]


class EditorData(GradioModel):
    background: Optional[FileData] = None
    layers: List[FileData] = []
    composite: Optional[FileData] = None


@dataclasses.dataclass
class Eraser:
    default_size: int | Literal[""auto""] = ""auto""


@dataclasses.dataclass
class Brush(Eraser):
    colors: Union[
        list[str],
        str,
        None,
    ] = None
    default_color: Union[str, Literal[""auto""]] = ""auto""
    color_mode: Literal[""fixed"", ""defaults""] = ""defaults""

    def __post_init__(self):
        if self.colors is None:
            self.colors = [
                ""rgb(204, 50, 50)"",
                ""rgb(173, 204, 50)"",
                ""rgb(50, 204, 112)"",
                ""rgb(50, 112, 204)"",
                ""rgb(173, 50, 204)"",
            ]
        if self.default_color is None:
            self.default_color = (
                self.colors[0] if isinstance(self.colors, list) else self.colors
            )

from gradio.events import Dependency

@document()
class ImageEditor(Component):
    """"""
    Creates an image component that, as an input, can be used to upload and edit images using simple editing tools such
    as brushes, strokes, cropping, and layers. Or, as an output, this component can be used to display images.

    Demos: image_editor
    """"""

    EVENTS = [
        Events.clear,
        Events.change,
        Events.select,
        Events.upload,
    ]
    data_model = EditorData

    def __init__(
        self,
        value: EditorValue | ImageType | None = None,
        *,
        height: int | str | None = None,
        width: int | str | None = None,
        image_mode: Literal[
            ""1"", ""L"", ""P"", ""RGB"", ""RGBA"", ""CMYK"", ""YCbCr"", ""LAB"", ""HSV"", ""I"", ""F""
        ] = ""RGBA"",
        sources: Iterable[Literal[""upload"", ""webcam"", ""clipboard""]] = (
            ""upload"",
            ""webcam"",
            ""clipboard"",
        ),
        type: Literal[""numpy"", ""pil"", ""filepath""] = ""numpy"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        show_download_button: bool = True,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        mirror_webcam: bool = True,
        show_share_button: bool | None = None,
        _selectable: bool = False,
        crop_size: tuple[int | float, int | float] | str | None = None,
        transforms: Iterable[Literal[""crop""]] = (""crop"",),
        eraser: Eraser | None | Literal[False] = None,
        brush: Brush | None | Literal[False] = None,
    ):
        """"""
        Parameters:
            value: Optional initial image(s) to populate the image editor. Should be a dictionary with keys: `background`, `layers`, and `composite`. The values corresponding to `background` and `composite` should be images or None, while `layers` should be a list of images. Images can be of type PIL.Image, np.array, or str filepath/URL. Or, the value can be a callable, in which case the function will be called whenever the app loads to set the initial value of the component.
            height: The height of the displayed images, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the displayed images, specified in pixels if a number is passed, or in CSS units if a string is passed.
            image_mode: ""RGB"" if color, or ""L"" if black and white. See https://pillow.readthedocs.io/en/stable/handbook/concepts.html for other supported image modes and their meaning.
            sources: List of sources that can be used to set the background image. ""upload"" creates a box where user can drop an image file, ""webcam"" allows user to take snapshot from their webcam, ""clipboard"" allows users to paste an image from the clipboard.
            type: The format the images are converted to before being passed into the prediction function. ""numpy"" converts the images to numpy arrays with shape (height, width, 3) and values from 0 to 255, ""pil"" converts the images to PIL image objects, ""filepath"" passes images as str filepaths to temporary copies of the images.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            show_download_button: If True, will display button to download image.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to upload and edit an image; if False, can only be used to display images. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            mirror_webcam: If True webcam will be mirrored. Default is True.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            crop_size: The size of the crop box in pixels. If a tuple, the first value is the width and the second value is the height. If a string, the value must be a ratio in the form `width:height` (e.g. ""16:9"").
            transforms: The transforms tools to make available to users. ""crop"" allows the user to crop the image.
            eraser: The options for the eraser tool in the image editor. Should be an instance of the `gr.Eraser` class, or None to use the default settings. Can also be False to hide the eraser tool.
            brush: The options for the brush tool in the image editor. Should be an instance of the `gr.Brush` class, or None to use the default settings. Can also be False to hide the brush tool, which will also hide the eraser tool.
        """"""
        self._selectable = _selectable
        self.mirror_webcam = mirror_webcam
        valid_types = [""numpy"", ""pil"", ""filepath""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.height = height
        self.width = width
        self.image_mode = image_mode
        valid_sources = [""upload"", ""webcam"", ""clipboard""]
        if isinstance(sources, str):
            sources = [sources]  # type: ignore
        for source in sources:
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must be a list consisting of elements in {valid_sources}""
                )
        self.sources = sources

        self.show_download_button = show_download_button

        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )

        self.crop_size = crop_size
        self.transforms = transforms
        self.eraser = Eraser() if eraser is None else eraser
        self.brush = Brush() if brush is None else brush

        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def convert_and_format_image(
        self,
        file: FileData | None,
    ) -> np.ndarray | PIL.Image.Image | str | None:
        if file is None:
            return None
        im = PIL.Image.open(file.path)
        if file.orig_name:
            p = Path(file.orig_name)
            name = p.stem
            suffix = p.suffix.replace(""."", """")
            if suffix in [""jpg"", ""jpeg""]:
                suffix = ""jpeg""
        else:
            name = ""image""
            suffix = ""png""
        with warnings.catch_warnings():
            warnings.simplefilter(""ignore"")
            im = im.convert(self.image_mode)
        if self.crop_size and not isinstance(self.crop_size, str):
            im = image_utils.crop_scale(
                im, int(self.crop_size[0]), int(self.crop_size[1])
            )
        return image_utils.format_image(
            im,
            cast(Literal[""numpy"", ""pil"", ""filepath""], self.type),
            self.GRADIO_CACHE,
            format=suffix,
            name=name,
        )

    def preprocess(self, payload: EditorData | None) -> EditorValue | None:
        """"""
        Parameters:
            payload: An instance of `EditorData` consisting of the background image, layers, and composite image.
        Returns:
            Passes the uploaded images as an instance of EditorValue, which is just a `dict` with keys: 'background', 'layers', and 'composite'. The values corresponding to 'background' and 'composite' are images, while 'layers' is a `list` of images. The images are of type `PIL.Image`, `np.array`, or `str` filepath, depending on the `type` parameter.
        """"""
        if payload is None:
            return payload

        bg = self.convert_and_format_image(payload.background)
        layers = (
            [self.convert_and_format_image(layer) for layer in payload.layers]
            if payload.layers
            else None
        )
        composite = self.convert_and_format_image(payload.composite)
        return {
            ""background"": bg,
            ""layers"": [x for x in layers if x is not None] if layers else [],
            ""composite"": composite,
        }

    def postprocess(self, value: EditorValue | ImageType | None) -> EditorData | None:
        """"""
        Parameters:
            value: Expects a EditorValue, which is just a dictionary with keys: 'background', 'layers', and 'composite'. The values corresponding to 'background' and 'composite' should be images or None, while `layers` should be a list of images. Images can be of type `PIL.Image`, `np.array`, or `str` filepath/URL. Or, the value can be simply a single image (`ImageType`), in which case it will be used as the background.
        Returns:
            An instance of `EditorData` consisting of the background image, layers, and composite image.
        """"""
        if value is None:
            return None
        elif isinstance(value, dict):
            pass
        elif isinstance(value, (np.ndarray, PIL.Image.Image, str)):
            value = {""background"": value, ""layers"": [], ""composite"": value}
        else:
            raise ValueError(
                ""The value to `gr.ImageEditor` must be a dictionary of images or a single image.""
            )

        layers = (
            [
                FileData(
                    path=image_utils.save_image(
                        cast(Union[np.ndarray, PIL.Image.Image, str], layer),
                        self.GRADIO_CACHE,
                        format=""png"",
                    )
                )
                for layer in value[""layers""]
            ]
            if value[""layers""]
            else []
        )

        return EditorData(
            background=FileData(
                path=image_utils.save_image(value[""background""], self.GRADIO_CACHE)
            )
            if value[""background""] is not None
            else None,
            layers=layers,
            composite=FileData(
                path=image_utils.save_image(
                    cast(Union[np.ndarray, PIL.Image.Image, str], value[""composite""]),
                    self.GRADIO_CACHE,
                )
            )
            if value[""composite""] is not None
            else None,
        )

    def example_payload(self) -> Any:
        return {
            ""background"": file(
                ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
            ),
            ""layers"": [],
            ""composite"": None,
        }

    def example_value(self) -> Any:
        return {
            ""background"": ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png"",
            ""layers"": [],
            ""composite"": None,
        }

    
    def clear(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `ImageEditor` component that allows users to upload and edit images using simple editing tools such as brushes, strokes, cropping, and layers. It can also be used to display images. The component provides methods for preprocessing and postprocessing image data, as well as defining events like `clear`, `change`, `select`, and `upload` with various parameters for event handling. The component also includes methods for generating example payloads and values.","[-0.0313062, 0.05008071, -0.02639949, 0.0032423458, -0.01772636, -0.047362436, 0.018037347, 0.06159881, -0.05657692, 0.031651743, 0.022667624, -0.02536286, -0.013614397, -0.015088714, 0.0074234167, -0.0042616976, 0.018774506, 0.04151124, -0.010982511, 0.033701967, 0.014236374, -0.025040355, 0.030476898, 0.06463959, 0.022909505, -0.036189876, -0.03446216, 0.021043573, -0.016943129, -0.010752148, -0.030684223, -0.022771288, 0.033241242, -0.009548507, 0.0016888417, 0.01238196, 0.012658394, 0.049113188, -0.029140798, -0.027896844, -0.029394196, 0.004235782, -0.038032774, -0.0031358034, -0.04280127, 0.011535379, -0.02221842, 0.021976538, -0.024164978, 0.028795255, -0.019718992, -0.01663214, 0.036028624, -0.04418344, -0.0011870844, 0.01516934, -0.02881829, 0.033241242, -0.035222355, -0.011886681, 0.06620605, -0.018716916, -0.022610035, 0.02202261, -0.038654752, -0.008874698, -0.014224856, 0.004273216, -0.0074061397, -0.004327927, 0.033172134, -0.036742747, -0.030384753, -0.024717847, 0.017392334, -0.035821296, -0.029094726, -0.01704679, 0.0042876136, -0.04095837, -0.011247426, 0.04100444, -0.029417234, -0.03545272, -0.043607533, 0.02384247, -0.046556167, 0.001681643, -0.004696506, -0.04058979, -0.10909946, 0.031813, 0.0068359934, 0.059249118, 0.0005305526, 0.035613973, -0.059387334, -0.034323946, 0.008592504, 0.05321363, 0.022264492, 0.0012094007, -0.038677786, -0.038493495, 0.06477781, -0.046141516, 0.02718272, 0.02372729, -0.021354562, -0.005122676, -0.035245392, -0.032872662, -0.031421382, 0.061184157, 0.01644785, -0.077033065, 0.040036924, 0.040313356, -0.02270218, -0.0223336, -0.03312606, -0.004653313, -0.0032193095, -0.026053946, 0.034991995, -0.052061822, -0.032987844, -0.011909718, -0.01784154, -0.0071527413, 0.010049544, 0.01486987, 0.038378317, -0.056346554, -0.00661715, 0.045980264, 0.020364005, 0.016344186, -0.070629, -0.015330594, 0.06772644, -0.0030926105, -0.00019940714, 0.013441625, -0.049850345, -0.0510943, -0.06491602, 0.036558457, -0.017991275, -0.0065998724, 0.019338893, -0.024556594, 0.01795672, -0.04593419, -0.034185726, -0.005770569, 0.014651026, -0.011610247, -0.034623414, -0.009110819, -0.024257123, -0.016770357, 0.022748252, 0.031882107, -0.024141941, -0.01583739, -0.009231759, -0.004327927, -0.01863629, -0.019431038, -0.00089553243, -0.013614397, -0.014915942, 0.006905102, 0.010055303, -0.025455005, 0.028472748, -0.006075799, -0.027044503, 0.00813178, 0.008506118, 0.0053991103, -0.038677786, 0.046164554, -0.0065941135, -0.007671056, 0.0063061607, -0.010711835, -0.043238956, -0.041050516, -0.01723108, 0.018544145, -0.032020323, -0.019880245, 0.029693667, -0.01941952, 0.004558289, 0.027205758, 0.0019364809, -0.024786955, 0.035959516, 0.025109462, 0.050403215, 0.01887817, 0.014317001, 0.00224603, -0.030269573, 0.038217064, 0.011921235, 0.0047166627, 0.013660469, -0.025777513, 0.039000295, -0.045957226, -0.046556167, -0.014950496, 0.0022258733, 0.045496505, -0.04745458, -0.011005547, -0.049297478, 0.006087317, 0.035821296, -0.027988987, -0.02203413, -0.007596188, 0.0019883125, -0.02881829, -0.013867795, -0.05054143, 0.016217487, 0.033978403, -0.042686086, -0.046464022, 0.04425255, -0.022656107, -0.012554731, -0.041488204, 0.017795468, 0.016528476, -0.015445774, -0.0053559174, -0.0055171708, 0.0014455218, -0.034439124, 0.054964382, 0.013545288, -0.012174634, 0.013026973, 0.027459156, 0.03720347, -0.0031185262, 0.025823586, -0.001171247, 0.028933473, 0.006530764, 0.022540925, 0.028449712, -0.0045410115, -0.008580986, 0.042732157, -0.01723108, -0.017530551, -0.018394409, 0.017311707, 0.04588812, 0.02402676, 0.055286888, -0.022229938, -0.00333737, -0.0066517037, 0.053259704, 0.035107177, 0.002695236, 0.0012295574, 0.023658182, 0.021596441, 0.0404055, -0.0046101203, 0.029025618, -0.030131355, -0.043699678, -0.042271435, 0.054227225, -0.026745033, -0.0021020537, -0.015226931, -0.031697817, 0.011719669, -0.012612321, 0.07035257, -0.037848484, 0.0146855805, 0.023450855, 0.012358923, 0.03390929, -0.011932754, -0.007083633, 0.03010832, 0.0069396566, -0.0014872749, -0.021469742, -0.011639042, -0.032319795, -0.0034381535, 0.008367901, 0.012715985, -0.01262384, -0.008650094, -0.03635113, 0.032020323, 0.020490704, -0.028150242, -0.029371161, -0.029900992, 0.052246112, 0.02166555, 0.06791073, -0.0068359934, 0.030615116, 0.016551513, 0.020467667, 0.00892077, -0.055517253, -0.0510943, -0.051508952, -0.045058817, -0.014835316, 0.003435274, -0.023589073, 0.018797543, 0.02573144, -0.023635145, -0.0011575692, 0.029325088, -0.0081087435, -0.033379458, 0.029209906, -0.038608678, 0.012969383, -0.0078899, -0.02118179, 0.011990344, 0.02900258, 0.028380603, 0.014731652, -0.02075562, 0.030960659, 0.006922379, -0.011840609, -0.007918695, 0.0036310817, 0.01044116, -0.005790726, 0.027136648, -0.00013398792, -0.045772936, -0.031536564, -0.048836753, -0.02457963, -0.004379758, 0.02257548, -0.0035475753, 0.011748464, -0.057682656, -0.031605672, -0.044390764, -0.037595086, -0.012715985, -0.028012024, 0.010182003, 0.07569697, 0.020375522, 0.0117427055, -0.008857421, 0.0033287315, 0.0040630107, 0.00051363534, -0.048698537, 0.0029471943, 0.038885113, 0.017588142, 0.019799618, -0.0035187802, 0.0007130425, -0.023934616, 0.014293965, -0.011541138, 0.017530551, 0.015607028, 0.004696506, -0.0042616976, -0.05685335, -0.017300189, 0.023819435, 0.03363286, 0.0024173616, 0.021377597, 0.028933473, 0.025040355, -0.011886681, -0.0025642174, -0.014789243, 0.019880245, -0.00904171, -0.048514247, 0.048744608, -0.014547363, 0.01693161, 0.0030609355, 0.02244878, -0.008782553, 0.0012641117, 0.0011381324, -0.022045648, -0.006519246, 0.023819435, -0.061644882, -0.022713697, 0.078138806, -0.024694812, -0.0018472156, -0.015146304, -0.020962946, 0.030085282, 0.0034035991, 0.024349269, -0.030292608, -0.025040355, -0.054457586, -0.01633267, 0.015180859, 0.016597586, 0.015526402, 0.058558032, -0.049389623, 0.031421382, -0.005263773, 0.020536777, 0.08090315, -0.051002156, 0.028058097, 0.040912297, -0.0011662078, -0.0129233105, -0.018371373, -0.031605672, -0.00039125554, -0.015342112, -0.010095617, -0.010544823, 0.010458437, 0.007348549, 0.023013167, -0.005019013, -0.025201607, 0.014409145, -0.0053530377, 0.023980688, -0.021884395, -0.04459809, 0.0020603004, 0.019799618, 0.041856784, 0.023370229, 0.024395341, -0.022828879, 0.03593648, -0.035475753, -0.016240524, 0.021343043, 0.04284734, 0.034692522, 0.039414946, -0.018094938, -0.020421594, -0.02639949, -0.02870311, -0.024717847, 0.018221637, -0.004503578, -0.032365866, 0.008189371, -0.034370016, 0.0040399744, 0.08896582, -0.04284734, -0.048836753, 0.034692522, -0.04782316, -0.05473402, 0.015238449, -0.019327376, -0.008805589, 0.02573144, -0.012117043, -0.025639296, -0.0068590296, 0.011598729, -0.023139868, 0.015710691, -0.0035850094, -0.024257123, 0.046348844, 0.018371373, -0.004805928, 0.01868236, -0.0111610405, 0.007365826, -0.038332243, -0.011189836, 0.008661613, 0.05703764, -0.004598602, 0.026745033, -0.008701926, -0.007682574, 0.017507516, -0.020732583, -0.0023252168, -0.017000718, 0.025869656, 0.028772218, -0.02566233, -0.006668981, -0.00600669, -0.045358285, -0.04144213, 0.011328054, -0.0037549012, -0.040566754, -0.020974465, 0.03162871, 0.016298115, -0.071596526, -0.017576624, 0.008961083, 0.0040860465, 0.0063579925, -0.045243103, 0.010003472, -0.0007141223, 0.00977311, -0.001893288, -0.025501078, 0.057866946, -0.032388903, -0.053121485, 0.016367223, 0.03623595, 0.013844758, -0.019154605, 0.04648706, -0.0027211516, 0.006519246, 0.02384247, -0.012278297, 0.0039535887, -0.006726572, -0.012047934, 0.02172314, -0.00076307426, 0.01395994, 0.022621552, -0.016839465, 0.02263307, 0.0024504762, -0.04750065, -0.0012799491, 0.00916265, -0.03701918, 0.031098876, 0.008586745, 0.01414423, 0.018221637, 0.040336393, 0.023888543, -0.009865254, -0.032020323, -0.0066804993, -0.03446216, -0.03367893, -0.031167984, -0.012566249, -0.020870801, 0.009801905, 9.3854534e-05, -0.008333347, 0.009116578, 0.04151124, -0.0021452466, 0.015226931, 0.025040355, 0.018670844, 0.015514883, 0.006634427, 0.031836033, 0.016793393, -0.01815253, -0.0064558964, -0.003890239, 0.015676137, -0.011523861, 0.02524768, 0.036880963, 0.0058915094, 0.006668981, -0.04181071, -0.046533134, -0.040082995, -0.020617403, 0.018774506, -0.0053012064, 0.011500825, 0.004417192, -0.012047934, -0.013487698, 0.053075414, 0.028610965, -0.0047368193, -0.011022824, -0.0046043615, -0.016033199, -0.010245352, 0.01401753, 0.040635865, 0.021757694, -0.023266567, 0.02142367, 0.021262417, 0.014270929, 0.02985492, 0.004071649, 0.008580986, -0.01165632, -0.014006012, 0.026146092, -0.0010359093, -0.035637006, -0.019212194, -0.014247892, 0.041073553, 0.02075562, 0.011863645, 0.0023828074, 0.02840364, -0.01535363, 0.010729112, 0.0044949395, -0.01165632, -0.03501503, -0.02294406, 0.020594366, -0.015929535, 0.005151471, -0.009606097, 0.0020171076, 0.050264996, -0.04644099, -0.0028752063, -0.023416301, -0.019431038, -0.027044503, -0.0039996607, 0.006548041, 0.00097543927, -0.026238237, -0.0313062, -0.03307999, 0.052476473, -0.012669913, 0.017035274, 0.0038700823, 0.015273003, 0.016966164, -0.02828846, 0.020110605, -0.04321592, 0.008235443, 0.028265422, 0.03676578, 0.012854202, -0.03980656, 0.0058713527, -0.007267922, -0.030453863, -0.02985492, 0.0027729832, 0.010222316, -0.035613973, -0.011460512, 0.0084542865, -0.0061564255, -0.03229676, -0.021573406, 0.0657914, -0.015572474, -0.011017065, 0.010274147, -0.020686511, -0.0027585854, 0.009732796, -0.024994282, 0.0025037474, -0.006507728, -0.0132343, -0.022540925, 0.008794071, 0.054457586, -0.0139944935, 0.005589159, 0.012934828, -0.03545272, -0.014374591, 0.0059260633, -0.033172134, 0.020951428, 0.018348336, -0.009416048, -0.0028147362, -0.029255979, -0.0127044665, -0.07007613, -0.023208976, 0.006974211, -0.02810417, 0.012508659, 0.0077056102, -0.008465805, -0.0030321404, -0.032365866, -0.025570186, 0.0103259785, -0.009047469, 0.0021438068, 0.033701967, -0.0015722209, 0.008880457, 0.010349015, -0.0036569973, 0.005128435, 0.020686511, 0.008494601, 0.0005237137, -0.006116112, -0.015365148, 0.010320219, -0.00861554, -0.0073543084, 0.010631208, 0.021918949, 0.0061621848, -0.0692929, 0.0111610405, -0.030269573, -0.0011928434, -0.013464661, -0.0034871055, -0.034185726, -0.017922167, 0.021642514, 0.055563323, -0.028449712, -0.023232011, -0.025201607, -0.04222536, 0.029693667, -0.0074234167, 0.03015439, 0.017334744, -0.015883463, 0.024925172, 0.00091280957, 0.0050391695, 0.010844293, 0.0024893498, 0.019615328, -0.05431937, -0.012151598, -0.0028780857, -0.02179225, 0.003936311, -0.013487698, -0.0379867, 0.016424814, 0.014282446, -0.017311707, -0.008367901, 0.0032279482, -0.029025618, 0.00068928645, -0.024141941, 0.009410289, -0.01917764, -0.021147236, -0.00026383653, 0.00088761374, -0.028772218, 0.0108154975, 0.023658182, -0.020191234, -0.005649629, -0.047316365, 0.0060527627, 0.016298115, 0.045772936, -0.01856718, -0.034070548, -0.02179225, -0.0030350199, -0.013510734, 0.015964089, -0.00016926212, 0.024326231, 0.0009279271, -0.04058979, 0.015941054, 0.004143637, -8.362997e-06, -0.028196314, -0.009686724, 0.0063349563, 0.0063867876, 0.0015592631, -0.001906246, 0.031882107, 0.016839465, -0.012877238, 0.018371373, -0.022252973, 0.029601522, 0.03126013, 0.020156678, 0.015123268, -0.007003006, 0.0058224006, -0.018371373, -0.00970976, 0.013337962, -0.016977683, -0.022782806, -0.02361211, -0.027827734, -0.008943806, 0.057498366, -0.00040637303, 0.009957399, 0.038562607, -0.030822441, 0.024418376, -0.01626356, -0.03494592, -0.007348549, -0.040497646, 0.018820578, -0.017565105, 0.0302235, -0.03605166, -0.010947956, 0.014086639, 0.016217487, 0.0121976705, -0.00892077, 0.04722422, 0.04017514, -0.016252043, -0.0080914665, -0.0054595806, 0.024533557, -0.00022316322, -0.002045903, 0.013890831, 0.00063997455, 0.015941054, 0.018521108, 0.0043855174, 0.0024000844, -0.039530125, -0.039437983, 0.010469954, 0.033379458, 0.0021279694, 0.021918949, -0.028933473, -0.016229006, -0.011719669, 0.0080914665, 0.0037549012, 0.040866226, 0.03653542, -0.031421382, 0.013453144, -0.012094007, 0.010164725, 0.013245817, 0.012900274, -0.008033876, 0.0034237558, -0.035153247, 0.01997239, -0.021343043, -0.03635113, -0.036973108, 0.00017313147, -0.013268854, 0.00163845, -0.0021625236, 0.0012626719, 0.004212746, -0.05316756, 0.004471903, -0.015768282, -0.0131767085, 0.018843615, -0.014420664, 0.043676645, 0.02955545, 0.03453127, 0.010677281, -0.050264996, -0.010354774, -0.0012209188, 0.0010143128, 0.01704679, -0.013741096, -0.010988269, 0.02281736, 0.021009019, -0.02791988, 0.006766885, 0.018970314, -0.015319075, 0.01025111, 0.00431065, 0.046694387, -0.038493495, -0.021515815, -0.009519711, -0.019027904, 0.021838322, -0.01681643, -0.03409358, 0.021769213, -0.051877532, 0.021227863, -0.020099089, -0.021561887, -0.013384035, -0.019108532, 0.017737877, 0.0034583102, 0.0021682826, 0.033840183, -0.021101164, -0.01128774, -0.028541857, 0.016309632, 0.012082489, 0.00023252169, -0.010049544, 0.0068475115, -0.034784667, -0.030891549, 0.038032774, -0.0025800548, -0.023013167, 0.017680287, 0.013441625, -0.02038704, -0.007014524, 0.0042588185, 0.013314926, 0.031191021, 0.020479186, -0.03052297, 0.003731865, -0.006231293, -0.015261485, 0.046464022, -0.023773363, 0.04462113, 0.026952358, -0.005263773, 0.0038384076, -0.031467456, 0.0016053355, 0.0034179967, -0.009663688, 0.0012252381, 0.017208045, -0.025915729, -0.0064846915, 0.029970102, -0.032388903, 0.0070375605, -0.0041292394, 0.009519711, 0.0016168535, 0.0046907472, 0.024188014, -0.024625702, 0.031974252, 0.038470462, -0.024625702, 0.0155379195, -0.016125344, 0.054042935, 0.005897268, 0.002767224, -0.011685114, 0.0080914665, 0.017334744, 0.046095446, -0.0071700187, -0.008396696, -0.061967388, -0.023289602, 0.026491635, -0.032964807, -0.021826804, 0.0022791445, -0.041718565, 0.012001863, -0.0076998514, 0.0069338973, 0.016252043, 0.03015439, 0.0024188014, 0.020490704, 0.011777259, -0.008897734, 0.022011094, -0.010769425, -0.006427101, -0.009277831, 0.03489985, 0.0023396146, 0.030361718, 0.04054372, -0.039069403, -0.012220706, -0.0018515349, 0.013372516, 0.0063349563, 0.014478254, -0.0344852, -0.029808847, -0.019626847, 0.01152962, 0.039852634, -0.032365866, 0.016033199, -0.029647594, 0.010504509, -0.014662544, -0.0069338973, -0.001608215, 0.010585136, -0.010648485, 0.027205758, -0.00063565525, 0.006023967, 0.020594366, -0.016678212, -0.0038816005, -0.004278975, 0.033379458, 0.008707685, 0.018924242, -0.007820792, -0.039299764, -0.0007119627, 0.027597373, -0.012854202, -0.015630065, 0.006173703, -0.023566037, -0.03630506, -0.018970314, -0.029371161, 0.0044143125, -0.0039535887, 0.011788777, 0.044459876, 0.015883463, 0.0054279054, 0.04660224, -0.026261272, 0.04144213, -0.0011863646, -0.009237518, 0.059156973, 0.012762057, -0.059940204, -0.014996569, -0.015261485, 0.007624984, 0.021734659, 0.012393477, -0.003288418, 0.025155535, -0.007072115, -0.031144949, -0.0038096122, 0.02244878, 0.010314461, -0.009035951, -0.016678212, 0.0075098025, 0.005879991, 0.02275977, 0.009456362, 0.059064828, -0.013130636, -0.027505228, 0.03284963, 0.006755367, -0.0010222315, -0.011201355, 0.048376027, 0.04236358, 0.0029399956, -0.045772936, 0.0039996607, 0.023485411, -0.021273935, 0.043953076, 0.02275977, -0.030315645, -0.013326444, -0.023024686, 0.0144437, 0.02900258, 0.019004868, -0.036074694, 0.00077459234, 0.022621552, -0.00953123, -0.0033776835, -0.033794113, 0.024280159, -0.020076051, 0.00163845, 0.0057936055, -0.0087998295, -0.010331738, -0.0063925465, 0.017553588, -0.0044431076, 0.030776368, -0.023577554, 0.06818716, 0.010567859, 0.010412364, 0.016770357, 0.032987844, -0.038470462, -0.01505416, -0.016701248, 0.024441412, -0.0058915094, 0.00040277364, -0.031121911, -0.027090576, -0.008287274, 0.015814355, 0.0075385976, -0.01104586, -0.0017406732, -0.017161973, -0.02311683, -0.021193307, -0.014950496, 0.011886681, -0.016954646, 0.02130849, -0.040797118, 0.010550582, 0.008396696, 0.049251404, 0.021861358, -8.1346596e-05, 0.00010582256, -0.011829091, -0.019811135, 0.004722422, -0.012773575, 0.000382257, 0.015008087, 0.028933473, -0.0054221465, 0.016539995, -0.004448867, -0.018970314, -0.016459368, -0.0038038532, -0.015664618, -0.007429176, 0.036443274, 0.018048866, 0.02027186, 0.009450602, 0.009669446, 0.008154816, 0.042732157, -0.0084370095, -0.034185726, 0.016724285, 0.057129785, -0.012070971, 0.023324156, 0.015273003, 0.041995, -0.035291463, -0.01450129, 0.06473173, 0.046993855, 0.03612077, 0.0012252381, 0.03404751, -0.047316365, 0.018958796, 0.0071527413, 0.01486987, 0.03586737, 0.024118906, 0.001960957, -0.03630506, -0.021780731, 0.015307558, 0.022160828, -0.0061391485, 0.0023079398, 0.012059453, -0.002464874, -0.012209188, 0.028933473, -0.0035965273, 0.0144437, 0.0027297903, 0.021089645, 0.01572221, 0.0049556633, -0.03549879, -0.022183865, -0.009485157, -0.00086745707, 0.009393012, -0.015123268, 0.005954859, -0.012001863, -0.009536988, 0.010061062, 0.0025051872, 0.027827734, 0.0016010161, 0.0101992795, -0.02257548, 0.006974211, -0.009139614, -0.02342782, -0.043492354, 0.0054912553, -0.014293965, -0.024049796, -0.030937621, -0.05146288, 0.017254116, 0.020352487, 0.005122676, 0.008730722, 0.006784162, 0.03572915, 0.010049544, -0.04404522, -0.0019566375, -0.007020283, -0.016252043, 0.034254834, -0.011235909, -0.0075155618, -0.026791105, -0.018855132, 0.017795468, -0.041488204, 0.016390258, 0.006766885, -0.029509377, -0.010527546, 0.03616684, 0.005070844, 0.0328957, 0.019949352, -0.009813423, -0.0031185262, -0.0041839504, 0.02688325, -0.02457963, -0.018117975, -0.018106457, -0.03185907, 0.003204912, -0.009001397, -0.015998643, 0.014224856, 6.7713845e-05, 0.00321643, 0.010349015, -0.024280159, -0.024533557, -0.005972136, 0.013798687, 0.010176243, 0.004800169, 0.0076998514, -0.015733728, -0.009819182, -0.057913017, 0.005085242, 0.014029048, 0.012957864, 0.023036204, -0.0065998724, 0.01334948, 0.0026246875, -0.036074694, -0.030914586, -0.020836247, -0.033056952, 0.012209188, -0.007365826, 0.031075839, -0.040635865, 0.0037549012, -0.008719203, -0.036696672, -0.013026973, 0.013199745, -0.011339571, -0.010775184, 0.017876094, 0.005606436, 0.034991995, 0.029900992, -0.027090576, 0.040267285, -0.001657167, 0.00746373, 0.005232098, 0.019707473, -0.01808342, 0.0139944935, 0.0057792077, 0.0067496076, 0.0038931186, -0.020444632, 0.026192164, 0.018809061, -0.020893836, -0.014789243, -0.0028478508, -0.0074118986, 0.018071903, 0.0326423, -0.016724285, 0.024809992, -0.00082138466, -0.0051197964, -0.026814142, 0.011195595, -0.048882823, 0.023220494, 0.020467667, 0.008005081, -0.026837178, 0.007786237, -0.030684223, -0.013038492, -0.0010841413, -0.018774506, 0.0025858139, 0.016033199, 0.021746177, -0.0036771542, -0.031006731, -0.012255261, -0.025385898, -0.028196314, -0.011662078, -0.020306414, -0.0016067752, 0.015641583, 0.038631715, 0.01868236, 0.02870311, -0.006991488, -0.040751044, 0.016275078, 0.04667135, -0.00473394, -0.0036138045, 0.035245392, 0.00527817, 0.024141941, 0.02494821, 0.005263773, -0.025017317, -0.019811135, 0.017680287, 0.0119788265, -0.03185907, 0.012692949, 0.004777133, 0.054457586, 0.011293499, 0.0077056102, 0.04102748, -0.027827734, 0.029071689, -0.076940924, 0.013061528, -0.0063349563, 0.028910436, 0.0034986234, 0.01802583, 0.012646876, -0.031098876, -0.016701248, -0.017806986, -0.0015434257, 0.018624771, 0.024648739, 0.061184157, -0.027090576, -0.00934694, -0.022690661, -0.007561634, 0.024971245, -0.008085707, -0.0152845215, -0.0053559174, 0.018555662, -0.030569043, -0.023450855, -0.012520177, -0.05031107, 0.009502434, 0.023105312, 0.0037836966, -0.021561887, -0.0019105652, 0.024280159, 0.007216091, -0.010884606, -0.057129785, 0.013211263, -0.01110921, 0.002821935, -0.013718059, 0.011627524, -0.0072448864, -0.020709548, -0.033241242, -0.01795672, 0.004558289, 0.02130849, -0.010020749, -0.01165056, 0.021273935, 0.0098537365, 0.013199745, 0.029232943, -0.044022188, -0.014651026, -0.069016464, 0.038493495, 0.020767137, 0.013372516, 0.025892694, 0.010464196, -0.014432182, 0.03591344, -0.01650544, -0.034439124, 0.04084319, -0.0020559812, -0.0045006983, -0.029670632, -0.016252043, -0.0027744228, -0.008448528, 0.008667372, 0.013360999, -0.029232943, -0.0042098663, -0.0154112205, -0.031651743, -0.0028550494, -0.00071592204, 0.038516533, 0.0027816216, 0.049205333, -0.0007810713, 0.019131567, 0.009807664, 0.02628431, 0.007901418, 0.008362142, 0.0007688333, -0.00958882, 0.015549438, 0.003046538, 0.007227609, -0.027873807, 0.0053012064, 0.04298556, 0.008650094, -0.017818503, 0.016482404, 0.037111323, 0.005304086, -0.027712554, -0.01359136, -0.059064828, -0.0031242853, -0.025524113, -0.0029572728, 0.021389116, -0.018958796, -0.03222765, -0.007861105, 0.00062017783, 0.031605672, -0.0045842044, -0.029970102, 0.0026074103]"
../../../gradio,../../../gradio/gradio/components,fallback.pyi,"from gradio.components.base import Component

from gradio.events import Dependency

class Fallback(Component):
    def preprocess(self, payload):
        """"""
        This docstring is used to generate the docs for this custom component.
        Parameters:
            payload: the data to be preprocessed, sent from the frontend
        Returns:
            the data after preprocessing, sent to the user's function in the backend
        """"""
        return payload

    def postprocess(self, value):
        """"""
        This docstring is used to generate the docs for this custom component.
        Parameters:
            payload: the data to be postprocessed, sent from the user's function in the backend
        Returns:
            the data after postprocessing, sent to the frontend
        """"""
        return value

    def example_payload(self):
        return {""foo"": ""bar""}

    def example_value(self):
        return {""foo"": ""bar""}

    def api_info(self):
        return {""type"": {}, ""description"": ""any valid json""}","This code defines a custom component named `Fallback` that inherits from the `Component` class in the Gradio library. The component has methods for preprocessing, postprocessing, providing example payload and value, and API information. The `preprocess` method takes the input data and returns it as is. The `postprocess` method takes the processed data and returns it as is. The `example_payload` and `example_value` methods provide sample input and output data respectively. The `api_info` method returns a dictionary with information about the API, specifying the type as an empty dictionary and the description as ""any valid json"".","[-0.04182472, 0.0017939835, 0.037611794, -0.008121305, 0.021293046, -0.027434783, -0.045124, 0.011636307, 0.027028717, -0.029769657, 0.012010649, -0.04484483, -0.065985605, -0.014783313, -0.011185829, 0.0017083292, 0.01978299, -0.013235189, 0.0033183144, 0.011782236, 0.006049738, -0.054260466, 0.0006622353, 0.04344898, 0.011604583, -0.04456566, -0.044540282, 0.09009573, -0.021826006, -0.017790733, 0.018184109, -0.04517476, 0.0039654807, 0.0025030116, 0.024338536, -0.00522809, 0.012530919, 0.02946511, -0.021166151, -0.014707175, -0.023907091, -0.027104855, -0.009701152, 0.038297027, -0.022714274, 0.040809557, -0.0128037445, 0.05695065, -0.018222177, 0.041367896, -0.03880461, -0.02860222, -0.041190244, 0.0314193, -0.055783212, 0.0104688695, -0.057052165, -0.010024736, -0.031140128, -0.001146024, -0.018019145, -0.005516777, 0.01951651, 0.018932791, 0.011775892, 0.005624638, 0.013438222, 0.005059954, -0.010976451, 0.017448116, 0.040809557, -0.0038068616, -0.030708684, -0.025810521, -0.027130233, -0.02067126, -0.024008607, 0.023678679, 0.047230463, -0.023031512, -0.03218067, 0.011997959, -0.055529423, -0.08425854, -0.0027282508, 0.00453651, -0.0064716646, 0.017600391, -0.017498873, -0.03550533, -0.0045999577, -0.01456759, -0.049869888, 0.05527563, -0.021749869, 0.01786687, -0.009821703, -0.0073282085, 0.030074207, 0.027155614, 0.045225516, -0.0058847736, -0.0297189, -0.047636528, 0.06466589, -0.042205404, -0.004717336, 0.026368862, -0.04289064, -0.015113241, -0.021267667, -0.011522101, -0.035987534, 0.03192688, -0.069234125, -0.013742771, -0.03766255, -0.005424778, -0.014796002, -0.01763846, -0.032535978, 1.0161544e-06, -0.0076581365, -0.029059043, 0.034845475, -0.04738274, 0.014174215, -0.039845154, -0.05527563, -0.02587397, -0.014669107, -0.016978603, 0.017003981, -0.034236375, -0.017448116, 0.03494699, -0.06583333, -0.040885694, -0.039946668, 0.008051513, 0.02860222, -0.030962475, 0.057407472, -0.038906127, -0.003892516, -0.0071378658, -0.00041320312, 0.02312034, -0.047154326, -0.006389183, 0.0060148416, 0.04514938, -0.071873546, -0.009358535, -0.014351868, 0.038931504, 0.04786494, -0.016978603, 0.007125176, -0.029160561, -0.03159695, 0.008451233, 0.0297189, -0.022054419, -0.008108615, -0.04289064, -0.02364061, -0.014960966, -0.041114107, 0.043804288, -0.03053103, -0.008616197, -0.07349781, 0.010475215, -0.009986667, -0.0021841868, 0.0122961635, -0.025696317, 0.0084956465, -0.020785464, -0.0020985324, 0.018311005, -0.022701586, -0.005278848, -0.015176688, -0.045301653, 0.002861491, 0.012321542, -0.010576731, 0.03136854, 0.015341653, 0.013324016, 0.013146362, -0.029008286, 0.014656417, -0.029338215, 0.02336144, -0.033703417, 0.016597917, 0.022270141, 0.013235189, 0.014237663, 0.035073884, 0.0056627067, -0.00542795, 0.022257451, -0.016420264, 0.014174215, 0.015823854, -0.036977317, 0.017803423, -0.0028170776, 0.036723524, 0.012334231, -0.07512207, -0.018539416, -0.022891928, 0.07019853, -0.016496401, 0.017130878, -0.038576197, 0.01622992, 0.034236375, -0.014085388, 0.015392411, -0.029388972, 0.019072376, -0.01757501, -0.014491454, 0.014047319, 0.038652334, 0.004986989, 0.0045809234, 0.0066175945, 0.030353377, -0.027993122, 0.018285625, -0.06725456, 0.06420907, 0.033931825, -0.05172256, -0.020239815, 0.05202711, -0.023995917, 0.012645125, 0.033094317, -0.026445, -0.048271004, 0.057915054, 0.072837956, 0.008210132, 0.008279924, 0.036748905, -0.0021143944, -0.0010000942, -0.0015679512, 0.014453385, 0.03631746, -0.0055389837, 0.016991293, -0.044362627, -0.02527756, -0.022232072, 0.05037747, -0.037307244, 0.019592648, 0.0045491997, 0.009669429, 0.019529201, -0.02067126, -0.02067126, -0.021749869, 0.039489847, -0.011198518, -0.0017575012, 0.010913003, 0.06050372, 0.022460483, 0.038144752, 0.025670936, -0.021356493, -0.017752664, -0.023234546, 0.032815147, -0.038119376, 0.030632546, 0.03197764, -0.028856011, 0.0029059043, -0.06517347, -0.020062162, 0.024617705, 0.044971727, -0.07050308, 0.006966557, 0.023158409, 0.03441403, 0.0026854237, 0.022853859, -0.010836866, 0.008489301, -0.017105497, -0.009225295, -0.020696638, -0.0043810634, -0.04375353, 0.0056024315, 0.018805897, -0.017359288, -0.022384347, 0.035048507, 0.029769657, 0.01004377, -0.033855688, -0.06294011, 0.012714918, 0.057661265, -0.03410948, 0.012302508, -0.032104533, 0.012854503, -0.0053581577, 0.037916344, -0.028424567, -0.029921932, -0.04263685, -0.044261113, -0.010729005, 0.014846761, 0.009269708, 0.010494249, 0.020455537, 0.0007685102, 0.038093995, 0.015252826, 0.024198951, -0.066543944, 0.025366388, -0.026876444, 0.007074418, -0.052128624, -0.05093581, 0.0063638035, 0.01031025, 0.026038934, 0.037028074, -0.054615777, 0.022473173, -0.0051773316, -0.016623296, -0.031013234, -0.0050250576, 0.0021350149, -0.073040985, 0.055529423, -0.04624068, -0.02228283, -0.055630937, -0.058727186, -0.011699755, -0.020328641, -0.0078231, -0.040403493, 0.042230785, -0.010951072, 0.04210389, -0.008578128, -0.06278784, 0.026013555, -0.03553071, -0.0012665746, -0.0010468869, -0.0043080985, 0.004396925, -0.054158952, -0.0018225351, 0.032891285, -0.016559849, -0.043042917, -0.016940534, 0.06740683, -0.0028963871, -0.041241, -0.011395206, -0.0027996295, 0.022765033, 0.0035308641, 0.0173466, 0.0062051844, 0.032612115, -0.03936295, -0.040581144, 0.0053486405, -0.02089967, 0.031140128, 0.0045047863, -0.013235189, 0.0214707, 0.005964083, 0.014973656, 0.023145719, -0.009288742, -0.022155935, 0.02230821, -0.0051138843, -0.023082271, 0.07055384, 0.023907091, 0.009123778, -0.018577484, 0.045707718, 0.008070547, 0.056849133, -0.012181957, 0.038652334, -0.0010698867, 0.03294204, -0.039642118, -0.01761308, 0.017270463, 0.052737724, -0.015570064, -0.01568427, -0.043322086, 0.011871063, 0.004974299, 0.010633834, -0.030886337, 0.03139392, -0.03164771, 0.0081403395, 0.019491132, 0.022155935, 0.048880104, -0.005497743, -0.05451426, 0.007854825, 0.017600391, 0.026368862, 0.006636629, -0.004752232, 0.0023031514, -0.0018891551, 0.017739976, -0.03852544, -0.0009763014, 0.0117378235, -0.03106399, -0.016014198, -0.046291437, 0.0126007125, 0.02067126, -0.030962475, -0.008616197, 0.025201425, -0.018767828, 0.0021064635, 0.036215942, 0.027561678, -0.006991936, 0.021851385, 0.008838263, -0.030886337, 0.017778045, -0.030480273, -0.008045168, 0.03880461, 0.04177396, -0.017828802, 0.014478764, 0.01515131, 0.046672124, 0.012264439, 0.0077469633, -0.015062483, 0.02720637, 0.019097757, 0.016407574, -0.019719543, 0.016293367, -0.033373486, 0.028932149, 0.013463601, -0.033754174, -0.015925372, 0.13532124, -0.010113562, -0.022422414, 0.0014061595, -0.026597273, 0.009586947, -0.022993444, 0.005510432, -0.013514359, 0.01786687, -0.006176633, -0.03169847, 0.006934833, 0.032688253, -0.012562644, 0.009060331, -0.008038823, -0.009244329, 0.047636528, 0.0088001955, -0.0013260568, 0.021648353, 0.0026870097, -0.017765354, -0.024985703, -0.005186849, -0.018882034, 0.0025950107, -0.012778366, 0.024338536, -0.01951651, -0.04596151, 0.0014997448, -0.022130556, 0.010690937, 0.015011724, 0.027840849, -0.011388861, -0.013628565, -0.0013744357, 0.021940213, 0.01211851, -0.06664546, 0.015823854, -0.017511563, 0.0048125074, 0.009479086, -0.0156462, 0.034566306, -0.039261434, -0.0034483823, 0.016369505, -0.029617384, 0.013793529, -0.048499417, -0.006110013, 0.016407574, -0.007677171, -0.021051945, 0.0031327298, 0.041976996, -0.0032390049, -0.037510276, -0.0053708474, 0.009028607, 0.03245984, -0.053042274, 0.04070804, -0.002425288, -0.006547802, 0.032891285, 0.018107971, 0.0048093353, -0.02941435, -0.0051170564, 0.027815469, -0.004143134, 0.03324659, 0.049083136, -0.03243446, 0.008812885, -0.0015298825, -0.006233736, -0.040048186, -0.008356062, 0.0052598137, 0.01596344, -0.036698148, 0.021914834, 0.016458333, 0.0146310385, 0.033119697, -0.03362728, 0.018856654, 0.0016924673, 0.005558018, 0.0034610718, -0.009529844, 0.0051329182, -0.048854724, 0.0033341763, -0.007321864, -0.004799818, 0.014719865, -0.0011698168, -0.027663196, 0.014529522, 0.0031025922, 0.032916665, -0.00068047654, 0.025544042, 0.0031850743, 0.01570965, -0.0275363, 0.0043810634, 0.008730403, -0.03601291, 0.0074106907, 0.010361008, -0.008343372, -8.315118e-06, 0.0033151421, -8.5456115e-05, -0.027130233, 0.019059688, -0.017816113, 0.041647065, -0.04129176, -0.049996782, -0.01732122, -0.03928681, -0.030175723, 0.04976837, -0.0019906715, -0.012365956, 0.022498552, -0.017816113, 0.012689539, -0.020036781, -0.0105196275, 0.002225428, 0.0061417366, 0.017283153, 0.008831919, -0.019592648, 0.05481881, 0.028424567, 0.009548878, 0.00674449, -0.0029185938, 0.01156017, -0.012029683, -0.027967744, -0.010081839, -0.06420907, -0.007543931, 0.007309174, 0.027180992, 0.015341653, 0.035911396, 0.0077406187, 0.0013331947, 0.043626636, 0.052128624, -0.010380043, -0.0053645023, -0.0003818758, 0.004768094, 0.032637496, 0.009161847, -0.033373486, 0.00047982318, 0.017943008, 0.020569742, 0.022473173, -0.043931182, 0.0023872196, -0.007639102, -0.0015267101, 0.044464145, 0.04654523, 0.06527499, 0.014529522, -0.0053708474, 0.023780195, -0.03306894, -0.029820416, 0.013324016, 0.027104855, 0.02695258, -0.037535656, -0.004263685, -0.0156462, 0.011801271, 0.018539416, -0.06791441, -0.018958172, -0.052940756, -0.033271972, 0.027180992, -0.03662201, 0.00054723636, 0.009701152, 0.027637815, 0.0101643205, -0.016635986, 0.005450157, 0.01706743, -0.008914401, -0.0055770525, 0.025924727, -0.020722017, -0.011610928, 0.0046031303, -0.031038612, 0.012442092, -0.0010460939, -0.011794927, 0.0015219515, -0.016674055, -0.0042922366, -0.009929564, 0.02587397, 0.007239382, -0.035073884, -0.021584906, 0.0020557053, 0.014999035, 0.002450667, -0.028145397, 0.008057857, 0.024643084, 0.032079153, -0.005037747, -0.030860959, -0.02639424, 0.029008286, -0.058118086, -0.02720637, 0.0018288798, -0.042509954, 0.004066997, 0.03850006, -0.027460162, 0.028399188, -0.014453385, 0.0053581577, 0.012949674, 0.016191851, -0.015189378, 0.02119153, 0.00030970405, -0.025226803, 0.009155503, -0.0042605125, -5.6161123e-05, 0.0050662984, -0.0016123645, -0.015290895, 0.007810411, -0.032332946, 0.011896443, 0.008165718, -0.030607168, -0.01980837, 0.0027076304, 0.009821703, -0.0068904194, -0.016635986, -0.00037572932, -0.03167309, 0.008743092, 0.0052629863, -0.027130233, -0.027561678, 0.00052978826, 0.034515545, -0.0019414994, 0.009117434, -0.034058724, 0.0008533715, 0.039540604, -0.018628243, 0.03575912, 0.02720637, 0.033449624, -0.028652979, -0.009542533, 0.0010936796, 0.060960546, -0.03083558, -0.014186905, -0.034490168, 0.0041272724, 0.021584906, 0.00989784, -0.016344126, 0.03745952, 0.011718789, 0.039845154, 0.024655774, 0.0067318003, 0.04240844, -0.019085066, -0.057153683, -0.009193571, 0.014846761, -0.023792885, -0.016610606, 0.03928681, 0.029236697, 0.021978281, -0.07126445, 0.00399086, 0.015049793, -0.030201102, -0.003423003, -0.016331436, 0.019135825, 0.021826006, 0.0255948, -0.040403493, -0.025912039, -0.007099797, 0.0068904194, 0.012055062, 0.008641576, -0.0045999577, 0.02417357, 0.005630983, -0.0032120396, 0.002993145, 0.03834779, -0.010982796, -0.016623296, -0.048677072, 0.0014886415, -0.013552427, 0.014402627, -0.025302941, 0.03877923, 0.03794172, 0.009770945, -0.0019748094, 0.011388861, 0.0071442104, 0.030404136, 0.014745244, 0.01073535, -0.022511242, 0.057965815, -0.02860222, 0.040530387, -0.008584473, -0.012575333, 0.009916875, 0.028957527, 0.026800307, -0.0023142546, 0.051773317, 0.016052267, -0.0033881068, 0.016369505, -0.015608133, 0.004758577, -0.007372622, 0.025366388, 0.016635986, -0.048397902, 0.034845475, -0.00019718353, 0.017701907, 0.024021298, 0.004936231, 0.054260466, 0.008908057, 0.012334231, -0.03027724, 0.044717934, -0.020683948, -0.049869888, -0.0049933335, 0.027333267, 0.027460162, -0.00895247, 0.0022381174, -0.027916985, 0.02143263, 0.004980644, -0.036850423, -0.0156462, -0.0006919764, 0.010500593, -0.038423922, -0.020036781, -0.008267235, -0.0074995174, 0.040809557, -0.009726532, 0.008565439, -0.019668786, -0.006430424, 0.032688253, -0.022980755, 0.005789602, -0.025353698, -0.014072699, -0.012188302, 0.029287456, 0.042611472, 0.014098078, -0.020227125, 0.018539416, 0.0073345536, -0.008521025, -0.017549632, -0.0020192228, -0.014174215, -0.048981618, 0.010386388, -0.013298636, -0.04872783, 0.023272615, -0.033652656, -0.033424247, -0.027637815, -0.02257469, 0.0066556633, 0.044667177, 0.010354663, -0.004923541, 0.03662201, 0.0033214868, 0.027916985, 0.0003483675, 0.034820095, -0.021521458, -0.0022587378, 0.00556119, -0.0056119487, -0.002615631, 0.0024776324, 0.044083457, 0.011953546, -0.024440052, 0.045276273, 0.055478662, 0.021369183, -0.038195513, 0.033373486, -0.03522616, 0.017663838, -0.00089699175, 0.011039899, -0.015303584, -0.02394516, 0.0027504575, 0.02143263, -0.028652979, 0.039489847, 0.00091126753, -0.019313479, 0.008432198, -0.016851708, -0.005031402, -0.04263685, 0.015760407, 0.062381774, 0.029617384, -0.009942254, 0.016331436, 0.027409405, -0.032129914, 0.042332303, -0.03515002, -0.054615777, 0.031444676, 0.010646523, -0.013019467, -0.012473817, -0.016331436, 0.011623617, -0.035124645, 0.016064957, 0.02253662, -0.0033944517, 0.019199273, 0.04149479, 0.007899238, 0.015544686, -0.0105703855, -0.001987499, 0.009720187, 0.037129592, 0.019821059, 0.056240037, 0.02228283, 0.0020557053, 0.002529977, -0.03763717, -0.04344898, 0.016369505, -0.006309873, 0.036215942, 0.014821381, -0.0066302842, -0.01568427, 0.014110767, 0.003454727, 0.044058077, 0.011978924, -0.014174215, 0.0019478442, 0.029084424, -0.013742771, -0.04514938, 0.027079476, 0.046367574, -0.04286526, 0.016090335, -0.010684592, 0.039134536, 0.0130067775, -0.015823854, -0.010208734, 0.0028345257, -0.009314122, 0.01058942, -0.010094528, 0.026876444, -0.0308102, -0.0012959192, 0.00015058914, 0.011357137, -0.031089371, -0.016940534, -0.00661125, 0.014237663, -0.03111475, -0.021749869, 0.0019066032, 0.02834843, -0.0071569, 0.007816756, 0.011731478, -0.0059926347, 0.025429836, -0.040251218, -0.02918594, 0.0015663649, 0.036266703, 0.03380493, -0.005466019, 0.0133113265, 0.007937307, -0.023627922, -0.017511563, 0.0027710781, 0.0063130455, 0.033779554, -0.01845059, 0.011154105, -0.015455858, 0.013628565, 0.037510276, -0.016306058, -0.0035498985, 0.010449835, 0.010272182, 0.0021984626, 0.0035498985, -0.0030391444, -0.035353053, -0.015214757, 0.021229599, -0.03388107, 0.015925372, 0.015798476, -0.024287777, -0.011763203, -0.030860959, 0.011978924, 0.0012895744, 0.028221535, -0.020303262, 0.014428006, 0.018387143, -0.004444511, -0.017016672, -0.047636528, 0.0029122492, -0.014783313, -0.022257451, 0.046037648, -0.01622992, -0.019046998, -0.0297189, -0.0016734329, 0.0020350849, -0.010792453, -0.0018114317, 0.02117884, 0.016014198, 0.017803423, -0.027104855, -0.036393598, 0.032789767, 0.0065414575, -0.03794172, -0.024871496, 0.0022904617, -0.019110445, 0.030023448, 0.025988175, 0.009878806, 0.008927091, -0.020189056, -0.02065857, -0.0075312415, -0.022333588, 0.006738145, -0.005021885, 0.011509412, 0.012055062, -0.022384347, 0.001897086, 0.06913261, 0.009650394, -0.023589853, -0.02614045, 0.0030772132, -0.014263041, 0.032992803, 0.012505541, -0.0062400806, 0.017752664, 0.024021298, -0.036647387, 0.004041618, 0.030226482, -0.0039876876, -0.008305303, 0.0039052055, -0.012772021, 0.0005500122, -0.023678679, 0.022460483, 0.0055453284, -0.012004304, 0.011604583, 0.0070046256, 0.016115714, -0.032992803, -0.008413164, 0.01210582, -0.012841813, -0.03545457, -0.02394516, 0.047661908, -0.029592004, 0.0028868702, -0.021115392, 0.053448338, -0.00057102926, 0.01709281, -0.0018574313, 0.041444033, -0.0013895045, 0.0033436934, 0.021661043, 0.012898916, -0.0035498985, 0.031089371, 0.02941435, 0.032256808, -0.024871496, -0.010760729, -0.006078289, -0.006579526, 0.017778045, -0.0052502966, -0.01926272, 0.0029534902, 0.00880654, 0.04070804, -0.014834071, -0.033475004, -0.036520492, -0.018539416, 0.0071124863, -0.0021334288, -0.011782236, 0.001121438, -0.0015029173, 0.0008486129, 0.024630396, -0.013298636, 0.012321542, 0.027079476, -0.011997959, 0.023171097, -0.013895045, -0.012099476, 0.011052588, 0.01815873, -0.025353698, 0.013742771, -0.032053776, -0.0050091953, -0.0036894835, -0.009783634, -0.019072376, 0.03720573, 0.036926556, -0.002977283, 0.026774926, 0.034464788, -0.032992803, -0.031038612, 0.014212283, -0.0021112221, -0.005805464, -0.008108615, -0.032231428, 0.022891928, -0.030353377, 0.0013902975, 0.008603508, 0.01072266, 0.010792453, -0.014148836, -0.001319712, -0.004758577, 0.0057673953, -0.0013839528, -0.018095283, -0.016623296, 0.015290895, 0.008007099, 0.008292614, 0.016864397, 0.0037307243, -0.020595122, -0.02946511, -0.003984515, 0.02120422, -0.040784176, 0.029008286, 0.012626091, 0.002366599, -0.023031512, 0.006192495, 0.017701907, 0.01925003, -0.01650909, 0.035886016, -0.0130067775, -0.011255621, 0.022155935, -0.013438222, 0.039261434, 0.032561358, 0.018209489, 0.024719222, -0.029287456, -0.0145802805, -0.021026567, 0.0032310737, -0.007734274, 0.0039210673, 0.0018225351, -0.0016543986, -0.0175877, -0.031774607, -0.03987053, 0.016902465, -0.0009699566, 0.0049267136, -0.025696317, 0.008470267, 0.0017099153, -0.005878429, 0.024731912, 0.025112597, 0.02284117, -0.015620822, -0.0054057436, 0.024110124, 0.017359288, -0.029592004, 0.002780595, -0.022714274, -0.018412521, 0.0015505031, -0.0013672978, -0.006481182, -0.015887303, -0.030962475, 0.0020826706, -0.0023570817, -0.03164771, -0.0048600934, -0.037510276, -0.009142812, 0.04047963, 0.024871496, 0.03763717, 0.014504143, 0.0017908112, 0.007309174, -0.01210582, 0.032662872, -0.043398224, -0.003438865, -0.0004294616, -0.027282508, -0.026368862, -0.018019145, -0.00879385, -0.007125176, -0.03969288, -0.018336384, -0.0070363493, -0.018894723, 0.0046538883, 0.008279924, -0.013793529, 0.007772343, -0.0030946613, 0.0013212982, 0.014948277, -0.030099586, 0.0048854724, -0.02313303, 0.02089967, 0.025797833, -0.013679323, -0.011940856, 0.029033665, 0.042763747, 0.013298636, -0.034287132, -0.012010649, -0.041393276, 0.04976837, -0.002761561, 0.0059577385, -0.005291538, -0.0040035495, 0.009986667, -0.011668031, 9.8343924e-05, 0.03525154, 0.006522423, 0.021787938, 0.0043842355, 0.012733952, 0.018260246, 0.035327677, -0.016597917, -0.008337027, -0.002696527, 0.008425854, 0.025011081, 0.013146362, 0.013438222, 0.004584096, -0.045986887, -0.013070225, -0.029287456, 0.00074868277, -0.004098721, 0.0018035007, 0.01593806, 0.014339179, -0.024046676, 0.0511896, 0.026648032, 0.04182472, 0.013120983, 0.00024804083, 0.0115855485, -0.003324659, 0.017765354, 0.029515868, -0.013704702, -0.017968386, 0.02119153, 0.01680095, -0.0009937495, 0.011255621, 0.0033627278, 0.014643728, 0.0018669484, -0.054565016, 0.017993767, -5.6755944e-05, -0.0030137654, -0.031444676, -0.02254931, -0.026216587, -0.011503067, -0.02946511, -0.010697281, -0.029642763, -0.042484578, 0.014123457, 0.01266416, -0.004888645, -0.011160449, 0.016585227, 0.006027531, -0.031850744, 0.007239382, 0.014072699, 0.010646523, -0.008787505, -0.040098943, -0.0016448814, 0.029388972, 0.012822779, 0.03352576, -0.0065668365, -0.023082271, -0.0067254556, -0.034160238, 0.000552788, 0.023869023, 0.0120931305, 0.0014188491, 0.012353266, 0.032129914, -0.003898861, 0.015214757, -0.056087762, -0.008451233, 0.004914024, 0.0075312415, 0.00392424, 0.015887303, 0.022232072, -0.009593291, -0.02117884, 0.0046031303, -0.0039274124, 0.05144339, 0.016001508, 0.012695883, 0.019465752, 0.004422304, -0.0036165186, 0.044235732, 0.006966557, 0.015265515, 0.0134128425, 0.0145802805, -0.008831919, 0.024909565, -0.01032294, 0.040276594, 0.030099586, -0.0044064424, -0.0011119208, -0.0067254556, -0.033982586, 0.008857298, 0.009580602, 0.025150666, -0.028475326, -0.014478764, -0.02943973, -0.020265194, 0.024262398, -0.010418111, 0.014402627, 0.003085144, -0.0026695617, 0.020810844, -0.008019788, -0.0017226049, -0.010906659, 0.0036260358, 0.00879385, -0.01347629, -0.003116868, 0.0059418767, -0.0062273913, -0.016001508, -0.0028932148, -0.019884508, 0.006290839, -0.013324016, -0.0130067775, 0.024617705, -0.0065922155, 0.01141424, 0.021838697, -0.012036027, -0.009409293, 0.0039020332, -0.0011896442, -0.0001371065, -0.039642118, 0.0065668365, -0.0054565016, -0.0071315207, 0.007049039, 0.012213681, -0.0084956465, -0.024871496, 0.004676095, -0.034540925, -0.010126252, -0.00088192296, 0.017790733, -0.00811496, 0.022968065, -0.0047712666, -0.03436327, 0.00059601176, -0.032003015, -0.018755138, 0.014389937, -0.0076073785, -0.0064843544, 0.021051945, -0.0014394695, -0.004901334, -0.0004262892, -0.045606203, 0.015811166, 0.009967633, -0.019884508, 0.005434295, 0.027993122, -0.03956598, 0.01263878, 0.008051513, -0.060046896, 0.0108241765, 0.019440373, 0.005989462, 0.00598629, 0.0021905317, -0.019338857, -0.020189056, -0.016572537, -0.020252503, -0.0076644816, -0.015227446, -0.010932038]"
../../../gradio,../../../gradio/gradio/components,dataset.pyi,"""""""gr.Dataset() component.""""""

from __future__ import annotations

from typing import Any, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import (
    Component,
    get_component_instance,
)
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Dataset(Component):
    """"""
    Creates a gallery or table to display data samples. This component is designed for internal use to display examples.
    """"""

    EVENTS = [Events.click, Events.select]

    def __init__(
        self,
        *,
        label: str | None = None,
        components: list[Component] | list[str],
        component_props: list[dict[str, Any]] | None = None,
        samples: list[list[Any]] | None = None,
        headers: list[str] | None = None,
        type: Literal[""values"", ""index""] = ""values"",
        samples_per_page: int = 10,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        proxy_url: str | None = None,
    ):
        """"""
        Parameters:
            label: The label for this component, appears above the component.
            components: Which component types to show in this dataset widget, can be passed in as a list of string names or Components instances. The following components are supported in a Dataset: Audio, Checkbox, CheckboxGroup, ColorPicker, Dataframe, Dropdown, File, HTML, Image, Markdown, Model3D, Number, Radio, Slider, Textbox, TimeSeries, Video
            samples: a nested list of samples. Each sublist within the outer list represents a data sample, and each element within the sublist represents an value for each component
            headers: Column headers in the Dataset widget, should be the same len as components. If not provided, inferred from component labels
            type: 'values' if clicking on a sample should pass the value of the sample, or ""index"" if it should pass the index of the sample
            samples_per_page: how many examples to show per page.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            proxy_url: The URL of the external Space used to load this component. Set automatically when using `gr.load()`. This should not be set manually.
        """"""
        super().__init__(
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
        )
        self.container = container
        self.scale = scale
        self.min_width = min_width
        self._components = [get_component_instance(c) for c in components]
        if component_props is None:
            self.component_props = [
                component.recover_kwargs(
                    component.get_config(),
                    [""value""],
                )
                for component in self._components
            ]
        else:
            self.component_props = component_props

        # Narrow type to Component
        if not all(isinstance(c, Component) for c in self._components):
            raise TypeError(
                ""All components in a `Dataset` must be subclasses of `Component`""
            )
        self._components = [c for c in self._components if isinstance(c, Component)]
        self.proxy_url = proxy_url
        for component in self._components:
            component.proxy_url = proxy_url
        self.samples = [[]] if samples is None else samples
        for example in self.samples:
            for i, (component, ex) in enumerate(zip(self._components, example)):
                # If proxy_url is set, that means it is being loaded from an external Gradio app
                # which means that the example has already been processed.
                if self.proxy_url is None:
                    # The `as_example()` method has been renamed to `process_example()` but we
                    # use the previous name to be backwards-compatible with previously-created
                    # custom components
                    example[i] = component.as_example(ex)
                example[i] = processing_utils.move_files_to_cache(
                    example[i], component, keep_in_cache=True
                )
        self.type = type
        self.label = label
        if headers is not None:
            self.headers = headers
        elif all(c.label is None for c in self._components):
            self.headers = []
        else:
            self.headers = [c.label or """" for c in self._components]
        self.samples_per_page = samples_per_page

    def api_info(self) -> dict[str, str]:
        return {""type"": ""integer"", ""description"": ""index of selected example""}

    def get_config(self):
        config = super().get_config()

        config[""components""] = []
        config[""component_props""] = self.component_props
        config[""component_ids""] = []

        for component in self._components:
            config[""components""].append(component.get_block_name())

            config[""component_ids""].append(component._id)

        return config

    def preprocess(self, payload: int) -> int | list | None:
        """"""
        Parameters:
            payload: the index of the selected example in the dataset
        Returns:
            Passes the selected sample either as a `list` of data corresponding to each input component (if `type` is ""value"") or as an `int` index (if `type` is ""index"")
        """"""
        if self.type == ""index"":
            return payload
        elif self.type == ""values"":
            return self.samples[payload]

    def postprocess(self, samples: list[list]) -> dict:
        """"""
        Parameters:
            samples: Expects a `list[list]` corresponding to the dataset data, can be used to update the dataset.
        Returns:
            Returns the updated dataset data as a `dict` with the key ""samples"".
        """"""
        return {
            ""samples"": samples,
            ""__type__"": ""update"",
        }

    def example_payload(self) -> Any:
        return 0

    def example_value(self) -> Any:
        return []

    
    def click(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Dataset` component in Gradio, which is used to create a gallery or table to display data samples. It allows users to display examples with various components like Audio, Checkbox, Image, Textbox, etc. The component can be customized with parameters like label, samples, headers, type, samples per page, visibility, etc. It also provides methods for preprocessing, postprocessing, and handling events like click and select.","[-0.031078184, 0.0075520924, 0.00922707, -0.013987534, -0.012341941, -0.016714515, -0.035615318, -0.0021187, -0.032911845, -0.038977027, 0.012882636, -0.045112733, -0.013035441, -0.0055333036, 0.02309706, 0.0008029608, -0.005518611, -0.025600713, -0.040998753, 0.05858308, -0.0063178986, -0.022262512, 0.0065177204, 0.019417988, 0.027058236, -0.0022200802, -0.026047373, 0.08068103, 0.0063590384, -0.015292252, -0.065447554, -0.029079964, -0.017020125, -0.011254675, -0.01756082, -0.010337845, 0.034416385, 0.011865895, -0.0338992, -0.017360996, -0.032136064, -0.01975886, -0.02976171, 0.03646162, 0.0091741765, 0.0132822795, -0.038365807, -0.007963491, 0.040669635, 0.07522707, -0.052894033, 0.024472306, -0.020334817, -0.03371113, 0.0013936108, 0.023249866, -0.060604807, 0.031336777, 0.017690117, -0.06577667, 0.016138557, 0.04518326, 0.012071594, 0.012012823, -0.021616029, 0.0041609975, -0.025154052, 0.010978451, -0.018477648, -0.008798041, 0.043913804, -0.0308431, 0.0041580587, -0.023061799, -0.014481211, -0.017725378, -0.012635797, -0.012518255, 0.026164915, -0.014634016, 0.019476758, -0.013352805, -0.0711366, 0.006870347, -0.009938201, -0.0077989316, -0.0110313445, 0.024425289, -0.0142931435, -0.03114871, -0.045606412, -0.011037222, -0.027081745, 0.05247088, 0.0042579696, 0.02034657, -0.030161353, -0.008809796, 0.03175993, 0.039235618, 0.020299554, -0.0096267145, -0.022979518, -0.06455423, 0.043749243, -0.06262653, -0.016655743, 0.014775067, -0.040810686, -0.014739804, -0.018571682, -0.027551914, -0.02595334, 0.04443099, 0.009444524, -0.03067854, 0.04151594, -0.043749243, -0.02181585, -0.035356723, -0.017384505, 0.026447017, -0.0045430097, -0.043866787, 0.044454496, -0.028938914, -0.010437756, -0.046570256, -0.031524844, -0.0021583703, -0.009832413, -0.004287355, 0.01914764, -0.062062334, -0.009256456, 0.020828495, -0.042338736, -0.004901514, -0.034251824, 0.006664648, 0.01859519, -0.013435084, 0.0622504, 0.0029899823, -0.009421015, -0.037754584, -0.029056456, 0.04302048, -0.037566517, -0.012388958, -0.014434194, 0.040787175, -0.0008764248, -0.005019056, -0.004560641, 0.01853642, 0.015186464, -0.0004422529, -0.023978628, -0.04379626, 0.0052541406, 0.010743366, 0.042644344, 0.0040669637, -0.032606233, -0.00010762466, -0.03326447, 0.021521995, -0.032911845, 0.049884953, 0.004190383, 0.009473909, -0.017666608, -0.0028121995, 0.014845592, -0.022074444, -0.004719323, 0.011231166, 0.029620659, -0.0046105967, -0.030866608, -0.0020011575, -0.0054804096, 0.0004764136, 0.02350846, -0.031595368, -0.01179537, -0.062156368, -0.041986108, -0.0416805, 0.013364559, -0.012165627, -0.0045048087, 0.060745858, -0.0046487977, -0.037354942, 0.023531968, 0.023520214, 0.005404007, 0.01228317, 0.0004349065, 0.016209083, -0.03876545, -0.02426073, -0.05082529, 0.019347463, -0.030890116, -0.023778807, 0.022050936, -0.03415779, 0.023132324, -0.008897952, 0.008439537, -0.036250044, -0.031007659, 0.0014685441, -0.029926268, 0.01709065, -0.0026799643, -0.007898842, -0.032629743, 0.020652182, -0.0029165181, -0.026588067, 0.023061799, -0.010619947, -0.009332858, -0.011542654, 0.008980231, -0.00446073, 0.012988424, -0.048004273, 0.01350561, -0.012600535, 0.012118611, -0.01664399, -0.00043784507, -0.05218878, 0.040481567, 0.029056456, -0.036367588, -0.013235263, 0.0057507567, -0.00054473506, 0.035215672, 0.054116473, -0.031360283, -0.041163314, 0.029785218, 0.06323776, 0.0048721284, 0.011007836, -0.00056236645, -0.0059917187, 0.009238824, 9.4676645e-05, -0.021627782, 0.040387534, -0.014669279, -0.021851113, -0.025412645, -0.037848618, -0.045206767, 0.033052895, -0.020405343, 0.06351986, 0.03034942, -0.012106856, -0.007710775, -0.027128762, -0.015938735, 0.0011445681, 0.019465005, 0.0010314337, 0.016244346, 0.013858236, 0.026940694, 0.0455829, 0.041257348, 0.0020525823, -0.042644344, -0.007992876, -0.01814853, 0.04941478, 0.0015207034, 0.018301336, 0.056232236, 0.017831167, 0.018136777, -0.034416385, 0.03065503, -0.02120463, 0.02470739, 0.006388424, -0.0035292075, -0.0071877115, 0.034463402, -0.010843277, -0.01189528, -0.015727159, 0.010808014, -0.014152093, -0.019735351, -0.018442387, -0.031947996, 0.025506679, 0.011948175, 0.0060122884, -0.0043725735, -0.018324845, 0.01875975, 0.0054833484, 0.0021260462, -0.009415138, -0.06859768, 0.010096883, 0.042479787, -0.0107903825, 0.023931611, -0.02203918, 0.0014538512, -0.005186554, 0.031360283, 0.02151024, -0.0625325, -0.05369332, -0.043725733, -0.025060019, 0.0020849064, -0.049367763, 0.027058236, 0.012788602, -0.04104577, 0.04515975, 0.031383794, -0.039306145, -0.031524844, 0.02454283, -0.08580588, 0.026070882, -0.055150844, -0.019653073, -0.017983971, 0.012153873, 0.030137844, 0.031313267, -0.033052895, 0.046781834, -0.040528584, -0.07226501, -0.0093563665, -0.031924486, -0.02595334, 0.010666964, 0.049978986, -0.030796083, -0.009538557, -0.080916114, -0.033358503, -0.032347642, -0.006711665, 0.018783258, 0.026940694, 0.0338992, -0.051624577, 0.009368121, -0.051013358, -0.033311486, 0.014234372, -0.019077115, 0.022944257, -0.033523064, -0.037425466, -0.021827605, -0.035450757, 0.0020364204, 0.051342476, -0.009650223, -0.046711307, -0.022979518, -0.012506501, -0.0028974176, 0.014786821, -0.051248442, 0.02884488, 0.022521105, -0.0022435887, 0.07372253, 0.0049955477, 0.016620481, -0.017184684, -0.046946395, 0.004513624, -0.019347463, 0.04193909, 0.0041727517, -0.009750133, 0.021909885, 0.023226358, -0.004343188, 5.5419358e-05, -0.04349065, -0.016879074, 0.024871951, 0.011489759, 0.0029591273, 0.0630967, 0.046100087, 0.037848618, -0.041868567, -0.012459484, 0.013987534, 0.018442387, -0.03265325, 0.024824932, 0.010678718, -0.031007659, -0.018030988, -0.005788958, 0.069161884, 0.00019706701, -0.0016837934, -0.01756082, -0.056279253, 0.0046370435, 0.047346037, 0.0105024045, 0.013152983, -0.027904542, -0.00050616654, -0.0064060553, 0.027551914, 0.023837578, 0.044219412, -0.029244523, -0.014457703, 0.03387569, -0.03782511, 0.027269812, 0.018712733, -0.017513802, 0.012130365, 0.027857525, 0.024213713, -0.043608192, 0.0043696347, 0.0240374, -0.005982903, -0.023543723, -0.056702405, -0.022720926, -0.006200356, -0.041022263, 0.015515584, 0.053129118, -0.024213713, 0.027363846, 0.014022796, -0.003858326, -0.03342903, -0.005280588, 0.025882814, -0.027975067, 0.06257952, -0.02220374, -0.02281496, 0.014669279, -0.0030913623, -0.0027078807, -0.04165699, -0.015997507, 0.023825824, 0.03281781, 0.036673196, -0.02220374, 0.017349243, 0.018219056, 0.00075520924, 0.0050807656, -0.019993944, 0.0033088156, 0.006035797, -0.038201246, 0.0193122, 0.023167586, 0.08378415, -0.023626002, -0.05877115, 0.02623544, -0.028656812, -0.017102404, -0.003937667, -0.00029973287, -0.010043989, -0.00087569014, 0.032700267, -0.07362849, 0.015656633, 0.011607301, -0.014269635, 0.011595547, -0.005060196, -0.02145147, 0.11246447, 0.0064824577, -0.0016529385, 0.0206992, 0.006223865, 0.015891718, -0.008133927, -0.021956902, 0.0036203028, 0.028962422, 0.011025468, 0.028445236, -0.039752804, -0.044619057, 0.024871951, -0.03568584, 0.008815672, -0.009826536, 0.015680142, -0.037590027, -0.021569012, -0.0006215049, -0.015691897, 0.00010183938, -0.081245236, -0.0020687445, -0.022720926, -0.019629564, -0.010525913, -0.0056420304, 0.025318611, -0.047110952, -0.019958682, 0.010455388, -3.879814e-05, 0.013693677, -0.040646125, 0.0058594835, 0.028915405, -0.018677471, -0.020793233, 0.014704541, 0.011219412, -0.012741585, -0.07917649, -0.010190917, 0.01647943, 0.06135708, -0.05538593, 0.045888513, -0.044948176, 0.0072406055, 0.006717542, 0.024060909, 0.019735351, -0.031783435, -0.016150312, 0.0035468389, 0.019206412, 0.029667675, 0.014833838, -0.03187747, 0.015515584, 0.007011398, -0.031313267, -0.040505074, 0.019888157, -0.039353162, 0.024495814, -0.0017308103, 0.040199466, -0.030020302, 0.024119679, 0.0025580144, -0.017913446, -0.01018504, 0.016926091, 0.007593232, -0.0026373554, -0.008886198, 0.00022828918, -0.049649864, 0.0006703584, 0.027622439, 0.012059839, 0.036837757, -0.011566162, -0.009756011, -0.009720748, -0.023602493, 0.025718255, 0.012118611, 0.027975067, 0.012906144, 0.03994087, -0.01770187, -0.017231701, 0.043208547, 0.005245325, -0.013799465, -0.022333037, 0.028515762, 0.00014242821, 0.006647017, 0.03190098, -0.02868032, -0.009497418, -0.007728406, 0.021992164, -0.055950135, -0.048850577, -0.020264292, -0.0063061444, -0.015468567, 0.02067569, 0.017995726, -0.01945325, -0.018818522, -0.011425111, 0.008039894, -0.014434194, -0.0014016919, 0.05538593, -0.0055362424, -0.007857703, -0.0036026714, 0.035356723, 0.026352983, -0.011995192, 0.07165378, -0.0029620659, 0.012247907, -0.0016558771, 0.012106856, 0.0073463935, 0.0031765806, -0.030913625, 0.013752448, 0.056514338, 0.014845592, 0.010478896, 0.05218878, -0.0138112195, 0.0023155832, -0.0016837934, 0.016926091, -0.0061239535, -0.040364023, -0.0019644257, -0.00039046083, -0.012765094, -0.016890828, 0.013517364, -0.014234372, -0.018642208, 0.00018916963, 0.023825824, -0.037495993, 0.008892075, 0.012941407, -0.007469813, -0.027081745, 0.030725557, 0.01564488, -0.011942297, -0.026447017, 0.03925913, -0.025718255, 0.009185931, 0.018653963, 0.039752804, 0.042385753, -0.031383794, -0.009103651, -0.03554479, 0.006441318, 0.022685664, -0.039776314, -8.434578e-05, -0.02929154, 0.022885485, 0.006229742, -0.029667675, 0.00010936944, 0.045230277, 0.0134938555, -0.011237044, -0.0031325023, 0.009191807, 0.016162066, 0.004243277, -0.024284238, 0.051201425, 0.0038935887, -0.014469457, 0.00857471, -0.052376848, 0.005389314, 0.009961709, -0.0036967052, -0.022003919, -0.009891184, 0.010132146, 0.010096883, -0.017278718, 0.019053606, -0.033476047, 0.01989991, -0.005039626, -0.023861086, 0.0009895592, -0.003969991, -0.020652182, -0.008486554, 0.008751024, 0.013822974, -0.0023758237, -0.0341813, -0.004111042, -0.053975422, -0.027575422, 0.011912912, -0.047275513, -0.0073875333, -0.009985218, -0.03968228, -0.012095102, 0.007769546, 0.024777915, 0.042738378, 0.012048085, -0.011683704, 0.018336598, 0.008944969, -0.00825147, 0.008645236, -0.016526448, -0.00083528494, 0.008645236, 0.025530187, -0.023285128, 0.016185574, -0.0054715937, 0.0076049864, -0.0013884684, 0.00038935887, -0.019829385, -0.011642564, 0.0075109527, 0.0037025823, -0.018195547, -0.025459662, -0.025835797, 0.010161531, -0.0327943, 0.0004220503, -0.0039200354, 0.011125378, 0.040317006, -0.01258878, 0.012294924, 0.0012275823, -0.07094853, 0.02084025, 0.012083348, -0.026658593, 0.011301692, -0.009791274, 0.0027666518, -0.00019963825, -0.0036878895, 0.06304969, -0.0076872665, 0.009979341, -0.014246127, 0.022391807, 0.033382013, -0.011489759, -0.012776848, 0.0070172753, 0.020722708, 0.055668034, 0.0057507567, 0.007317008, 0.005721371, 0.0020525823, -0.04012894, 0.013564381, -0.008845058, 0.00023288067, -0.002904764, 0.052564915, -0.00036750335, 0.023285128, -0.05754871, -0.010772752, 0.027622439, -0.031642385, -0.020605166, -0.04179804, 0.060980942, 0.031477828, 0.049602848, -0.027481388, -0.06525949, -0.019100623, -0.0137054315, -0.0036232413, 0.0010255566, -0.009691362, 0.011195904, 0.010279074, 0.016914336, 0.015938735, 0.030537488, -0.016185574, -0.02990276, -0.010637578, 0.018019235, -0.026376491, 0.00878041, -0.012659306, 0.028821371, 0.022438824, 0.023155833, 0.011801247, 0.0031119324, 0.031995013, 0.015492075, -0.0073463935, 0.02759893, 0.010943187, 0.027222795, -0.018724488, 0.020628674, -0.017196437, -0.05933535, -0.0031325023, 0.030913625, -0.0039934996, -0.0066411397, 0.067187175, -0.031031167, 0.008539448, 0.028257169, -0.020969545, -0.008527693, 0.0048251115, 0.02151024, -0.0013296972, -0.030749066, 0.021463223, 0.0016044524, 0.014375423, -0.0107139805, -0.012929653, 0.048850577, -0.011289937, -0.012388958, -0.018548174, 0.0090390025, -0.0075520924, -0.05082529, -0.024354763, 0.00904488, 0.05218878, -0.014916117, -0.010508281, 0.010954943, 0.028774355, -0.0031501336, -0.020393588, 0.011219412, 0.0013157391, -0.004933838, 0.00087422086, -0.047698665, 0.016726268, -0.00088744436, 0.021087088, -0.0025109972, -0.011589671, -0.011989314, 0.020229029, -0.00063583034, 0.00097119325, 0.028351203, -0.021122351, 0.0031648264, -0.01154853, -0.005054319, 0.013846482, 0.028374711, 0.0016837934, 0.022838468, 0.0014237311, -0.010678718, -0.005127783, -0.0086158505, -0.013964025, 0.008034016, -0.020511132, -0.010079252, -0.03507462, -0.00080516475, -0.031995013, -0.030325912, -0.036696706, -0.04287943, 0.013129475, 0.0297382, 0.0074991984, 0.0053011575, -0.0040552095, 0.014939626, -0.0128591275, -0.024143187, 0.017513802, -0.012741585, 0.019935174, -0.001497195, -0.021956902, 0.02134568, 0.017431522, 0.0113487085, 0.004707569, 0.0066235084, 0.04137489, 0.04151594, 0.014974888, -0.0066940337, 0.054821726, -0.009473909, -0.0045870882, 0.0027446127, -0.002029074, 0.004801603, -0.006223865, -0.013670169, -0.0042109527, 0.0055391807, 0.017137667, -0.032253608, 0.020393588, -0.011577916, -0.024307746, -0.0019041852, -0.0046928762, 0.03632057, 0.099205695, -0.016679252, -0.032770794, 0.026023865, 0.011037222, 0.008069279, 0.001399488, 0.00093078805, -0.036555655, 0.005788958, -0.011336954, -0.01087854, 0.012988424, -0.021616029, 0.04257382, -0.026776135, 0.006999644, 0.02053464, 0.014998397, 0.0152452355, 0.02623544, 0.0294561, -0.017408013, -0.009009617, -0.0046458594, -0.031806946, 0.031242743, 0.020934284, 0.029879251, 0.03265325, 0.010402493, 0.007757792, -0.06347284, -0.036720213, -0.0019335708, -0.004069902, 0.04076367, 0.01258878, -0.043890294, 0.026282458, -0.0084748, 0.017431522, 0.027763491, 0.019276937, 0.01800748, 0.015574355, 0.01928869, -0.012388958, -0.011460374, -0.002560953, 0.026000356, -0.037989672, -0.011807124, -0.0011908504, 0.029550133, -0.020417096, -0.05129546, 0.0057272483, -0.00048559663, 0.022133214, 0.039588246, 0.014140339, 0.03996438, -0.025882814, -0.026611576, 0.022274265, -0.030419946, -0.042103652, -0.0010115984, -0.0052600177, 0.028421728, 0.0057860194, -0.020793233, -0.007916474, 0.015198219, 0.02729332, 0.028774355, 0.015115939, -0.0064648264, 0.026282458, -0.011378095, -0.04255031, 0.013540872, 0.0402935, 0.016350133, -0.0058800536, -0.020076225, -0.0128591275, -0.03387569, -0.023120569, 0.0066764024, 0.037966162, -0.019053606, -0.029785218, 0.01908887, -0.003114871, 0.010643455, 0.023390917, -0.0026593944, -0.0004760463, 0.019347463, 0.019276937, -0.004131612, 0.012953161, -0.027175779, -0.022485841, 0.02059341, 0.017572574, -0.03404025, 0.031383794, 0.022309529, -0.04243277, -0.027669456, -0.0069702584, 0.008915584, 0.016549956, 0.007998753, 0.019300446, -0.013152983, -0.0006229742, 0.0158447, -0.009585574, -0.028304186, -0.0105788065, 0.0072993767, -0.022521105, 0.016056277, -0.022415316, -0.034063756, -0.0009917631, -0.029362066, 0.0047105076, 0.011912912, 0.037448976, -0.0058036507, 0.009479786, 0.04179804, -0.030490471, -0.025859306, 0.032770794, -0.01154853, -0.025718255, 0.007581478, 0.037895635, -0.00533642, 0.0226504, 0.0062532504, 0.00053628674, 0.03817774, 0.04704043, 0.004628228, -0.017443277, -0.00041690783, -0.012388958, -0.011001959, 0.0021333927, 0.0045870882, 0.0059858416, 0.0017557881, 0.016937844, -0.003579163, -0.030020302, -0.0008903829, -0.010343722, -0.009673731, 0.0125417635, 0.0024918967, 0.018865539, -0.0076990207, 0.004416652, -0.0033411398, 0.0026593944, 0.0029370883, -0.024613356, 0.01731398, 0.007722529, -0.026047373, 0.03491006, 0.0021319233, 0.021768833, -0.008539448, -0.02792805, 0.008980231, 0.02067569, -0.004381389, -0.034275334, -0.023332145, -0.015221727, -0.016361888, -0.023908103, -0.0034704364, 0.022521105, -0.0145047195, -0.020264292, 0.025929831, 0.031853963, 0.024060909, -0.006876224, -0.0035145148, 0.036696706, -0.0047252, -0.0039993767, 0.026799643, 0.0021392698, -0.017678361, -0.007111309, -0.0060240426, -0.0131764915, -0.0015045414, -0.00022314671, -0.02548317, -0.0028959482, -0.016303116, 0.020710953, -0.022638647, -0.006547106, 0.021792341, 0.026682101, 0.014775067, 0.007152449, -0.031642385, 0.011501513, -0.016914336, -0.008416029, -0.0011093054, -0.008639359, 0.0004536398, 0.042385753, 0.004137489, -0.04979092, 0.004416652, -0.011771861, -0.011272307, 0.017172929, -0.009109528, 0.0016044524, 0.0016338379, 0.029409083, -0.0033734639, 0.003955298, -0.0005381233, -0.01570365, -0.0013737757, -0.00022333037, -0.016314872, 0.021827605, 0.016773285, -0.00074786285, 0.006958504, 0.02670561, -0.036978807, 0.004281478, 0.004396082, -0.016632235, -0.0045577027, -0.036696706, 0.025624221, 0.032347642, 0.013858236, 0.008427783, -0.017419768, -0.0020231968, -0.046170615, 0.0060299197, -0.021721816, 0.014304898, 0.000251614, 0.026047373, 0.0016294301, 0.0101439, -0.00037099287, 0.03218308, -0.021416206, 0.022673909, 0.03267676, 0.0042638467, -0.002721104, -0.016573464, 0.031853963, -0.029244523, 0.033099912, 0.014575245, -0.013987534, -0.014445948, 0.030560996, 0.022697417, 0.053505253, 0.009515049, 0.03951772, 0.014363669, -0.001497195, -0.0019335708, 0.0126475515, 0.042315226, -0.009761888, 0.017466785, 0.012212644, -0.030608013, -0.019488513, -0.0059153163, 0.013564381, 0.0077871773, 0.005445147, -0.0064824577, -0.00012452136, 0.011090116, 0.013435084, -0.05444559, 0.0059329476, 0.0053569903, -0.0038201245, -0.046922885, -0.008715761, -0.038530365, -0.009397507, 0.03509813, 0.023120569, -0.0029341497, -0.014516474, 0.049602848, -0.0038965272, 0.016526448, -0.026517542, 0.047698665, -0.020311309, -0.03690828, 0.0043196795, 0.00209813, -0.011442742, -0.03737845, -0.013329296, 0.0059740874, -0.026776135, 0.01419911, 0.022991274, -0.03575637, -0.006911487, 0.037731078, 0.016926091, 0.06380196, -0.0011247329, -0.00804577, -0.0039876224, 0.00961496, -0.017208192, -0.0068409615, -0.012600535, 3.8660397e-05, 0.017901693, 0.0029062333, -0.0100204805, 0.028562779, -0.012718077, -0.02426073, -0.012565272, 0.0016411843, -0.014786821, 0.012030454, -0.0006196683, 0.0070290295, -0.0016867319, -0.018277828, 0.019077115, -0.016632235, -0.0065823686, -0.026164915, -0.0024698575, -0.0017631345, -0.004880944, 0.013634906, -0.003405788, 0.016385397, 0.025130544, 0.027998576, 0.036555655, -0.00086834375, -0.015374533, 0.06055779, 0.012365449, 0.017572574, -0.008986109, -0.006647017, -0.016526448, -0.027622439, -0.030584505, 0.031454317, 0.000403317, 0.06102796, -0.009103651, 0.020969545, 0.054539625, 0.056561355, -0.0046958146, 0.0023317453, 0.022015672, -0.024119679, -0.00835138, 0.01678504, 0.014551736, 0.022908993, -0.054680675, -0.018818522, 0.002560953, -0.01311772, 0.0097031165, 0.04894461, -0.0158447, 0.017372752, 0.029573642, 0.018383615, 0.008163312, 0.032700267, -0.0059740874, 0.016620481, 0.0018601068, 0.058253963, 0.013023687, 0.008163312, -0.038718432, -0.0069702584, -0.009221193, 0.0022391807, -0.024378272, 0.019347463, -0.0033, 0.0042550312, -0.0025506679, -0.030913625, -0.016244346, -0.011248798, 0.015750667, -0.022767942, -0.0064589493, 0.002208326, -0.015433304, -0.006876224, 0.0015162956, -0.0048897597, -0.03065503, 0.05660837, 0.029362066, -0.0151394475, -0.019664826, 0.028891897, 2.6125612e-05, 0.006940873, 0.0077342833, 0.028304186, -0.0046399822, -0.00686447, 0.002340561, 0.023872841, 0.027387355, 0.013964025, 0.009850045, -0.031219235, -0.023861086, -0.0057801423, -0.023073552, 0.011360463, -0.0051836153, -0.013799465, 0.011530899, -0.028962422, 0.032089047, -0.012682814, 0.008480676, -0.03540374, 0.0008294078, 0.0189008, 0.029926268, 0.03479252, 0.018853784, 0.0070760464, -0.026776135, -0.0025638915, 0.005524488, -0.00011506289, 0.010167409, 0.032465182, 0.017654853, -0.010208548, -0.0013723064, 0.0065764915, 0.039494213, 0.0137054315, 0.030490471, 0.026423508, 0.0076108635, 0.033334997, 0.00843366, -0.03020837, 0.0057448796, 0.0021921638, -0.019829385, 0.0031119324, 0.01825432, -0.027810508, -0.017290471, -0.00012608248, 0.0071289404, -0.0101556545, -0.018830275, 0.0011063669, -0.014998397, 0.018030988, 0.01580944, -0.012823865, -0.011507391, 0.006382547, 0.00747569, -0.014046305, 0.010402493, -0.00039890918, 0.0013987534, -0.03157186, 0.024848443, -0.017337488, -0.0028327694, 0.029855743, -0.015750667, -0.03632057, -0.024119679, 0.01342333, -0.00030377338, 0.029879251, 0.048897594, 0.012812111, 0.01533927, 0.036250044, -0.0029870437, -0.033170436, 0.0386244, 0.002693188, 0.015186464, -0.010343722, 0.009303473, -0.0072817453, 0.007375779, 0.006106322, 0.03829528, 0.003438112, -0.034251824, -0.005615583, -0.027128762, -0.023931611, 0.012706323, 0.02295601, -0.00044813, 0.046946395, -0.011730721, 0.0074404273, 0.011530899, -0.043067496, 0.029056456, 0.022097953, -0.030702049, -0.003884773, 0.022885485, -0.010996082, 0.024025645, 0.04793375, -0.03034942, 0.023155833, -0.0043578804, -0.0022406501, -0.0067821904, 0.02145147, -0.036673196, -0.016514692, -0.0037672305, -0.072970256, -0.0026123775, 0.022579875, 0.005756634, 0.023073552, 0.0158447, -0.023837578, 0.009591452, 0.005768388, -0.023837578, 0.012083348, 0.017337488, -0.017219946]"
../../../gradio,../../../gradio/gradio/components,dataset.py,"""""""gr.Dataset() component.""""""

from __future__ import annotations

from typing import Any, Literal

from gradio_client.documentation import document

from gradio import processing_utils
from gradio.components.base import (
    Component,
    get_component_instance,
)
from gradio.events import Events


@document()
class Dataset(Component):
    """"""
    Creates a gallery or table to display data samples. This component is designed for internal use to display examples.
    """"""

    EVENTS = [Events.click, Events.select]

    def __init__(
        self,
        *,
        label: str | None = None,
        components: list[Component] | list[str],
        component_props: list[dict[str, Any]] | None = None,
        samples: list[list[Any]] | None = None,
        headers: list[str] | None = None,
        type: Literal[""values"", ""index""] = ""values"",
        samples_per_page: int = 10,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        proxy_url: str | None = None,
    ):
        """"""
        Parameters:
            label: The label for this component, appears above the component.
            components: Which component types to show in this dataset widget, can be passed in as a list of string names or Components instances. The following components are supported in a Dataset: Audio, Checkbox, CheckboxGroup, ColorPicker, Dataframe, Dropdown, File, HTML, Image, Markdown, Model3D, Number, Radio, Slider, Textbox, TimeSeries, Video
            samples: a nested list of samples. Each sublist within the outer list represents a data sample, and each element within the sublist represents an value for each component
            headers: Column headers in the Dataset widget, should be the same len as components. If not provided, inferred from component labels
            type: 'values' if clicking on a sample should pass the value of the sample, or ""index"" if it should pass the index of the sample
            samples_per_page: how many examples to show per page.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            proxy_url: The URL of the external Space used to load this component. Set automatically when using `gr.load()`. This should not be set manually.
        """"""
        super().__init__(
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
        )
        self.container = container
        self.scale = scale
        self.min_width = min_width
        self._components = [get_component_instance(c) for c in components]
        if component_props is None:
            self.component_props = [
                component.recover_kwargs(
                    component.get_config(),
                    [""value""],
                )
                for component in self._components
            ]
        else:
            self.component_props = component_props

        # Narrow type to Component
        if not all(isinstance(c, Component) for c in self._components):
            raise TypeError(
                ""All components in a `Dataset` must be subclasses of `Component`""
            )
        self._components = [c for c in self._components if isinstance(c, Component)]
        self.proxy_url = proxy_url
        for component in self._components:
            component.proxy_url = proxy_url
        self.samples = [[]] if samples is None else samples
        for example in self.samples:
            for i, (component, ex) in enumerate(zip(self._components, example)):
                # If proxy_url is set, that means it is being loaded from an external Gradio app
                # which means that the example has already been processed.
                if self.proxy_url is None:
                    # The `as_example()` method has been renamed to `process_example()` but we
                    # use the previous name to be backwards-compatible with previously-created
                    # custom components
                    example[i] = component.as_example(ex)
                example[i] = processing_utils.move_files_to_cache(
                    example[i], component, keep_in_cache=True
                )
        self.type = type
        self.label = label
        if headers is not None:
            self.headers = headers
        elif all(c.label is None for c in self._components):
            self.headers = []
        else:
            self.headers = [c.label or """" for c in self._components]
        self.samples_per_page = samples_per_page

    def api_info(self) -> dict[str, str]:
        return {""type"": ""integer"", ""description"": ""index of selected example""}

    def get_config(self):
        config = super().get_config()

        config[""components""] = []
        config[""component_props""] = self.component_props
        config[""component_ids""] = []

        for component in self._components:
            config[""components""].append(component.get_block_name())

            config[""component_ids""].append(component._id)

        return config

    def preprocess(self, payload: int) -> int | list | None:
        """"""
        Parameters:
            payload: the index of the selected example in the dataset
        Returns:
            Passes the selected sample either as a `list` of data corresponding to each input component (if `type` is ""value"") or as an `int` index (if `type` is ""index"")
        """"""
        if self.type == ""index"":
            return payload
        elif self.type == ""values"":
            return self.samples[payload]

    def postprocess(self, samples: list[list]) -> dict:
        """"""
        Parameters:
            samples: Expects a `list[list]` corresponding to the dataset data, can be used to update the dataset.
        Returns:
            Returns the updated dataset data as a `dict` with the key ""samples"".
        """"""
        return {
            ""samples"": samples,
            ""__type__"": ""update"",
        }

    def example_payload(self) -> Any:
        return 0

    def example_value(self) -> Any:
        return []
","The code defines a `Dataset` component for Gradio, which is used to create a gallery or table to display data samples. The component is designed for internal use to display examples. It allows users to specify various parameters such as label, components to display, samples, headers, type of interaction, number of samples per page, visibility, styling options, and more.

The component can be customized with different types of components such as Audio, Checkbox, Image, Textbox, Video, etc. Users can provide samples as nested lists, specify column headers, and choose whether clicking on a sample should pass the value of the sample or the index of the sample.

The component provides methods for preprocessing and postprocessing data, as well as generating example payloads and values. It also includes error handling to ensure that all components within the dataset are subclasses of the `Component` class.","[-0.033602394, 0.009181913, 0.02164182, -0.013769932, 0.008359477, -0.022734487, -0.038396023, 0.0061154007, -0.024978563, -0.037832066, 0.0077309003, -0.048829213, -0.019644476, -0.018410822, 0.018422572, -0.006338633, -0.0071199476, -0.013135481, -0.056771595, 0.05634863, 0.00047583808, -0.032568473, -0.004831813, 0.011308498, 0.016131498, -0.01882204, -0.026106475, 0.072515376, -0.00035504278, -0.023392435, -0.059262402, -0.031158583, -0.028526787, -0.013029739, -0.0029284602, -0.005859858, 0.035529245, 0.0131119825, -0.039688423, -0.01622549, -0.023263196, -0.028808765, -0.041497782, 0.028056825, -0.0069319624, 0.016049255, -0.037479594, -0.017846866, 0.043871097, 0.0657009, -0.056630608, 0.02502556, -0.017917361, -0.030735616, -0.008547462, 0.02488457, -0.054327786, 0.029678198, 0.002832999, -0.065606914, 0.009599006, 0.04335414, 0.0031986893, 0.012794757, -0.018058348, -0.004911119, -0.009822238, 0.015285565, -0.022828478, -0.0035540992, 0.058322474, -0.025096053, 0.011978196, -0.03698613, -0.014733357, -0.029090744, -0.022335017, -0.00916429, 0.015755529, -0.019867709, 0.010503685, -0.016061004, -0.052635916, -0.008189115, -0.011067642, -0.0069025895, -0.027563361, 0.02228802, -0.008747197, -0.03661016, -0.041920748, -0.00811862, -0.028597282, 0.04873522, 0.0037685202, 0.014322139, -0.041709267, -0.013593695, 0.03764408, 0.04615042, 0.028009828, -0.009581381, -0.037338603, -0.056912586, 0.043236647, -0.061330244, -0.0296547, 0.013335216, -0.040816333, -0.018422572, 0.0023263195, -0.02563651, -0.031957522, 0.037338603, -0.006350382, -0.02179456, 0.014263393, -0.03470681, -0.019656226, -0.02925523, -0.020784138, 0.018775044, -0.019221509, -0.040957324, 0.035552744, -0.041615274, 0.0075370404, -0.044059083, -0.0322395, -0.0002715141, -0.011737339, -0.011837207, 0.00464089, -0.05775852, -0.005372271, 0.032286495, -0.052964892, -0.007866015, -0.03028915, -0.017200666, 0.030148162, -0.0077602733, 0.0632101, 0.007725026, -0.020619651, -0.04304866, -0.009681249, 0.04398859, -0.04654989, -0.016072754, -0.0037273983, 0.044787526, -0.004120993, -0.01844607, -0.0040064394, 0.02178281, 0.017741123, 0.015849521, -0.020302426, -0.046902362, 0.009446267, 0.027821843, 0.032591973, -0.0044969637, -0.032685965, 0.0021603636, -0.03635168, 0.016965684, -0.039312452, 0.049957126, 0.0122543, 0.0027448807, -0.015003586, -0.00041892845, 0.015708532, -0.022863727, -0.004955178, -0.007948259, 0.032991443, -0.019174512, -0.030077668, -0.020525659, -0.025871493, 0.0063033863, 0.008335979, -0.03764408, -0.022276273, -0.050474085, -0.04459954, -0.04034637, 0.018246334, -0.010826785, 2.7651664e-05, 0.044458553, -0.0013327872, -0.031746037, 0.029513711, 0.00451165, 0.006626486, 0.0051079164, 0.013252972, 0.0106975455, -0.02629446, -0.008488717, -0.033719886, 0.030923601, -0.03830203, -0.0049845506, 0.011285, -0.037080124, 0.006978959, -0.007954133, 0.019115767, -0.023533424, -0.023909396, -0.00061242125, -0.042085234, 0.01844607, -0.0015875956, -0.00916429, -0.03144056, 0.025730504, -0.0018049538, -0.025331035, 0.025847996, -0.008747197, -0.001856356, -0.023498178, 0.007196317, -0.020161437, 0.009270031, -0.049675148, 0.004068122, -0.0071199476, 0.00889406, -0.027821843, -0.0017285846, -0.055643685, 0.0489702, 0.032920945, -0.0335084, -0.004109244, 0.014392634, 0.00916429, 0.03381388, 0.05221295, -0.027022904, -0.05352885, 0.03402536, 0.067345776, 0.015849521, 0.0074606715, 0.007067077, -0.0009458016, -0.0036451546, -0.003430734, -0.019221509, 0.043142654, -0.014075408, -0.019844212, -0.030218655, -0.022781484, -0.044505548, 0.026740925, -0.017694127, 0.054327786, 0.0257775, -0.004588019, -0.010932527, -0.02231152, -0.015062331, 0.013511452, 0.01714192, 0.004811252, 0.004664388, 0.017623633, 0.0143456375, 0.044012085, 0.049440164, -0.00072734203, -0.028738271, -0.00850634, -0.02294597, 0.056019656, -0.0021030868, 0.021254102, 0.069131635, 0.014075408, 0.011696218, -0.035529245, 0.036563165, -0.008876436, 0.03470681, 0.007072951, 0.009781117, -0.011702092, 0.048265256, -0.013264721, -0.0017741123, -0.01831683, 0.01560279, -0.020560905, -0.019914705, -0.028338801, -0.022487756, 0.009922106, 0.0114318635, -0.008747197, -0.011285, -0.017893862, 0.022017792, 0.0043530376, -0.010151213, -0.019115767, -0.06461999, 0.025730504, 0.040557854, -0.012078064, 0.030970598, -0.011067642, -0.008241986, -0.00085694913, 0.03245098, 0.018422572, -0.06020233, -0.04335414, -0.040910326, -0.02927873, 0.0070083314, -0.05362284, 0.041967746, 0.015074081, -0.03700963, 0.038114045, 0.03212201, -0.034871295, -0.03465981, 0.020184934, -0.08172666, 0.029936679, -0.059497386, -0.02011444, -0.012336543, 0.0007431299, 0.026858417, 0.044059083, -0.045304485, 0.038043547, -0.043495126, -0.057147566, -0.010926653, -0.031957522, -0.031229077, 0.00612715, 0.048641227, -0.029043747, -0.009234783, -0.09366374, -0.03881899, -0.051883977, -0.017341655, 0.014874347, 0.025965486, 0.037432596, -0.04370661, 0.008001129, -0.046643883, -0.03571723, 0.008899935, -0.025237042, 0.026341457, -0.023016464, -0.030759115, -0.016789448, -0.035905216, -0.0039330074, 0.04873522, -0.006550117, -0.04976914, -0.02228802, -0.009939729, -0.00055257435, 0.004532211, -0.040322874, 0.030641623, 0.025894992, 0.0023498177, 0.06988358, 0.0067263534, 0.018117094, -0.024743581, -0.036140196, -0.0030488884, -0.0270934, 0.051648993, 0.014792102, -0.018128844, 0.020936877, 0.038607504, 0.0023733159, 0.00519016, -0.045351483, -0.008212613, 0.033860873, 0.012360041, 0.00470551, 0.07025955, 0.050098114, 0.029607704, -0.026129974, -0.009792865, 0.030900104, 0.018011352, -0.03444833, 0.04140379, 0.0021970796, -0.022523003, -0.0058363597, 0.0051137907, 0.0554087, 0.0065031205, -0.0074371733, -0.021430338, -0.049205184, 0.010568305, 0.062176175, 0.019350749, 0.0076545314, -0.035247266, -0.004320727, 0.0004347163, 0.031088088, 0.027469369, 0.044082582, -0.032262996, -0.01765888, 0.03726811, -0.021559577, 0.030806111, 0.012101562, -0.018869037, -0.003389612, 0.01057418, 0.027657354, -0.030853108, -0.007072951, 0.029678198, -0.004035812, -0.022017792, -0.066875815, -0.015367808, -0.0042032367, -0.02591849, 0.0020781201, 0.06081328, -0.031628545, 0.011525856, 0.015426554, 0.0009795802, -0.03158155, 0.004532211, 0.033320416, -0.026200468, 0.05916841, -0.024696585, -0.020290677, 0.007390177, -0.013781681, -0.01443963, -0.03336741, -0.008594458, 0.027915835, 0.02088988, 0.035670232, -0.015967011, 0.0051226025, 0.017553138, 0.007607535, 0.0064385007, -0.018739797, -0.0015508797, 0.009029174, -0.03571723, 0.0180466, 0.026153471, 0.07712102, -0.013863925, -0.04746632, 0.028103821, -0.032333493, 0.00086796394, -0.006538368, -0.0010647612, -0.010415567, -0.0036715902, 0.035905216, -0.07289135, 0.009557883, 0.010415567, -0.0064796223, 0.018669302, -0.0043853475, -0.01005722, 0.109407514, -0.007783771, -0.0032868076, 0.017188916, 0.0067381025, 0.0055191345, 0.0026699803, -0.028009828, 0.0180466, 0.045821447, 0.0049962997, 0.021265851, -0.036140196, -0.053716835, 0.018634055, -0.029114243, 0.0074606715, -0.00851809, 0.011978196, -0.033696387, -0.021254102, -0.009487389, -0.016413476, 0.004270794, -0.07674505, -0.0034454202, -0.016331233, -0.017611884, -0.0033191175, -0.007384302, 0.025049057, -0.047113847, -0.022358516, 0.014286892, -0.005592566, 0.010685796, -0.047090348, 0.007924761, 0.022605246, -0.017588386, -0.017435648, 0.012853503, 0.011937074, -0.0053517097, -0.07815494, -0.006655859, 0.016683705, 0.059121415, -0.045727454, 0.046079926, -0.039782416, 0.008330104, 0.016789448, 0.014709859, 0.013652441, -0.03724461, -0.010004349, 0.0030929476, 0.014592368, 0.022546502, 0.014016663, -0.036821645, 0.016636709, 0.011766712, -0.034119353, -0.043612618, 0.026341457, -0.036422174, 0.018105345, -0.017976105, 0.06081328, -0.0072491877, 0.026834918, 0.00054559833, -0.0283623, -0.002461434, 0.023956392, 0.010180585, 0.0022470132, -0.0065266187, -0.0056131273, -0.039735418, 0.008629706, 0.024085632, 0.009610754, 0.0360932, -0.011490609, -0.003518852, 0.0026053605, -0.014745106, 0.022252774, 0.004229672, 0.03374338, 0.01288875, 0.041850254, -0.021630073, -0.014451379, 0.04072234, -0.0034483576, -0.014839099, -0.020748891, 0.016049255, -0.004068122, 0.014028412, 0.028432794, -0.024273617, -0.0013217725, -0.013382212, 0.022511253, -0.06114226, -0.055549692, -0.021994295, -0.0002839975, -0.01715367, 0.0360932, 0.021700567, -0.017271161, -0.010174711, -0.018234586, 0.00094213005, -0.012042816, 0.0036950884, 0.049910128, -0.009910356, -0.0039036346, -0.008400599, 0.03881899, 0.018504815, -0.0005918603, 0.06743977, 0.000104181374, 0.013899172, 0.003959443, 0.007049453, -0.01212506, 0.005410455, -0.03675115, 0.0069319624, 0.06137724, 0.022323268, 0.013311718, 0.044411555, -0.017705876, 0.00460858, 0.0053047137, 0.02025543, -0.0067616007, -0.038701497, -0.0007122885, 0.00230429, -0.007566413, -0.0061858953, 0.008935182, -0.02306346, -0.01482735, 0.005924478, 0.023227949, -0.043636117, 0.0057923007, 0.012101562, -0.008917558, -0.022910723, 0.031746037, 0.023803653, -0.0012600898, -0.012336543, 0.03261547, -0.031957522, 0.005008049, 0.02566001, 0.03698613, 0.03663366, -0.035858218, 0.0009737057, -0.026223965, 0.00577174, 0.026341457, -0.04201474, 0.0015934701, -0.020631399, 0.0064032534, 0.0020002823, -0.045327984, -0.0069025895, 0.045938935, 0.015579292, -0.013617193, -0.0005947976, -0.010409692, 0.006884966, 0.008647329, -0.030923601, 0.046032928, -0.0068262205, -0.008664953, 0.014498375, -0.0541398, -0.001041263, 0.0059949723, -0.005154913, -0.0174004, -0.023357188, 0.006984833, 0.005616064, -0.015614538, 0.015896518, -0.031299572, 0.020349422, -0.015802525, -0.020748891, -0.0028139066, -0.0003019883, -0.023897646, -0.0029886744, 0.021124862, 0.01250103, -0.002151552, -0.042743184, 0.0013188352, -0.05442178, -0.029090744, 0.014427881, -0.04805377, -0.002816844, 0.00031061654, -0.040393367, -0.015015336, 0.016096251, 0.022205777, 0.029208234, 0.0068085967, -0.014357386, 0.015262066, 0.0027037591, -0.010597678, 0.0021060242, -0.010004349, -0.0040563727, 0.008999802, 0.010533058, -0.028009828, 0.012348292, -0.014028412, 0.010280453, 0.002800689, 0.005580817, -0.015074081, -0.0071316967, 0.007178693, -0.00079600076, -0.019221509, -0.019573981, -0.03428384, 0.01765888, -0.024931567, -0.007396051, -0.0006289434, 0.004071059, 0.031934023, -0.022111785, 0.0019885332, -0.0012233738, -0.062223174, 0.017318157, 0.010092467, -0.016624961, 0.01431039, -0.007090575, 0.0045468975, -0.0026259213, -0.0028873386, 0.066170864, -0.015826022, 0.0023880024, -0.012136809, 0.012642019, 0.03529426, -0.007854266, -0.020596152, 0.021465585, 0.022640495, 0.056771595, 0.021324595, -0.0037479594, 0.008870562, -0.002066371, -0.04140379, 0.010932527, 0.0013114921, -0.0015361933, -0.0065324935, 0.05183698, 0.004047561, 0.021759313, -0.058698446, -0.017976105, 0.021818059, -0.035270765, -0.021430338, -0.04720784, 0.05893343, 0.035670232, 0.053152878, -0.038466517, -0.061424237, -0.018986527, -0.008012879, 0.0026141722, 0.01379343, -0.009129042, 0.007889513, 0.0005878216, 0.012806507, 0.020972123, 0.028573783, -0.02500206, -0.033578895, -0.020337673, 0.026881915, -0.02784534, 0.007478295, -0.011326121, 0.028785268, 0.022863727, 0.014980088, 0.01754139, 0.0056395624, 0.032944445, 0.022335017, -0.004693761, 0.026223965, 0.0079012625, 0.028526787, -0.012689016, 0.030923601, -0.018728048, -0.05428079, 0.0036833393, 0.042484704, 0.0014436693, -0.01703618, 0.07322032, -0.033085432, 0.0090233, 0.021900302, -0.008635581, -0.019550484, 0.0008841189, 0.022194028, -0.009005676, -0.037150618, 0.020220181, -0.008382975, 0.027892336, -0.014216397, -0.016084502, 0.05503273, -0.012195554, -0.010004349, -0.020090941, 0.0071140733, -0.014803852, -0.0528239, -0.011120512, 0.0013482079, 0.04748982, -0.016061004, -0.014322139, 0.014557121, 0.026858417, -0.0071728188, -0.029067246, 0.010133589, -0.004919931, 0.008870562, -0.009510887, -0.030218655, 0.01881029, -0.0050961673, 0.034495324, -0.009364024, -0.012430536, -0.015179822, 0.028150816, -0.0030811985, -0.0028065636, 0.01767063, -0.034330837, 0.004282543, -0.015967011, 0.008758945, 0.019339, 0.031041093, -0.011678594, 0.01832858, 0.0057981755, -0.004596831, -0.0036627783, -0.009663626, -0.008559211, -0.0013313186, -0.013852175, -0.003941819, -0.027774846, -0.00457627, -0.021207105, -0.022335017, -0.04206174, -0.038396023, 0.019879458, 0.025049057, 0.01559104, 0.005557319, 0.003066512, 0.010691671, -0.013205975, -0.02011444, 0.023415934, -0.025425028, 0.026529443, -0.0036157821, -0.020267177, 0.015978761, 0.022663992, 0.01945649, 0.0069025895, 0.002929929, 0.043095656, 0.03982941, 0.023662664, -0.0044852146, 0.035505746, -0.0073255566, -0.0043970966, 0.005072669, -0.0011242409, 0.0033661139, -0.010333324, -0.019280255, -0.0037920184, 0.0079893805, 0.016683705, -0.03188703, 0.021900302, -0.012912248, -0.014533623, -0.0015435365, -0.005149038, 0.036445674, 0.085956335, -0.0093464, -0.04006439, 0.024579093, 0.0139931645, 0.0013034146, 0.0070964494, -0.0068027223, -0.035858218, 0.004259045, -0.00014475244, -0.024297114, 0.013605445, -0.028385798, 0.04243771, -0.026270961, -0.005759991, 0.025988985, 0.025096053, 0.019761967, 0.030195158, 0.024132628, -0.015121077, -0.0030518258, 0.0028241873, -0.023921145, 0.03106459, 0.022487756, 0.0244851, 0.027821843, 0.01340571, 0.0067322277, -0.065653905, -0.038372524, -0.0011785805, -0.0019327251, 0.04328364, 0.014886095, -0.04189725, 0.020795887, -0.0021941422, 0.020208433, 0.017893862, 0.016965684, 0.02166532, 0.018410822, 0.020690145, -0.0075487895, -0.0131119825, 0.007983506, 0.02784534, -0.029983675, -0.014427881, 0.008371226, 0.03841952, -0.021630073, -0.05169599, 0.0036657157, -0.0031898776, 0.0102569545, 0.03494179, 0.010721044, 0.03494179, -0.024673086, -0.016836444, 0.023427682, -0.01456887, -0.0335319, -0.0001594388, -0.005328212, 0.033343915, 0.0018871974, -0.019397745, -0.01263027, 0.011390742, 0.022910723, 0.029725194, 0.009939729, -0.006268139, 0.032568473, -0.014275143, -0.042743184, 0.010010224, 0.04483452, 0.022710988, 0.00042774025, -0.01057418, -0.011807834, -0.03207501, -0.013417459, 0.0016859942, 0.041286297, -0.020549156, -0.03313243, 0.01044494, -0.0028109695, 0.018904284, 0.029302226, -0.013570198, 0.00018963763, 0.028338801, 0.02257, -0.00068915746, 0.014122404, -0.03313243, -0.022605246, 0.017600134, 0.014122404, -0.030712118, 0.027633857, 0.02333369, -0.047231335, -0.027657354, -0.010891405, 0.009446267, 0.020208433, 0.0043442254, 0.017694127, 0.0031575675, 0.00082463917, 0.017623633, -0.010292201, -0.033931367, -0.01687169, 0.0042913547, -0.020854633, 0.030665122, -0.020043945, -0.043518625, -0.007360804, -0.03040664, 0.0129005, 0.006039032, 0.03249798, -0.007789646, 0.01109114, 0.039688423, -0.03534126, -0.031088088, 0.036798146, -0.0012020787, -0.02847979, 0.014580619, 0.032028016, -0.011537605, 0.019902956, 0.007725026, -0.007889513, 0.03536476, 0.042461205, 0.0017932047, -0.012642019, -0.001332053, -0.020737141, -0.014980088, 0.005386957, 0.0009905951, 0.0014502781, -0.0021603636, 0.02410913, -0.003927133, -0.0322395, -0.002699353, -0.008283108, -0.008970429, 0.01700093, 0.0072021913, 0.014404383, -0.0029181798, 0.009416895, -0.0054515772, 0.006550117, 0.009851611, -0.030665122, 0.010068969, 0.0009502075, -0.035858218, 0.033461403, 0.0036657157, 0.01972672, -0.01754139, -0.020220181, 0.0029593017, 0.011402491, -0.0002964809, -0.038959976, -0.033719886, -0.015685033, -0.01741215, -0.019444741, -0.0005724009, 0.02422662, -0.012207303, -0.014651113, 0.028174315, 0.03310893, 0.028855762, -0.0072785607, 0.0025554267, 0.040322874, -0.009839862, -0.0025392717, 0.03132307, 0.005533821, -0.015191572, -0.006338633, -0.0009487389, -0.0058745444, -0.0049023074, -0.0074606715, -0.021359842, 0.0070553278, -0.008852938, 0.018998276, -0.015097579, -0.0134644555, 0.020948624, 0.029537208, 0.012783009, -0.0030988222, -0.031299572, 0.019844212, -0.018528312, -0.010086592, -0.0072550625, -0.0021809246, -0.0030371393, 0.04615042, 0.00786014, -0.054938737, 0.0059920354, -0.0019958764, -0.010051345, 0.009446267, -0.01767063, 0.0073373057, 5.3329848e-05, 0.026834918, -0.001473042, -0.0023777217, -0.0007170616, -0.018199338, -0.000976643, 0.001108086, -0.007425424, 0.020643149, 0.015532295, -0.0064032534, 0.0111968815, 0.03247448, -0.035505746, 0.011402491, 0.011831332, -0.020913377, -0.008394724, -0.028761769, 0.018140594, 0.026717428, 0.013382212, 0.016061004, -0.018669302, 0.0019973451, -0.034730308, 0.0020560906, -0.017611884, 0.00960488, 0.0018578246, 0.035223767, -0.004922868, 0.007848391, -0.0035893465, 0.03374338, -0.02011444, 0.02488457, 0.037103623, -0.0017785183, -0.006573615, -0.01687169, 0.034236845, -0.038325526, 0.04206174, 0.014427881, -0.013487954, -0.019996949, 0.035811223, 0.03245098, 0.050615072, 0.008811817, 0.04215573, 0.008189115, -0.0062740133, 0.008958681, 0.007883638, 0.039923403, -0.0060067214, 0.021559577, 0.020196684, -0.02902025, -0.020654898, -0.007772022, 0.012348292, 0.01469811, 0.008623831, 0.0007857203, 0.005331149, 0.009980851, 0.011214505, -0.056160644, 0.007789646, 0.0032750585, -0.0017403337, -0.04666738, -0.0054222043, -0.041568276, -0.0017491456, 0.034565818, 0.019327251, -7.361538e-05, -0.012324794, 0.04626791, -0.0024188436, 0.022616995, -0.029161237, 0.044176575, -0.01623724, -0.03686864, -0.007478295, -0.00477013, -0.01560279, -0.034518823, -0.014709859, 0.0015303188, -0.022969468, 0.0068379696, 0.019656226, -0.029372722, -0.0005430282, 0.030148162, 0.018140594, 0.059262402, -0.0014950716, -0.010726918, -0.00760166, 0.004120993, -0.010397944, -0.0109912725, -0.0076897787, -0.00032640438, 0.020607902, -0.0070847003, -0.015238568, 0.029866183, -0.011901827, -0.032216, -0.0070259552, 0.012089812, -0.011308498, 0.0034630438, 0.0005779083, 0.00509323, -0.0058745444, -0.015015336, 0.015226819, -0.021265851, -0.014192899, -0.030970598, -0.0063033863, 0.003953568, 0.0018710424, 0.011267376, 0.0022426073, 0.019691473, 0.033437908, 0.027915835, 0.025542518, -0.0033191175, -0.011067642, 0.05789951, 0.0013650972, 0.024837574, -0.0042561074, -0.009234783, -0.013852175, -0.022158781, -0.024026886, 0.028291805, 2.0067535e-05, 0.059027422, -0.003216313, 0.019938203, 0.045821447, 0.061330244, -0.003756771, 0.0029049623, 0.014651113, -0.025754003, 0.002832999, 0.0136994375, 0.015438302, 0.024720082, -0.044082582, -0.016190244, -0.0065266187, -0.015685033, 0.01327647, 0.043260146, -0.015708532, 0.013675939, 0.0270934, 0.019432992, 0.002860903, 0.031534553, -0.01275951, 0.019057022, -0.00217505, 0.05775852, 0.005945039, 0.014192899, -0.037315104, -0.0077309003, -0.0015479424, 0.0065794894, -0.022123534, 0.022229277, -0.012430536, 0.0045175245, 0.0050756065, -0.03364939, -0.015297313, -0.01469811, 0.00882944, -0.02037292, -0.013910921, 0.008988053, -0.011355494, -0.015121077, -0.0054515772, -0.0033308666, -0.028033325, 0.05888643, 0.03212201, -0.015262066, -0.02103087, 0.022898974, -0.0024893382, 0.0079893805, 0.011760837, 0.0270699, 0.0033484902, 0.002393877, 0.0032221875, 0.021242352, 0.03172254, 0.018234586, 0.010092467, -0.031111587, -0.023122206, -0.0044059083, -0.020008698, 0.0067616007, 0.0053340863, -0.008500465, 0.0106975455, -0.036774646, 0.03158155, -0.014498375, 0.008847063, -0.03597571, 0.0038713247, 0.027022904, 0.031041093, 0.03416635, 0.020220181, 0.013429209, -0.025730504, -0.007196317, 0.0139344195, -0.00078939187, 0.014686361, 0.030829608, 0.0138756735, -0.011085265, 0.0020751827, 0.0014767136, 0.040886827, 0.013429209, 0.027774846, 0.027304882, 0.00908792, 0.030336147, 0.013417459, -0.027492868, 0.0082243625, 0.0020590278, -0.01186658, -0.009599006, 0.015191572, -0.027821843, -0.02979569, -0.0011183664, 0.012923998, -0.009381647, -0.016566215, 0.0029725195, -0.016166747, 0.01050956, 0.019162763, -0.016566215, -0.015943514, 0.005008049, 0.013311718, -0.021923799, 0.0090233, -0.0006730025, 0.010856158, -0.029372722, 0.022523003, -0.011913576, -0.009880983, 0.026881915, -0.006691106, -0.034636315, -0.02087813, 0.009510887, 0.0073549296, 0.025354533, 0.041027818, 0.02293422, 0.015520547, 0.047019854, 0.0050785434, -0.027986329, 0.040957324, 0.011008896, 0.017494394, -0.014839099, 0.01418115, -0.005404581, 0.00096562825, 0.0014047504, 0.029302226, -0.005137289, -0.02991318, -0.00057937694, -0.027116897, -0.020748891, 0.017435648, 0.026599936, -0.013029739, 0.04215573, -0.006973084, 0.006368006, 0.013006241, -0.048406247, 0.018916033, 0.019268505, -0.02732838, -0.010856158, 0.02629446, -0.011326121, 0.013511452, 0.055220716, -0.029466715, 0.013499703, -0.0032838702, -0.0049904254, 0.0031340695, 0.021747563, -0.045398477, -0.0063210097, -0.0031516931, -0.07895388, 0.009287654, 0.015931765, 0.0040504984, 0.02228802, 0.009340526, -0.028902758, 0.00947564, 0.004065185, -0.01559104, 0.013511452, 0.013946168, -0.017294658]"
../../../gradio,../../../gradio/gradio/components,slider.py,"""""""gr.Slider() component.""""""

from __future__ import annotations

import math
import random
from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import FormComponent
from gradio.events import Events


@document()
class Slider(FormComponent):
    """"""
    Creates a slider that ranges from {minimum} to {maximum} with a step size of {step}.

    Demos: sentence_builder, slider_release, interface_random_slider, blocks_random_slider
    Guides: create-your-own-friends-with-a-gan
    """"""

    EVENTS = [Events.change, Events.input, Events.release]

    def __init__(
        self,
        minimum: float = 0,
        maximum: float = 100,
        value: float | Callable | None = None,
        *,
        step: float | None = None,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        randomize: bool = False,
    ):
        """"""
        Parameters:
            minimum: minimum value for slider.
            maximum: maximum value for slider.
            value: default value. If callable, the function will be called whenever the app loads to set the initial value of the component. Ignored if randomized=True.
            step: increment between slider values.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, slider will be adjustable; if False, adjusting will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            randomize: If True, the value of the slider when the app loads is taken uniformly at random from the range given by the minimum and maximum.
        """"""
        self.minimum = minimum
        self.maximum = maximum
        if step is None:
            difference = maximum - minimum
            power = math.floor(math.log10(difference) - 2)
            self.step = 10**power
        else:
            self.step = step
        if randomize:
            value = self.get_random_value
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def api_info(self) -> dict[str, Any]:
        return {
            ""type"": ""number"",
            ""description"": f""numeric value between {self.minimum} and {self.maximum}"",
        }

    def example_payload(self) -> Any:
        return self.minimum

    def example_value(self) -> Any:
        return self.minimum

    def get_random_value(self):
        n_steps = int((self.maximum - self.minimum) / self.step)
        step = random.randint(0, n_steps)
        value = self.minimum + step * self.step
        # Round to number of decimals in step so that UI doesn't display long decimals
        n_decimals = max(str(self.step)[::-1].find("".""), 0)
        if n_decimals:
            value = round(value, n_decimals)
        return value

    def postprocess(self, value: float | None) -> float:
        """"""
        Parameters:
            value: Expects an {int} or {float} returned from function and sets slider value to it as long as it is within range (otherwise, sets to minimum value).
        Returns:
            The value of the slider within the range.
        """"""
        return self.minimum if value is None else value

    def preprocess(self, payload: float) -> float:
        """"""
        Parameters:
            payload: slider value
        Returns:
            Passes slider value as a {float} into the function.
        """"""
        return payload
","The code defines a `Slider` component for Gradio, which is a slider input element that ranges from a specified minimum to maximum value with a specified step size. The component can be customized with various parameters such as label, info, step size, visibility, and randomization of initial value. The component can be used in Gradio interfaces for creating interactive applications. The code also includes methods for generating random values within the specified range, handling preprocessing and postprocessing of values, and providing API information for the component.","[-0.039117265, 0.020525364, -0.015385181, -0.008712375, -0.022057988, -0.020124523, 0.017707694, -0.002290093, -0.0026201964, -0.024356922, 0.0068319635, -0.019358212, -0.047959324, 0.0112470975, 0.023343032, 0.007562907, -0.0074509075, -0.0043473453, -0.03447224, 0.043243557, -0.024710605, -0.054325603, -0.013663927, 0.016422648, -0.011653832, -0.0635685, -0.0036665066, 0.01737759, 0.006961647, 0.01319235, -0.036452856, -0.02843606, -0.008199535, -0.0022635667, -0.009036583, -0.051307514, -0.01880411, 0.0416402, -0.017766641, -0.040249046, -0.017283276, -0.027115645, -0.047511324, 0.046120174, 0.02117378, 0.03558044, 0.01089931, -0.0022193566, 0.004444608, 0.03864569, -0.041168623, -0.013958662, -0.0124496175, -0.022435248, 0.026738383, 0.066633746, -0.039046526, 0.014890025, 0.023932504, -0.03753748, -0.0021780937, -0.022105144, -0.009861842, 0.0024389343, 0.003183141, 0.02219946, -0.023956083, 0.02379103, 0.042701244, -0.011294255, 0.03381203, -0.03258593, 0.013640348, -0.04303135, -0.01578602, 0.0012047304, -0.019098844, -0.018922005, 0.054514233, 0.017943483, -0.042088196, 0.0038580846, -0.03520318, 0.008682901, -0.03397708, 0.012426038, -0.020053787, 0.0143477125, -0.014076556, -0.06290829, -0.048855316, -0.043078505, 0.00078473263, 0.09912536, 0.0062307036, 0.0035456652, -0.009655527, 0.004871974, 0.0215982, 0.014972552, 0.028884055, -0.010692995, -0.0036930328, -0.040720623, 0.017908115, -0.04220609, -0.011942673, 0.04560144, -0.026879856, -0.03202004, 0.035556864, -0.0069970153, -0.04234756, -0.0021736727, 0.020501785, -0.04461113, 0.009573001, -0.03600486, -0.028223848, -0.013923294, -0.031737093, -0.018674426, 0.01797885, -0.029072687, 0.035061706, -0.031147623, -0.023885345, -0.04993994, -0.029190581, 0.02940279, 0.0025096708, -0.009455107, 0.009219319, -0.044516813, -0.017719485, 0.008582691, -0.03381203, -0.007356592, -0.021126624, 0.003569244, -0.007539328, -0.015562022, 0.034637287, -0.021161992, -0.030534573, -0.037678957, -0.034094974, 0.044092394, -0.041074306, 0.022022618, 0.012025199, 0.027870167, -0.03758464, 0.013098035, -0.011588991, 0.02278893, 0.04984563, -0.029850788, 0.012031093, 0.0005342077, -0.013628558, 0.020655047, 0.016740963, -0.020666836, -0.015927494, 0.014135503, -0.008458902, 0.009001215, -0.027988061, 0.06616217, 0.00415282, -0.056070436, -0.01978263, -0.013699295, -0.012650037, -0.0071738563, 0.02158641, -0.011942673, 0.006943963, 0.006655122, -0.03720738, 0.018367901, -0.0033334559, 0.023684926, 0.009077846, -0.025370812, 0.0039317682, -0.04680396, -0.0051696566, -0.015467707, -0.012614669, 0.0056264964, 0.011282466, 0.03263309, 0.0038433478, -0.0331754, 0.029520685, 0.010527943, -0.015349813, 0.012897615, 0.017130014, -0.009614265, 0.017896324, -0.032939613, -0.062719665, -0.03456655, -0.031359833, -0.032468036, 0.030958991, -0.007179751, 0.01661128, -0.039777473, 0.029237738, -0.046355963, -0.026738383, 0.041074306, 0.02843606, 0.02321335, -0.00091220567, 0.008010904, -0.028836899, 0.009366686, 0.0012231513, -0.020678626, 0.029520685, -0.011783516, 0.04199388, -0.0059418627, 0.063096926, 0.0055203913, 0.058947053, 0.0031241938, 0.009443318, -0.0060067046, 0.0076277484, -0.01641086, -0.011553623, -0.025276497, 0.018132113, -0.0049544997, -0.042300407, -0.01899274, 0.018120324, -0.05404266, 0.011034888, 0.029308476, -0.014571711, -0.029921524, 0.05234498, 0.04142799, -0.055457387, -0.006218914, 0.009013005, 0.027516484, 0.010539733, 0.025323654, 0.019428948, 0.046686064, 0.011742253, -0.030487416, 0.0002376303, -0.08526102, -0.06243672, 0.031124044, -0.010221419, 0.0436444, -0.0022001988, -0.0074744863, -0.00090852147, -0.009655527, -0.014182661, -0.037938323, 0.028671846, 0.0022635667, 0.036169913, -0.0021103045, 0.055834647, 0.04725196, -0.012708984, 0.009402055, -0.042323984, -0.016186861, -0.0018052534, 0.024286186, -0.02982721, 0.02177504, 0.031548463, 0.0035780862, 0.02737501, -0.05262793, 0.0022827247, -0.010916994, 0.035085287, -0.03447224, -0.022847878, 0.03397708, 0.0018244113, 0.0107991, -0.005959547, -0.028247427, 0.02518218, -0.010074051, 0.00027355118, -0.009343108, -0.011034888, 0.019747263, 0.023437347, 0.011140993, -0.004780606, -0.0076749064, 0.0033246137, 0.031737093, 0.03659433, -0.042701244, -0.058051057, 0.013722874, 0.033057507, 0.0015856758, 0.009119109, -0.057673797, 0.019664736, 0.012378881, 0.056353383, -0.032491617, -0.008647532, -0.03558044, -0.030864676, -0.024026819, 0.009962052, -0.054702863, 0.03819769, -0.005016394, -0.02380282, 0.05640054, 0.020277787, -0.018143903, -0.0248285, 0.024734184, -0.04465829, 0.03400066, -0.01500792, -0.009071952, -0.00429724, 0.017165381, 0.044446077, 0.031477727, -0.04182883, 0.0026761962, 0.02996868, -0.023248717, -0.021751462, -0.023614189, -0.008470692, -0.00031757724, 0.063474186, -0.018509375, -0.012319934, -0.048336584, -0.09884242, -0.025064288, -0.0499871, 0.05187341, 0.001566518, 0.012143093, 0.026974171, -0.010203735, -0.01841506, -0.05225067, -0.0015562022, -0.014772131, 0.039305896, -0.0023726188, -0.011930884, -0.009018899, -0.04762922, 0.013817189, 0.016693804, 0.0066138594, 0.0001080389, -0.04659175, 0.023319455, 0.015526653, -0.014500975, -0.02779943, 0.017719485, -0.024946393, -0.0017787273, 0.06951036, 0.01089931, 0.0013233613, -0.026101755, -0.02581881, -0.0014884131, -0.009802895, 0.02098515, 0.0020204103, 0.0002105515, 0.010451312, 0.02038389, -0.001283572, -0.00055704964, -0.050458677, -0.035934124, 0.030864676, -0.052109193, -0.03060531, 0.025842387, 0.045342073, -0.0072976453, 0.009119109, 0.027516484, -0.02978005, 0.027870167, -0.028247427, 0.012213829, -0.0068260687, -0.0044357656, -0.021244518, -0.008741848, 0.06470028, 0.0076749064, -0.013357402, 0.00090704777, -0.04105073, 0.014005819, 0.04614375, 0.03235014, 0.03298677, 0.023932504, -0.011028994, 0.010527943, 0.024734184, 0.009573001, 0.011559517, -0.01619865, -0.004621449, 0.020949783, -0.0051608146, 0.052486457, -0.006425229, -0.024309764, 0.055080127, 0.0021663043, 0.017825589, -0.060739044, 0.018120324, 0.013227719, -0.019711895, -0.032232247, -0.021444937, -0.06540765, 0.012225619, -0.03499097, 0.0027778798, 0.042371143, 0.01876874, 0.04993994, -0.027846588, -0.004014294, 0.0016593596, -0.024309764, 0.03659433, -0.058051057, 0.051731933, -0.02520576, -0.027044907, -0.0015282023, 0.008730059, -0.013286666, -0.007663117, -0.008211324, -0.024639867, 0.036452856, 0.00026213017, -0.031737093, 0.051448986, -0.018686216, -0.041097887, -0.020230629, -0.039706733, -0.024922814, 0.036122754, 0.0074450127, -0.011306045, 0.027823009, 0.08785469, 0.024899235, -0.042300407, -0.016964963, 0.0014464133, 0.004863132, -0.016505174, -0.0010507312, -0.010132998, 0.029544262, 0.019865157, -0.04359724, 0.05456139, -0.034920234, -0.01958221, 0.045082707, -0.027092066, -0.0039317682, 0.056353383, 0.018226428, 0.003987768, 0.033576243, -0.012921194, 0.013546033, -0.00799322, -0.031878565, -0.019287476, -0.01140036, -0.018886635, 0.001111152, -0.0057237586, -0.0016534649, 0.01500792, -0.000691891, 0.0005721548, -0.011995725, 0.030110154, -0.00459787, -0.04659175, 0.009455107, 0.016658437, 0.022694616, -0.041475147, -0.008694691, -0.022859666, -0.012119514, -0.0030416679, -0.03001584, 0.053618237, -0.05423129, -0.019263897, 0.016116124, 0.013569611, -0.018910214, -0.048147954, -0.008712375, -0.010486681, 0.009620159, 0.013098035, -0.0155502325, 0.028247427, -0.010351103, -0.04498839, 0.00740375, 0.016764542, 0.038504213, -0.05923, 0.04043768, -0.032656666, 0.01663486, -0.009413844, 0.03459013, 0.012897615, 0.0035987175, 0.0024831446, -0.029355632, 0.004916184, 0.025583021, 0.04298419, -0.0049603945, -0.05946579, -0.008270271, -0.035934124, -0.012744353, 0.022930404, -0.015703496, 0.0002860774, 0.012284566, 0.025111444, -0.023696715, -0.004211767, -0.012815089, -0.030841097, 0.028035218, -0.017849168, 0.036452856, -0.031289097, 0.021315254, -0.041946724, -0.061352093, -0.018615479, 0.00092546875, 0.03536823, 0.01899274, -0.011252993, -0.0411922, 0.0022119882, -0.015679916, 0.028294586, -0.010468996, 0.025229339, -0.0018008325, 0.036122754, -0.015632758, -0.027988061, 0.020973362, -0.017990641, 0.012319934, 0.050505836, 0.018061377, -0.0028692477, -0.006059757, 0.0108521525, -0.023177981, -0.008476586, -0.024050398, 0.041687354, -0.029850788, -0.03859853, -0.021892935, -0.004011347, -0.0086534275, 0.014359502, 0.04036694, -0.014088346, -0.03253877, -0.005146078, -0.002007147, -0.024687026, 0.018014219, 0.03253877, -0.014111924, -0.026148913, -0.006425229, 0.008671111, 0.01880411, 0.008217219, 0.01000921, -0.002876616, 0.013086245, -0.013675716, -0.01622223, -0.0019054635, 0.0077574323, -0.04699259, 0.023012929, 0.035910543, 0.0075275386, 0.0015311497, 0.01682349, 0.025370812, 0.012367092, 0.029662156, 0.03098257, 0.0084647965, -0.04359724, 0.01617507, -0.013451718, -0.018132113, -0.0133338235, 0.03661791, -0.025087865, -0.01560918, 0.018733373, -0.0049780784, -0.01240246, 0.012178461, 0.0069321734, 0.0054083923, 0.011364992, 0.030911835, 0.023873556, -0.021468516, -0.015255497, 0.03560402, -0.02400324, 0.029709315, -0.0014235714, 0.04039052, 0.046921853, -0.026101755, -0.013699295, -0.009643738, -0.0009556791, -0.0042147143, -0.03543897, -0.0033865082, -0.031147623, -0.0073506976, -0.03277456, -0.024498396, -0.00014064398, 0.043620817, 0.013251297, -0.041734513, -0.02020705, 0.035556864, 0.026502594, 0.00088862685, -0.014689606, 0.055646017, 0.006560807, 0.0054968125, 0.00938437, -0.027445748, 0.021869356, 0.016894225, 0.012897615, -0.0003127878, -0.0045094495, 0.0047157644, -0.0035898755, -0.02038389, -0.009767527, -0.020489996, 0.0128622465, -0.016375491, 0.00147515, -0.01560918, -0.005909442, 0.010085841, 0.028978372, -0.032727405, -0.015043288, 0.008500165, -0.045907963, -0.008765426, -0.04345577, 0.0021014623, -0.016552333, -0.011382676, -0.029379211, 0.013699295, -0.0143477125, 0.00046605014, -0.01619865, 0.026950592, 0.043290716, 0.025276497, -0.007120804, 0.041875985, -0.0011023099, -0.0205961, 0.01121173, -0.025677336, 0.0108521525, 0.004188188, -0.032515194, -0.013510665, 0.026290385, 0.004029031, 0.029921524, -0.025653757, -0.01361677, 0.012225619, -0.002231146, 0.0075511173, -0.01639907, -0.014300555, 0.007244593, -0.0060155466, -0.018886635, -0.041027147, -0.020159893, 7.142725e-05, -0.00257746, 0.009178056, -0.0149489725, 0.0056117596, -0.006033231, -0.053759713, 0.016151492, 0.014713184, -0.019735474, 0.058286846, 0.0016387281, -0.020855468, -0.0069027, -0.006655122, 0.056117594, -0.023460926, -0.021303466, -0.009060162, 0.009785211, 0.0033658766, 0.003301035, -0.006218914, 0.022906825, -0.02619607, 0.0276108, -0.0040732413, 0.0078635365, 0.023319455, 0.01700033, -0.013982241, 0.004303135, -0.024451237, -0.0028707215, -0.027846588, 0.00187599, 0.027280696, 0.009154477, -0.049091104, 0.021515675, 0.025323654, -0.009183951, 0.017460117, -0.04536565, 0.012744353, 0.0256066, 0.04142799, 0.021833988, -0.042182513, -0.01361677, -0.024451237, 0.017542643, 0.00031739305, -0.024239028, 0.0114534125, 0.0062483875, -0.019523263, 0.016068967, 0.028459636, -0.031737093, -0.007238698, -0.024132924, -0.01421803, -0.014595291, 0.017766641, 0.002758722, 0.017943483, 0.019865157, 0.046544593, 0.031666357, 0.0038374532, 0.0027940902, -0.01698854, 0.0021663043, 0.025441548, -0.02221125, 0.043950923, 0.002307777, 0.043502923, 0.009956157, 0.0036458753, 0.023437347, 0.019087056, -0.0058622845, -0.012437828, 0.038292006, 0.014135503, 0.0060067046, 0.043290716, 0.03442508, 0.014170871, -0.034047816, -0.013699295, 0.008541428, 0.0058121793, 0.013887926, -0.014288765, 0.011471096, 0.033104666, 0.015514865, 0.058381163, -0.014736763, -0.013675716, -0.005906495, 0.011553623, -0.044328183, -0.03642928, 0.0019997787, -0.006159967, 0.042088196, -0.021692516, -0.0089540575, -0.011176361, 0.0051077623, 0.0027484063, -0.055504546, 0.008258482, 0.0022473563, 0.006053862, -0.017071066, -0.020466417, 0.0061894404, 0.013758242, 0.028860478, -0.008889216, -0.020537153, -0.035462547, 0.0025155654, 0.009354897, 0.029426368, 0.012272776, -0.009914895, -0.022953982, -0.016658437, 0.034330763, 0.025488706, 0.02999226, -0.0054290234, 0.008765426, 0.019594, -0.0074509075, -0.02038389, 0.02140957, -0.026337544, 0.0005559444, 0.01862727, -0.024097554, -0.025535863, 0.004992815, -0.018132113, -0.027728694, -0.02057252, -0.021845778, 0.024215449, 0.03060531, 0.023826398, 0.027846588, -0.0029724052, -0.006778911, -0.014135503, -0.029945103, -0.0035220864, -0.012166671, 0.021256307, 0.020265996, -0.017247908, -0.011995725, 0.024239028, 0.063332714, 0.012072356, -0.0007279961, 0.035934124, 0.008765426, 0.027068486, 0.001224625, 0.00889511, -0.03633496, -0.02001842, 0.008069851, 0.003601665, 0.0066256486, -0.014607079, -0.041852407, -0.0025288286, -0.0215982, 0.03753748, -0.015750652, 0.022388091, 0.0001601702, -0.035509706, -0.013027298, 0.0069262786, 0.02501713, 0.08252587, 0.0068260687, -0.0061128093, -0.01359319, -0.015668126, 0.030133734, 0.038692847, -0.0023755662, -0.010651733, -0.012019304, -0.004771764, 0.002571565, 0.002113252, 0.008111115, 0.047086906, 0.0036724014, -0.022057988, 0.033529084, -0.0033393505, -0.003560402, 0.008712375, 0.007038278, -0.008075746, 0.010274472, -0.03614633, -0.033859186, 0.03956526, 0.027775852, 0.024663446, 0.04659175, 0.022671036, -0.011824779, -0.05904137, -0.03402424, 0.0316192, -0.034260027, 0.03119478, 0.018933794, -0.04161662, 0.029332053, 0.01029805, -0.0040467153, 0.03143057, 0.016788121, -0.024545552, 0.008382271, 0.033764873, -0.003869874, 0.004765869, -0.035344653, 0.024026819, -0.02996868, 0.011158677, 0.0077515375, 0.020289576, -0.028719004, -0.041475147, -0.0033216665, -0.0055380757, 0.024427658, 0.021338833, 0.0011266256, -0.002941458, -0.04446966, -0.03503813, 0.025677336, -0.017684115, -0.00013180192, -0.04779427, 0.01000921, 0.048761003, -0.02340198, -0.005523339, -0.017130014, 0.02878974, 0.013263087, 0.006578491, 0.00078252214, -0.01900453, 0.018544743, -0.026431859, 0.0060214414, 0.004412187, 0.062295247, 0.013734663, -0.028553952, -0.019641157, -0.009390266, -0.043078505, -0.021928303, 0.022564933, 0.055740334, 0.0020012525, -0.028271006, -0.024073977, -0.024309764, -0.0047511323, 0.032326564, 0.010327524, 0.0015414654, 0.022305565, 0.005750285, -0.007781011, 0.023142613, -0.0023166193, -0.020914415, 0.00274988, 0.016623069, -0.009861842, 0.032090776, 0.02857753, -0.02379103, -0.010905204, -0.016057177, 0.022883246, -0.006761227, 0.0020100945, 0.0033776662, 0.0017639905, -0.0048189214, 0.012007515, 0.01737759, -0.0025936703, -0.011577201, -0.021055887, -0.012532144, -0.008122904, -0.0054113395, -0.01440666, -0.004406292, -0.04001326, 0.042229667, 0.017825589, 0.056683484, 0.009313635, 0.030958991, 0.025441548, -0.014512764, 0.00055336545, 0.0067553325, 7.695353e-05, -0.0108344685, -0.014760342, 0.010321629, 0.014159082, 0.039093684, -0.00051873404, -0.017837377, 0.04057915, 0.025064288, 0.00084146915, -0.015668126, 0.018863058, -0.0077574323, -0.0056707063, 0.0053229188, 0.02598386, -0.0012924141, 0.018698005, 0.070170574, -0.020171681, -0.042276826, -0.0036488227, 0.013864347, 0.0002298935, 0.0069321734, 0.014819289, -0.0052433405, 0.024569131, -0.01118815, -0.007633643, -0.00062889134, 0.028082376, -0.016127914, 0.037466746, -0.02857753, -0.0072092246, 0.019511474, 0.0046509225, -0.0016431491, -0.00128873, -0.015255497, -0.006979331, 0.011659727, -0.012932983, -0.012697195, 0.0033511398, -0.004429871, 0.013215929, -0.040932834, -0.0073742764, 0.033340454, -0.00989721, -0.0015311497, -0.00024960394, 0.038150534, 0.026903436, 0.00013327561, 0.015727073, 0.04604944, 0.03381203, 0.0037166118, 0.011164572, -0.00012710458, -0.018261798, 0.0039317682, 4.4739892e-05, -0.021161992, 0.00036823488, -0.029025529, -0.015656337, -0.0005544707, -0.009343108, 0.005641233, -0.053571083, 0.0131451925, 0.032727405, 0.02603102, 0.015632758, 0.0053966027, -0.027917324, 3.2006406e-05, 0.008688795, 0.017636959, 0.0003262351, -0.017967062, 0.0065254387, 0.038480636, 0.015420549, -0.043856606, 0.007097225, -0.020902624, -0.009313635, 0.021881146, -0.010863942, 0.0047688168, -0.014100135, 0.0073860656, 0.009172161, 0.008276166, -0.030770361, 0.0016004125, -0.010038683, 0.01089931, -0.042465456, 0.03183141, 0.043667976, 0.058899894, 0.0019437791, 0.03942379, -0.026526174, 0.014925394, 0.008441218, -0.025064288, -0.020124523, -0.03642928, 0.026927013, -0.012543933, 0.0013491507, 0.025630178, -0.0010175735, -0.0017315696, -0.018356113, 0.012426038, -0.021527464, -0.004244188, -0.0059949155, 0.007716169, 0.019051688, 0.041074306, -0.0025067234, 0.040555574, 0.0043443977, 0.005906495, -0.012013409, 0.0023799872, -0.006719964, -0.012956562, 0.010209629, -0.05078878, 0.03937663, 0.014453817, -0.012767931, -0.019216739, 0.005349445, -0.0058534425, 0.01839148, 0.0236024, 0.005965442, -0.011948568, -0.0038875581, 0.04937405, 0.05159046, 0.058145374, 0.0099502625, 0.014147293, -0.012025199, -0.031713516, -0.015184761, -0.0055881804, 0.027940903, -0.0070854356, -0.021562831, -0.0032067196, 0.018132113, 0.015656337, 0.021727884, -0.017483696, -0.008058062, 0.023437347, -0.008847953, -0.03923516, 0.032680247, 0.0020970413, -0.01821464, 0.028506795, -0.01641086, 0.008529639, -0.0044947127, -0.008382271, -0.008883321, 0.0140647665, -0.0013874662, 0.045742914, -0.012084146, -0.0002374461, 0.028884055, 0.0077456427, 0.0036576646, -0.04621449, -0.033694137, 0.04300777, -0.036853697, 0.0032361932, 0.0320672, -0.01220204, -0.009903105, 0.05060015, -0.0064900704, 0.06620933, 0.022305565, 0.0029370368, 0.009148583, 0.01439487, -0.002982721, -0.017071066, 0.02518218, -0.025630178, -0.020513574, 0.016068967, -0.019641157, -0.021503884, 0.0109111, 0.0018037799, -0.0126382485, -0.037490327, -0.03836274, -0.0030740888, -0.009013005, 0.0057060746, -0.023425559, 0.006460597, 0.025889546, -0.020265996, -0.0033894556, -0.014029399, 0.015255497, 0.0042058723, -0.0019658841, 0.012437828, -0.030770361, -0.0034660867, 0.026644068, 0.0316192, 0.015668126, -0.026078176, -0.012437828, 0.05215635, 0.003368824, 0.009166267, 0.00445345, -0.01723612, -0.023661347, -0.017330434, 0.006837858, 0.028318165, 0.005207972, 0.042489037, 0.0070677516, 0.020702206, -0.026054597, 0.07917768, -0.013428139, 0.0002834985, 0.000103986284, 0.030062998, 0.022647457, 0.009690896, 0.030652467, 0.01118815, -0.0623424, -0.02179862, -0.019735474, -0.023708504, 0.012272776, 0.0051784986, 2.7424196e-05, 0.021044098, 0.03642928, 0.052297827, 0.013781821, -0.0043267137, -0.040979993, 0.0045860806, 0.025535863, 0.046898276, 0.017153593, -0.010486681, -0.051307514, -0.028742583, -0.0059123896, 0.006277861, 0.011376781, 0.030770361, -0.030416679, 0.017530853, -0.013286666, -0.031878565, -0.011818884, 0.010327524, -0.01599823, -0.0076808007, 0.001738938, 0.0021235675, -0.016858857, -0.033953503, 0.019735474, -0.027728694, -0.010958257, 0.057296537, 0.015880335, 0.006495965, -0.0076866955, 0.03659433, -0.0046273437, 0.027988061, 0.0018096745, 0.035533283, -0.033929925, -0.020360311, -0.0043738713, 0.009626053, -0.0011030467, 0.030228049, 0.047464166, -0.05475002, -0.043667976, -0.0036046123, -0.03018089, 0.0019364107, 0.005122499, 0.008087535, 0.02480492, 0.018426849, -0.002153041, -0.011642043, 0.033104666, -0.053476766, -0.02300114, 0.00087610056, 0.025653757, 0.022883246, -0.015632758, 0.0032745088, -0.013286666, 0.011807094, 0.022305565, -0.034778763, 0.035886966, -0.016658437, 0.018179271, -0.0038728213, -0.003760822, 0.011258887, 0.033764873, 0.017224329, 0.02876616, 0.03447224, -0.016363703, 0.021657147, 0.02341377, -0.005163762, -0.00016551228, 0.021786831, -0.017295064, 0.008010904, 0.013062667, -0.010445418, -0.010881626, 0.025960281, 0.02619607, -0.036665067, -0.011182256, -0.018450428, -0.010457207, 0.027681535, 0.016505174, -0.0013742031, -0.04013115, -0.01960579, 0.01980621, -0.012921194, -0.026290385, -0.031737093, -0.004247135, -0.033128243, 0.0077102743, -0.023284085, 0.0062483875, 0.018143903, -0.015762443, -0.020136314, -0.029261317, 0.00013511769, -0.01997126, 0.033481926, -0.00539955, 0.050647307, -0.00030449836, 0.008694691, 0.004338503, 0.009637843, 0.01880411, 0.009313635, -0.008341008, 0.0046273437, -0.0047334484, -0.013722874, -0.020336732, -0.010274472, 0.020348523, 0.0046745013, -0.037301697, 0.014159082, -0.0431964, -0.026243228, 0.011270677, 0.03826843, 0.0068732263, 0.024262607, 0.010103525, 0.0041763987, 0.010763732, -0.04234756, 0.012048777, 0.019381791, -0.03437792, 0.012626459, 0.0103452075, 0.008229009, 0.018615479, 0.013581401, -0.026479017, 0.011718674, -0.005641233, 0.009926683, -0.0060715466, 0.014571711, -0.04279556, 0.023838188, 0.0026511436, -0.08818479, -0.037655376, 0.026691226, 0.03961242, 0.024191871, -0.035344653, 0.019594, 0.016540542, 0.0001372361, -0.011913199, -0.01860369, -0.0037490325, -0.0142533975]"
../../../gradio,../../../gradio/gradio/components,color_picker.py,"""""""gr.ColorPicker() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.events import Events


@document()
class ColorPicker(Component):
    """"""
    Creates a color picker for user to select a color as string input. Can be used as an input to pass a color value to a function or as an output to display a color value.
    Demos: color_picker
    """"""

    EVENTS = [Events.change, Events.input, Events.submit, Events.focus, Events.blur]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: default text to provide in color picker. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be rendered as an editable color picker; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> str:
        return ""#000000""

    def example_value(self) -> str:
        return ""#000000""

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: Color as hex string
        Returns:
            Passes selected color value as a hex `str` into the function.
        """"""
        if payload is None:
            return None
        else:
            return str(payload)

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a hex `str` returned from function and sets color picker value to it.
        Returns:
            A `str` value that is set as the color picker value.
        """"""
        if value is None:
            return None
        else:
            return str(value)
","The code defines a `ColorPicker` component that allows users to select a color as a string input. It can be used as an input to pass a color value to a function or as an output to display a color value. The component has various parameters such as `value`, `label`, `info`, `every`, `show_label`, `container`, `scale`, `min_width`, `interactive`, `visible`, `elem_id`, `elem_classes`, and `render` that can be customized. The component provides methods for generating example payload and value, as well as API information. It also includes methods for preprocessing and postprocessing the color value.","[0.00026058833, -0.0033371842, -0.008057742, 0.06322738, 0.029585475, -0.040057234, 0.010818981, -0.0049217264, -0.003935177, 0.016369013, 0.039417904, -0.021858418, -0.017636646, -0.031878237, 0.036044896, -0.04228386, 0.030489352, 0.01461637, -0.04384911, 0.014241592, 0.017504372, -0.032275062, -0.017250845, 0.032936435, -0.03249552, -0.075220294, -0.038469933, 0.05105809, -0.0044504977, -0.006393284, -0.043518424, -0.041931126, -0.06944429, -0.0061893607, -0.032539614, -0.024514938, 0.01335976, 0.04270273, -0.032693934, -0.0070932386, -0.08769822, -0.009231682, -0.0034474132, -0.0021095083, 0.011739393, 0.04669302, -0.043562517, -0.008570308, -0.024647214, 0.038161293, -0.049823526, -0.014748646, 0.004475299, -0.027160436, 0.020447487, 0.04757485, -0.080158554, 0.005139429, 0.0059909485, -0.01241179, 0.054453146, -0.032627795, -0.07222207, 0.0035934667, -0.00010514817, -0.004194215, 0.017449258, -0.004475299, -0.0056657726, 0.012996004, 0.08037902, 0.018441318, 0.012048034, -0.015354905, 0.007958537, 0.04823623, -0.030202758, -0.019157806, 0.00061590475, 0.027469076, -0.022541838, 0.009270262, -0.037544012, -0.06283055, -0.03317894, -0.017173685, 0.0055142078, -0.014340798, -0.0101851635, -0.021230113, -0.03882267, -0.026631337, -0.017846081, 0.09056418, 0.030797994, 0.051146273, -0.09091691, -0.0339285, 0.018573593, 0.039836776, 0.02466926, -0.015509225, -0.0031360162, -0.010295392, 0.03401668, -0.025484953, -0.022839457, 0.027469076, -0.027865902, 0.0041859476, -0.011193759, 0.026410878, -0.05925913, 0.062213268, 0.0030120085, -0.040872928, -0.0019248746, -0.026278604, 0.010350507, -0.045678914, 0.019786112, 0.002816352, 0.030202758, -0.036860593, -0.032208927, -0.017339028, -0.02482358, -0.04854487, 0.0036155125, 0.015696615, -0.009066339, -0.003389543, 0.005753956, -0.014098294, -0.005489406, -0.0020034127, -0.06979703, -0.020238051, -0.025484953, 0.022596953, 0.05978823, -0.037676286, 0.027513169, 0.009066339, -0.018430296, -0.031745963, -0.05079354, 0.0499558, -0.05136673, 0.038403798, -0.0054150014, 0.009981239, -0.01795631, -0.00975527, 0.023985839, 0.006459422, 0.051543098, -0.033421446, -0.032980528, -0.0294532, -0.013602263, 0.030114574, 0.0008163838, -0.032848254, -0.007671941, -0.038558118, -0.02266309, 0.0025903825, -0.025749505, 0.040409967, 0.030114574, -0.026895886, 0.005401223, 0.00671846, 0.0086143995, 0.011772461, 0.035074882, 0.012136217, 0.010085957, -0.0028797337, 0.0036044896, 0.017316982, -0.009722201, 0.021726144, -0.004050917, -0.047442578, 0.0022762297, -0.026410878, 0.0020626609, -0.034986697, 0.019466449, 0.014340798, 0.024074022, -0.026587244, -0.020028617, -0.005511452, 0.038293567, -0.008664003, 0.0039048637, -0.049999893, 0.014969104, 0.05268948, 0.025992008, -0.005492162, -0.009369468, 0.04137998, -0.033443492, -0.00058283604, 0.029387062, -0.032892346, 0.011893713, 0.007870354, 0.029276833, -0.0019221188, -0.039638363, -0.0036127567, -0.004577261, 0.044091616, -0.00834985, 0.018893257, -0.035471704, 0.017945288, 0.07764534, -0.046208013, -0.010609545, -0.027270664, 0.01890428, -0.028747734, -0.022795366, -0.020083731, 0.009104919, 0.0045304135, 0.005985437, -0.00075438, 0.03245143, -0.083112694, 0.016302874, 0.01780199, 0.004635131, -0.020899426, -0.021130906, -0.02934297, 0.016005257, -0.002243161, 0.044730943, 0.046560746, -0.018507456, -0.031172773, 0.0004719181, 0.011915759, 0.0357583, 0.016302874, -0.010609545, -0.035670117, 0.007958537, 0.016942203, 0.04168862, 0.035736255, 0.038844712, -0.036000803, -0.03928563, -0.03639763, -0.025992008, 0.027667489, -0.0014302218, 0.058774125, 0.028593414, -0.0028576879, -0.027270664, -0.00084394106, 0.018727913, -0.010631591, 0.060802337, 0.003971001, 0.009694644, 0.010317438, 0.016346967, 0.041842945, -0.00914901, 0.030533444, -0.074647106, -0.018242907, 0.02414016, 0.023126053, -0.014406935, -0.014682508, -0.004704024, -0.017768921, 0.001780199, -0.054188594, 0.010725286, -0.03401668, 0.011893713, -0.0015776531, 0.0011532713, 0.037477873, 0.060449604, 0.02740294, 0.02691793, -0.021968648, -0.02850523, -0.03860221, -0.039153356, -0.054673605, 0.027491122, -0.041402027, 0.0005452893, 0.0027612376, -0.029673658, -0.03408282, 0.024911763, -0.013370782, -9.610594e-05, -0.037081048, -0.04069656, 0.0210317, 0.034567825, 0.048456687, -0.0023051647, -0.015950141, 0.00022786409, 0.0025917604, 0.021704098, -0.02148364, -0.010532385, -0.0073357425, -0.064858764, -0.019190876, 0.046516653, -0.011684278, 0.011320522, -0.06141962, -0.02042544, 0.015696615, -0.003257268, -0.037323553, -0.038425844, 0.018397227, -0.06265419, 0.030026391, -0.0027598597, -0.03780856, 0.0134699885, 0.0071648876, 0.03633149, -0.039417904, -0.029210696, 0.0181437, 0.013767607, 0.008636445, -0.023831518, -0.011144156, 0.035207156, -0.033531673, 0.05017626, -0.042945232, -0.03928563, -0.017239822, -0.09497334, -0.0039489553, -0.0053957114, 0.027358847, 0.010328461, -0.017746875, 0.0051752534, -0.012268492, -0.07248662, -0.040564287, 0.028857963, -0.037014913, -0.008344338, 0.018397227, -0.015266722, 0.0028011955, -0.030533444, -0.017515395, 0.039153356, -0.011419728, 0.007159376, -0.021693075, 0.04642847, -0.0072861393, 0.016346967, 0.013238507, 0.00058455835, -0.036485814, 0.030511398, -0.012984981, -0.0139109045, 0.010548919, 0.03675036, -0.037786514, -0.048941694, -0.02881387, 0.040784746, 0.05211629, -0.043893203, 0.034325324, 0.02455903, 0.011033927, 0.009215148, -0.033200987, 0.0115740495, 0.040299736, -0.058509573, -0.04607574, 0.033377353, -0.021858418, 0.025992008, -0.02691793, 0.068121545, 0.0024291724, 0.025925871, 0.007396369, 0.006316124, -0.034942605, 0.03256166, -0.021737166, -0.021516709, 0.03097436, 0.02482358, -0.041203614, 0.001207008, -0.0071318187, 0.0044008945, 0.038999036, 0.044025477, 0.0010051511, -0.025837688, -0.024118114, -0.00512565, 0.009562369, 0.06741608, 0.046031646, 0.020491578, -0.077557154, 0.011816553, 0.029541383, 0.018209837, -0.0032214436, -0.01370147, 0.015156493, -0.020072708, 0.012896798, -0.00034463799, 0.008923041, 0.017184706, -0.03533943, -0.047530763, -0.017228799, -0.033685993, 0.054409053, -0.014451027, 0.022442633, 0.036309447, 0.026212465, -0.029938208, -0.00945214, 0.024735397, -0.011915759, -0.0073853456, 0.02091045, -0.011507912, 0.016655607, 0.0068562464, -0.010394598, -0.021362389, -0.0053185513, 0.043672744, 0.004574505, 0.020050662, 0.059082765, 0.03527329, -0.008482125, 0.0014715577, 0.027204527, 0.025573136, 0.025021993, -0.053262673, -0.018430296, 0.014869898, 0.050308533, -0.007220002, -0.011585072, 0.028902054, 0.096737005, -0.009832431, -0.022641044, -0.03145937, -0.023258327, -0.021737166, -0.01882712, -0.017790968, -0.006685391, 0.010367041, 0.03295848, -0.042107493, -0.005825605, 0.0007984716, -0.004483566, 0.044091616, -0.02660929, -0.0045993067, 0.013800676, 0.0052110776, -0.004392627, 0.060758248, 0.0043485356, -0.0011801396, -0.041402027, -0.017162662, 0.021252159, 0.024735397, -0.029585475, -0.027336802, -0.032164834, -0.0037064515, -0.03386236, -0.030092528, 0.013381805, 0.006608231, 0.029519336, 0.014836829, 0.00042610412, 0.00025611027, -0.0007592025, -0.017537441, -0.09082873, 0.02486767, 0.0046048183, -0.031944375, -0.04748667, 0.010692216, -0.027424986, -0.060493696, -0.0068452233, -0.027954085, -0.0036926728, -0.011992919, -0.019686906, -0.012984981, -0.062080994, -0.015200584, -0.009645041, 0.008603376, 0.058862306, -0.007208979, 0.0073136967, 0.02045851, 0.035361476, 0.019047579, -0.022905594, 0.022067854, -0.010543408, 0.014241592, 0.012929866, -0.0025173556, -0.010119026, -0.011684278, -0.05643727, 0.014076249, 0.034479644, 0.037411734, 0.016225714, 0.02281741, -0.009578903, 0.029585475, -0.010686706, -0.018661777, -0.0005401223, -0.036155123, 0.0012628115, -0.0068727806, -0.01453921, 0.038315613, -0.020778174, 0.019444402, -0.020965563, 0.008553773, 0.0071483534, -0.009165545, 0.011827576, -0.004505612, 0.0017250845, -0.008779743, 0.028350908, -0.0015996989, -0.053879954, -0.007071193, 0.0042162607, -0.022111945, -0.014484095, -0.0011401817, 0.0368165, -0.026741564, 0.0073357425, -0.014164432, -0.0014977371, 0.0049713296, -3.7073125e-05, -0.003229711, -0.009843453, -0.013999088, 0.010835514, 0.027226573, 0.011915759, 0.010102492, -0.014208524, -0.0047618947, -0.003791879, -0.018441318, 0.023126053, -0.044400256, 0.005580345, -0.0036182683, 0.0030147643, -0.026851794, -0.008228598, 0.02744703, 0.032517567, -0.02691793, 0.019135762, -0.015156493, -0.022156037, 0.024514938, 0.01362431, -0.0059909485, -0.031856194, 0.011992919, -0.016798906, 0.01916883, -0.029585475, -0.002123287, 0.01985225, -0.0075341547, 0.009022247, 0.03397259, -0.023963794, -0.0024980656, -0.008487636, 0.014373867, 0.032054603, -0.0024801535, -0.023170143, 0.0060791317, -0.0019855006, -0.0066357884, 0.025044037, 0.016060371, 0.0034529248, 0.006404307, -0.0044367188, 0.018871212, -0.03586853, 0.010356018, -0.0076774526, -0.025683366, 0.019984525, -0.005508696, 0.01632492, -0.019841228, -0.0021453327, -0.011248874, 0.007958537, 0.018286997, 0.0123015605, -0.021417502, -0.013613286, -0.0021480883, 0.02649906, -0.039175402, 0.020127822, -0.023897655, 0.039880868, -0.013888859, -0.026675427, 0.014307729, 0.010130049, -0.00816246, -0.008664003, -0.012720431, 0.020855334, -0.052248564, -0.037257414, 0.0046957573, -0.023963794, -0.00027109456, 0.016104463, 0.03487647, -0.015729684, 0.0031139704, -0.0032324665, 0.015013196, 0.025308587, -0.025529046, 0.05599635, -0.0011298476, 0.005682307, 0.015542295, -0.015046264, 0.011618141, 0.0201168, -0.017537441, -0.040255643, -0.017515395, -0.022034785, -0.050925817, 0.01377863, 0.030952314, -0.02308196, 0.002846665, 0.015575363, -0.01680993, 0.0005187654, -0.023544922, -0.019223945, 0.0063436814, 0.017250845, 0.0017030387, 0.0025986496, -0.0578482, -0.012808614, -0.049029876, -0.031723917, 0.006332658, -0.02250877, -0.010433178, 0.020778174, -0.007859331, 0.0018449585, -0.011270919, -0.019036556, -0.01359124, 0.010014309, 0.0071648876, 0.019984525, -0.007826262, 0.00366236, 0.0045800167, -0.0004877635, -0.0139109045, 0.006646811, -0.033796225, -0.011474843, 0.0007915823, -0.002121909, 0.012973958, -0.02960752, -0.014671485, -0.008338827, -0.018705867, 0.0056299483, -0.027954085, 0.01916883, 0.0045882836, 0.017493349, 0.0051642307, -0.051454917, -0.02865955, 0.014572279, 0.012709408, 0.03223097, -0.026895886, 0.015972188, -0.029960252, 0.008195529, 0.045414366, -0.03223097, -0.022905594, 0.002150844, 0.037698332, 0.017978357, -0.03377418, 0.0025270008, 0.0076058037, -0.005056757, -0.030775947, -0.04854487, -0.010692216, 0.019532586, 0.008184507, -0.026675427, 0.0005570011, -0.008041209, 0.025154267, 0.023434693, -0.012764523, 0.028747734, -0.0028631992, -0.040299736, -0.036882635, -0.0011436263, -0.021715121, -0.031878237, 0.01628083, -0.00846559, 0.010752843, -0.08227496, -0.02850523, 0.0046819784, -0.02255286, -0.009650553, -0.06618152, 0.029431153, 0.034678057, -0.011640186, -0.001468802, -0.023963794, -0.006938918, 0.012235424, 0.01688709, 0.0051532076, -0.010940232, 0.026388831, -0.017019363, -0.053394947, 0.0037560544, -0.00092867966, -0.016424127, -0.028703641, -0.015046264, -0.013282599, 0.0015321836, -0.018044494, 0.02702816, 0.024426755, 0.014307729, -0.006916872, 0.025705412, -0.0029128024, 0.035670117, 0.0009837942, 0.012918844, -0.008746674, -0.03324508, -0.003761566, -0.015200584, 0.009766293, -0.012499973, -0.0027502144, 0.011937805, 0.039726544, -0.0111717135, -0.015553317, 0.057142735, 0.0006847979, -0.0059689027, 0.0125991795, -0.004083986, 0.046296198, -0.02702816, -0.020293167, -0.027579306, -0.015432065, 0.01787915, 0.006167315, 0.018816097, -0.035824437, -0.015850935, 0.03950609, 0.03591262, -0.022795366, -0.019102693, 0.025308587, -0.020315211, -0.00267581, 0.0061618034, -0.020811243, 0.04660484, 0.00911043, 0.016038325, -0.027579306, -0.006790109, 0.04911806, -0.018320067, -0.047663037, -0.01685402, -0.007181422, -0.021053746, 0.0007516243, 0.019786112, -0.009507255, 0.04316569, -0.026168374, -0.018132677, -0.024779487, 0.008520705, -0.022905594, 0.02987207, 0.0109126745, -0.039924957, -0.0009362579, -0.0054453146, 0.042636592, 0.033730086, 0.034523737, -0.004505612, 0.0328703, -0.0008666758, -0.014550233, -0.03533943, -0.0040894975, -0.021042723, -0.026851794, -0.036000803, 0.006999544, 0.00054150017, 0.0030919246, -0.03450169, -0.009766293, -0.0069664754, -0.042195678, 0.021803305, 0.034148958, 0.0035355964, 0.028835917, -0.009099407, 0.03772038, 0.031944375, 0.00077160326, -0.038249478, -0.012533042, 0.01700834, -0.0058090705, -0.011248874, -0.0022693404, 0.0190586, 0.030401168, 0.011662233, 0.020932494, 0.04528209, 0.012742477, 0.0048197648, -0.012235424, -0.022574907, -0.04757485, -0.004431207, 0.0016217447, 0.027116343, -0.017779944, 0.00028418424, -0.016644586, 0.019268036, 0.008768721, -0.009837942, -0.009441117, 0.025286542, -0.021648983, -0.0012703897, -0.011188247, 0.009937148, -0.0050732917, 0.06137553, 0.0031029475, -0.029497292, 0.033443492, 0.014098294, 0.01882712, -0.004742604, 0.027976131, -0.022729227, -0.04823623, -0.026432924, 0.030952314, 0.028417047, -0.023809472, 0.051102184, 0.0043678256, -0.014208524, 0.024625167, -0.011882691, 0.0033454513, 0.062213268, 0.008625423, 0.010130049, 0.022641044, 0.008641956, -0.043672744, 0.051543098, 0.012257469, 0.042680684, 0.023170143, 0.01651231, 0.0055362536, -0.056569543, 0.00023423671, -0.008305758, 4.861273e-05, 0.034148958, 0.031283002, -0.041644532, 0.03860221, -0.014715577, -0.0055555436, 0.0015046264, 0.03082004, 0.0012779679, 0.030533444, 0.0038552606, 0.01582889, -0.016953226, 0.0037477873, 0.002735058, -0.0110284155, 0.027160436, 0.015068309, 0.037610147, -0.0144951185, 0.007572735, 0.015244676, 0.032120742, 0.020778174, -0.007545178, -0.012808614, 0.0069334065, -0.040255643, 0.01548718, -0.013227485, -0.009584415, -0.015498203, -0.008129392, -0.00051325397, -0.032164834, 0.012786568, -0.022178084, -0.0043678256, 0.011474843, -0.0013992199, 0.01780199, 0.008305758, -0.026895886, 0.05679, -0.014153409, -0.008261667, -0.007826262, 0.05233675, 0.020359304, 0.03150346, 0.02718248, -0.009347423, 0.0045001004, 0.022233197, -0.0003813236, 0.012797591, 0.016787883, -0.0072255135, -0.012037011, -0.027733626, -0.017978357, 0.031283002, -0.03655195, 0.04459867, -0.008371895, 0.024691304, 0.006057086, 0.00834985, -0.010918186, -0.015090356, -0.0052221008, 0.030048436, -0.03112868, -0.008041209, 0.03527329, -0.0007612693, -0.0059964596, -0.01461637, -0.007181422, -0.008735651, 0.034942605, -0.0016120997, -0.011055972, 0.009782827, 0.015861958, -0.013547149, -0.0056878184, -0.003287581, -0.028527275, -0.024691304, 0.0323412, -0.022453655, 0.02387561, -0.020701014, 0.024074022, 0.022574907, 0.002102619, 0.015421042, -0.0021150196, 0.03245143, 0.005307528, -0.033200987, -0.025771549, 0.0418209, -0.010179652, -0.043716837, -0.00065345154, 0.008950598, 0.017868128, 0.045039587, 0.015795821, -0.021494662, 0.047839403, 0.0031222375, -0.021847395, 0.0074404604, -0.00476465, -0.013646355, -0.003147039, 0.019532586, -0.001368218, 0.0059799254, 0.0017664203, 0.055026338, 0.039638363, -0.016831974, -0.022971733, 0.028174542, 0.0035879551, 0.02691793, 0.019367242, -0.0048059863, 0.03377418, 0.0036981844, -0.039263584, -0.009115942, 0.015156493, 0.006960964, 0.017339028, -0.04054224, 0.012400767, -0.0016148555, 0.014428982, -0.004337513, -0.0013447943, -0.020160891, -0.019488495, 0.016865043, 0.01047727, 0.014660462, -0.01886019, -0.015498203, 0.008906506, 0.012797591, 0.004836299, 0.041644532, -0.011320522, -0.030467307, -0.004885902, 0.013458965, 0.027733626, -0.00013296377, -0.0026289625, 0.056878183, 0.012433835, -0.0013943973, 0.022266267, 0.027755672, -0.037786514, -0.0140542025, 0.02698407, 0.022641044, 0.022409564, -0.011959851, -0.01464944, -0.017162662, -0.01335976, 0.037698332, 0.007600292, -0.026939977, 0.021152953, 0.020260097, 0.02292764, -0.010245789, 0.014660462, 0.020734083, -0.019565655, -0.017735852, -0.005180765, 0.02303787, -0.008289224, 0.028130451, 0.0122244, -0.012687363, -0.03333326, -0.0072034677, -0.0070767044, 0.03756606, -0.015035241, -0.012654293, -0.0059799254, -0.011585072, -0.00019875674, 0.0049162153, 0.0033922987, 0.01324953, 0.000945214, 0.004577261, -0.023390602, 0.015950141, 0.03161369, -0.022122968, -0.012984981, -0.0023189434, -0.013977042, -0.028064314, 0.017063456, -0.0036568483, 0.0047922074, -0.016633563, 0.043562517, -0.018551547, 0.02493381, 0.010818981, 0.003800146, 0.026036099, 0.003389543, 0.01674379, 0.03959427, -0.021582846, 0.017515395, -0.00434578, -0.014958081, 0.01806654, 0.017713808, 0.04748667, 0.015553317, 0.01248895, -0.023566969, -0.02250877, -0.028064314, -0.017779944, -0.0028990237, -0.023853565, -0.0030037414, -0.012698385, 0.02824068, -0.010179652, 0.012874752, 0.033377353, 0.0066192537, 0.0052028107, 0.0032958484, -0.032892346, 0.01673277, 0.017162662, -0.0042355508, 0.013458965, 0.0028301305, 0.006812155, 0.015608432, 0.010681194, -0.014781714, 0.0051917876, 0.014627393, 9.713934e-05, 0.00014553677, -0.0072971624, -0.0115740495, -0.013337714, 0.003047833, 0.009986751, -0.011706324, -0.008526216, 0.01214724, -0.007765636, -0.030048436, -0.037786514, -0.013558172, 0.0004302377, 0.0077766585, 0.023500832, 0.004444986, 0.015035241, 0.025021993, -0.0031415275, -0.038999036, 0.041864987, -0.017515395, -0.005420513, 0.0060295286, 0.0062169177, -0.012037011, -0.017305959, -0.029894115, 0.024228344, -0.038095158, 0.033509627, -0.012588156, 0.0063712383, 0.006387773, 0.03496465, -0.004243818, 0.06776881, 0.04854487, 0.0038690392, -0.013150324, -0.013073164, 0.014098294, -0.04528209, -0.008945087, 0.010163117, -0.006547605, -0.02907842, -0.028571367, 0.008889972, 0.0096009495, -0.02493381, -0.00018428918, -0.01985225, -0.0150793325, -0.0053240624, -0.013007027, -0.006134246, 0.008322293, -0.007120796, -0.015211607, -0.0030312985, -0.006701926, -0.018738937, -0.00014450338, 0.010008797, 0.0008570308, 0.013492035, -0.005461849, 0.0020640388, 0.031194817, -0.017096523, -0.008377407, -0.03703696, -0.0128857745, 0.022343427, -0.0016975272, 0.02850523, -0.0033537184, -0.038249478, -0.012621225, 0.012114172, -0.018882234, 0.051454917, -0.012246447, -0.007964049, -0.0038552606, -0.0012428324, 0.025286542, 0.036265355, -0.007490063, 0.022133991, 0.0003038188, 0.0074404604, 0.009182079, 0.012356675, 0.005530742, -0.008603376, -0.035670117, 0.0117945075, 0.0022900084, -0.008625423, 0.018540524, 0.007930979, 0.007991605, -0.0026124283, 0.029254787, 0.010978812, -0.0029403595, 0.018187791, -0.020337258, 0.016611516, -0.030423215, 0.028946146, -0.007693987, 0.0009321243, -0.026785657, -0.018573593, 0.04828032, -0.0010499316, -0.01013556, -0.016060371, -0.014362844, -0.010234767, 0.015652524, -0.032253016, 0.026741564, -0.0020254585, -0.011992919, -0.017427212, 0.00569333, 0.012136217, -0.01412034, -0.04854487, -0.00820104, -0.016876066, -0.026895886, 0.0121582635, 0.040784746, -0.008939575, 0.03214279, 0.033156894, -0.0069940328, 0.038161293, -0.0043871156, 0.012731454, -0.007842796, -0.0063491925, 0.010119026, 0.011893713, 0.017283913, 0.02466926, -0.001729218, 0.0062720324, -0.05070536, 0.024228344, -0.013139302, -0.0033730087, 0.023566969, 0.028990237, 0.012213377, 0.014406935, 0.028857963, 0.003207665, 0.046737112, -0.05405632, -0.010532385, 0.004444986, 0.020260097, 0.021582846, -0.01738312, 0.010328461, -0.002562825, 0.023919702, 0.031194817, -0.02698407, 0.049999893, -0.015123424, 0.031679828, 0.00097277126, -0.0046185968, -0.025837688, 0.019190876, 0.034898516, -0.020293167, -0.012533042, 0.012544065, 0.0018229127, -0.003499772, 0.009634018, 0.01138666, -0.023721289, 0.005037467, -0.013238507, -0.07023794, -0.030687764, -0.022707183, 0.033509627, 0.006960964, -0.011254385, 0.00021890798, -0.017559486, -0.023743335, -0.0013819966, 0.041049294, -0.0024677527, -0.016071394, 0.0022280044, -0.024911763, -0.0112102935, 0.008443545, 0.003450169, -0.0012979469, -0.004045406, 0.009518278, 0.010940232, -0.0096009495, 0.0064924904, -0.02929888, -0.0018022448, -0.022641044, 0.011485866, -0.013337714, 0.023831518, 0.013800676, 0.028042268, -0.003138772, 0.046031646, 8.999168e-05, -0.02876978, 0.0019166074, 0.0073192082, -0.011089042, 0.02072306, 0.024581077, -0.006889315, 0.018893257, 0.020293167, 0.010119026, 0.0019882564, -0.029409109, -0.011270919, -0.01677686, -0.020789197, -0.002644119, 0.009507255, 0.010670171, 0.03112868, -0.006387773, 0.032693934, 0.01032295, 0.003086413, 0.0050925817, 0.013161347, -0.01464944, -0.02702816, 0.018816097, -0.01359124, -0.020028617, -0.011959851, -0.018915303, 0.011529958, 0.011204782, -0.006404307, 0.033840314, 0.027932039, -0.0063271467, -0.022078877, -0.022574907, -0.07984991, -0.037830606, -0.013745561, -0.0031635733, 0.016556403, -0.02934297, 3.743912e-05, 0.007379834, 0.0021343098, -0.00706017, -0.010890629, -0.023853565, 0.011563026]"
../../../gradio,../../../gradio/gradio/components,download_button.py,"""""""gr.UploadButton() component.""""""

from __future__ import annotations

import tempfile
from pathlib import Path
from typing import Callable, Literal

from gradio_client import file
from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.data_classes import FileData
from gradio.events import Events


@document()
class DownloadButton(Component):
    """"""
    Creates a button, that when clicked, allows a user to download a single file of arbitrary type.

    Demos: upload_and_download
    """"""

    EVENTS = [Events.click]

    def __init__(
        self,
        label: str = ""Download"",
        value: str | Path | Callable | None = None,
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        visible: bool = True,
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        scale: int | None = None,
        min_width: int | None = None,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            label: Text to display on the button. Defaults to ""Download"".
            value: A str or pathlib.Path filepath or URL to download, or a Callable that returns a str or pathlib.Path filepath or URL to download.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            visible: If False, component will be hidden.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If False, the UploadButton will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.data_model = FileData
        self.size = size
        self.label = label
        self.variant = variant
        super().__init__(
            label=label,
            every=every,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
        )
        self.icon = self.serve_static_file(icon)

    def preprocess(self, payload: FileData | None) -> str | None:
        """"""
        Parameters:
            payload: File information as a FileData object,
        Returns:
            (Rarely used) passes the file as a `str` into the function.
        """"""
        if payload is None:
            return None
        file_name = payload.path
        file = tempfile.NamedTemporaryFile(delete=False, dir=self.GRADIO_CACHE)
        file.name = file_name
        return file_name

    def postprocess(self, value: str | Path | None) -> FileData | None:
        """"""
        Parameters:
            value: Expects a `str` or `pathlib.Path` filepath
        Returns:
            File information as a FileData object
        """"""
        if value is None:
            return None
        return FileData(path=str(value))

    def example_payload(self) -> dict:
        return file(
            ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
        )

    def example_value(self) -> str:
        return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""

    @property
    def skip_api(self):
        return False
","The code defines a `DownloadButton` component that creates a button allowing users to download a single file of any type. The component has various parameters such as label, value, variant, size, icon, and others to customize its appearance and behavior. The component preprocesses the file data before downloading and postprocesses the downloaded file information. It also provides methods for generating example payload and value. The component is not skipped in the API.","[-0.018944884, -0.005362498, -0.008533026, 0.026057603, 0.020387558, -0.06535649, 0.019023169, 0.02010797, 0.0015111732, 0.009455667, 0.015958883, -0.014091236, -0.019861933, -0.0066541946, -0.0026449026, 0.03370713, 0.03478075, -0.0042105955, 0.028517976, 0.010534876, -0.009886232, -0.040126473, 0.016037168, 0.033058487, 0.0033270973, 0.007766955, -0.0028308285, 0.035138622, 0.003198487, 0.03377423, -0.050996855, -0.035832, 0.0016621507, 0.03198487, -0.008477109, 0.003313118, 0.006531176, 0.012212404, -0.009511584, -0.038963385, -0.060525212, -0.035026785, -0.031358592, 0.05520186, -0.03138096, 0.022948584, -0.009545134, 0.003958966, -0.00030317824, 0.020376375, -0.07627161, 0.028920583, -0.015142486, 0.0049598916, -0.004808914, 0.0068443147, -0.03681615, 0.037956867, -0.0024100486, -0.056275476, 0.010009251, -0.0051611946, -0.05949633, 0.02760093, 0.0013238492, 0.024089303, -0.036122773, 0.0153661575, 0.016238471, 0.013163004, 0.09904126, 0.0014985917, 0.016193738, 0.0021863782, 0.033908434, 0.011999917, -0.054307174, 0.023530127, 0.026147071, -0.020376375, 0.013587978, -0.007202187, -0.0061844867, -0.037151653, -0.021304607, -0.013934666, -0.013453775, 0.014001768, -0.014907633, -0.015410892, -0.04111062, 0.017714696, -0.025185289, 0.082892254, 0.01969418, 0.061643567, -0.04603137, 0.022825565, 0.0069393744, 0.022411775, 0.05403877, -0.027265424, -0.01235779, -0.023216989, 0.025364224, -0.044778816, 0.026214171, -0.0041379025, 0.012503176, -0.025677362, -0.044488046, 0.02760093, 0.0014182102, 0.07434805, 0.0103335725, -0.06473022, 0.059854202, 0.011228255, -0.008465925, -0.040484343, -0.027623296, -0.026728613, 0.014974734, -0.03672668, 0.0059384494, -0.004355981, -0.039567295, -0.028696913, -0.03024024, 0.006877865, 0.017703513, 0.06003314, 0.028987685, -0.072827086, 0.004414695, 0.04437621, -0.01454976, 0.033461094, -0.02652731, 0.032767717, -0.03954493, -0.064059205, 0.012167671, -0.008974776, -0.00428888, -0.009539543, -0.016093086, -0.0024617724, -0.09796764, 0.00050046254, 0.009651378, 0.0037045411, 0.026750982, 0.008493884, -0.00019151779, -0.04952063, 0.030150771, -0.017356824, -0.021997984, -0.0075488766, -0.013017618, -0.033304524, 0.01591415, 1.4973249e-05, -0.014952367, 0.0077613634, 0.015332607, -0.02312752, -0.027444359, 0.021617746, 0.080521345, 0.02115922, -0.020499393, -0.039656762, -0.009287913, -0.0028280327, -0.03923179, -0.041311923, 0.039969902, -0.0238209, 0.029121887, -0.021360524, -0.023216989, -0.060793616, -0.016540427, -0.03408737, -0.0040372508, -0.0067045204, -0.030106038, 0.04430911, -0.019235656, 0.0028545936, -0.016730547, -0.05412824, -0.01969418, 0.02379853, 0.00021423431, 0.016506877, -0.0011533005, 0.009578685, -0.040171206, 0.029032419, 0.00046341712, -0.0012476615, -0.036838517, 0.0021248688, -0.028160105, -0.014493843, -0.0003349814, 0.0024114465, -0.00017299509, 0.024066936, 0.02554316, 0.013062352, -0.02751146, -0.04005937, 0.02093555, 0.06692219, 0.017200254, -0.0054407828, 0.011832165, 0.028942952, 0.01957116, -0.0063075055, 0.01410242, -0.006559135, -0.03999227, -0.02297095, -0.017837714, -0.003545176, 0.008119236, 0.022590712, 0.0069002323, -0.035966203, 0.020689514, -0.02516292, 0.028070636, -0.002194766, -0.014169521, -0.024245873, -0.026549678, -0.03493732, -0.001890015, -0.01143515, 0.059451595, 0.016752914, 0.0047641797, -0.027556194, 0.009164895, 0.0110437265, 0.011742696, -0.004411899, 0.020275723, -0.028741648, -0.00045433053, -0.023731431, 0.036995087, 0.015142486, 0.04679185, 0.019906666, 0.024312973, 0.002731575, -0.040842216, 0.073408626, -0.0038583146, 0.05359143, 0.041804, 0.03898575, -0.009081019, 0.02143881, 0.0071574533, 0.03431104, 0.05202574, 0.012570277, -0.02115922, 0.021841416, 0.0044929795, 0.02820484, 0.019336307, 0.015164854, -0.011608494, -0.012715663, -0.04536036, 0.0538151, -0.011507843, 0.0020144316, 0.0046020187, -0.011765064, 0.010456592, -0.037822668, 0.040685646, -0.017278539, -0.024357708, -0.049610097, -0.0096401945, 0.02646021, 0.029994203, -0.044264372, 0.016439775, -0.004386736, -0.009142528, -0.010909524, -0.0022968156, -0.013375491, 0.053949304, -0.039410725, -0.014862899, 0.0141247865, 0.0024435993, -0.029815266, 0.037218757, 0.019984951, -0.004736221, 0.0141247865, -0.018419258, -0.005882532, 0.029144254, 0.014974734, -0.022758463, 0.005684024, -0.005972, 0.02804827, -0.0013518081, 0.025073454, -0.0060614683, -0.0033382808, -0.032700613, 0.014605678, -0.01489645, -0.008398824, -0.005499496, 0.010199371, 0.024424808, -0.0014412762, 0.012592644, -0.005384865, -0.018598195, 0.014281356, -0.06432761, 0.0616883, -0.06750373, -0.025364224, 0.021371707, 0.014281356, 0.026437843, 0.016037168, -0.0209691, 0.05130999, -0.02350776, 0.0064081573, -0.00012100919, -0.030933619, 0.024670847, 0.01807257, 0.042519744, -0.015220772, -0.028540345, -0.08687359, -0.061419893, -0.029367926, -0.017904816, 0.042788148, -0.0009142528, 0.0076830788, -0.06584857, -0.013017618, -0.06388027, -0.044063073, 0.01985075, 0.0040931683, 0.027936434, 0.05108632, -0.020242171, 0.05104159, -0.014012951, -0.030553378, -0.00038093867, 0.0036542153, 0.0082031125, -0.027981168, 0.03605567, 0.056678083, 0.000466213, 0.022557162, -0.008521843, -0.004613202, 0.01413597, 0.0094948085, -0.008012992, -0.0050773183, -0.00392262, 0.0071015353, 0.038292374, -0.036189873, 0.003917028, 0.08262385, -0.0219197, -0.02827194, 0.001632794, 0.010255288, -0.022926217, -0.039723866, 0.014393191, 0.028965319, 0.014572127, -0.01512012, 0.031917766, 0.038963385, 0.053725634, -0.044622246, 0.016920667, 0.011423966, 0.039433092, -0.027019385, 0.09049705, 0.026572045, -0.018698847, -0.0045153466, 0.016943034, 0.049252223, -0.038560778, -0.024402441, -0.029681064, -0.0069729253, 0.015589828, 0.050996855, 0.04240791, 0.004831281, 0.011955183, -0.08329486, 0.0068666814, -0.03205197, 0.002935674, 0.018564643, -0.0037520712, -0.006833131, -0.033908434, 0.020600045, 0.045785334, 0.0556492, -0.04732866, 0.025274757, 0.030128404, 0.04043961, -0.026348375, -0.014001768, 0.0017711901, -0.001980881, -0.042721048, -0.014605678, -0.07233501, 0.025073454, -0.062001437, 0.0049263407, 0.022053903, -0.027310157, -0.017580494, -0.041625064, 0.028853483, -0.032924283, -0.010294431, -0.008052135, 0.012615011, 0.035295192, -0.009947741, -0.012536727, -0.01067467, 0.0070568016, -0.0054659457, -0.0379345, -0.0037241124, -0.0053541106, -0.01658516, 0.0658933, -0.03475838, 0.0027707173, 0.004923545, 0.035295192, -0.032857183, -0.014661595, -0.0020577677, 0.016875932, -0.036100402, -0.02169603, 0.0067995805, 0.08548683, 0.018217955, -0.013643895, -0.0028028698, -0.036324076, -0.019481692, -0.030777048, 0.02357486, -0.007996217, 0.0061677117, 0.021416442, -0.03214144, -0.008728738, 0.0058881235, -0.0060614683, 0.02760093, 0.010467775, -0.007957075, 0.04332496, -0.008594535, -0.021651296, 0.04408544, -0.013196554, -0.015477993, 0.013375491, -0.011094052, -0.021025019, 0.036033303, -0.001140719, -0.015970068, 0.011060501, 0.018150853, 0.02925609, -0.0060838354, 0.015019468, -0.056141272, 0.03650301, -0.009355015, 0.009472442, -0.0018690459, 0.04142376, -0.011731513, -0.03475838, 0.0033019343, 0.011608494, 0.006223629, -0.044353843, -0.019559978, 0.003335485, -0.016003618, 0.0032516087, -0.011412783, 0.0086392695, -0.007789322, -0.003125794, -0.020655962, -0.023239356, 0.0073923073, -0.022792015, 0.0043475935, 0.022221655, -0.024603745, -0.08329486, 0.015936516, -0.0023499373, 0.015377341, 0.0032404251, 0.028003536, -0.016115453, -0.013889932, 0.015869416, -0.018888965, -0.005720371, -0.02493925, -0.037509527, 0.014292539, 0.0003634644, 0.015545093, 0.033461094, 0.026974652, 0.0051639904, -0.006396974, 0.016909484, -0.00095059926, -0.01080328, -0.0476418, 0.011412783, 0.008985959, 0.029211355, -0.0029188988, 0.017446293, 0.018698847, -0.034355775, -0.03377423, 0.013520876, 0.016059535, -0.012167671, -0.004786547, -0.014057686, -0.008840573, 0.03091125, 0.054665048, -0.043570995, -0.007040026, 0.044644613, -0.036704313, -0.016920667, 0.018229138, 0.023932735, -0.005759513, 0.01534379, 0.000816397, 0.007794914, -0.041848734, -0.0159477, -0.025274757, -0.023015685, 0.003522809, 0.015243138, 0.022031536, -0.011233847, 0.012480809, -0.00870637, -0.058914784, 0.01674173, -0.008264622, 0.027958801, -0.007129494, -0.034557078, 0.011306539, 0.0052199084, -0.012972884, 0.010534876, -0.004498571, 0.033080854, -0.0018774335, -0.0032236497, 0.002498119, -0.039656762, 0.030709947, 0.02055531, 0.010406266, -0.030173138, 0.017815348, 0.04231844, 0.011966367, 0.026750982, 0.03084415, -0.018810682, -0.024760315, -0.011272988, 0.032096703, -0.017267356, -0.013386674, -0.044040702, 0.0036681946, 0.020152705, -0.014907633, 0.0046076104, 0.012268322, 0.028473243, -0.017177887, -0.02131579, 0.009746438, 0.019929033, 0.01693185, 0.020868449, 0.024603745, -0.023440659, -0.003380219, 0.020622412, 0.017211437, 0.007850831, -0.013207737, 0.049252223, -0.019090269, 0.05086265, -0.030128404, 0.013330757, -0.028607445, 0.060793616, 0.0096066445, 0.011686779, -0.014337273, 0.03674905, -0.040730383, 0.005499496, -0.009556319, 0.041625064, -0.0011924428, -0.0060279174, 0.011183521, -0.042967085, 0.00050290895, 0.011642044, -0.039433092, 0.00527303, -0.032924283, -0.018944884, 0.042586844, -0.060435746, 0.00914812, 0.053278293, 0.020197438, -0.030598111, 0.0037604587, -0.012782764, 0.0073140226, -0.028070636, -0.0022954175, 0.0398357, -0.022087453, 0.0021136855, 0.029815266, 0.0063690147, -0.011485475, 0.0007132989, -0.009131345, 0.004671916, -0.012436075, 0.01632794, -0.015612194, 0.0066150525, 0.0036570113, -0.00606706, 0.0356978, -0.0018634541, -0.0458077, -0.018005468, -0.010350348, -0.0120111015, -0.010724996, 0.039030485, 0.052204672, 0.0044482453, 0.022847932, 0.008096869, -0.05269675, -0.023932735, 0.011099644, -0.0059104906, 0.010792097, 0.0027371666, -0.051399462, -0.010227329, -0.012536727, -0.0058433893, -0.008119236, 0.0018550665, 0.016249655, 0.035787266, 0.022780832, 0.030933619, 0.012436075, -0.002563822, -0.0063186893, 0.03755426, -0.018687664, 0.007185412, 0.020175071, -0.05864638, -0.009103386, -0.024424808, -0.005264642, -0.034109738, 0.022434141, 0.0054687415, -0.030754682, 0.038292374, -0.00034267007, -0.012346607, -0.025408959, -0.03869498, -0.040730383, 0.011272988, 0.0034249532, 0.05797537, 0.015701663, 0.02350776, 0.0038834775, -0.03898575, 0.0023415496, 0.008588944, 0.008303764, 0.024894517, 0.0009121559, 0.007766955, -0.02115922, -0.04247501, 0.04392887, -0.025408959, -0.024782682, -0.01277158, 0.026818082, 0.017580494, 0.00042147894, 0.031291492, 0.017133154, -0.0056784325, 0.01413597, 0.01677528, -0.030754682, 0.0023932734, -0.04822334, -0.025364224, 0.005966408, 0.04037251, -0.018385708, 0.0012427687, 0.03325979, 0.009030693, 0.036681946, -0.06388027, -0.021025019, 0.0028280327, -0.010624344, -0.020633595, -0.020734247, 0.0198843, 0.0054967003, 0.00057280593, -0.01737919, -0.002098308, -0.0136886295, 0.00969052, -0.037084553, 0.027019385, 0.010697037, 0.025744464, -0.008001809, -0.016316757, -0.00517797, 0.0030195506, -0.05041531, -0.046299774, 0.042117137, -0.003478075, -0.03748716, 0.027444359, 0.021371707, 0.009013917, 0.0074090823, 0.015712846, 0.0032012828, 0.0038611104, 0.03925416, 0.006782805, 0.031179655, -0.008846165, -0.033886068, 0.013856382, -0.0005735049, 0.01435964, -0.006436116, -0.026169438, 0.008449149, -0.036256973, -0.014281356, 0.013957034, 0.021282239, 0.02956923, -0.028853483, 0.039567295, -0.034266308, -0.019682996, 0.0026071582, -0.011077277, -0.02735489, -0.016696997, 0.04759706, -0.034065004, -0.0007283268, 0.008342906, -0.011250622, -0.01610427, -0.0055665975, 0.02576683, -0.044242006, 0.052652016, 0.006620644, -0.057572763, -0.031716466, 0.0258563, 0.03446761, -0.011105236, 0.020465843, 0.010053985, 0.0037464793, 0.010724996, -0.0028797565, -0.024737947, 0.009807947, 0.039589662, -0.008342906, 0.0378674, 0.030642847, -0.017580494, 0.0038359475, 0.014024135, 0.025610263, 0.0110437265, 0.008600127, 0.009248772, -0.0026183417, 0.0036793782, -0.005080114, -0.013319573, -0.0035507677, -0.020365192, 0.007850831, 0.02646021, -0.019336307, 0.006374607, -0.03001657, -0.009612236, 0.012827498, -0.021751948, 0.0012294883, -0.02312752, -0.051399462, 0.0049850545, 0.001144214, -0.024223505, -0.0070344345, -0.037084553, -0.008818206, -0.006978517, 0.016216105, 0.064193405, -0.00024883333, 0.017233806, -0.01829624, 0.006206854, 0.017871266, -0.023686696, 0.031559896, -0.028294306, 0.0026798511, 0.028965319, 0.0032991385, 0.0023862836, 0.021684846, -0.00044000163, 0.022221655, -0.015254322, 0.0059496327, 0.05359143, 0.04625504, -0.0012721254, -0.0008848961, -0.06634064, -0.02426824, 0.004246942, -0.036681946, 0.0007346175, 0.002354131, 0.0020144316, -0.0022730506, -0.021271056, 0.0438394, -0.016383858, -0.005127644, 0.020734247, -0.011630861, -0.0357649, 0.021651296, -0.010210554, 0.03348346, -0.030553378, -0.0066150525, 0.033528194, 0.04361573, -0.023597227, 0.007671895, 0.02954686, -0.03809107, 0.018083753, -0.018094936, 0.015388524, -0.015176037, -0.048357543, 0.03891865, -0.0028014719, 0.039589662, 0.01070263, -0.018318607, 0.025140554, -0.0014860103, -0.0017222621, -0.0238209, 0.009483625, 0.0049291365, -0.0021849803, 0.00971848, -0.010641119, -0.00994215, 0.04786547, 0.013308389, -0.0069393744, 0.018620562, -0.0067995805, 0.0033886067, -0.0002240199, 0.0067492547, 0.019828381, -0.02925609, 0.018799499, 0.020991469, -0.024156405, 0.023932735, 0.0014140164, -0.007509734, -0.031045454, 0.0053485185, 0.009299098, -0.007716629, -0.010853606, 0.0123018725, -0.035026785, 0.03938836, 0.0027175955, 0.060212076, 0.0092208125, 0.0060726516, -0.03643591, 0.026885184, 0.039522562, 0.015601011, -0.03211907, 0.0034193613, -0.05994367, -0.038516045, 0.016641079, -0.014393191, 0.008225479, -0.02411167, -0.04822334, -0.008795839, 0.02071188, 0.0030866517, 0.03862788, 0.033841334, -0.015835864, 0.033751864, -0.0037688464, 0.019537611, 0.00816397, -0.027645662, -0.03659248, 0.025878666, 0.023216989, 0.01760286, 0.017166704, 0.020600045, 0.01877713, -0.022803199, -0.017043686, 0.0020326048, 0.028540345, -0.01966063, -0.029994203, 0.010093127, -0.01114997, -0.009880641, 0.010249697, 0.0007444031, 0.02052176, 0.0024435993, 0.011161153, -0.014795798, 0.0060838354, 0.0061509362, -0.013420224, 0.021058569, 0.015981251, -0.0476418, 0.004252534, 0.054888718, -0.0067268875, -0.0037520712, -0.011519026, 0.026057603, -0.0046747117, 0.02646021, 0.003383015, 0.01315182, 0.006883457, 0.018721214, 0.024514277, -0.05215994, -0.011384824, 0.010646711, -0.0075936103, 0.04737339, -0.004244146, -0.013297206, -0.02449191, 0.003237629, 0.012447258, 0.0058154305, -0.003055897, -0.0075656516, 0.018385708, 0.03554123, -0.0023289681, -0.01410242, 0.0073923073, -0.011921633, 0.030307341, -0.0318283, 0.010764139, -0.00695615, 0.0011616882, 0.019750098, -0.01743511, 0.017759431, 0.012894599, -0.025252389, -4.5913595e-05, -0.020085603, -8.1124206e-05, -0.011843348, 0.01896725, -0.03198487, -0.036950354, -0.015276689, 0.031559896, 0.022545977, -0.03909759, -0.012715663, 0.000209691, 0.016238471, -0.018307423, -0.015668113, -0.00882939, -0.007873198, -0.04149086, -0.03636881, -0.0066318274, 0.045002487, -0.008516251, 0.03475838, 0.0005266739, 0.00462159, -0.015164854, 0.02268018, 0.0082198875, 0.0018257097, 0.008096869, -0.003475279, -0.014806981, -0.037129287, -0.0028042677, -0.0002285632, -0.0077557713, 0.007694262, 0.010629936, 0.0009540941, 0.03332689, 0.007045618, -0.0011246428, -0.028406141, 0.018318607, 0.015634561, 0.036078036, -0.02379853, 0.026773348, 0.003872294, 0.0074817752, 0.016663445, -0.031202022, 0.010713813, 0.0014328886, 0.014091236, -0.006458483, 0.0141247865, 0.028115371, -0.052294143, -0.010126678, 0.006710112, -0.00994215, -0.013621528, 0.018195588, 0.049162757, 0.027779864, -0.008499475, -0.0079458915, -0.025968134, 0.022400592, 0.036413543, -0.02157301, -0.021550644, 0.00069128134, 0.031157289, 0.022132186, 0.0035591554, 0.0135767935, -0.025722098, 0.024581378, -0.030799415, -0.0065703182, -0.0039002527, -0.014426742, -0.021707213, 0.010115494, 0.021483542, 0.020119153, 0.012067019, 0.0034808707, 0.003452912, -0.010529284, -0.03491495, 0.02849561, 0.01871003, -0.013509693, 0.012715663, 0.011161153, -0.02350776, -0.013621528, 0.03138096, 0.010339165, -0.012916966, -0.003799601, 0.02773513, 0.018888965, 0.0052199084, 0.0078172805, 0.026862817, -0.0004616697, -0.015601011, 0.0004826388, 0.02977053, 0.0048200972, 0.023015685, 0.012122937, -0.01607072, 0.0022241226, 0.0034445242, 0.028361408, -0.019135004, 0.019906666, 0.06191197, 0.016160186, 0.027914068, 0.0070120674, 0.030396808, -0.007090352, 0.023463026, -0.016730547, 0.020902, -0.025610263, -0.013677445, -0.002027013, 0.04164743, -0.0025512406, 0.035362292, -0.015053019, -2.4857121e-05, 0.042967085, -0.0052310918, 0.012514359, -0.005527455, -0.008141603, -0.035339925, 0.045382727, -0.016473325, -0.02516292, 0.0031118146, 0.0020242173, -0.010596386, -0.002190572, -0.021807864, -0.01572403, 0.0019179737, -0.012592644, -0.025230022, -0.0056281066, -0.00042112946, -0.0046271817, 0.010406266, -0.007386715, -0.008812614, -0.013722179, 0.003357852, 0.02509582, -0.012424891, 0.042676315, 0.03214144, 0.002379294, -0.0083484985, 0.02404457, 0.008119236, -0.006581502, 0.019895483, -0.007509734, -0.01699895, -0.038202908, -0.011988734, -0.024201138, -0.04316839, 0.00984709, -0.018687664, -0.041065887, -0.0072692884, 0.0016593549, -0.018162038, 0.05524659, 0.0065423595, -0.015612194, 0.0021751947, 0.018564643, -0.0114631085, 0.0050214007, 0.021282239, 0.006190079, -0.01772588, -0.0021416442, -0.012984067, 0.0034668914, -0.021047385, -0.0036598071, -0.024737947, 0.032924283, -0.029121887, -0.02842851, -0.027086487, 0.005561006, -0.015187221, -0.0046020187, 0.006525584, 0.026639147, 0.029233722, -0.044778816, -0.00965697, -0.01356561, 0.02147236, 0.016339123, -0.012715663, 0.0010568427, 0.003917028, -0.017368007, -0.030978352, -0.038068704, -0.0014398783, 0.0077501796, 0.001983677, 0.01938104, 0.037509527, -0.043570995, -0.02970343, -0.02956923, 0.0023010094, 0.033908434, 0.0039086402, 0.013330757, -0.0053820694, 0.022668997, 0.02357486, 0.017781798, 0.006598277, 0.042050038, 0.010792097, 0.012480809, 0.018754764, 0.017781798, -0.014695146, 0.02932319, -0.011110827, -0.004269309, 0.020834899, 0.0009072631, 0.009019509, 0.01737919, -0.0039058446, 0.023530127, 0.004487388, 0.072692886, 0.017703513, 0.002818247, -0.00023537816, 0.014952367, -0.01353206, 0.026885184, 0.02153946, 0.039858066, -0.022411775, -0.033796597, 0.0082366625, 0.028629813, 0.0072916555, 0.025118187, 0.020890817, 0.006648603, -0.042228974, -0.026862817, -0.0041015563, 0.014437925, -0.010300023, 0.008527434, 0.024894517, -0.004660732, -0.037397694, -0.028137738, -0.03106782, -0.032409843, -0.007045618, 0.030553378, 0.023239356, 0.018027835, -0.013476143, -0.035630696, -0.01432609, 0.025476059, 0.004590835, 0.003383015, 0.015891783, -0.022445325, -0.0055805766, 0.005552618, 0.025297124, 0.0056392904, -0.028540345, -0.023485392, -0.025230022, -0.005018605, -0.0278246, 0.026035236, -0.0019752893, 0.0022926216, -0.0022450918, -0.0071742283, 0.019481692, -0.013252472, 0.0103335725, -0.028406141, -0.001399338, -0.015075386, -0.0029021236, 0.020823715, -0.04231844, -0.013230105, 0.0025764036, -0.025945768, -0.0017194663, 0.0056560654, 0.045897167, -0.00978558, 0.01565693, -0.033572927, -0.014068869, -0.0457406, 0.032342743, 0.004154678, 0.016182555, -0.0065423595, 0.010277655, -0.0029748164, -0.0032096703, -0.012726846, 0.018888965, -0.029166622, 0.0106075695, 0.0034193613, -0.0135767935, -0.045606397, -0.007135086, -0.022422958, 0.027690398, -0.012525543, -0.027981168, 0.018094936, -0.024290606, 0.022210471, -0.031582262, 0.0127380295, 0.022199288, 0.013889932, -0.022724913, -0.02668388, -0.020946734, 0.009422116, -0.0056281066, -0.046523444, -0.010210554, 0.0019976564, -0.0026868407, 0.04965483, -0.0022940196, -0.028540345, -0.025990501, 0.012178854, -0.00657591, -0.010451, 0.07099299, 0.026393108, -0.030106038, 0.04723919, 0.013710996, -0.043123655, 0.017781798, -0.01191045, -0.021002652, -0.025185289, -0.0015573052, 0.0064472994, -0.046657648, 0.0079403, 0.036346443, -0.015835864, -0.004599223, 0.0073419814, -0.0067380713, -0.0025470469, -0.017401557, 0.013297206, -0.0148181645, 0.027198322, 0.008113644, 0.008018584, -0.0022982135, 0.0054687415, -0.0011574944, -0.016596345, 0.001421006, -0.042363174, 0.009835906, 0.0053093764, 0.0024394053, -0.01572403, 0.020544127, 0.042385545, 0.024066936, -0.010652304, -0.022176921, -0.013297206, -0.038560778, -0.018229138, -0.0092040375, -0.015075386, 0.005040972, 0.011172337, 0.0009394157, 0.02827194, 0.008326131, -0.00606706, -0.01553391, 0.01760286, 0.0057539213, 0.0013560018, -0.02297095, -0.012536727]"
../../../gradio,../../../gradio/gradio/components,textbox.py,"""""""gr.Textbox() component.""""""

from __future__ import annotations

from typing import Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.base import FormComponent
from gradio.events import Events


@document()
class Textbox(FormComponent):
    """"""
    Creates a textarea for user to enter string input or display string output.

    Demos: hello_world, diff_texts, sentence_builder
    Guides: creating-a-chatbot, real-time-speech-recognition
    """"""

    EVENTS = [
        Events.change,
        Events.input,
        Events.select,
        Events.submit,
        Events.focus,
        Events.blur,
    ]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        lines: int = 1,
        max_lines: int = 20,
        placeholder: str | None = None,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        autofocus: bool = False,
        autoscroll: bool = True,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        type: Literal[""text"", ""password"", ""email""] = ""text"",
        text_align: Literal[""left"", ""right""] | None = None,
        rtl: bool = False,
        show_copy_button: bool = False,
    ):
        """"""
        Parameters:
            value: default text to provide in textarea. If callable, the function will be called whenever the app loads to set the initial value of the component.
            lines: minimum number of line rows to provide in textarea.
            max_lines: maximum number of line rows to provide in textarea.
            placeholder: placeholder hint to provide behind textarea.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be rendered as an editable textbox; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            autofocus: If True, will focus on the textbox when the page loads. Use this carefully, as it can cause usability issues for sighted and non-sighted users.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            type: The type of textbox. One of: 'text', 'password', 'email', Default is 'text'.
            text_align: How to align the text in the textbox, can be: ""left"", ""right"", or None (default). If None, the alignment is left if `rtl` is False, or right if `rtl` is True. Can only be changed if `type` is ""text"".
            rtl: If True and `type` is ""text"", sets the direction of the text to right-to-left (cursor appears on the left of the text). Default is False, which renders cursor on the right.
            show_copy_button: If True, includes a copy button to copy the text in the textbox. Only applies if show_label is True.
            autoscroll: If True, will automatically scroll to the bottom of the textbox when the value changes, unless the user scrolls up. If False, will not scroll to the bottom of the textbox when the value changes.
        """"""
        if type not in [""text"", ""password"", ""email""]:
            raise ValueError('`type` must be one of ""text"", ""password"", or ""email"".')

        self.lines = lines
        if type == ""text"":
            self.max_lines = max(lines, max_lines)
        else:
            self.max_lines = 1
        self.placeholder = placeholder
        self.show_copy_button = show_copy_button
        self.autofocus = autofocus
        self.autoscroll = autoscroll
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.type = type
        self.rtl = rtl
        self.text_align = text_align

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: the text entered in the textarea.
        Returns:
            Passes text value as a {str} into the function.
        """"""
        return None if payload is None else str(payload)

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a {str} returned from function and sets textarea value to it.
        Returns:
            The value to display in the textarea.
        """"""
        return None if value is None else str(value)

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    def example_payload(self) -> Any:
        return ""Hello!!""

    def example_value(self) -> Any:
        return ""Hello!!""
","The code defines a `Textbox` component for Gradio, which creates a textarea for users to enter string input or display string output. The component has various parameters such as `value`, `lines`, `max_lines`, `placeholder`, `label`, `info`, `every`, `show_label`, `container`, `scale`, `min_width`, `interactive`, `visible`, `elem_id`, `autofocus`, `autoscroll`, `elem_classes`, `render`, `type`, `text_align`, `rtl`, and `show_copy_button`. The component supports different types of textboxes like 'text', 'password', and 'email'. It also provides methods for preprocessing, postprocessing, and generating example payloads and values.","[-0.05324861, 0.03460919, 0.027899, 0.04040545, 0.01268683, -0.044205487, 0.020876149, -0.0014603382, -0.00021082084, -0.011568464, 0.011105485, 0.043075096, 0.0052220435, -0.0035234513, 0.012855186, -0.025277456, 0.0043471935, -0.00046748863, -0.038433276, 0.042762432, 0.0096624335, -0.011075422, -0.00704089, 0.025277456, 0.013324178, -0.053152405, -0.044445995, 0.07224879, -0.0089048315, -0.0017587193, -0.040044684, -0.04853464, 0.030376239, -0.0072393096, -0.0009778179, -0.038962398, 0.034368683, 0.03655731, 0.034007918, -0.009620345, -0.073643744, -0.018098274, -0.009085213, 0.009890917, 0.006806394, 0.027201526, -0.009325722, 0.025157202, 0.026071135, 0.048053622, -0.019120436, 0.0011394096, -0.03867379, -0.018338783, 0.001407727, 0.0075459583, -0.09043124, 0.045937147, 0.012554551, -0.018086249, 0.00934376, -0.009019073, -0.017304596, -0.011652643, 0.02136919, 0.016174205, -0.001999228, -0.008580145, 0.0021811125, 0.037495293, 0.06892977, -0.051516946, 0.019637529, -0.03460919, -0.012139672, -0.0062652496, 0.013733042, -0.0066199997, 0.033623107, 0.010227629, 0.011628592, 0.009818764, -0.07114245, -0.013648865, -0.045287773, 0.03872189, -0.03593199, 0.042185213, -0.03903455, -0.057337254, -0.05329671, 0.006992788, -0.030496493, 0.07042093, 0.013961526, -0.014959636, -0.052959997, -0.034272477, 0.016306484, 0.014190009, 0.0377358, -0.031073714, -0.0348016, -0.033310443, 0.037543397, -0.020154623, 0.012259927, -0.018206503, -0.024171116, -0.017015984, -0.046971332, -0.014141907, -0.04692323, 0.0025674296, 0.011123524, -0.06897787, -0.006613987, -0.019312842, -0.029486356, 0.016474841, 0.035282616, 0.011586503, 0.009439964, -0.016390663, 0.007924759, -0.02929395, -0.04302699, -0.049785286, -0.033959817, 0.018230554, 0.0092295185, -0.017256495, 0.004241971, -0.039683923, -0.037759855, 0.041680146, -0.04940047, 0.022126794, -0.012085558, 0.00989693, -0.0053723613, -0.03345475, -0.0027538238, 0.027249627, -0.022752116, -0.06469682, -0.04858274, 0.010023197, -0.05271949, -0.000726787, -0.028572425, 0.0216097, -0.031193968, 0.0027042187, 0.03771175, -0.00076023274, 0.0696513, 0.018038146, -0.03263702, -0.026119236, 0.005261126, -0.027273677, 0.016775476, 0.0056760036, -0.01795397, 0.006511771, 0.029750917, 0.02150147, -0.023173006, 0.028355967, 0.024940744, -0.03492185, -0.015536857, -0.014418492, -0.016559018, 0.0036196548, -0.0009890917, 0.017412825, -0.01173682, -0.0003975908, -0.0007057425, 0.019457148, 0.0012701862, 0.039178856, 0.0032137965, -0.035835784, 0.010149464, -0.05998285, -0.023281235, -0.023798328, 0.033671208, -0.0216097, 0.01771346, 0.009133315, 0.0012829632, -0.03460919, 0.021741979, -0.017749537, -0.013781144, 0.014695077, 0.06599557, 0.02813951, -0.013155822, 0.004948465, -0.054739762, -0.0015167075, -0.020563487, 0.004470454, 0.004623778, -0.04576879, 0.012783034, -0.0043201363, -0.0071070297, -0.04382067, -0.054547355, 0.00059450726, 0.005285177, 0.038288973, -0.011466249, -0.013348228, -0.06056007, 0.05801068, 0.003544496, -0.037807956, 0.018891953, 0.0050206175, 0.03850543, -0.0007703792, 0.010678583, -0.00040961624, 0.025012897, 0.005730118, 0.00752792, -0.03177119, 0.038938347, -0.031891443, -0.0045245686, -0.020719819, 0.036869973, 0.039226957, -0.034272477, -0.00808109, 0.039178856, -0.030809155, 0.0390105, 0.031578783, -0.039972533, -0.08018558, 0.0362206, 0.036100343, 0.00077939825, 0.017737512, 0.007912734, 0.009854841, 0.010678583, 0.018495113, -0.019144487, 0.030496493, 0.0136849405, -0.015777366, -0.0057421434, -0.063061364, -0.031891443, 0.055557493, 0.0076060854, 0.024748337, 0.023317311, 0.017136239, 0.0016038918, -0.019565377, -0.0375915, 0.008020963, 0.046346013, 0.03932316, -0.025830626, 0.008748502, 0.017244468, 0.010041235, -0.008387738, 0.07181588, -0.031843342, -0.006223161, 0.0028199635, 0.03230031, -0.011995368, 0.0008523024, 0.043604214, 0.003923297, 0.030183833, -0.016835604, 0.035282616, 0.025085049, 0.038625684, -0.0031236059, -0.00036903043, 0.01547673, 0.04432574, -0.00324386, 0.019685632, -0.055172678, -0.017148266, 0.016138129, 0.014322288, -0.029991426, -0.018326757, -0.013191898, 0.011604541, 0.0014881471, 0.01645079, -0.018940054, 0.0334788, 0.019228665, -0.021705903, -0.02344959, -0.06926648, -0.020226775, 0.05324861, 0.04158394, 0.016919782, -0.042040907, 0.014021653, 0.01100327, 0.035763633, -0.03371931, 0.00048665417, -0.0123080285, -0.040694058, 0.0018639418, 0.014190009, -0.043628264, 0.050314404, -0.019048283, -0.00021758514, 0.003932316, 0.03177119, 0.0016114077, -0.039419364, 0.032757275, -0.040333297, 0.011784922, -0.039251007, -0.0047109625, 0.0031055675, 0.04543208, 0.041968755, 0.011959291, -0.023569845, 0.026143288, 0.0027778747, -0.030448392, 0.012362143, -0.0025659264, 0.0024742326, -0.079319745, 0.026912915, -0.029799018, -0.004040545, -0.04427764, -0.08143622, -0.012434295, -0.020142598, 0.0375915, -0.019360945, 0.038072515, 0.0066320254, 0.0017046048, -0.029654713, -0.03290158, -0.015681162, -0.009007048, 0.02955851, -0.0027838873, -0.015296348, -0.00020743869, -0.03876999, -0.036821872, 0.032949682, 0.0006196855, -0.028091406, -0.02218692, 0.026624305, -0.000756099, 0.004747039, 0.0025073024, 0.0038300997, -0.025445811, 0.018447012, 0.04795742, 0.039972533, 7.48771e-05, -0.027923051, 0.00047951407, -0.013011516, 0.0067162034, 0.030207884, 0.027995205, 0.028115459, 0.025782524, 0.016294459, 0.0074076657, -0.0009056653, 0.020948302, -0.048943505, 0.04766881, -0.035571225, -0.01631851, 0.010257693, 0.017629283, 0.034080073, -0.0335269, 0.04127128, 0.004536594, 0.029654713, 0.0047590644, 0.03908265, 0.013600763, 0.0018879927, -0.016222307, 0.013119745, 0.042233314, -0.017965995, 0.026455948, -0.03011168, -0.058106884, 0.039972533, 0.05661573, 0.0041187103, -0.045600437, -0.026720509, -0.013504559, 0.0021390235, 0.009295658, -0.0073054493, 0.02876483, -0.0034603179, -0.030712951, -0.017112188, 0.058491696, 0.0131437965, -0.007900708, -0.044566248, 0.016643196, 0.03513831, 0.023918582, -0.024700236, 0.01660712, 0.029101543, -0.04682703, -0.023894532, -0.028861035, -0.014671026, 0.0320117, -0.036605414, -0.006108919, 0.021741979, 0.026600253, 0.058972713, 0.024748337, -0.008544069, -0.021862233, -0.028355967, 0.00060991483, -0.012638728, 0.039371263, -0.0016053951, -0.032204106, 0.050939728, 0.009680472, 0.02358187, -0.004278047, -0.031602833, 0.028885085, 0.024543906, 0.02955851, -0.031073714, 0.050218202, 0.012217838, 0.006511771, -0.02453188, -0.022908445, -0.0052972026, 0.023281235, -0.009247556, -0.021790082, -0.005429482, 0.15171283, -0.00077263394, -0.035066158, -0.0050055855, -0.025806576, -0.0029266893, 0.0012551544, 0.0085019795, -0.010684595, 0.021080581, 0.029678764, -0.04398903, -0.011784922, -0.0029417211, -0.042425722, 0.04163204, -0.0069266483, -0.022391353, 0.043580163, 0.02326921, 0.008604196, 0.054018237, 0.019336894, -0.0017166303, -0.00010409514, -0.031193968, -0.027249627, 0.036052242, -0.026119236, -0.002050336, -0.048847303, -0.034128174, 0.019036258, -0.03903455, -0.0003147281, -0.04718779, 0.04552828, -0.010197566, -0.024507828, -0.008916858, -0.015729263, -0.0021495458, -0.02763444, 0.033959817, -0.005119827, -0.025566068, -0.021272987, -0.0018308719, 0.027778747, -0.066524684, -0.010089337, -0.034657292, -0.0072152587, 0.00947604, -0.03266107, 0.0013152815, 0.014262161, 0.003427248, 0.0033069935, -0.002848524, 0.05878031, -0.021802107, -0.051132135, -0.0023990734, 0.048149828, 0.04382067, -0.067342415, 0.036629464, -0.01716029, 0.01729257, 0.0021600681, 0.042064957, 0.019733733, -0.01547673, -0.023870481, 0.003745922, 0.02218692, 0.008748502, 0.014899509, -0.022259073, -0.008261471, -0.013708992, 0.013600763, -0.00026643847, 0.02213882, 0.00012617308, 0.0036587375, 0.03451299, 0.06157021, -0.0075579835, -0.042449772, 0.0098788915, -0.036605414, -0.012722906, 0.014899509, -0.01689573, -0.008489954, 0.008910844, -0.010438074, -0.027225576, -0.0028545368, 0.025614168, -0.008995023, -0.0033550954, -0.007936785, 0.015380527, 0.021982487, 0.0077022887, 0.047043487, 0.008333623, 0.017605232, -0.028019255, 0.01534445, -0.042016856, 0.012314041, 0.0077323522, -0.017833715, -0.0133602545, -0.012271953, 0.0104982015, 0.013276076, 0.020335004, 0.0059525883, -0.021092607, -0.009494078, -0.020286903, 0.024050862, -0.05493217, -0.01853119, -0.03097751, 0.014454568, -0.012987466, 0.027129373, 0.036172498, 0.023040727, -0.036894023, 0.029173696, 0.012386194, -0.025854677, -0.015320399, 0.04795742, -0.0057932516, -0.023160981, 0.025830626, 0.022884395, -0.016102053, -0.0077684284, 0.05498027, 0.02147742, -0.02816356, -0.028115459, 0.04273838, 0.014983688, -0.016366612, -0.023197057, 0.017484976, 0.009259582, 0.034224376, 0.024123015, 0.034753498, 0.03732694, -0.0015993824, 0.04124723, 0.047765013, -0.009999146, 0.0010071299, 0.034681343, 0.023942633, 0.03011168, -0.001722643, 0.008333623, -0.01731662, -0.026071135, 0.0077503906, -0.012302016, -0.02329326, 0.016522942, -0.012518474, -0.0052070115, -0.010858964, 0.025998982, -0.027947102, -0.055942304, -0.03456109, 0.041992806, -0.028524322, 0.003974405, 0.02289642, 0.005336285, 0.04800552, -0.00051070505, 0.04293079, -0.018639417, 0.026840763, -0.0013611285, -0.036100343, 0.015741289, -0.01784574, -0.020840073, -0.004386276, 0.0028861035, 0.034104124, -0.0076662125, 0.014021653, -0.041415583, -0.015272298, -0.0096624335, 0.01884385, 0.019829936, -0.0039623794, 0.010293769, 5.4913005e-05, -0.00648772, 0.04490296, -0.014526721, 0.00068657694, 0.001004875, -0.0028846003, 0.0012551544, -0.013925449, 0.030352188, -0.0025899773, 0.018422961, 0.006866521, -0.03619655, -0.00976465, 0.02955851, -0.0056008445, -0.01797802, -0.041199125, 0.018615367, -0.0019030245, 0.014238111, 0.0022968573, -0.018050171, 0.00039646344, 0.010401998, -0.031554732, -0.033887666, -0.0013280585, -0.07566401, -0.0027252634, -0.039707974, -0.026552152, -0.0021224886, -0.0023058765, -0.0013739055, 0.017497003, 0.004494505, 0.002352475, 0.041391533, -0.008568119, -0.036148448, 0.038024414, -0.010702633, -0.015308374, 0.02537366, -0.021525523, -0.028620526, 0.0070108264, -0.002899632, 0.030616747, -0.01038396, -0.008399764, 0.0127108805, -0.00834565, 0.008429827, -0.0016910762, -0.009488065, -0.042425722, -0.015596984, -0.025590118, -0.030520543, -0.041367482, 0.019012207, 0.0055737873, 0.007311462, -0.036485158, -0.032252207, -0.042858638, -0.04016494, 0.01073871, -0.018807774, 0.004789128, 0.049184013, 0.0052551134, -0.04098267, -0.020022342, -0.00717317, 0.050651114, -0.022932498, -0.020118546, -0.004031526, 0.014659001, 0.015681162, 0.0048041595, -0.0050115986, 0.019204613, 0.019457148, 0.037206683, 7.017967e-05, -0.008477929, 0.037254784, 0.011478274, -0.04964098, 0.00065951975, -0.01002921, -0.011845049, -0.026672406, 0.047813114, 0.009385849, -0.008742488, -0.05550939, -0.023281235, 0.014779255, -0.022090716, -0.03174714, -0.04288269, 0.017064087, 0.028644577, 0.04716374, -0.010492189, -0.031362325, -0.0023073796, -0.0013776635, 0.003040931, -0.025469864, -0.023148956, 0.027081272, 0.00077939825, 0.01621028, 0.027995205, -0.011808974, 0.0035595277, -0.010395985, -0.017124213, -0.024892643, -0.0074858307, 0.011814986, 0.0320598, 0.004127729, 0.03015978, 0.015524832, 0.033262342, 0.010907066, 0.0032649045, -0.015115967, -0.04959288, 0.016366612, -0.002874078, 0.030352188, -0.0152482465, 0.013384305, 0.008387738, -0.016859654, 0.0391067, 0.028909136, 0.016102053, 0.010901053, 0.04790932, -0.0320117, -0.0028530336, -0.015945721, -0.010071299, 0.038240872, -0.017665358, -0.028572425, 0.006710191, -0.043147247, -0.0074257036, -0.0030559627, 0.0021044505, 0.026840763, -0.014743178, 0.014478619, -0.018014096, -0.0064576566, -0.020864123, 0.009391862, -0.024543906, -0.043604214, 0.0023419526, 0.00023148955, 0.02287237, 0.014490644, -0.006589936, 0.020719819, 0.0027357857, 0.013227974, -0.02300465, 0.027249627, 0.0109311165, 0.022283124, 0.010263706, 0.0014543256, 0.006613987, 0.02074387, 0.018386884, -0.0027868936, -0.014899509, -0.012903288, 0.035475023, 0.016366612, 0.007251335, 0.02871673, -0.028548373, 0.007828556, -0.00914534, -0.002462207, 0.004924414, 0.03314209, -0.035619326, 0.020647665, 0.001537752, -0.035523124, -0.026696457, 0.0005963862, -0.016258383, -0.0362206, -0.0056760036, -0.019649554, -0.072104484, -0.007984886, -0.018194478, 0.036797818, -0.02429137, -0.06503353, 0.027009118, 0.042810533, -0.0010356903, 0.009975095, -0.0010296776, 0.008357675, 0.002806435, 0.010943143, -0.045239672, -0.0018699545, 0.021717928, -0.019180562, -0.019938165, 0.03066485, -0.020755894, 0.04434979, 0.009716548, -0.0057271114, -0.010011171, 0.0029943325, 0.015308374, 0.0067162034, 0.0349459, -0.056471426, -0.0139013985, -0.016402688, 0.0028440144, -0.02676861, -0.0063013257, -0.022776166, 0.0030694914, 0.00690861, 0.0036497184, -0.022643887, -0.016126104, 0.04535993, -0.009542179, -0.013456457, -0.0012491416, 0.023160981, 0.05743346, -0.0002916167, -0.027850898, -0.007930771, -0.0012130653, -0.007978873, 0.031843342, 0.017388774, -0.03371931, 0.01747295, -0.017821688, 0.021910336, -0.0047109625, -0.016859654, 0.033671208, 0.0067041777, 0.009265595, 0.014298238, -0.001790286, -0.010618456, 0.026696457, 0.02134514, -0.052815694, 0.008285522, 0.0037729791, -0.025469864, 0.025782524, 0.008075077, 0.0010176521, 0.026552152, 0.002561417, 0.0114722615, -0.037158582, -0.04131938, 0.0101194, -0.021573624, 0.017497003, 0.01676345, -0.02874078, -0.0062893005, 0.0034152225, 0.03992443, 0.016571045, 0.02010652, -0.022992624, 0.014190009, 0.03658136, 0.00905515, -0.005014605, 0.0016835603, 0.018567266, -0.01434634, 0.026095185, 0.01366089, 0.042786483, 0.022222998, -0.004774096, -0.019890063, -0.008664323, 0.008075077, 0.0071310806, -0.027033169, 0.025325557, -0.009914968, 0.0061690463, 0.00044832312, -0.031218018, -0.010371935, -0.024195168, -0.0020593551, 0.055701796, -0.00095000904, 0.0038210808, -0.015428628, 0.013059618, -0.0051799547, -0.028019255, 0.038361125, 0.0076000723, 0.063157566, -0.010582379, -0.018194478, 0.0010153974, 0.031097764, 0.037519347, 0.00927762, 0.01352861, 0.0056008445, -0.014598873, -0.036148448, -0.0011491802, 0.050218202, 0.015789391, -0.033118036, 0.0062411986, -0.0026591234, 0.005982652, 0.014731153, 0.00739564, 0.018627392, 0.0028725748, 0.013733042, -0.007383615, -0.007257348, -0.020383107, -0.011604541, 0.01813435, 0.03040029, -0.008694387, -0.005041662, 0.0033250316, -0.043387756, -0.018026121, 0.039996583, 0.008039, -0.018050171, 0.010480164, 0.0102035785, 0.0094459765, 0.021766031, 0.0047590644, 0.008447865, -0.026600253, -0.02187426, 0.03571553, -0.025493914, 0.03990038, 0.008742488, -0.0027688555, -0.00041525316, -0.021970462, 0.02163375, 0.026431898, 0.027033169, 0.0025749453, 0.013324178, 0.008688374, -0.013757093, -0.06724621, 0.026600253, -0.016294459, -0.05387393, -0.0050927703, 0.009608319, -0.0047861217, 0.036918074, 0.023930607, 0.014731153, 0.0019255722, 0.0011146072, -0.015596984, -0.01813435, 0.006271262, -0.018783724, 0.0335269, 0.013095695, 0.0061540143, -0.00024652135, 0.008213369, 0.025542015, 0.0046327976, -0.023882506, -0.010329845, 0.01871157, -0.012181762, 0.002553901, 0.028452171, 0.010913079, 0.011568464, 0.0035745595, 0.023281235, 0.003427248, 0.016378637, 0.008465904, 0.034248427, 0.015945721, -0.020972352, -0.017701434, -0.021669827, 0.010486176, -0.028067356, -0.006613987, 0.008995023, 0.023461616, 0.009686485, -0.046971332, 0.0039623794, -0.031458527, -0.003496394, -0.014141907, 0.009049137, 0.025998982, -0.029173696, -0.006980763, -0.02623949, 0.031699035, 0.018627392, 0.0035475022, 0.0030108674, 0.048125774, 0.015488755, -0.009073188, 0.010762761, -0.00606683, 0.009614333, -0.0056489464, -0.015993824, -0.009806739, -0.010624468, -0.02050336, -0.017821688, -0.032540817, 0.0073295003, 0.019288791, -0.008880781, -0.009169391, -0.023112878, 0.028644577, -0.008153242, -0.03208385, -0.0075579835, 0.007377602, -0.025085049, 0.034392733, -0.014803306, 0.0056850226, 0.008285522, 0.028861035, 0.010492189, -0.043171298, 0.014803306, -0.0034392732, 0.0074076657, 0.015067865, -0.012434295, -0.002656117, 0.027971152, 0.01797802, 0.021681853, 0.017412825, 0.011496312, 0.0027508175, 0.0074858307, -0.002519328, -0.054258745, 0.03518641, 0.032540817, 0.012915313, -0.00075271685, 0.015127992, -0.028548373, 0.004813179, -0.00606683, 0.0035354767, 0.009091226, -0.019625504, 0.016787501, 0.011911189, -0.008604196, -0.0010695118, 0.009025086, -0.0045846957, 0.0029266893, -0.034657292, -0.00892287, -0.007990899, 0.0066079744, -0.004587702, -0.008514006, -0.0060127154, -0.013913424, 0.03735099, -0.015152044, 0.01939702, 0.0061690463, -0.026672406, -0.021441344, -0.0034633242, 0.034104124, -0.014454568, 0.013071644, -0.027249627, -0.011273841, 0.009536167, 0.011183651, 0.025566068, 0.0166913, 0.018759673, 0.04490296, -0.020359054, 0.007984886, 0.008063052, 0.0135767115, 0.029943323, -0.01726852, -0.0013280585, -0.009854841, 0.0026741552, 0.0021300046, 0.0024937738, -0.00027696072, -0.0075219073, 0.00519198, 0.0061570206, 0.021525523, -0.014683051, -0.02287237, -0.04964098, -0.007990899, 0.03011168, -0.0046839053, -0.02203059, 0.0029627655, -0.01492356, -0.009139327, 0.02763444, 0.010323833, 0.025133152, 0.009301671, -0.0017632288, -0.018940054, -0.008201344, -0.005074732, 0.04165609, -0.028933188, -0.0060517984, 0.018074224, -0.01605395, -0.005107802, -0.025758473, -0.021008428, 0.030255985, -0.0320117, -0.006427593, 0.002934205, 0.0077684284, 0.003881208, 0.012506449, 0.014827357, 0.037278835, -0.018519163, 0.014827357, 0.005119827, 0.009427938, -0.025012897, -0.024543906, 0.01866347, -0.008550081, -0.035883885, -0.020599563, 0.007906721, -0.001647484, -0.0013182879, -0.0216097, 0.0103899725, -0.023112878, -0.01310772, 0.0053543234, 0.006175059, 0.012698855, 0.010167502, -0.0027192505, 0.0074317167, -0.010287756, -0.0363168, -2.9593835e-05, -0.01177891, -0.023257185, 0.012746957, 0.0049394458, -0.0135767115, -0.015560908, 0.006469682, 0.019565377, 0.007269373, 0.0033310445, 0.0015189623, 0.028307864, 0.0174008, -0.0009860854, -0.026624305, -0.012746957, -0.00018761551, -0.019613478, 0.014971661, -0.009740599, -0.023461616, 0.017893841, 0.0041187103, 0.010005158, 0.029895222, 0.068544954, 0.0008139714, 0.024748337, 0.014478619, 0.031073714, -0.01910841, 0.042257365, 0.016787501, -0.019757783, -0.038024414, -0.03198765, 0.011664668, -0.027778747, 0.017208392, 0.034969952, -0.014911534, 0.006577911, 0.04290674, 0.0585879, 0.006914623, 0.046081454, -0.004040545, -0.018254604, 0.0038751953, 0.033310443, 0.014165957, 0.0037669663, -0.0034392732, -0.017725486, -0.00020894187, -0.027129373, -0.026431898, -0.015717238, -0.009728574, -0.001814337, -0.024255294, -0.030520543, 0.015945721, -0.004563651, -0.015717238, -0.02482049, -0.020070445, 0.014755204, -0.0320117, -0.01618623, 0.036413006, -0.043435857, -0.003141644, 0.043724466, 0.020178674, 0.00522505, -0.038601633, 0.035811733, -0.018338783, 0.032973733, 0.013769119, 0.025878727, -0.02145337, -0.013985576, -0.018627392, 0.01109346, -0.001890999, 0.0348978, -0.019060308, -0.029197747, -0.01213366, 0.025854677, -0.012530499, 0.019132461, -0.0102035785, 0.027369881, -0.0087184375, -0.036845922, 0.03316614, -0.00014759338, -0.013973551, -0.039756075, 0.010684595, -0.0061359764, 0.021465395, 0.039154805, 0.01204347, 0.014743178, -0.008039, 0.012338093, -0.0077443775, -0.0008049523, -0.01645079, 0.033839565, 0.019336894, -0.0039653857, -0.018940054, 0.0075098816, 0.019336894, -0.014562797, -0.009746612, 0.0070829787, 0.012855186, 0.038962398, 0.046442214, -0.043652315, 0.02929395, -0.010877002, -0.012151699, 0.033021834, -0.00050131016, -0.028404068, -0.021068556, 0.010913079, 0.021176783, -0.027682543, -0.01784574, -0.015837492, -0.011466249, 0.016559018, 0.0046087466, -0.023221107, -0.0116887195, -0.0027868936, -0.02400276, -0.0034663305, -0.030833205, 0.01067257, -0.017617257, -0.017003959, 0.015933696, -0.017521054, -0.0022788192, 0.028283814, -0.06080058, -0.022150844, -0.031290174, 0.03319019, 0.004193869, 0.047765013, 0.0063975295, 0.045840945, -0.0038210808, 0.024519853, -0.01955335, -0.014574823, 0.025758473, 0.0068184193, -0.009854841, -0.042137112, -0.0076842504, 0.010678583, 0.011923215, -0.0008042007, 0.0066681015, 0.0013340713, -0.034344632, -0.003093542, -0.048438437, -0.026311643, 0.037230734, 0.02869268, -0.0077503906, 0.040766213, 0.0018248592, 0.031145867, 0.004623778, -0.016943833, 0.030737001, 0.014562797, -0.016667247, 0.0181103, -0.0003346452, -0.009331735, 0.018074224, 0.02676861, -0.017965995, 0.018807774, 0.0017947956, -0.013059618, -0.01492356, 0.01731662, -0.024171116, -0.017821688, -0.020707792, -0.061425902, -0.033093985, 0.0075940597, 0.013167847, 0.00943395, 0.0041217166, -0.008327611, 0.010504214, -0.005642934, -0.0041126977, -0.030785104, 0.017100163, -0.012771008]"
../../../gradio,../../../gradio/gradio/components,file.py,"""""""gr.File() component""""""

from __future__ import annotations

import tempfile
import warnings
from pathlib import Path
from typing import Any, Callable, Literal

import gradio_client.utils as client_utils
from gradio_client import file
from gradio_client.documentation import document

from gradio import processing_utils
from gradio.components.base import Component
from gradio.data_classes import FileData, ListFiles
from gradio.events import Events
from gradio.utils import NamedString


@document()
class File(Component):
    """"""
    Creates a file component that allows uploading one or more generic files (when used as an input) or displaying generic files or URLs for download (as output).

    Demo: zip_files, zip_to_json
    """"""

    EVENTS = [Events.change, Events.select, Events.clear, Events.upload]

    def __init__(
        self,
        value: str | list[str] | Callable | None = None,
        *,
        file_count: Literal[""single"", ""multiple"", ""directory""] = ""single"",
        file_types: list[str] | None = None,
        type: Literal[""filepath"", ""binary""] = ""filepath"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        height: int | float | None = None,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default file(s) to display, given as a str file path or URL, or a list of str file paths / URLs. If callable, the function will be called whenever the app loads to set the initial value of the component.
            file_count: if single, allows user to upload one file. If ""multiple"", user uploads multiple files. If ""directory"", user uploads all files in selected directory. Return type will be list for each file in case of ""multiple"" or ""directory"".
            file_types: List of file extensions or types of files to be uploaded (e.g. ['image', '.json', '.mp4']). ""file"" allows any file to be uploaded, ""image"" allows only image files to be uploaded, ""audio"" allows only audio files to be uploaded, ""video"" allows only video files to be uploaded, ""text"" allows only text files to be uploaded.
            type: Type of value to be returned by component. ""file"" returns a temporary file object with the same base name as the uploaded file, whose full path can be retrieved by file_obj.name, ""binary"" returns an bytes object.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            height: The maximum height of the file component, specified in pixels if a number is passed, or in CSS units if a string is passed. If more files are uploaded than can fit in the height, a scrollbar will appear.
            interactive: if True, will allow users to upload a file; if False, can only be used to display files. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.file_count = file_count
        if self.file_count in [""multiple"", ""directory""]:
            self.data_model = ListFiles
        else:
            self.data_model = FileData
        self.file_types = file_types
        if file_types is not None and not isinstance(file_types, list):
            raise ValueError(
                f""Parameter file_types must be a list. Received {file_types.__class__.__name__}""
            )
        valid_types = [
            ""filepath"",
            ""binary"",
        ]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        if file_count == ""directory"" and file_types is not None:
            warnings.warn(
                ""The `file_types` parameter is ignored when `file_count` is 'directory'.""
            )
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.type = type
        self.height = height

    def _process_single_file(self, f: FileData) -> NamedString | bytes:
        file_name = f.path
        if self.type == ""filepath"":
            file = tempfile.NamedTemporaryFile(delete=False, dir=self.GRADIO_CACHE)
            file.name = file_name
            return NamedString(file_name)
        elif self.type == ""binary"":
            with open(file_name, ""rb"") as file_data:
                return file_data.read()
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(type)
                + "". Please choose from: 'filepath', 'binary'.""
            )

    def preprocess(
        self, payload: ListFiles | FileData | None
    ) -> bytes | str | list[bytes] | list[str] | None:
        """"""
        Parameters:
            payload: File information as a FileData object, or a list of FileData objects.
        Returns:
            Passes the file as a `str` or `bytes` object, or a list of `str` or list of `bytes` objects, depending on `type` and `file_count`.
        """"""
        if payload is None:
            return None

        if self.file_count == ""single"":
            if isinstance(payload, ListFiles):
                return self._process_single_file(payload[0])
            return self._process_single_file(payload)
        if isinstance(payload, ListFiles):
            return [self._process_single_file(f) for f in payload]  # type: ignore
        return [self._process_single_file(payload)]  # type: ignore

    def _download_files(self, value: str | list[str]) -> str | list[str]:
        downloaded_files = []
        if isinstance(value, list):
            for file in value:
                if client_utils.is_http_url_like(file):
                    downloaded_file = processing_utils.save_url_to_cache(
                        file, self.GRADIO_CACHE
                    )
                    downloaded_files.append(downloaded_file)
                else:
                    downloaded_files.append(file)
            return downloaded_files
        if client_utils.is_http_url_like(value):
            downloaded_file = processing_utils.save_url_to_cache(
                value, self.GRADIO_CACHE
            )
            return downloaded_file
        else:
            return value

    def postprocess(self, value: str | list[str] | None) -> ListFiles | FileData | None:
        """"""
        Parameters:
            value: Expects a `str` filepath or URL, or a `list[str]` of filepaths/URLs.
        Returns:
            File information as a FileData object, or a list of FileData objects.
        """"""
        if value is None:
            return None
        value = self._download_files(value)
        if isinstance(value, list):
            return ListFiles(
                root=[
                    FileData(
                        path=file,
                        orig_name=Path(file).name,
                        size=Path(file).stat().st_size,
                    )
                    for file in value
                ]
            )
        else:
            return FileData(
                path=value,
                orig_name=Path(value).name,
                size=Path(value).stat().st_size,
            )

    def process_example(self, input_data: str | list | None) -> str:
        if input_data is None:
            return """"
        elif isinstance(input_data, list):
            return "", "".join([Path(file).name for file in input_data])
        else:
            return Path(input_data).name

    def example_payload(self) -> Any:
        if self.file_count == ""single"":
            return file(
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            )
        else:
            return [
                file(
                    ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
                )
            ]

    def example_value(self) -> Any:
        if self.file_count == ""single"":
            return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
        else:
            return [
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            ]
","The code defines a `File` component that allows users to upload one or more generic files or display files for download. It includes parameters such as `value`, `file_count`, `file_types`, `type`, `label`, `height`, and others to customize the behavior and appearance of the component. The component can handle single files, multiple files, or all files in a directory. It can return file paths or binary data based on the specified type. The component also provides methods for preprocessing, postprocessing, and generating example data for demonstration purposes.","[-0.023261545, 0.031679332, -0.0053796773, -0.005000284, 0.035947505, -0.064354576, -0.01023176, 0.005234441, 0.0012819341, 0.06511336, 0.033647437, -0.043369386, -0.016242772, -0.028667899, -0.012911225, -0.00957375, 0.051692326, 0.0016791114, 0.04832521, -0.01702527, 0.0039480603, -0.04652309, 0.008216234, 0.011660413, -0.00039050824, -0.021577988, -0.03324433, 0.05131293, 0.0043867338, 0.011648557, -0.056861557, -0.036042355, 0.014025693, 0.018768108, -0.031869028, -0.013183914, 0.022443479, 0.035520688, 0.0017576576, -0.010451097, -0.07113623, -0.0032841223, -0.014464366, 0.012875657, -0.0009218069, 0.023273403, -0.013729292, 0.021696549, -0.026818357, 0.03163191, -0.043464236, -0.029877216, -0.00029825344, -0.045384914, 0.011861966, 0.07132592, -0.0655876, 0.04078477, -0.014926751, -0.04135386, 0.034477357, -0.007315175, -0.043203402, 0.029047292, -0.019562462, 0.010569657, -0.043701354, 0.019775871, 0.00086400873, 0.009490758, 0.05529656, -0.017096406, 0.0151164485, 0.00027565288, 0.01088977, 0.005335217, -0.033765994, -0.039717726, 0.009467046, -0.004629783, 0.00061317947, 0.028241081, -0.015436561, -0.02845449, -0.0066808774, 0.01896966, -0.04296628, 0.013670011, -0.0481118, -0.02121045, -0.049083997, 0.009822727, -0.024613135, 0.11694796, -0.010219905, 0.03210615, -0.049463388, -0.032035016, -0.003453071, -0.0012204308, 0.0067045894, 0.031276226, -0.025514193, -0.01953875, 0.044389006, -0.012602968, -0.019550607, 0.008394075, 0.032912362, -0.027743129, -0.019550607, -0.0113403, 0.007854625, 0.064402, 0.0020436845, -0.037109397, 0.04960566, 0.034453645, -0.02334454, -0.021862533, -0.02743487, -0.0018658439, -0.012401415, -0.04787468, 0.015602546, -0.02091405, -0.028620476, -0.023356395, -0.027743129, -0.009899791, -0.0007839805, 0.047400437, 0.023107417, -0.03424024, -0.044175595, 0.028999869, -0.021909958, 0.018519131, -0.043748777, 0.032438118, 0.0042533535, -0.030683426, 0.040595073, -0.006277772, -0.012282855, 0.022372343, -0.034951597, 0.02878646, -0.027245175, -0.032248423, 0.033742283, 0.001895484, 0.020748066, -0.014582926, -0.0019621742, -0.035994932, 0.03578152, 0.007576008, 0.004786875, -0.0341691, -0.029734943, -0.024945103, -0.0067045894, 0.00876754, 0.003456035, 0.029972063, 0.0314185, -0.03129994, -0.027292598, 0.005370785, 0.008210306, -0.011737477, -0.0068053654, -0.044365294, 0.017380951, -0.03485675, -0.018507276, -0.04408075, 0.005003248, -0.022941433, 0.0067283013, 0.009597463, -0.057430647, 0.0073033194, -0.003147778, -0.017558793, 0.022526471, 0.005649402, -0.026889494, 0.019882575, -0.02324969, 0.03715682, -0.00745152, -0.0043244897, 0.01182047, 4.7840964e-05, -0.00012735977, 0.02923699, 0.0142035335, 0.008370362, 0.008103602, 0.029877216, -0.018779963, -0.02049909, -0.034667056, -0.016290195, -0.031940166, 0.034406222, -0.019515038, 0.0028750892, -0.013053497, 0.0163969, 0.029308125, 0.0015990831, -0.049890205, -0.02594101, 0.0067401575, 0.029616382, -0.032532968, 0.007593792, 0.031584483, 0.03464334, 0.021826966, -0.03827129, -0.0006817222, 0.007493016, -0.015815955, -0.045764305, 0.012982361, -0.047850966, 0.02854934, 0.0047364873, 0.008791252, -0.047827255, 0.017345384, 0.023083705, -0.014926751, -0.032248423, 0.010457025, -0.00024027002, -0.012223575, 0.0018777, -0.02800396, -0.01938462, 0.026083283, 0.04500552, -0.018815532, -0.03028032, 0.015590689, 0.046191122, 0.02854934, -0.024044044, 0.0013464013, -0.034216523, 0.013587019, -0.02890502, 0.00024027002, 0.032295845, 0.050791267, 0.020178976, -0.010611154, -0.02776684, -0.03874553, 0.01975216, -0.01989443, 0.07545182, 0.04125901, 0.025514193, -0.01065265, 0.0048817233, 0.02393734, 0.035259858, 0.060702913, 0.0090639405, 0.0060228673, -3.109894e-05, 0.027600856, 0.043819916, 0.012247287, 0.035568114, -0.017463943, -0.01065265, -0.055913072, 0.042207494, -0.00080621056, -4.4923268e-06, -0.020084128, -0.022336775, 0.026415251, -0.037085686, 0.039670303, -0.019111933, -0.0026765005, -0.045527186, -0.009585607, 0.025798738, 0.0055486257, 0.0064852526, 0.016183492, 0.017878905, -0.036066066, -0.019005228, -0.014725199, -0.03407425, 0.012259143, -0.034335084, -0.023806924, 0.013539595, -0.015578833, -0.0300432, 0.0251348, -0.00688243, -0.03362372, -0.024873966, -0.037109397, 0.005358929, 0.0424209, 0.043914765, -0.0005364857, 0.018993372, 0.016017508, 0.036967125, 0.035805233, -0.04287143, -0.017428376, 0.02151871, -0.054442924, 0.008032465, -0.017167542, -0.035236143, 0.014654063, 0.013183914, -0.01427467, -0.008969093, 0.037868183, -0.0600864, -0.020759922, 0.052166566, -0.070472285, 0.035923794, -0.01708455, -0.023771355, 0.019194925, 0.040500224, 0.018424282, 0.010569657, 0.028976155, 0.08318196, 0.0003145555, -0.030422593, -0.023273403, -0.022609463, 0.03426395, 0.05539141, 0.046949908, -0.0074218796, -0.046665363, -0.07938803, -0.03414539, -0.03428766, -0.02205223, 0.0614617, 0.018661404, 0.009093581, -0.03988371, -0.005928019, -0.03919606, -0.025395634, 0.010913483, 0.009662671, 0.0061414274, 0.015851522, -0.0089394525, 0.020653218, 0.007493016, -0.019728446, -0.005053636, 0.0051544122, -0.0079435455, -0.030778274, 0.029616382, 0.041970372, 0.011358084, -0.014725199, -0.023202267, 0.005347073, -0.011476644, 0.035378415, 0.026367828, -0.005913199, -0.0054389574, 0.010468882, -0.010871987, -0.0063548363, 0.025632754, 0.061651397, 0.032912362, 0.023712076, 0.030019488, -0.039480604, -0.0024008476, -0.01759436, -0.01128102, 0.056766707, -0.011322516, -0.0077004964, 0.052925352, 0.029450398, 0.025632754, -0.03701455, 0.0226806, 0.0020896266, 0.024376014, -0.024921391, 0.023202267, 0.0011470716, -0.019526893, 0.008832748, -0.009437406, 0.0461437, -0.04970051, -0.024304878, -0.027150325, -0.008874244, 0.010409601, 0.018009322, 0.049842782, 0.024399726, 0.03485675, -0.0848418, -0.020641362, -0.018649546, -0.028644187, 0.018756252, 0.016657732, -0.06018125, 0.013729292, 0.016622165, 0.0099768555, 0.06644124, -0.032390695, 0.052735656, 0.039670303, 0.005948767, -0.01759436, -0.040950753, 0.015804099, 0.043748777, -0.018471707, -0.0027061405, -0.068812445, 0.017060839, -0.08417787, -0.0014671846, 0.018827388, -0.010421457, 0.024613135, -0.06738972, 0.07170532, -0.0032129863, 0.00030733072, 0.047115892, 0.017392807, 0.04649938, -0.0049261837, -0.02211151, -0.019681023, -0.0058064945, -0.013895276, -0.046475668, -0.012934937, 0.0028765711, 0.0039777006, 0.02949782, -0.03715682, -0.01295865, -0.015104592, -0.017629929, -0.045290064, -0.010545946, 0.011488501, 0.0013797464, -0.051123235, -0.011506285, -0.01896966, 0.09835769, 0.016622165, -0.020985186, 0.048348922, -0.030375168, -0.06587215, -0.024162605, 0.036753718, -0.008844604, 0.009567822, 0.014227245, -0.059375037, -0.019918144, -0.013053497, -0.0016598452, 0.017499512, 0.009129149, -0.0032693024, 0.0033997188, -0.0243523, 0.00828737, 0.039124925, -0.0150216, 0.004807623, 0.012733384, 0.010812706, 0.010036136, 0.040500224, 0.017511368, -0.0042859577, -0.015590689, -0.015353569, 0.008370362, -0.0092714215, -0.033196904, -0.012934937, 0.041851815, -0.014974176, -0.0061354996, -0.0004160728, 0.021506852, -0.020309392, -0.057715192, 0.009413694, 0.0018510239, 0.010818634, -0.027837977, 0.00571461, -0.0027950609, -0.050317023, 0.0023875097, 0.009194357, 0.0009759001, 0.007238111, -0.022929577, -0.028430779, -0.03884038, 0.010421457, -0.020593937, -0.008447427, 0.045408625, -0.024707982, -0.06572987, 0.018649546, 0.005898379, 0.0036575876, -0.016076786, 0.027316311, -0.031679332, 0.008073961, 0.02205223, 0.011529997, -0.0030440376, -0.008844604, -0.023024425, -0.00067023665, -0.0036753716, 0.035994932, 0.05268823, 0.015294288, -0.011097251, -0.015744818, -0.0044667623, 0.0071017668, 0.0067816535, -0.039812576, 0.026367828, 0.0008151026, 0.022633176, -0.018139739, 0.013634443, 0.0074100234, -0.031726755, -0.023949197, -0.0040191966, 0.016740724, -0.003450107, -0.03630319, -0.03516501, -0.008820892, 0.013148346, 0.02854934, -0.005969515, 0.0009017999, 0.013041642, -0.018353146, -0.016444324, 0.013658156, 0.009769375, -0.0018777, 0.03314948, -0.020831058, 0.017665496, -0.064496845, -0.007184759, -0.028501915, -0.0066453093, -0.020534657, 0.0076767844, 0.010374033, 8.2112325e-05, 0.028075097, -0.01816345, -0.063738056, -0.0031774181, -0.037488792, 0.022668744, -0.039599165, -0.05036445, 0.025988435, -0.006983206, -0.0045882864, 0.017606216, 0.025466768, -0.00891574, -0.031062819, 0.02468427, 0.012650392, -0.03680114, 0.032177288, 0.026320403, 0.010990547, -0.019432046, -0.00957375, 0.031323653, -0.016586596, 0.019633599, 0.043796204, -0.014239102, -0.007664928, -0.015578833, 0.0154484175, -0.030659713, -0.0061295717, -0.05131293, 0.030209184, 0.039480604, 0.03129994, 0.012365847, 0.0073033194, 0.01684743, -0.029142141, -0.018803677, 0.025680177, -0.023273403, 0.005038816, -0.011832326, -0.0010952015, -0.010000568, -0.00499732, -0.01651546, 0.009431478, 0.0023682436, -0.023225978, 0.055818226, 0.004182217, -0.0065445327, -0.014594782, -0.017843336, -0.017618071, 0.031394787, 0.0056138337, -0.013954557, -0.011648557, 0.03208244, -0.035971217, 0.021471284, -0.003153706, 0.040689923, -0.014073117, -0.0557708, 0.0009240299, -0.021530565, -0.015211296, 0.0243523, -0.0007517469, 0.0009929432, -0.027031766, -0.036967125, -0.019064508, -0.030801985, 0.0014931198, 0.024281165, 0.0052285125, -0.033339176, 0.0045556827, -0.00035734838, -0.015732963, -0.020084128, -0.015851522, 0.022870297, -0.022953289, -0.011713766, 0.035046447, 0.015294288, 0.0058894865, -0.007587864, -0.026438965, -0.004404518, -0.032201, 0.018483562, -0.02845449, 0.02415075, 0.026604949, -0.0420178, 0.015898947, -0.0012389559, -0.028193658, 0.004072549, -0.012531832, -0.010190264, -0.00030881274, 0.010806778, 0.02878646, 0.014938608, -0.023889916, -0.00930699, -0.054632623, -0.021791397, 0.004976572, -0.012792665, -0.023297114, 0.00876754, -0.023510523, -0.028075097, -0.014725199, 0.012401415, 0.007374455, 0.028762747, -0.0042207493, 0.018495418, 0.005696826, 0.016491748, 0.0014834867, -0.001564997, -0.0030914617, 0.032888647, 0.024921391, -0.009301062, -0.010688218, -0.05529656, -0.010219905, -0.04135386, -0.023522379, -0.016242772, 0.023664651, 0.00700099, -0.033268042, 0.005563446, -0.012579256, 0.0045467904, -0.023142986, -0.01975216, -0.021577988, 0.0142035335, -0.017297959, 0.07080426, 0.00805025, -0.01993, -0.001590191, -0.0487046, 0.030493729, 0.0032989425, 0.0051040244, 0.012674104, -0.0038413561, 0.016076786, -0.042112645, -0.04087962, 0.05235626, -0.022040375, -0.015661826, 0.0042385333, -0.0012974951, 0.0071729026, -0.014322094, 0.017309815, 0.047898393, -0.0327938, 0.02079549, 0.023356395, -0.018744396, 0.0017294995, -0.01840057, -0.049083997, 0.0049825, 0.0063489084, -0.015661826, -0.009241781, 0.0022630212, 0.0061236434, 0.015282433, -0.076684855, -0.014499934, 0.014962319, -0.01606493, -0.017950041, -0.041164164, 0.020748066, 0.037180535, 0.02330897, -0.026225556, -0.02537192, -0.022241926, 0.018874813, -0.017878905, 0.015424705, -0.00077731145, 0.0061710677, -0.0010751945, -0.023142986, -0.0024660558, 0.0074159517, -0.013148346, -0.034809325, 0.0177722, 0.021151172, -0.027221462, 0.010208049, -0.017475799, 0.026533812, -0.006259988, 0.045384914, 0.018590268, 0.02409147, 0.038342427, 0.01570925, 0.01708455, 0.026438965, -0.00987608, 0.010812706, -0.01139958, -0.036848564, -0.00029436318, -0.031726755, 0.012401415, -0.012188007, -0.01142922, 0.014914895, 0.0543955, 0.006710517, -0.030066911, 0.027150325, -0.039030075, 0.011464789, -0.020748066, -0.027458584, -0.01834129, -0.030114336, 0.016859286, 0.0029254772, 0.017701065, -0.0016776293, -0.028169945, 0.00439859, 0.008791252, 0.032841224, -0.020890338, 0.04787468, 0.014357662, -0.067342296, -0.017677352, 0.032319557, 0.036730006, -0.00936627, 0.021791397, 0.011583349, 0.00377022, 0.009745663, -0.01998928, -0.02537192, -0.01370558, 0.0014745947, -0.023652796, 0.019621743, 0.00571461, 0.010166552, 0.02181511, -0.004961752, 0.027221462, 0.011992382, 0.011192099, 0.0013293582, 0.013112778, 0.0075582243, 0.011180243, 0.008429643, 0.00026379683, -0.020214545, 0.002248201, 0.022040375, -0.028075097, 0.022514615, -0.04227863, 0.005957659, -0.0064556124, -0.022241926, -0.011873822, -0.0082755145, -0.022075942, -0.005326325, 0.004674243, -0.009638959, -0.008328866, -0.03255668, -0.021471284, -0.0054567414, 0.012828233, 0.0278854, -0.016871141, 0.01002428, 0.009135077, 0.020866627, 0.017724777, -0.016954133, -0.01490304, -0.016728869, 0.045764305, 0.016124211, -0.019443901, 0.012033878, -0.004976572, -0.0045853225, 0.04135386, -0.012887513, 0.03051744, 0.022953289, 0.033196904, -0.0045705023, 8.31312e-05, -0.0671526, -0.032248423, 0.0071669747, -0.031442214, 0.012650392, -0.043227114, 0.009668599, 0.03585266, -0.030066911, 0.03153706, -0.027553432, -0.0016805934, -0.005252225, -0.0073922393, -0.011150603, 0.0259173, 0.0038354283, 0.02228935, -0.0314185, -0.034595918, 0.018530987, 0.045408625, -0.0018362039, 0.032509256, 0.0055278777, -0.056719285, 0.013693724, -0.015673682, 0.032366984, -0.0023845455, -0.019218637, 0.025632754, -0.009633031, 0.015661826, 0.018353146, 0.016266484, 0.02273988, 0.004902472, -0.0355444, -0.03623205, -0.0040340167, -0.017286103, -0.012579256, 0.0006913552, -0.000120783385, 0.016207203, 0.049985055, 0.022360487, 0.01071193, -0.029758655, -0.022822872, 0.021874389, 0.019491326, 0.0065089646, 0.046096273, -0.027174039, -0.0016198312, 0.017950041, -0.03668258, 0.024257453, -0.02348681, -0.008127314, -0.013065354, 0.034880463, 0.0049113636, -0.0300432, -0.023795068, 0.0355444, -0.023522379, 0.013124634, -0.008115457, 0.05904307, 0.011257308, 0.018720683, -0.016634021, 0.013041642, -0.0004049578, 0.038295, -0.029071005, 0.02902358, -0.040689923, -0.02480283, 0.03725167, -0.0054330295, -0.040025983, -0.032722663, -0.052830502, -0.019028941, 0.009330702, 0.0042237137, 0.015804099, 0.033410314, -0.036824852, 0.030114336, 0.01077121, 0.0106407935, 0.007872409, -0.027600856, -0.014606639, 7.826837e-05, 0.061888516, -0.019159356, 0.01816345, 0.005385605, 0.035354704, -0.0054182094, -0.019550607, 0.0021281587, 0.039551742, -0.0020214545, -0.0265101, -0.017369095, -0.0032040942, 0.016183492, 0.01918307, -0.014037549, 0.02118674, -0.012164295, 0.023451243, -0.0067757256, -0.008921668, 0.010747498, 0.0051781246, 0.0096033905, 0.039907422, -0.012508119, 0.006574173, 0.029877216, -0.00987608, -0.049937632, 0.0039362046, 0.021898102, -0.025324497, 0.03701455, -0.0023919556, -0.009893863, -0.004004377, 0.03381342, -0.016302051, -0.0378919, -0.0016746654, -0.02672351, -0.029972063, 0.021969238, -0.0014568106, -0.02223007, -0.022372343, -0.007249967, 0.013978268, 0.007801273, 0.01570925, -0.0008180666, -0.004078477, 0.010326609, -0.019111933, -0.007273679, 0.038603257, -0.004060693, -0.024850255, -0.02971123, 0.016242772, 0.0064852526, 0.025016239, -0.018234586, -0.00013347305, 0.00567015, -0.025182225, -0.02923699, -0.017748488, -0.014167965, 0.009804944, -0.0048431912, 0.010338465, 0.0012056108, -0.00828737, 0.008803108, 0.05230884, 0.04970051, -0.043748777, -0.021850677, 0.014677775, 0.011150603, -0.006574173, -0.022218214, 0.015163872, 0.016894855, -0.023403818, -0.028098809, 0.0016761473, 0.034572206, -0.01975216, 0.04422302, 0.022479048, -0.021257875, 0.041756965, 0.00029232542, -0.0055278777, 0.005335217, -0.0060228673, 0.008394075, 0.009810871, -0.021684693, -0.0007247003, -0.011447004, 0.0042355694, 0.002861751, -0.02821737, -0.0054923096, 0.012164295, -0.013006073, -0.017048983, -0.011168388, 0.007664928, -0.0029091754, 0.016159778, 0.0059635867, 0.027553432, 0.020321248, 0.013444747, 0.014950464, -0.02354609, 0.009668599, -0.01783148, 0.0037079758, 0.012164295, -0.019171214, 0.014618495, -0.019159356, -0.0039747367, -0.0033048706, 0.005717574, -0.021696549, 0.025751313, -0.007564152, 0.04102189, -0.008216234, 0.011856038, -0.02480283, 0.013551451, 0.02046352, -0.041899238, -0.03153706, -0.006556389, 0.017938185, 0.032604102, -0.0010640793, -0.023972908, -0.027340023, 0.0036694438, -0.03303092, 0.009769375, -0.0080265375, -0.048348922, 0.007261823, 0.023237834, 0.026889494, 0.013966412, 0.004920256, -0.044744685, 0.017807769, 0.015104592, -0.026438965, 0.0077360645, 0.03405054, 0.011648557, -0.004718703, 0.016527317, -0.0009973892, 0.018424282, 0.020024847, -0.038010456, -0.0076530725, -0.031181378, 0.013527739, 0.016385045, 0.01427467, 0.042681735, 0.022550184, -0.022941433, -0.02444715, 0.029450398, 0.01971659, 0.020688785, 0.015780386, 0.003473819, 0.002843967, 0.032936074, 0.012188007, 0.029071005, -0.022028519, 0.0010700074, 0.025443057, 0.006538605, 0.0020436845, 0.02046352, 0.012377704, -0.0210089, 0.0007550814, 0.006959494, 0.019633599, -0.028359642, 0.025964722, -0.0005698308, 0.04156727, 0.03267524, 0.029687518, -0.0086904755, 0.020985186, 0.028999869, -0.01474891, 0.0278854, 0.02537192, -0.0021474247, -0.009834583, 0.030422593, 0.01445251, -0.0024127036, 0.007332959, -0.0045319702, -0.00061095646, 0.016088644, -0.027671993, -0.054110955, 0.015246864, -0.036587734, -0.025300784, 0.017297959, 0.013563307, -0.02307185, -0.0032129863, 0.0013041642, -0.0006124384, 0.0033107984, -0.013148346, 0.018021178, -0.007137335, 0.031916454, 0.05724095, -0.0070899106, -0.032201, 0.021601701, -0.023463098, 0.0071254787, 0.011115035, -0.004048837, -0.00314185, -0.030493729, -0.013788572, -0.0040014125, -0.04728188, 0.024032189, 0.016717013, -0.049036574, 0.029142141, 0.011405508, -0.022941433, 0.046357106, 0.028098809, -0.0064319004, 0.00028343342, -0.0017843337, 0.0061710677, -0.01074157, 0.005065492, 0.023391962, -0.011144675, 0.018602123, -0.0016465072, 0.00015162761, -0.008488923, -0.004122937, -0.007890193, 0.035378415, -0.027055478, -0.0047957674, -0.03198759, -0.0045675384, 0.0061947796, -0.0002200777, -0.003210022, -0.023463098, 0.02743487, -0.016800005, 0.0016079751, -0.025537904, 0.024257453, -0.0073388875, -0.015270577, 0.014310238, 0.026059572, 0.019040797, -0.031394787, -0.008892029, -0.020819202, 0.008494851, -0.0002665756, 0.019740302, 0.0237595, -0.018519131, -0.027482295, -0.03827129, -0.021257875, 0.029995775, 0.017558793, 0.0046031065, -0.014843759, 0.012555544, -0.0064319004, 0.006947638, -0.0038176442, 0.030778274, -0.0035093871, -0.0097278785, 0.04448385, 0.0036071995, -0.020036703, 0.03314948, -0.041282725, 0.019100077, 0.023557946, 0.010451097, 0.018934092, 0.040832195, -0.026604949, -0.013812284, -0.0014338396, 0.024186317, 0.023059994, 0.016503604, 0.009716023, 0.004090333, -0.009781231, 0.042183783, 0.025300784, 0.011636701, -0.029782366, 0.037536215, 0.013041642, -0.006420044, 0.013741148, 0.024198173, 0.01564997, 0.0012219129, -0.05278308, -0.04386734, 0.046380818, 0.009283277, 0.012721528, -0.009858295, 0.024826543, 0.0002445308, -0.02798025, -0.014179821, -0.040855907, -0.02707919, -0.001270819, 0.043843627, 0.02354609, -0.00060910394, -0.001273783, -0.01331433, -0.039243486, 0.007878337, 0.023676507, -0.0001655214, -0.005293721, 0.006651237, -0.022479048, 0.019396478, 0.026865782, 0.005664222, -0.030232897, -0.026913205, -0.0064437566, -0.018187162, -0.03369486, 0.0031774181, 0.008613411, -0.026296692, -0.0020955547, -0.011085396, 0.041069314, -0.02303628, 0.0021266767, -0.05837913, -0.011648557, -0.01331433, 0.0030529296, 0.029284414, -0.031869028, 0.0027609747, -0.0017250535, -0.012188007, 0.014725199, 0.012828233, 0.057288375, 0.019159356, 0.023972908, -0.015756674, -0.011298804, -0.031465925, 0.036848564, 0.020629505, 0.0033226546, -0.02250276, 0.001560551, 0.0020392386, -0.0010159143, -0.026130708, 0.018258298, -0.034880463, 0.012016094, 0.003743544, -0.016705157, -0.014037549, -0.0045705023, -0.010486665, -0.0036071995, -0.017748488, -0.02776684, -0.0061117876, -0.008263659, 0.016562885, -0.023617227, 0.007605648, -0.0074100234, -0.0015264648, -0.012235431, -0.018080458, -0.016136067, 0.018412426, 0.0048491196, -0.019621743, 0.00969231, -0.012051662, -0.012235431, 0.07483531, -0.0072084707, -0.019218637, -0.0357341, 0.001916232, -0.018234586, 0.006829078, 0.049178846, -0.0018006357, -0.034785613, 0.040855907, 0.03473819, -0.014037549, 0.02079549, -0.029972063, -0.01182047, -0.03950432, -0.03746508, -0.012045735, -0.007273679, 0.008583771, 0.027245175, -0.012122799, 0.010125056, -0.017001558, -0.009028372, -0.024044044, 0.019301629, 0.02256204, -0.011352156, -0.00090550486, 0.01783148, 0.030801985, -0.0026098103, 0.001894002, -0.003989557, -0.0066453093, 0.020807346, -0.034761902, 0.0023000713, -0.00046275597, 0.017404662, -0.0015190549, -0.0026883564, 0.027861688, 0.028407067, -0.0042148214, 0.009490758, 0.014547358, -0.02798025, 0.0013189842, -0.011601133, -0.063738056, -0.0036872276, -0.0033730427, 0.013658156, 0.0049143275, 0.017784057, -0.015033456, 0.012188007, 0.030446304, 0.0070721265, 0.0011115036, -0.02639154, 0.0039836285]"
../../../gradio,../../../gradio/gradio/components,scatter_plot.py,"""""""gr.ScatterPlot() component.""""""

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.plot import AltairPlot, AltairPlotData, Plot

if TYPE_CHECKING:
    import pandas as pd


@document()
class ScatterPlot(Plot):
    """"""
    Creates a scatter plot component to display data from a pandas DataFrame (as output). As this component does
    not accept user input, it is rarely used as an input component.

    Guides: creating-a-dashboard-from-bigquery-data
    """"""

    data_model = AltairPlotData

    def __init__(
        self,
        value: pd.DataFrame | Callable | None = None,
        x: str | None = None,
        y: str | None = None,
        *,
        color: str | None = None,
        size: str | None = None,
        shape: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        size_legend_title: str | None = None,
        shape_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        size_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        shape_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        x_lim: list[int | float] | None = None,
        y_lim: list[int | float] | None = None,
        caption: str | None = None,
        interactive: bool | None = True,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        show_actions_button: bool = False,
    ):
        """"""
        Parameters:
            value: The pandas dataframe containing the data to display in a scatter plot, or a callable. If callable, the function will be called whenever the app loads to set the initial value of the component.
            x: Column corresponding to the x axis.
            y: Column corresponding to the y axis.
            color: The column to determine the point color. If the column contains numeric data, gradio will interpolate the column data so that small values correspond to light colors and large values correspond to dark values.
            size: The column used to determine the point size. Should contain numeric data so that gradio can map the data to the point size.
            shape: The column used to determine the point shape. Should contain categorical data. Gradio will map each unique value to a different shape.
            title: The title to display on top of the chart.
            tooltip: The column (or list of columns) to display on the tooltip when a user hovers a point on the plot.
            x_title: The title given to the x-axis. By default, uses the value of the x parameter.
            y_title: The title given to the y-axis. By default, uses the value of the y parameter.
            x_label_angle:  The angle for the x axis labels rotation. Positive values are clockwise, and negative values are counter-clockwise.
            y_label_angle:  The angle for the y axis labels rotation. Positive values are clockwise, and negative values are counter-clockwise.
            color_legend_title: The title given to the color legend. By default, uses the value of color parameter.
            size_legend_title: The title given to the size legend. By default, uses the value of the size parameter.
            shape_legend_title: The title given to the shape legend. By default, uses the value of the shape parameter.
            color_legend_position: The position of the color legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            size_legend_position: The position of the size legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            shape_legend_position: The position of the shape legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            height: The height of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            x_lim: A tuple or list containing the limits for the x-axis, specified as [x_min, x_max].
            y_lim: A tuple of list containing the limits for the y-axis, specified as [y_min, y_max].
            caption: The (optional) caption to display below the plot.
            interactive: Whether users should be able to interact with the plot by panning or zooming with their mouse or trackpad.
            label: The (optional) label to display on the top left corner of the plot.
            every:  If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: Whether the label should be displayed.
            visible: Whether the plot should be visible.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            show_actions_button: Whether to show the actions button on the top right corner of the plot.
        """"""
        self.x = x
        self.y = y
        self.color = color
        self.size = size
        self.shape = shape
        self.tooltip = tooltip
        self.title = title
        self.x_title = x_title
        self.y_title = y_title
        self.x_label_angle = x_label_angle
        self.y_label_angle = y_label_angle
        self.color_legend_title = color_legend_title
        self.color_legend_position = color_legend_position
        self.size_legend_title = size_legend_title
        self.size_legend_position = size_legend_position
        self.shape_legend_title = shape_legend_title
        self.shape_legend_position = shape_legend_position
        self.caption = caption
        self.interactive_chart = interactive
        self.width = width
        self.height = height
        self.x_lim = x_lim
        self.y_lim = y_lim
        self.show_actions_button = show_actions_button
        super().__init__(
            value=value,
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
        )

    def get_block_name(self) -> str:
        return ""plot""

    @staticmethod
    def create_plot(
        value: pd.DataFrame,
        x: str,
        y: str,
        color: str | None = None,
        size: str | None = None,
        shape: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        size_legend_title: str | None = None,
        shape_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        size_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        shape_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | None = None,
        width: int | None = None,
        x_lim: list[int | float] | None = None,
        y_lim: list[int | float] | None = None,
        interactive: bool | None = True,
    ):
        """"""Helper for creating the scatter plot.""""""
        import altair as alt
        from pandas.api.types import is_numeric_dtype

        interactive = True if interactive is None else interactive
        encodings = {
            ""x"": alt.X(
                x,  # type: ignore
                title=x_title or x,  # type: ignore
                scale=AltairPlot.create_scale(x_lim),  # type: ignore
                axis=alt.Axis(labelAngle=x_label_angle)
                if x_label_angle is not None
                else alt.Axis(),
            ),  # ignore: type
            ""y"": alt.Y(
                y,  # type: ignore
                title=y_title or y,  # type: ignore
                scale=AltairPlot.create_scale(y_lim),  # type: ignore
                axis=alt.Axis(labelAngle=y_label_angle)
                if y_label_angle is not None
                else alt.Axis(),
            ),
        }
        properties = {}
        if title:
            properties[""title""] = title
        if height:
            properties[""height""] = height
        if width:
            properties[""width""] = width
        if color:
            if is_numeric_dtype(value[color]):
                domain = [value[color].min(), value[color].max()]
                range_ = [0, 1]
                type_ = ""quantitative""
            else:
                domain = value[color].unique().tolist()
                range_ = list(range(len(domain)))
                type_ = ""nominal""

            encodings[""color""] = {
                ""field"": color,
                ""type"": type_,
                ""legend"": AltairPlot.create_legend(
                    position=color_legend_position, title=color_legend_title or color
                ),
                ""scale"": {""domain"": domain, ""range"": range_},
            }
        if tooltip:
            encodings[""tooltip""] = tooltip
        if size:
            encodings[""size""] = {
                ""field"": size,
                ""type"": ""quantitative"" if is_numeric_dtype(value[size]) else ""nominal"",
                ""legend"": AltairPlot.create_legend(
                    position=size_legend_position, title=size_legend_title or size
                ),
            }
        if shape:
            encodings[""shape""] = {
                ""field"": shape,
                ""type"": ""quantitative"" if is_numeric_dtype(value[shape]) else ""nominal"",
                ""legend"": AltairPlot.create_legend(
                    position=shape_legend_position, title=shape_legend_title or shape
                ),
            }
        chart = (
            alt.Chart(value)  # type: ignore
            .mark_point(clip=True)  # type: ignore
            .encode(**encodings)
            .properties(background=""transparent"", **properties)
        )
        if interactive:
            chart = chart.interactive()

        return chart

    def preprocess(self, payload: AltairPlotData | None) -> AltairPlotData | None:
        """"""
        Parameters:
            payload: The data to display in a scatter plot.
        Returns:
            (Rarely used) passes the data displayed in the scatter plot as an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""scatter"").
        """"""
        return payload

    def postprocess(
        self, value: pd.DataFrame | dict | None
    ) -> AltairPlotData | dict | None:
        """"""
        Parameters:
            value: Expects a pandas DataFrame containing the data to display in the scatter plot. The DataFrame should contain at least two columns, one for the x-axis (corresponding to this component's `x` argument) and one for the y-axis (corresponding to `y`).
        Returns:
            The data to display in a scatter plot, in the form of an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""scatter"").
        """"""
        # if None or update
        if value is None or isinstance(value, dict):
            return value
        if self.x is None or self.y is None:
            raise ValueError(""No value provided for required parameters `x` and `y`."")
        chart = self.create_plot(
            value=value,
            x=self.x,
            y=self.y,
            color=self.color,
            size=self.size,
            shape=self.shape,
            title=self.title,
            tooltip=self.tooltip,
            x_title=self.x_title,
            y_title=self.y_title,
            x_label_angle=self.x_label_angle,
            y_label_angle=self.y_label_angle,
            color_legend_title=self.color_legend_title,
            size_legend_title=self.size_legend_title,
            shape_legend_title=self.size_legend_title,
            color_legend_position=self.color_legend_position,  # type: ignore
            size_legend_position=self.size_legend_position,  # type: ignore
            shape_legend_position=self.shape_legend_position,  # type: ignore
            interactive=self.interactive_chart,
            height=self.height,
            width=self.width,
            x_lim=self.x_lim,
            y_lim=self.y_lim,
        )

        return AltairPlotData(type=""altair"", plot=chart.to_json(), chart=""scatter"")

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        import pandas as pd

        return pd.DataFrame({self.x: [1, 2, 3], self.y: [4, 5, 6]})
","The code defines a `ScatterPlot` component that creates a scatter plot to display data from a pandas DataFrame. The component has various parameters such as `x`, `y`, `color`, `size`, `shape`, `title`, `tooltip`, etc., to customize the appearance of the scatter plot. The `create_plot` method generates the scatter plot using Altair library based on the provided parameters. The `preprocess` and `postprocess` methods handle the data processing before and after displaying the scatter plot. The `example_payload` and `example_value` methods provide examples of the input data and output data for the component.","[-0.050937265, -0.027386943, 0.0078109927, 0.005397799, 0.040243704, -0.014244475, -0.023285024, -0.009790526, -0.03269291, 0.0014234271, 0.00993848, -0.027815502, -0.006969181, -0.035590783, -0.0027371638, -0.015673004, 0.015560763, 0.009683386, 0.0011587667, -0.00920891, -0.025795154, -0.033203095, -0.0113772135, 0.01061193, -0.019234123, -0.038141727, -0.00079461926, 0.029448107, -0.0005717305, 0.050937265, -0.014530181, -0.03161131, -0.013917955, 0.015703617, 0.015326076, -0.01253024, -0.014652627, -0.015203631, -0.026795125, -0.03477448, -0.010928247, -0.00017856613, 0.00087816274, 0.009928277, -0.021836087, 0.010351734, -0.018968824, 0.0034539793, 0.02138712, 0.05722279, -0.016458696, 0.014846498, -0.0442844, -0.0035483642, -0.024631923, 0.026142081, -0.06465115, 0.050692376, 0.00024457183, -0.021754457, 0.026264528, 0.020723876, -0.018315783, 0.04052941, -0.04052941, -0.007887521, -0.028550174, 0.019795332, -0.021632012, 0.04828428, 0.07273254, 0.031897012, 0.012754723, 0.00081375137, -0.014846498, -0.037651945, -0.064732775, -0.0050100554, 0.031815384, -0.010443568, -0.008474238, -0.0007984457, -0.007759974, -0.0059641087, -0.020662652, -0.07554878, -0.010025213, -0.009203808, 0.025774745, -0.041590605, 0.010096639, -0.030366447, -0.037733573, 0.010897636, 0.033529617, 0.060488, -0.037590723, -0.023591137, 0.048080206, 0.032039866, 0.038488656, -0.018591285, -0.053794324, -0.02740735, 0.0042575267, -0.058977842, -0.048692435, -0.010795598, 0.054896332, 0.03208068, -0.04001922, -0.0035458133, -0.028570581, 0.04612108, -0.06926325, -0.0029386883, -0.0019374426, -0.031713344, 0.024305401, 0.006244713, -0.044855814, 0.012326165, 0.039202917, -0.016877051, 0.014244475, -0.02314217, 0.00618349, -0.0693857, -0.03459081, 0.0280808, 0.027693056, -0.021938125, -0.031162342, -0.042815056, -0.005089135, 0.035815265, -0.051835198, -0.0023353898, -0.03518263, 0.010775191, 0.038509063, 0.044529293, 0.019938184, -0.023203393, -0.040345743, -0.049794443, 0.026448196, -0.014560793, -0.044855814, 0.026631864, 0.009724202, 0.08962999, -0.012264943, -0.005760033, -0.010244594, 0.016428085, 0.031203156, -0.037305016, -0.00480598, -0.04020289, 0.0056937085, -0.017254591, -0.0388764, -0.011948626, -0.017693352, -0.013938362, -0.01843823, -0.0011670572, -0.04803939, -0.025693115, -0.002408092, -0.036794826, -0.02097897, -0.009816036, 0.03620301, -0.0047881235, -0.026958384, -0.0026606354, 0.07281417, -0.041304898, -0.03385614, -5.093918e-05, -0.056039155, -0.021632012, -0.01717296, 0.02665227, 0.011458844, 0.0021147332, -0.012387387, 0.05012096, 0.023774805, 0.006244713, -0.029121585, 0.0064028716, -0.0028800166, -0.009122179, 0.027693056, 0.016979089, -0.03275413, 0.024591107, 0.018121911, 0.0032499037, -0.026856346, 0.042815056, 0.035896894, 0.020111648, -0.040672265, -0.03269291, 0.007239581, -0.048937324, 0.012275146, -0.037386645, 0.046365973, 0.015030166, -0.04505989, 0.012907781, -0.0021568239, 0.0015433215, 0.022570759, 0.011081304, -0.020489188, -0.0033876547, -0.010958859, -0.03912129, -0.004512621, -0.023489099, 0.054365736, -0.047835317, -0.023468692, -0.021346306, 0.0031070507, 0.004430991, 0.0061324714, 0.026529826, -0.0001264312, -0.05073319, -0.019907573, -0.07203868, 0.01930555, 0.008071189, -0.02357073, 0.018377006, 0.035305075, 0.017856613, 0.049018953, 0.03612138, -0.024591107, -0.050937265, 0.0042141606, 0.053345356, 0.03150927, -0.01843823, 0.008984428, 0.0057345238, -0.028203245, -0.021325897, -0.0040381458, -0.02967259, -0.021040192, -0.03161131, -0.014489367, -0.014009789, -0.043264024, -0.017703557, 0.013020022, -0.010744579, 0.028774656, 0.028795065, -0.050365854, -0.010662949, 4.4342596e-06, 0.038978435, 0.04579456, -0.009280337, -0.03167253, -0.0054233084, 0.022366684, 0.03718257, 0.0127751315, 0.0074130455, -0.010877228, -0.010897636, -0.01792804, 0.024244178, -0.013734287, 0.011326195, 0.06754902, -0.01706072, -0.024978852, -0.058896214, 0.03075419, -0.05607997, 0.012275146, 0.026876753, -0.0011900157, 0.004469255, 0.03250924, 0.024835998, 0.017428055, -0.029427698, 0.004285587, -0.015183223, 0.0059232935, -0.052773945, 0.014213864, -0.0067702075, 0.0058722747, 0.027876724, -0.0068569393, 0.010775191, 0.040835522, -0.00016190528, -0.007913031, -0.024550293, -0.0011721591, 0.07591612, 0.05640649, 0.02506048, -0.020397354, -0.02473396, -0.058977842, -0.008081393, 0.012703705, -0.02022389, -0.03083582, -0.0021376917, -0.024407439, 0.008300774, 0.019193308, 0.044978257, -0.0031198054, -0.039243735, -0.025631893, 0.032958206, 0.029060362, -0.0062702224, -0.059549253, -0.063304245, -0.06730413, 0.043835435, -0.021570789, -0.04603945, 0.00074806454, -0.0009591552, 0.00877525, 0.012999615, 0.008571174, 0.023550322, 0.021366714, -0.0018749444, -0.023958473, -0.00156628, -0.02122386, -0.02222383, -0.008785454, -0.031978644, -0.043549728, -0.06999792, -0.009657877, -0.009198707, -0.020458577, -0.011499659, -0.018142318, -0.026223712, 0.02014226, 0.024856405, -0.04371299, -0.019172901, -0.013244505, -0.0034335717, -0.0313256, 0.011407825, -0.044570107, -0.026182897, 0.017611723, -0.020805506, 0.046243526, -0.044814996, -0.041386526, -0.017805595, 0.026142081, -0.020621838, -0.02365236, -0.002049684, -0.023489099, 0.010856821, 0.046529233, -0.010173168, -0.0005589758, 0.029815443, -0.0009872157, -0.072079495, -0.05028422, 0.038243763, 0.05473307, -0.0020777446, 0.023427878, 0.030019518, 0.046161897, -0.0034080623, -0.024284994, 0.008663008, 0.0014655178, 0.003010115, -0.014907721, 0.029203216, 0.04689657, 0.018713731, 0.02716246, 0.0041376324, -0.005953905, -0.029529737, 0.025101297, -0.058528878, 0.039202917, -0.016326046, 0.0033570433, -0.020530004, -0.007015098, 0.017346425, 0.005775339, -0.050080147, 0.0028213449, -0.025040073, -0.032060273, 0.017938243, 0.037815206, -0.042815056, -0.009708895, -0.034672443, 0.049835257, 0.014213864, 0.052773945, 0.019509625, -0.01609136, -0.037366237, -0.0026937977, 0.021183046, 0.044651736, -0.001779284, 0.014489367, 0.04087634, -0.0031274583, 0.00804568, -0.07930377, -0.018693322, 0.061630826, -0.00030420016, -0.004056002, 0.024366625, 0.011020081, -0.0022371786, -0.030407261, -0.0011173137, 0.025754338, -0.030101148, -0.027366536, -0.00038391718, 0.027284905, 0.02616249, 0.04889651, 0.05783502, -0.034162253, 0.06052882, -0.0023647258, -0.0026453298, 0.031631716, -0.015683208, 0.00683143, -0.0011912913, -3.645061e-05, 0.028468544, 0.045590486, 0.008198736, -0.042488538, -0.011683327, -0.009101771, -0.038549878, -0.004757512, -0.018683119, 0.01741785, 0.026386973, -0.04054982, 0.021938125, 0.02165242, 0.0947727, 0.00027055957, -0.052080087, 0.009004835, -0.00076783437, -0.033896953, -0.016917866, -0.0117445495, -0.005367188, 0.042406905, -0.022876872, -0.038488656, 0.009336458, 0.026713494, 0.009831341, 0.045345593, 0.023611546, 0.031141933, 0.017560704, 0.024550293, 6.197998e-05, 0.009091567, 0.00051879836, -0.022550352, 0.017570907, -0.049263846, 0.053875953, 0.03393777, 0.011132323, -0.023101356, -0.007841604, -0.007617121, 0.024529886, 0.005030463, -0.047794502, -0.0031606206, -0.012815947, -0.0062243054, 0.0103466315, 0.029468514, 0.02273402, 0.0074742683, -0.07061015, -0.033815324, -0.02289728, -0.0017320915, -0.015193427, -0.031039895, 0.011571085, -0.04093756, -0.027550204, -0.0005618456, 0.0074130455, -0.009101771, -0.0013264912, 0.025019666, 0.024019696, -0.004448848, -0.03412144, -0.00020694539, 0.013836324, -0.007663038, -0.0051580104, 0.015724024, 0.034203067, 0.07265091, -0.04128449, 0.008178329, -0.0024157446, 0.015540356, 0.033978585, -0.021611605, -0.000945125, -0.011795568, -0.034509182, -0.0058569694, 0.052692316, 0.012264943, 0.022121793, 0.017274998, 0.019856554, -0.0011855515, -0.019968795, -0.023325838, 0.022366684, -0.034488775, -0.015326076, -0.042488538, -0.03561119, 0.0048365914, -0.002729511, 0.023713583, -0.027182868, 0.008907899, 0.0019986653, -0.01449957, 0.02640738, -0.005438614, -0.021489158, -0.024693144, 0.006555928, -0.014632219, 0.009270133, 0.022693204, -0.020917747, -0.02222383, 0.014152641, -0.042570166, 0.011418029, -0.013193486, -0.015907692, 0.0012984308, -0.0033009225, 0.0029514432, -0.0063161394, 0.016366862, -0.028876694, -0.020285113, -0.012520037, -0.030815413, -0.03961107, 0.032305166, 0.045590486, -0.019152494, 0.006321241, 0.010734376, 0.024835998, -0.020285113, -0.034305107, 0.001112212, 0.042243645, -0.00015536849, 0.02000961, 0.026101267, -0.062447127, 0.004647821, -0.029223623, -0.05016178, 0.0030432772, -0.017142348, 0.008081393, 0.0061324714, -0.0070967283, 0.010918044, 0.039978407, 0.0060865544, 0.0065610297, 0.054692257, 0.03836621, 0.01784641, 0.0006425192, 0.025427816, 0.0016581141, 0.003933557, -0.004601904, -0.015101593, 0.03830499, 0.04403951, 0.032611277, 0.0035356095, 0.005652894, -0.023876842, 0.039304957, 0.037713166, 0.0018991784, 0.015917895, 0.009453801, 0.011550678, 0.012183312, -0.0050585233, -0.008377302, -0.013081245, 0.009326254, -0.007958948, 0.0068059205, -0.01909127, -0.009754812, -0.016560733, -0.013346543, 0.0097191, 0.04122327, 0.022591166, -0.025938006, 0.04371299, 0.020132056, -0.0073722303, 0.04095797, 0.0047830213, -0.004795776, -0.011775161, -0.033141874, -0.016897459, -0.015070981, -0.008035476, 0.01663216, -0.02606045, -0.0067140865, -0.036407083, 0.0059947204, 0.014713849, -0.0015292914, 0.03059093, 0.009428292, -0.0060406374, -0.050774004, -0.0068059205, 0.00812731, 0.0021976389, 0.017530093, -0.005117195, 0.031958237, -0.0031249074, -0.00031392564, 0.03299902, -0.01190781, -0.03601934, -0.0024399788, 0.031550083, -0.044937443, 0.003053481, 0.007862012, -0.010703764, 0.013173079, 0.023366654, 0.008402812, -0.0031249074, -0.022121793, -0.018121911, 0.02724409, -0.03601934, 0.034652032, 0.035101, 0.014315902, -0.03934577, 0.021489158, -0.024509476, -0.012275146, -0.07436514, -0.011856792, -0.0023940618, 0.02506048, 0.024693144, 0.016458696, -0.013111856, 0.0021211107, 0.0039105983, -0.025978822, 0.030223593, 0.0064538904, -0.0077293627, -0.026264528, 0.00094895146, 0.0015917895, -0.011795568, 0.016999496, -0.001036959, 0.027305312, 0.0072752945, 0.0010471628, -0.003877436, -0.028427728, -0.0016224008, -0.021081008, 0.0056477915, -0.01981574, 0.03334595, 0.002908077, 0.031488862, -0.012877169, -0.020458577, 0.0085354615, -0.0059334976, -0.022019755, 0.013877139, -0.0031172545, 0.0064947056, -0.0029310356, -0.012917984, 0.0039105983, -0.042855874, -0.020234093, 0.034896925, 0.0061783884, -0.024897221, -0.031366415, -0.017744372, -0.019591255, -0.0055151423, -0.04579456, 0.0048085307, 0.010091538, 0.016877051, 0.01158129, -0.01320369, -0.02097897, 0.005765135, 0.005668199, -0.01144864, 0.025897192, 0.0155709665, 0.02840732, -0.030162372, 0.0061222673, -0.014866906, -0.0188974, -0.051671937, 0.016336251, 0.011111915, -0.057630945, 0.048814878, -0.03183579, 0.019744312, -0.062038977, -0.035590783, -0.011438436, -0.013458785, -0.014989352, -0.026815532, 0.01706072, 0.04220283, 0.01395877, -0.010387447, -0.026774716, -0.0063875658, -0.023978882, 0.014387328, 0.04803939, -0.029039955, -0.0022728918, -0.018591285, -0.019295346, 0.009188503, -0.02306054, -0.03918251, 0.0012525138, -0.013968973, -0.007678344, -0.027550204, -0.009912971, -0.0074436567, 0.011326195, 0.029448107, 0.016377065, -0.0024642127, -0.02632575, -0.0082140425, 0.007989559, 0.027958354, 0.01792804, 0.04244772, 0.01906066, -0.0025343637, 0.0070916265, 0.0016224008, -0.0057855425, 0.031692937, 0.04305995, -0.018785156, -0.050937265, 0.053631064, -0.02608086, 0.020325927, 0.0024769674, -0.03452959, 0.0032141905, 0.0056937085, 0.023305431, -0.01036704, -0.054896332, 0.0037294813, 0.0375295, 0.01695868, -0.0064538904, 0.013468988, 0.070855044, -0.009285439, -0.015101593, -0.0058263578, -0.0014514875, -0.031223563, -0.06734494, 0.019183105, -0.025325779, 0.012122089, 0.0032728622, 0.012856762, -0.018132115, -0.0175505, 0.020938154, -0.021101415, -0.014275087, 0.008999733, 0.039325364, 0.0018290274, -0.0034463264, 0.007331415, -0.02516252, 0.006106962, -0.0006798268, -0.020091241, -0.032141905, -0.00011503167, -0.021550382, 0.016938273, 0.0070457095, -0.047100645, 0.004020289, 0.029876664, 0.005550856, 0.0010407855, 0.050529115, -0.015224039, 0.0042320173, -0.015693411, 0.03408062, 0.010622134, 0.009310949, 0.029856257, 0.0038570284, -0.010734376, -0.014091419, 0.013020022, -0.045182332, -0.045672115, -0.03601934, -0.009821137, -0.007816095, -0.005392697, 0.016703587, 0.022550352, 0.026346158, -0.010469077, 0.011203749, -0.0046350667, 0.024611516, 0.037162162, -0.013479192, 0.026040044, -0.0054335124, -0.00534678, 0.018397413, 0.009688488, 0.0051580104, 0.00080928724, -0.0015892385, 0.034611218, 0.058855396, -0.012642482, 0.004650372, -0.0033646962, -0.022448314, -0.032774538, 0.002627473, -0.0024144691, -0.006795717, 0.033080652, 0.03059093, -0.005836562, 0.033468395, 0.0006147777, 0.0034743869, 0.024795184, 0.013305728, 0.040182482, 0.023611546, 0.020652449, -0.021121822, 0.07918133, -0.0024960993, -0.060814522, -0.01144864, -0.0012454988, 0.008193634, 0.026591048, 0.01992798, -0.013938362, -0.022101386, 0.04220283, -0.008346691, 0.020234093, -0.030897044, 0.019050455, -0.016315842, -0.0067191883, 0.025774745, 0.0035611189, -0.030733783, -0.0033749, 0.019979, 0.012969003, -0.039060067, 0.023917658, -0.030509299, 0.039876368, 0.02181568, 0.010938451, 0.033754103, 0.013193486, 0.021550382, -0.037978467, -0.014887313, -0.019132085, -0.009198707, -0.005790645, 0.0061630826, 0.015132205, 0.0016224008, 0.026795125, 0.006520215, 0.0245707, 0.010836413, 0.012795539, 0.016856642, 0.042529352, -0.011948626, -0.014336309, 0.040917154, -0.008739537, -0.029488921, -0.022529945, 0.009397681, 0.0025241598, -0.016652567, -0.031754162, -0.010275206, 0.007892624, -0.011979236, -0.011734346, -0.004285587, 0.024611516, -0.051100526, 0.012101682, -0.015703617, -0.0050636255, -0.035019368, -0.030101148, -0.023040133, 0.027040014, -0.0060100257, 0.016132174, -0.0063161394, -0.006612049, 0.0013048082, 0.0348357, 0.037427463, 0.00045406815, 0.025101297, -0.011173138, -0.012305758, 0.022101386, 0.04856999, -0.011295583, 0.035060186, 0.0065916413, 0.015999526, -0.02883588, -0.034713257, 0.0032116394, 0.04444766, 0.019754516, 0.0025445675, -0.004385074, -0.006652864, 0.013877139, 0.028121615, -0.011805773, -0.019693293, 0.0045483345, 0.031039895, 0.026427787, 0.016621957, -0.01806069, -0.022489129, 0.030509299, 0.04730472, -0.011785365, -0.039202917, -0.0016198499, -0.012030255, -0.03091745, 0.0089027975, 0.01658114, -0.0124077955, 0.008734435, 0.004576395, -0.009887462, 0.020040222, 0.009678285, -0.037305016, -0.015979119, -0.0014476612, -0.01987696, -0.023489099, 0.016448492, -0.054855514, -0.004629965, 0.0035152019, 0.006428381, -0.005484531, 0.014530181, -0.0031963338, -0.01304043, 0.01612197, 0.0072599887, -0.013305728, -0.036488716, 0.009285439, -0.0039539644, -0.037121348, 0.032203127, 0.008321182, -0.0065151127, 0.020713672, -0.034223475, -0.024366625, 0.012550648, -0.0034871416, -0.006510011, -0.019152494, -0.014948537, 0.010683357, 0.013162875, -0.014724053, -0.022346277, 0.0061477767, 0.034815293, 0.05656975, -0.02748898, -0.009066057, 0.009724202, 0.006382464, 0.0110711, 0.0044539496, 0.062161423, -0.008918103, 0.012244535, -0.010928247, 0.00626512, -0.0128669655, 0.0037141757, -0.015091389, 0.00942319, -0.009545635, -0.006734494, 0.008458933, -0.02316258, 0.0002313388, 0.010295613, -0.0084895445, -0.013642453, 0.0029667488, 0.034876518, -0.05722279, -0.007622223, 0.0047779195, -0.00023548408, 0.0010930798, -0.010280307, 0.02832569, -0.028937917, -0.03142764, -0.0031172545, 0.029448107, 0.01044867, -0.0016160235, 0.015979119, 0.061794087, 0.005275354, -0.024856405, 0.026529826, -0.012091478, -0.016897459, 0.029611366, 0.009122179, -0.004188651, -0.01236698, 0.01115273, -0.009106873, -0.013866936, 0.004739655, 0.019836146, -0.027815502, -0.015305668, 0.007193664, 0.02516252, -0.014622015, -0.010321123, -0.0035840773, -0.0115608815, -0.0033315339, -0.01606075, 0.021632012, 0.0019463708, -0.013571026, 0.018713731, -0.0066171507, -0.017866816, -0.018428026, -0.015775042, -2.837926e-05, 0.0028315487, -0.004188651, -0.017152553, 0.018774953, -0.0072906003, -0.001066295, -0.02206057, -0.0054641236, -0.031203156, 0.0057345238, -0.037896834, -0.011244564, 0.02165242, 0.021366714, -0.015152612, 0.0034361226, 0.021325897, 0.0010554534, -0.008004865, -0.014856703, -0.0112853795, 0.016377065, 0.02273402, -0.025305372, -0.017887225, -0.010122149, 0.022162609, -0.024346218, -0.017509684, -0.024835998, 0.05354943, 0.00877525, -0.0016989292, 0.028652212, -0.008474238, 0.0031810282, 0.017397443, 0.0055661616, 0.04030493, -0.0019808086, 0.009270133, -0.021570789, -0.0073518227, -0.03601934, 0.039488625, 0.0056477915, -0.043100763, -0.024999259, -0.031080712, 0.020060629, -0.030386854, 0.016397472, 0.014050604, -0.0069895885, 0.0038519267, -0.00040049833, -0.02599923, 0.012346572, -0.00046299648, 0.02281565, 0.056447305, 0.02173405, 0.02757061, 0.0063314447, -0.019295346, -0.000959793, -0.03979474, 0.027672648, 0.0043187495, -0.010239492, -0.010775191, -0.017723965, -0.015805654, -0.010744579, -0.014315902, -0.021346306, 0.009265032, 0.04134571, 0.006647762, 0.015264854, -0.048814878, -0.03701931, 0.055712633, 0.0057549314, 0.0061783884, -0.016856642, 0.032141905, -0.0019859106, 0.03357043, -0.028039984, 0.012224128, -0.03183579, -0.017611723, 0.01190781, 0.02557067, -0.019121882, -0.012356777, 0.026121674, 0.025468633, -0.016019933, 0.022407498, 0.008974223, -0.040488597, 0.0348357, 0.015550559, -0.050202593, 0.030305224, -0.0012639931, -0.008642601, -0.014091419, 0.021999348, 0.041304898, -0.021856494, -0.0010605553, 0.026733901, -0.0048748553, -0.04001922, -0.04738635, -0.03310106, 0.019193308, 0.024101326, -0.016530123, -0.004816184, -0.014581201, 0.0057855425, -0.0029692997, -0.005122297, 0.013968973, -0.013846528, -0.0005723682, -0.026121674, -0.023407469, -0.022958502, -0.013754694, 0.014111826, -0.008071189, 0.03424388, -0.024917629, 0.030652152, 0.028611396, 0.008239551, -0.0073212115, -0.007892624, -0.039896775, 0.055508558, 0.010402753, 0.047753684, 0.03326432, -0.00829057, -0.019723905, -0.007055913, -0.00961196, 0.041733455, 0.0066630677, -0.01655053, 0.00040049833, 0.0063416488, 0.050937265, 0.020672856, -0.0026912468, -0.015907692, -0.0020012162, 0.02197894, 0.017672945, 0.026244119, 0.015111797, 0.026509417, -0.039570253, -0.025244148, -0.02408092, 0.0023290126, 0.006356954, 0.015683208, 0.019172901, -0.0066783736, 0.0039054963, 0.03291739, -0.029937888, 0.013938362, 0.034488775, 0.036325455, -0.022999318, 0.036754012, 0.0035840773, 0.0113772135, -0.031141933, -0.028060392, 0.0117445495, 0.043753803, 0.010479281, -0.0034488773, -0.027611425, -0.02281565, -0.0033646962, 0.011336398, 0.02516252, -0.021264676, -0.0256523, 0.013071041, -0.003326432, 0.044651736, -0.015601578, -0.0124077955, -0.011724142, -0.0076120193, -0.024305401, 0.028774656, -0.005959007, -0.006367158, 0.03693768, 0.04277424, -0.027448166, 0.011244564, 0.011009878, -0.01851986, 0.0063518523, 0.016519919, -0.0027167562, -0.0065151127, 0.014591404, 0.022999318, 0.051018894, 0.005170765, -0.020417761, 0.026223712, -0.009290541, -0.00850485, 0.014866906, -0.00033449262, 0.001614748, -0.0011198648, 0.030631745, 0.0032422508, 0.024999259, -0.02632575, 0.0061018597, -0.025325779, 0.021060599, -0.002192537, 0.035101, -0.013683268, -0.007530389, 0.013764898, 0.046774123, -0.022489129, 0.024346218, 0.016897459, 0.0088109635, 0.013938362, 0.018121911, 0.0038034585, 0.023346247, 0.0069130603, 0.00785691, 0.0064232787, 0.019754516, 0.033550024, -0.024305401, -0.020560615, 0.023795214, 0.028468544, 0.018907603, 0.016111767, 0.00915279, -0.0082140425, -0.017611723, 0.004936078, 0.0068212263, -0.007953846, -0.01849945, -0.055345297, -0.0013724082, 0.024387032, 0.025366595, 0.023529915, -0.020070834, 0.0049284254, 0.0020802955, -0.014642423, -0.027876724, 0.003558568, 0.0065814373, -0.0077956873, -0.023672767, 0.019693293, -0.014805683, 0.018244358, 0.009754812, -0.016438289, 0.011540474, -0.021489158, -0.019376976, 0.0081681255, 0.04136612, 0.02506048, 0.013030225, -0.0030330734, 0.006887551, 0.018203542, 0.011958829, -0.0056937085, 0.0024323259, -0.0032192923, 0.035203036, -0.024938036, -0.014346513, 0.010856821, 0.0077446685, -0.012326165, -0.012795539, -0.010560911, -0.014315902, 0.009606858, 0.008270163, 0.027774686, -0.027468573, 0.023101356, -0.012173109, 0.004438644, 0.027203275, -0.035080593, -0.010428262, 0.025264557, 0.039243735, -0.047508795, 0.02514211, -0.001733367, -0.0094487, 0.0067293923, -0.0032524546, -0.021101415, -0.042570166, 0.009826239, -0.0011543025, 0.018264765, -0.0077191587, -0.023550322, -0.03436633, -0.0464476, 0.0070304037, -0.010816006, -0.027468573, 0.010918044, -0.0044513987, -0.023101356, -0.0038111114, 0.012693501, -0.02983585, -0.025468633, 0.029305253, -0.011887402]"
../../../gradio,../../../gradio/gradio/components,button.py,"""""""gr.Button() component.""""""

from __future__ import annotations

from typing import Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.events import Events


@document()
class Button(Component):
    """"""
    Creates a button that can be assigned arbitrary .click() events. The value (label) of the button can be used as an input to the function (rarely used) or set via the output of a function.
    """"""

    EVENTS = [Events.click]

    def __init__(
        self,
        value: str | Callable = ""Run"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = None,
        min_width: int | None = None,
    ):
        """"""
        Parameters:
            value: Default text for the button to display. If callable, the function will be called whenever the app loads to set the initial value of the component.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            link: URL to open when the button is clicked. If None, no link will be used.
            visible: If False, component will be hidden.
            interactive: If False, the Button will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
        """"""
        super().__init__(
            every=every,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            interactive=interactive,
            scale=scale,
            min_width=min_width,
        )
        self.icon = self.serve_static_file(icon)
        self.variant = variant
        self.size = size
        self.link = link

    @property
    def skip_api(self):
        return True

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the button label
        Returns:
            (Rarely used) the `str` corresponding to the button label when the button is clicked
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: string corresponding to the button label
        Returns:
            Expects a `str` value that is set as the button label
        """"""
        return str(value)

    def example_payload(self) -> Any:
        return ""Run""

    def example_value(self) -> Any:
        return ""Run""
","This code defines a `Button` component for Gradio, which creates a button that can be assigned click events. The button can have a label, size, variant, icon, link, and other properties. The component can be hidden, disabled, or have custom CSS styles. The `Button` component has methods for preprocessing and postprocessing data, as well as providing example payload and value.","[-0.022117194, 0.021300977, 0.0019130069, 0.028862314, 0.016052254, -0.06488919, 0.0029786227, 0.009664227, -0.011001916, -0.04874625, 0.008411562, 0.042443246, -0.022377929, -0.018024776, 0.023330182, -0.0031089904, -0.02645901, -0.005804205, 0.013694296, 0.037659314, -0.05373424, -0.036639042, 0.015712162, 0.052872676, 0.027501954, -0.024713214, -0.029474476, 0.048111416, -0.003191179, 0.02221922, -0.029973276, -0.040312015, 0.007833409, 0.003729655, -0.02677643, -0.014555857, 0.012231908, 0.026436338, 0.017911412, -0.024554506, -0.08570271, -0.02509865, -0.004673405, 0.049471777, 0.0014666386, 0.03042673, -0.038271476, 0.02110826, -0.0022828549, 0.030494748, -0.043259464, 0.03568679, -0.012821398, 0.009953304, -0.027501954, 0.009851277, -0.082347155, 0.012424625, -0.023919672, -0.044053007, -0.018875001, -0.008745984, -0.013252178, 0.008876352, -0.0018435718, 0.021879131, -0.033102106, 0.003939377, 0.031923126, -0.002689546, 0.067745954, -0.016449025, 0.0034377442, -0.013116142, -0.010888552, -0.028340843, -0.015530782, -0.034711864, 0.058948953, -0.0021609892, -0.029021023, -0.016755106, -0.07595346, -0.04003994, -0.043395497, 0.030109312, -0.037069824, 0.0076180184, -0.04171772, -0.06144295, -0.037772674, -0.023092119, -0.026141593, 0.06847148, 0.0021099758, 0.007958109, -0.021334987, -0.027003156, 0.018670948, 0.035324026, 0.045141295, -0.030063966, 0.0022814379, -0.028204806, 0.039541144, -0.041513667, 0.0114497, 0.04942643, -0.008366217, -0.0026045234, 0.0036361301, 0.04255661, -0.058540843, 0.036162917, -0.020586789, -0.056182887, 0.048111416, -0.019294446, -0.01906772, -0.037228532, -0.012810061, -0.0047272528, 0.0055973167, -0.0306988, 0.02271802, -0.052283186, -0.0145218475, -0.039201055, -0.04003994, 0.012231908, 0.025189342, 0.044891894, -0.011489377, -0.050560065, -0.018557584, 0.06620421, -0.03448514, 0.0028652593, -0.043010063, 0.004409835, 0.016936488, -0.054958563, 0.023647599, -0.0151453465, -0.004211449, -0.017650677, -0.018534912, 0.028159462, -0.08883154, -0.0394958, 0.03246727, 0.021051578, -0.032693997, 0.019589191, 0.014193094, -0.009771923, 0.0321952, -0.0133542055, -0.02781937, -0.019985963, 0.025846848, -0.008660962, 0.04119625, 0.0027108015, -0.021720422, -0.019056384, -0.0033753945, 0.023760963, -0.041332286, 0.07355016, 0.031288292, 0.006495721, -0.03246727, -0.014748574, -0.021142269, 0.0018393208, 0.009913627, -0.0011456786, -0.010888552, -0.0043474855, 0.0063936943, 0.0050248313, -0.008009122, -0.02076817, -0.018240167, -0.013388215, -0.0032620311, -0.055593397, -0.015394746, 0.00053918455, -0.013116142, -0.013501578, 0.021459686, 0.011721773, 0.011835136, -0.022049176, 0.015825527, -0.01640368, -0.012254581, -0.020881534, 0.00597425, 0.010571134, 0.012889415, -0.023647599, -0.046252254, 0.016993169, 0.0082471855, -0.0069661792, 0.046184238, 0.027071172, -0.010009985, -0.04160436, -0.009233447, -0.016358335, -0.050650753, -0.03110691, 0.001257625, 0.020711487, 0.0015162351, -0.005651164, -0.0338503, 0.02432778, 0.042443246, -0.02321682, 0.027433936, 0.028816968, 0.013660287, 0.02500796, 0.019407809, 0.03908769, 0.044211715, -0.011302328, 0.017684685, -0.011733109, 0.030902855, -0.042035136, 0.028046098, -0.026504356, 0.040992197, -0.003865691, -0.049653158, -0.03160571, -0.0027334744, -0.026912464, 0.024486488, 0.027388591, -0.014000377, -0.0112229735, 0.03611757, 0.053960964, -0.0066487617, -0.00042652967, 0.01992928, 0.03307943, -0.009290128, 0.021652404, 0.035165317, 0.049199704, 0.030585438, -0.02357958, -0.006552403, -0.018750302, -0.031265616, 0.042420574, -0.032671325, 0.030109312, 0.018840993, 0.010265053, 0.006620421, 0.032104507, -0.034394447, -0.012810061, 0.035414718, 0.005951577, 0.02509865, 0.0074763144, -0.0011726024, 0.015984235, 0.019566517, 0.023012765, -0.031469673, 0.008779993, 0.015326728, 0.022003831, -0.04756727, 0.018829657, 0.0154287545, 0.0018662445, 0.032943394, -0.041740395, 0.021300977, 0.025143996, 0.029995948, -0.010236712, -0.017151877, 0.0061669676, 0.06434505, -0.015836863, 0.0121412175, -0.036412314, 0.0068188068, 0.010735511, 0.0112399785, -0.016857134, 0.014397148, -0.019589191, -0.010197035, 0.017185887, -0.00309482, 0.018863665, 0.041128233, 0.028522225, 0.030585438, -0.0272979, -0.06611352, 0.007402628, 0.0073062694, 0.01729925, -0.0032450266, -0.026481684, 0.004072579, 0.030925527, 0.0075500007, -0.012277253, -0.01869362, -0.026096249, -0.048791595, -0.0049568135, 0.018342193, -0.038044747, 0.022491293, 0.015111337, -0.023919672, 0.04933574, 0.027343245, 0.008400226, -0.037523277, 0.03809009, -0.044710513, 0.032943394, -0.06062673, -0.012866743, 0.010435099, 0.0065750754, 0.014000377, 0.028839642, -0.079989195, 0.010497448, -0.032081835, -0.025982885, -0.003531269, -0.030109312, 0.010129017, -0.013229505, 0.028476879, -0.034802556, -0.036094896, -0.049562465, -0.06937838, -0.0037608298, 0.0057418547, 0.04543604, -0.0031996812, 0.035346698, -0.028680934, 0.00484345, -0.031061564, -0.045980185, 0.020949552, -0.020960888, 0.04044805, 0.026980482, -0.023534236, 0.024486488, -0.05096817, -0.012640016, 0.030313365, -0.01491862, -0.0340997, -0.04332748, 0.06507058, 0.010633484, -0.0127533795, -0.008105481, 0.0019130069, -0.0030863178, 0.02686712, 0.044733185, 0.006285999, 0.0045883823, -0.013422223, -0.010667494, -0.00085801905, -0.019226428, 0.019521173, 0.010225376, -0.0015658316, -0.005209047, 0.00043396917, 0.028250152, -0.03536937, -0.028068772, -0.0103444075, 0.026436338, 0.00476693, -0.028862314, 0.042103156, 0.034054358, -0.0016239303, -0.004030068, 0.021346323, 0.031174928, 0.038452856, -0.0028383355, 0.05722583, 0.0055349665, -0.028091444, -0.033396848, 0.0014524682, 0.07463844, 0.016936488, -0.008751652, 0.016981833, -0.05042403, 0.015587464, 0.021437014, -0.0040527405, -0.011166292, 0.014181757, -0.05808739, -0.03135631, 0.010826202, -0.0009990147, 0.020779505, 0.01627898, -0.009301465, -0.02983724, 0.0010989162, 0.028816968, 0.036230933, -0.045504056, -0.008099813, 0.050378684, 0.056273576, -0.022525301, 0.008598612, 0.009233447, -0.03153769, -0.04774865, -0.04432508, -0.028544897, -0.008490916, -0.06198709, 0.023352854, 0.048383486, -0.011177628, 0.005894895, 0.015576127, 0.011398687, -0.03561877, 0.009675563, -0.005722016, -0.022638666, 0.050378684, -0.054822527, 0.0052600605, 0.0097322455, 0.03033604, 0.024599852, -0.036503006, 0.015236037, 0.0065183938, 0.028250152, 0.020904206, -0.043010063, 0.030744147, 0.037092496, 0.037863366, -0.02253664, -0.020348726, -0.01343356, 0.016142944, 0.02466787, -0.04815676, 0.0019980294, 0.084297, 0.027479282, -0.042420574, -0.006824475, -0.029769221, -0.014997974, -0.003400901, 0.003729655, -0.009108747, 0.016698424, 0.0049681496, -0.03847553, 0.024554506, 0.004764096, -0.033532884, 0.0046195574, -0.009233447, -0.017491968, 0.065161265, 0.003293206, -0.0051722038, 0.065297306, 0.030834837, 0.014125076, -0.007629355, -0.004234122, -0.029655859, 0.031991143, 0.006920834, -0.0017698857, -0.04992523, -0.01636967, 0.056364268, -0.018262839, 0.013206833, -0.037432585, 0.06638559, -0.019045046, 0.004469351, -0.003794839, 0.010797861, -0.010735511, -0.031174928, 0.018024776, -0.02033739, -0.04255661, -0.039473128, -0.010746848, 0.030902855, -0.03389565, -0.023874326, -0.02191314, 0.012152554, 0.011273988, -0.029089041, -0.0030211338, -0.00430214, 0.010990579, -0.015644146, -0.0034575828, 0.04271532, -0.008275527, -0.06162433, 0.036503006, 0.0011378848, 0.06180571, -0.049109012, 0.05264595, -0.024826579, 0.011387351, 0.007708709, 0.0032705332, 0.015678154, -0.032693997, -0.0070058564, 0.005985586, -0.0025719316, -0.020700151, 0.029451804, -0.012889415, -0.019011037, 0.0018619933, -0.021153605, -0.03738724, 0.020473424, -0.032240544, 0.014249776, 0.020813515, 0.038271476, -0.03153769, 0.032104507, 0.0037551618, -0.043622226, -0.008626953, -0.0016409348, 0.026912464, -0.023851654, 0.024645196, -0.021142269, -0.048519522, 0.0145218475, 0.048292797, -0.029655859, 0.023965016, 0.008014791, -0.025960213, 0.011035924, 0.000874315, 0.04196712, -0.02234392, 0.003726821, -0.03525601, 0.027365917, -0.032444596, 0.019849926, -0.018308185, -0.038384836, 0.014079731, 0.017095197, 0.060218625, -0.02713919, 0.013501578, -0.0096869, -0.061080184, 0.02098356, -0.019679882, 0.035754807, -0.027501954, -0.04951712, -0.01971389, 0.004404167, -0.014079731, 0.022774702, 0.00056256575, -0.0028978512, -0.008043131, 0.018704956, 0.016494371, -0.0025435907, 0.0005863012, 0.043191444, 0.020586789, -0.009913627, 0.027411263, 0.016879806, 0.030789493, 0.014725902, 0.022457285, -0.00041625614, 0.00987395, -0.0057050115, 0.015893545, -0.004475019, 0.009080406, -0.029882586, 0.011393019, 0.002053294, -0.0139323585, -0.0042766333, 0.0027348914, 0.0021595722, 0.010231044, 0.033419523, 0.046478983, 0.013320196, -0.012424625, -0.008859348, 0.01377365, -0.003865691, -0.03033604, 0.015610136, -0.03958649, -0.00919377, 0.009040729, 0.021040242, -0.005515128, -0.0053280783, -0.033192795, -0.0017415448, -0.00040456554, 0.060127933, 0.00838889, 0.025143996, -0.027660662, 0.020847524, -0.02021269, 0.014419821, 0.0026753757, 0.033532884, 0.04960781, 0.011982508, -0.012095871, -0.031401653, -0.00065042236, 0.019997299, -0.062304508, 0.01445383, -0.036298953, -0.023443546, 0.014941293, -0.0511949, 0.0011300911, 0.03323814, 0.011279656, -0.037704658, -0.021618394, 0.012073199, -0.0037409912, 0.015757509, -0.00043467767, 0.012606007, 0.01652838, -0.014023049, 0.0071815695, -0.042511266, 0.015485437, 0.012594671, 0.010780857, -0.0041150902, -0.015984235, 0.0044155032, -0.028499551, -0.003763664, -0.017673349, -0.0016621904, 0.005917568, 0.029429132, -0.003364058, -0.011013252, -0.0196232, 0.0057361866, 0.0094431685, 0.035573427, 0.038294148, -0.018523576, -0.0074706464, 0.031174928, -0.06271262, -0.024101052, 0.02262733, -0.043871626, -0.018795647, 0.0074423053, -0.031515017, 0.010174363, -0.019441819, 0.013682959, 0.022820046, 0.03135631, -0.019441819, 0.04638829, 0.03450781, 0.005206213, 0.018047448, -0.014397148, -0.010837538, 0.040493395, -0.010559798, -0.0384982, -0.0050219973, 0.0085305935, -0.0012051944, -0.0014992306, -0.04273799, -0.0094488375, 0.0041264268, 0.006053604, -0.019600527, -0.002861008, -0.020280708, -0.0010649072, -0.0038911977, -0.035392046, -0.015734836, 0.01237928, -0.01386434, 0.022173876, 0.002216254, 0.002927609, -0.015270046, -0.048519522, 0.026322976, 0.006280331, 0.0030012953, 0.061941747, 0.0038430183, -0.013229505, 0.014499175, -0.016675752, 0.061488293, -0.026753755, -0.01971389, -0.048202105, 0.005143863, -0.016199626, -0.0100553315, 0.004200113, 0.028612915, 0.006580744, 0.047612615, -0.023352854, -0.010355744, 0.02974655, -0.009664227, -0.011687764, 0.013467569, -0.0016366837, -0.018648274, -0.0067847976, 0.057452556, 0.024622524, 0.01525871, -0.046478983, -0.006155631, 0.029723875, -0.025484085, -0.047295198, -0.034213066, 0.034938592, 0.0076463595, 0.029610513, -0.012367944, -0.03815811, -0.0009515438, -0.005421603, 0.0094375005, 0.0047612614, -0.004636562, 0.017083861, 0.013308859, 0.008626953, 0.00866663, 0.045708112, -0.032013815, -0.019113064, -0.030880183, -0.02321682, 0.0047187502, 0.004543037, 0.0042709652, 0.014079731, 0.019101728, 0.05355286, 0.029610513, 0.003562444, 0.015326728, 0.008298199, 0.0037608298, 0.017525977, -0.028431533, 0.044551805, 0.0020660474, 0.039767873, 0.011001916, -0.02203784, -0.011069933, 0.021686412, 0.007907095, 0.021811113, 0.017355932, 0.0046592345, 0.006580744, 0.011823799, -0.0124359615, 0.018138139, 0.008292531, 0.022740692, -0.0046167234, -0.037704658, 0.020779505, -0.01352425, 0.02221922, 0.060127933, 0.006852816, 0.0018138139, -0.023420872, 0.0053252443, -0.02030338, 0.01411374, 0.0014248359, -0.052011114, -0.033691593, 0.018806983, 0.04121892, -0.0047045797, 0.005843882, -0.0022899401, 0.009023724, -0.00012709097, -0.0345985, -0.012946097, 0.018523576, 0.023103455, 0.0075216596, -0.021323651, 0.021811113, -0.017730031, 0.010990579, -0.005719182, 0.019645872, -0.010588139, 0.0029531159, 0.010412426, 0.0071362243, 0.035913516, -0.034462467, -0.0033385514, -0.009652891, -0.009171097, 0.02627763, 0.014125076, -0.02500796, 0.01457853, 0.0015431589, -0.03253529, -0.003160004, 0.01457853, -0.043100756, -0.030131985, -0.01801344, -0.02153904, -0.074230336, -0.018047448, -0.0005441442, 0.0011782706, 0.003664471, -0.039019674, 0.018183485, 0.038951654, 0.023160137, 0.010072336, -0.0035907847, 0.011982508, 0.007323274, 0.009035061, -0.0016976165, -0.012674025, -0.00699452, -0.008207508, -0.014884611, 0.0082528535, -0.002618694, 0.02933844, 0.017616669, 0.009777591, -0.008043131, 0.017095197, 0.032013815, -0.030177329, 0.008196171, -0.039405107, -0.026118921, -0.012708034, -0.013592268, 0.01677778, 0.0012271585, -0.053870276, 0.018772975, -0.008899025, 0.021176279, -0.02797808, -0.01516802, 0.015746173, -0.024123726, 0.015825527, -0.008009122, 0.019668546, 0.05314475, -0.006722448, -0.014147749, 0.011557396, 0.028023425, -0.015542118, 0.015666818, 0.005078679, -0.06702042, -0.0070058564, -0.0032620311, -0.015927553, -0.00947151, -0.02475856, 0.05314475, -0.021550378, 0.009386487, 0.025484085, 0.0112456465, 0.016392343, 0.01055413, 0.02618694, -0.011398687, 0.004548705, -0.001091831, -0.011256983, 0.028204806, -0.0016508541, 0.007771059, 0.03187778, 0.017911412, -0.008400226, -0.051829733, -0.019226428, 0.0036559687, -0.024395797, 0.033691593, 0.03001862, -0.045481384, 0.017197223, -0.0026342813, 0.0077994, 0.028091444, 0.036525678, -0.005951577, -0.017106533, 0.022491293, -0.0053677554, -0.01792275, 0.013297523, 0.011103942, -0.030857509, 0.016891142, 0.007969445, 0.0025109986, -0.031855106, -0.018308185, -0.023239492, 0.013104806, 0.020031307, 0.051512316, -0.011188964, 0.0046960777, -0.012095871, -0.006728116, 0.0155988, -0.018614266, 0.00279299, -0.030834837, -0.005821209, 0.029542495, 0.0032818697, -0.016585061, -0.0030863178, 0.051739044, -0.001850657, 0.032648653, 0.0061329585, -0.011591405, 0.029451804, -0.028794296, -0.024282435, -0.007453642, 0.03931442, 0.032036487, -0.012787389, -0.0029531159, 0.0007864584, -0.04874625, -0.037001804, -0.0007857499, 0.025892194, -0.0035851167, -0.025960213, -0.0024699045, -0.005951577, -0.01101892, 0.024191743, -0.009998649, -0.0017316255, 0.013762313, 0.0032138515, -0.030222675, -0.0004899423, -0.030880183, -0.026844446, 0.0070001883, 0.02157305, -0.024237089, 0.01692515, 0.033215467, -0.015270046, -0.029066369, -0.004429674, 0.021822449, 0.016006907, 0.021391667, 0.0015374908, -0.018330857, 0.01878431, 0.001951267, -0.0030239678, -0.035414718, -0.0382488, -0.02398769, -0.009924963, 0.036321625, -0.016267644, 0.016675752, 0.008916029, -0.0018138139, 0.013150151, -0.009267456, 0.030494748, -0.01779805, 0.01593889, 0.0155988, -0.006756457, -0.036094896, 0.03296607, 0.0039733863, 0.0064447075, -0.03695646, 0.0072552557, -0.0029559499, 0.038792945, 0.024894597, -0.0012951766, 0.040130634, 0.013422223, 0.010474776, -0.0062179808, 0.019883936, 0.02781937, 0.0029786227, -0.00086722977, 0.012084535, -0.028046098, -0.01792275, 0.04892763, -0.013138815, -0.03779535, -0.013796322, 0.002824165, 0.001948433, -0.005070177, 0.0040102294, -0.004132095, 0.007958109, -0.02636832, -0.0072212466, 0.0015870872, 0.01903371, -0.02509865, 0.051512316, -0.00430214, 0.00030413267, 0.035119973, -0.010826202, 0.0023126127, -0.0010486112, -0.020926878, 0.0055604735, -0.008439903, 0.013909685, -0.004234122, 0.014272449, -0.015360737, 0.0037551618, 0.013569595, 0.00080133736, 0.043032736, -0.013955031, 0.011665091, -0.02763799, 0.03500661, 0.009545196, 0.015859535, -0.016539715, 0.04121892, 0.0073006013, 0.017140541, 0.0058722226, -0.029678531, -0.008343544, -0.0033102105, 0.0025974382, -0.023171473, -0.023375528, 0.0022842719, -0.04196712, -0.01724257, 0.02348889, 0.018761639, -0.0024684875, -0.0012930509, 0.01903371, 0.024803905, 0.007198574, -0.008751652, -0.04062943, 0.015417418, 0.023692945, 0.018410211, -0.027683336, 0.0061386265, 0.020439416, 0.042239193, 0.029179731, -0.060309313, 0.010950902, 0.0040612426, -0.011801127, 0.0034405782, -0.0022899401, -0.00194985, -0.0006320008, 0.03382763, 0.006456044, 0.030177329, 0.019793244, 0.0022729356, -0.003664471, -0.019045046, -0.03865691, 0.02500796, 0.002689546, 0.00055618904, 0.0049993247, 0.008694971, -0.03620826, -0.00046549833, 0.012356607, -0.0054669487, -0.0085532665, -0.010690166, 0.02089287, 0.044234388, 0.00174863, -0.01101892, 0.01525871, 0.010412426, -0.024690542, 0.0008410145, 0.0053677554, -0.020099325, 0.0006284582, 0.03391832, 0.0017670515, -0.0047896025, 0.003400901, 0.03196847, -0.024305107, 0.017786713, 0.034031685, -0.010973575, -0.0052713966, -0.013512914, 0.022978755, -0.04525466, 0.019793244, 0.008785661, 0.0074819825, -0.027683336, -0.009607546, 0.018398875, 0.02280871, -0.016800452, 0.047612615, 0.0116991, -0.018818319, 0.004194445, -0.0002580788, 0.032512616, -0.010605143, -0.0076747, -0.02194715, -0.004341817, -0.015995571, -0.005809873, 0.0063710213, -0.004171772, -0.028499551, -0.006660098, 0.015224701, -0.0020462088, 0.008950038, -0.04062943, 0.01055413, 0.018829657, -0.02432778, -0.019396473, 0.022003831, -0.027955407, -0.029474476, 0.018002104, 0.008167831, 0.02175443, 0.0056114867, 0.0036049553, 0.011126615, -0.00038366416, -0.0067791296, 0.06312072, -0.004874625, -0.0063143396, -0.003429242, -0.014725902, -0.0059629134, -0.030109312, -0.019883936, 0.01129666, -0.03323814, 0.01271937, 0.0048321136, -0.053371474, -0.028204806, 0.04008529, 0.0016650246, 0.061896402, -0.01788874, 0.0026073575, 0.009465842, 0.0011116696, 0.0042256196, -0.022581983, -0.011347674, -0.021289641, -0.03355556, -0.005945909, -0.01216389, 0.016120272, 0.01980458, -0.04416637, -0.02432778, 0.0001737648, -0.008734648, 0.010389753, -0.017696023, -0.0007800817, -0.0082415175, 0.01008934, 0.006059272, 0.0056539983, -0.010004317, -0.014465166, 0.016664416, -0.0045883823, -0.0001937805, 0.013796322, -0.0194985, 0.015043319, 0.0056908415, 0.02166374, -0.005515128, -0.030381383, -0.0018194821, 0.03945045, -0.013830331, 0.004166104, 0.0012271585, -0.013263514, -0.0011109611, -0.0016735268, 0.03101622, 0.0047924365, -0.011767118, 0.04561742, -0.0060025905, 0.02627763, 0.003361224, 0.05740721, 0.0082358485, 0.023420872, -0.005804205, 0.007912763, 0.019611863, 0.018512238, -0.0060706087, 0.011506382, -0.041309614, 0.00020139711, 0.034394447, -0.0145218475, 0.01624497, -0.0015119839, 0.023420872, 0.041740395, 0.024826579, 0.043463517, 0.027955407, 0.06534265, -0.04543604, 0.03371427, 0.008411562, 0.019974627, 0.021006232, 0.023443546, 0.00014622103, -0.030358711, 0.014261113, -0.008921698, 0.024577178, 0.025937539, -0.0059118997, 0.006019595, -0.008904693, -0.03389565, 0.0007758306, -0.0001331134, 0.0020717157, -0.01110961, 0.0011116696, -0.03450781, -0.03160571, -0.020824851, -0.0033895648, -0.030902855, -0.013399551, 0.028953005, 0.019543845, -0.00020848232, -0.044347752, 0.021607058, -0.003667305, 0.035754807, -0.003987557, 0.0157235, -0.0019937784, -0.02559745, -0.0049058, 0.0044551804, 0.009397823, 0.044189043, -0.03348754, -0.022400603, -0.04507328, 0.022207884, -0.007289265, 0.0270485, -0.0057673617, 0.041241594, 0.010729843, -0.0011414274, 0.00597425, 0.018251503, 0.026640393, -0.06393694, 0.005073011, -0.012367944, 0.013898349, 0.03187778, -0.028386189, -0.004849118, -0.009505519, -0.007873086, 0.0018747468, -0.029905258, 0.01733326, -0.0054952893, 0.037341896, 0.018364865, -0.00789009, -0.024871923, 0.039155707, -0.0049993247, -0.008218844, 0.03407703, -0.003772166, 0.020314716, 0.025937539, -0.020167343, 0.03171907, 0.00041342204, -0.023874326, 2.3181923e-05, 0.0051268586, -0.028703606, -0.028930333, -0.026504356, 0.031923126, -0.038702253, -0.0060422677, 0.008615617, -0.029202405, 0.043214116, -0.016449025, -0.027592644, -0.022151202, -0.002856757, 0.00053351634, -0.015088664, -0.024055708, -0.029655859, -0.019781908, -0.017140541, -0.029406458, -0.008473912, -0.006025263, 0.013909685, 0.003834516, -0.030721474, -0.002723555, -0.007567005, 0.005452778, 0.027411263, 0.032353908, 0.06747388, -0.015077328, 0.038203456, -0.0025478418, -0.05840481, -0.004304974, 0.018806983, -0.0057701957, -0.021312313, 0.0033527217, -0.021176279, -0.0025946042, 0.010265053, 0.012322598, 0.014476502, -0.03162838, -0.0063426807, 0.0029049364, -0.006886825, -0.00095296087, 0.020700151, 0.0051693697, 0.035641443, 0.010610811, -0.013716968, -0.006019595, -0.027184537, -0.014181757, 0.008887689, -0.023828981, 0.0127533795, -0.0028666763, -0.018024776, 0.01894302, 0.011432696, -0.01640368, 0.050741445, 0.024123726, -0.028771624, -0.037432585, 0.019260436, -0.03482523, 0.015666818, -0.005682339, -0.0584955, -0.0010564049, 0.01971389, 0.031333636, 0.02491727, -0.011489377, 0.007759723, -0.004304974, -0.016845796, 0.0043956647, -0.011024588, 0.010061, -0.032580633]"
../../../gradio,../../../gradio/gradio/components,multimodal_textbox.pyi,"""""""gr.MultimodalTextbox() component.""""""

from __future__ import annotations

from pathlib import Path
from typing import Any, Callable, List, Literal, TypedDict

import gradio_client.utils as client_utils
from gradio_client.documentation import document
from pydantic import Field
from typing_extensions import NotRequired

from gradio.components.base import FormComponent
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events


class MultimodalData(GradioModel):
    text: str
    files: List[FileData] = Field(default_factory=list)


class MultimodalPostprocess(TypedDict):
    text: str
    files: List[FileData]


class MultimodalValue(TypedDict):
    text: NotRequired[str]
    files: NotRequired[list[str]]

from gradio.events import Dependency

@document()
class MultimodalTextbox(FormComponent):
    """"""
    Creates a textarea for users to enter string input or display string output and also allows for the uploading of multimedia files.

    Demos: chatbot_multimodal
    Guides: creating-a-chatbot
    """"""

    data_model = MultimodalData

    EVENTS = [
        Events.change,
        Events.input,
        Events.select,
        Events.submit,
        Events.focus,
        Events.blur,
    ]

    def __init__(
        self,
        value: dict[str, str | list] | Callable | None = None,
        *,
        file_types: list[str] | None = None,
        lines: int = 1,
        max_lines: int = 20,
        placeholder: str | None = None,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        autofocus: bool = False,
        autoscroll: bool = True,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        text_align: Literal[""left"", ""right""] | None = None,
        rtl: bool = False,
        submit_btn: str | Literal[False] | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show in MultimodalTextbox. A dictionary of the form {""text"": ""sample text"", ""files"": [{path: ""files/file.jpg"", orig_name: ""file.jpg"", url: ""http://image_url.jpg"", size: 100}]}. If callable, the function will be called whenever the app loads to set the initial value of the component.
            file_types: List of file extensions or types of files to be uploaded (e.g. ['image', '.json', '.mp4']). ""file"" allows any file to be uploaded, ""image"" allows only image files to be uploaded, ""audio"" allows only audio files to be uploaded, ""video"" allows only video files to be uploaded, ""text"" allows only text files to be uploaded.
            lines: minimum number of line rows to provide in textarea.
            max_lines: maximum number of line rows to provide in textarea.
            placeholder: placeholder hint to provide behind textarea.
            label: The label for this component. Appears above the component and is also used as the header if there is a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be rendered as an editable textbox; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            autofocus: If True, will focus on the textbox when the page loads. Use this carefully, as it can cause usability issues for sighted and non-sighted users.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            text_align: How to align the text in the textbox, can be: ""left"", ""right"", or None (default). If None, the alignment is left if `rtl` is False, or right if `rtl` is True. Can only be changed if `type` is ""text"".
            rtl: If True and `type` is ""text"", sets the direction of the text to right-to-left (cursor appears on the left of the text). Default is False, which renders cursor on the right.
            autoscroll: If True, will automatically scroll to the bottom of the textbox when the value changes, unless the user scrolls up. If False, will not scroll to the bottom of the textbox when the value changes.
            submit_btn: If False, will not show a submit button. If a string, will use that string as the submit button text. Only applies if `interactive` is True.
        """"""
        self.file_types = file_types
        if value is None:
            value = {""text"": """", ""files"": []}
        if file_types is not None and not isinstance(file_types, list):
            raise ValueError(
                f""Parameter file_types must be a list. Received {file_types.__class__.__name__}""
            )
        self.lines = lines
        self.max_lines = max(lines, max_lines)
        self.placeholder = placeholder
        self.submit_btn = submit_btn
        self.autofocus = autofocus
        self.autoscroll = autoscroll

        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.rtl = rtl
        self.text_align = text_align

    def preprocess(self, payload: MultimodalData | None) -> MultimodalValue | None:
        """"""
        Parameters:
            payload: the text and list of file(s) entered in the multimodal textbox.
        Returns:
            Passes text value and list of file(s) as a {dict} into the function.
        """"""
        if payload is None:
            return None
        return {
            ""text"": payload.text,
            ""files"": [f.path for f in payload.files],
        }

    def postprocess(self, value: MultimodalValue | None) -> MultimodalData:
        """"""
        Parameters:
            value: Expects a {dict} with ""text"" and ""files"", both optional. The files array is a list of file paths or URLs.
        Returns:
            The value to display in the multimodal textbox. Files information as a list of FileData objects.
        """"""
        if value is None:
            return MultimodalData(text="""", files=[])
        if not isinstance(value, dict):
            raise ValueError(
                f""MultimodalTextbox expects a dictionary with optional keys 'text' and 'files'. Received {value.__class__.__name__}""
            )
        text = value.get(""text"", """")
        if ""files"" in value and isinstance(value[""files""], list):
            files = [
                file
                if isinstance(file, FileData)
                else FileData(
                    path=file,
                    orig_name=Path(file).name,
                    mime_type=client_utils.get_mimetype(file),
                )
                for file in value[""files""]
            ]
        else:
            files = []
        if not isinstance(text, str):
            raise TypeError(
                f""Expected 'text' to be a string, but got {type(text).__name__}""
            )
        if not isinstance(files, list):
            raise TypeError(
                f""Expected 'files' to be a list, but got {type(files).__name__}""
            )
        return MultimodalData(text=text, files=files)

    def example_inputs(self) -> Any:
        return {""text"": ""sample text"", ""files"": []}

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def submit(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def focus(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def blur(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `MultimodalTextbox` component that allows users to enter string input or display string output and upload multimedia files. It inherits from `FormComponent` and includes methods for preprocessing, postprocessing, example inputs, and various events such as change, input, select, submit, focus, and blur. The component can be customized with parameters such as default value, file types, lines, placeholder, label, and more. The component also provides options for event handling, including defining functions to be called when events like change, input, select, submit, focus, and blur are triggered.","[-0.027745232, 0.055490464, 0.0013516258, 0.0671802, 0.0035456878, -0.04291803, 0.04411086, 0.041963767, 0.0012547083, 0.040914077, -0.0006333183, 0.0214948, 0.013741404, 0.018214518, -0.0019070373, 0.0064532114, 0.017928239, 0.014695669, -0.0019696609, 0.00173855, 0.0012375613, 0.013252344, 0.011582382, 0.025121005, 0.013801046, -0.041963767, -0.058210116, 0.03246884, -0.005561571, 0.050385147, -0.0062027173, -0.03056031, -0.027029533, -0.0050605824, -0.05696957, 0.020182688, 0.025168719, 0.04418243, 0.015649933, -0.0047086976, -0.100006886, -0.03091816, 0.026862537, 0.019979907, 0.0045566116, 0.048452765, -0.0023856605, 0.030894304, -0.015423295, 0.0660828, -0.04952631, -0.020826817, 0.007610257, -0.023295974, 0.014302035, 0.0067693116, -0.05754213, 0.041415066, -0.010150985, 0.005988008, 0.024691585, 0.009989954, -0.026957963, -0.03282669, 0.0009587373, -0.0033458888, 0.010705652, 0.017164826, -0.0036590067, 0.015482936, 0.03194399, -0.048238054, -0.015065446, 0.02163794, 0.009733494, 0.022651846, -0.011290139, -0.023785034, 0.0011734468, -0.026456974, 0.025979843, 0.016425272, -0.042703323, -0.002998477, -0.038957834, 0.060166355, -0.06584423, 0.025311857, -0.06527167, -0.064985394, -0.05964151, 0.008564521, -0.029033488, 0.09375646, 0.021089239, 0.008236493, -0.07615028, -0.06913644, 0.022437137, 0.0042941887, 0.028270077, -0.020492824, -0.025359571, -0.013395484, 0.015697645, -0.038194425, 0.007914429, -0.027673662, -0.018703578, -0.0011458625, -0.032540407, 0.0034562256, -0.031419147, 0.03435351, 0.05367736, -0.03850456, 0.021125024, -0.0070436625, -0.007371691, -0.036715314, 0.025550423, -0.0067931684, -0.0066798492, -0.03265969, 0.022007719, -0.015649933, -0.0646514, -0.011457134, -0.029152771, -0.0105446195, -0.013180774, -0.019001786, 0.015506793, -0.03490221, -0.005886617, 0.029701473, -0.03702545, 0.011272246, -0.057732984, 0.012644, -0.012691714, -0.028365502, 0.016055495, 0.032063276, -0.030655736, -0.0285325, -0.044587996, 0.03175314, -0.06112062, -0.0007924866, -0.028222363, -0.030250175, -0.023594182, 0.016950117, 0.005525786, -0.035951905, 0.013538623, 0.004428382, -0.026051411, -0.044468712, 0.0030536454, -0.07505288, 0.023856604, -0.007186802, 0.03153843, 0.006948236, 0.0007630386, 0.0050397078, -0.031443004, -0.02073139, 0.030751163, -0.026552401, 0.0021217468, -0.008111246, -0.018548511, -0.013598264, -0.023439115, -0.032015562, -0.043872297, -0.006086416, -0.0005121715, 0.015471008, 0.015447152, 0.015375582, 0.002685359, -0.038122855, 0.010693723, 0.011385565, 0.01939542, -0.021208521, -0.015196657, 0.012429291, -0.0038856445, -0.0010221064, 0.025526566, -0.026552401, 0.013073419, 0.0009154972, -0.008087389, -0.026528545, 0.049001466, 0.022794986, 0.011445206, 0.020504752, -0.022568349, 0.014719525, -0.037359443, 0.050623715, -0.013848759, 0.016592268, 0.023200547, 0.01426625, 0.048619762, -0.021733366, -0.02741124, -0.0024259186, -0.019347707, 0.060691204, -0.029248197, -0.005958187, -0.0177016, 0.03681074, 0.04511284, -0.06217031, 0.013634049, -0.018751292, -0.007610257, 0.0076341135, -0.015506793, -0.027697518, 0.009417395, 0.0005960424, 0.011719557, -0.047021367, 0.005197758, -0.03394795, -0.015148944, -0.024178669, -0.0001286952, 0.019383492, -0.04327588, -0.009978025, 0.012137048, 0.0038379312, 0.016305989, 0.027148817, -0.022651846, -0.045327548, 0.00081336114, -0.02593213, 0.01567379, -0.00011686009, -0.018548511, 0.0061251833, 0.013729476, 0.005728567, -0.024190597, 0.062218025, 0.02676711, 0.0061848247, -0.027005676, -0.06818218, -0.046758946, 0.019645914, 0.0070794476, 0.055204183, 0.011021751, 0.048715185, -0.0060059004, 0.011170855, -0.017868597, 0.026051411, 0.03778886, 0.029057344, -0.022520635, -0.012775212, 0.032755118, 0.051243987, -0.01475531, 0.03211099, -0.012321936, -0.015399438, 0.011236461, 0.028842635, -0.0035963831, 0.021864578, 0.0061728964, -0.01840537, -0.019657843, -0.04778478, 0.027769089, -0.00952475, -0.009035689, 0.0016714534, -0.020910313, 0.011236461, 0.013729476, -0.0083438475, 0.018858645, -0.02593213, -0.0025288002, 0.002724126, -0.026480831, -0.040293805, 0.019132998, -0.0026346638, -0.015315941, -0.012310008, 0.0054721087, -0.046043247, 0.010216591, -0.035116922, -0.02030197, -0.023773106, -0.06374485, -0.0136698345, 0.0704247, 0.051577978, -0.004416454, -0.04411086, 0.026242265, 0.013526695, 0.023200547, -0.040914077, 0.019407349, -0.024715442, -0.06856388, 0.0087792305, -0.0016147939, -0.021232378, 0.029200485, -0.03265969, 0.0019950087, -0.02416674, 0.03786043, -0.018751292, 0.0052603814, 0.017832812, -0.03194399, 0.031777, -0.037216302, 0.006673885, 0.0010899486, 0.03401952, 0.052961662, 0.0037932002, 0.0033458888, 0.054297633, -0.0024229365, -0.044373285, 0.0016535609, -0.005009887, 0.03602347, -0.031299867, 0.03203942, -0.020958027, -0.03712088, -0.02360611, -0.034329653, -0.00962614, -0.022747273, 0.011319959, -0.012977993, 0.014063468, 0.0076281494, -0.017129041, -0.05873496, -0.021733366, -0.06050035, -0.031729285, 0.016938189, -0.02051668, 0.03688231, 0.048595905, -0.002093417, -0.06560566, 0.010019774, 0.008767302, -0.0078488225, -0.046114817, 0.04644881, -0.0087792305, 0.029773043, -0.0032683548, -0.032015562, 0.004997959, 0.038766984, 0.026385404, 0.05587217, -0.008600306, -0.02057632, 0.014361676, 0.0036918095, 0.016997831, 0.0019204566, 0.039244115, 0.021936148, -0.0089641195, 0.027387382, 0.013956114, 0.036786884, 0.020898385, -0.02340333, 0.047092937, -0.025669707, -0.038122855, 0.018536583, 0.011820948, 0.044468712, 0.007699719, 0.03912483, -0.029820755, 0.0278168, 0.01636563, 0.03704931, 0.044850416, -0.0059790616, 0.013645978, 0.040007524, 0.023761177, -0.04313274, 0.0016207581, -0.0048697293, -0.01791631, 0.0032594085, 0.0285325, 0.031729285, -0.07553001, 0.002953746, -0.009846814, -0.031896282, 0.029963896, 0.02488244, 0.036619887, 0.015852714, -0.05324794, -0.007443261, 0.03323225, 0.022878483, 0.0033846558, -0.048810612, 0.04432557, 0.027005676, -0.034329653, -0.00047825038, 0.004842891, 0.0086241625, -0.004893586, -0.014385533, -0.038766984, -0.029987752, 0.039601963, -0.007180838, 0.017761242, 0.02593213, -0.024429163, 0.04890604, -0.012143012, -0.018298015, -0.014779166, -0.01918071, 0.013872616, 0.024023602, 0.01784474, 0.012751355, 0.0036202397, 0.023546468, -0.0047415, 0.01952663, 0.015148944, -0.032349557, 0.06050035, 0.03807514, 0.045017414, -0.021113096, 0.013860688, 0.010073451, 0.009679818, -0.05267538, -0.020504752, 0.029248197, 0.008970084, -0.029033488, -0.018321872, -0.014981948, 0.15125087, -0.018119091, -0.004968138, -0.01748689, -0.016508771, -0.019896409, -0.0068885945, -0.0046520378, -0.0106996875, 0.034806788, -0.018667793, -0.040508516, -0.055108756, -0.001935367, -0.01939542, 0.038385276, -0.018596223, -0.03351853, -0.01025834, 0.0028687567, 0.008105282, 0.049478598, -0.0011339342, 0.017474962, 0.0050307615, -0.03619047, -0.04179677, 0.025478853, 0.018357657, -0.017892454, -0.011033679, -0.011284174, 0.018095234, -0.006244466, 0.006035721, -0.030942015, 0.05248453, 0.0012151957, -0.035713337, -0.036715314, -0.009041653, -0.021160807, -0.033136822, -0.010019774, -0.029749187, -0.004816052, 0.007574472, 0.018500797, 0.007765325, -0.07176067, 0.011027715, -0.03048874, -0.010139057, 0.0073478343, -0.031729285, -0.004771321, -0.035737194, -0.0053468617, 0.0126797855, -0.014099253, 0.070520125, -0.02712496, -0.042894173, -0.0097991, 0.03576105, 0.009822957, -0.050480574, 0.042393185, -0.024071313, 0.033208393, 0.0086241625, 0.0047146613, 0.022651846, -0.03702545, -0.042941887, 0.0009326441, 0.009131116, 0.013323913, 0.0018697614, -0.03800357, -0.034210373, -0.014624098, 0.0043120813, -0.00307452, 0.004944281, -0.036930025, -0.020540537, 0.03392409, 0.016258277, -0.02277113, -0.010156949, 0.02001569, -0.03929183, -0.033613957, -0.018858645, 0.0024617035, 0.0056182304, -0.013860688, -0.026170695, -0.011296102, 0.011331887, 0.028723352, -0.0064114626, -0.0052573993, 0.032421127, -0.0067633474, -0.001497002, 0.024954008, 0.047188364, 0.01764196, 0.006322, 0.0031729285, -0.03211099, -0.011695701, -0.0049591917, -0.011141035, 0.006068524, -0.014814951, -0.012119155, -0.0011384074, 0.02346297, 0.04403929, -0.00972753, -0.036691457, 0.027769089, -0.011779198, 0.026194552, -0.027291955, -0.01672348, -0.024071313, -0.016317917, -0.023940103, 0.028818779, 0.04489813, 0.04208305, -0.04234547, 0.024059385, 0.035236206, -0.0015327869, 0.0062623587, 0.029963896, -9.971315e-05, -0.041510493, 0.05320023, 0.00576137, -0.020146903, -0.015936213, 0.044850416, 0.0040108915, -0.027101103, -0.047522355, 0.065510236, 0.023808891, -0.0068885945, -0.034806788, -0.0006534473, 0.03702545, 0.02893806, 0.0330414, 0.023904318, 0.019299993, -0.030297888, 0.009244435, 0.02481087, -0.018906359, -0.022067359, -0.0045506475, 0.011993908, 0.013681763, 0.0034979747, -0.011117178, 0.001222651, 0.0028687567, -0.02100574, -0.0019935176, 0.004562576, 0.009029725, -0.013765261, 0.0058955634, -0.027148817, 0.03258812, -0.007968106, -0.032373413, -0.027912227, 0.011337851, -0.02705339, 8.1541126e-05, -0.0016490878, 0.012644, 0.048309624, -0.012250367, 0.049574025, -0.025598137, 0.019192638, 0.0017072383, 0.006035721, 0.023021623, -0.033279963, -0.0028896313, -0.003900555, -0.008844837, 0.032230273, -0.028055368, -0.0034800821, -0.049669452, 0.005015851, -0.04356216, 0.014695669, 0.00037238668, -0.01764196, 0.027005676, -0.018799005, 0.012632072, 0.022961982, -0.010383587, 0.018035593, -0.031490717, -0.022830771, -0.010156949, 0.014695669, -0.0015208585, -0.0183338, 0.03273126, 0.053343367, -0.04489813, 0.012465076, 0.009512821, 0.0033071218, -0.024906294, -0.010204663, -0.00075222855, 0.0023036534, 0.017379537, -0.012751355, -0.0074850097, 0.003432369, -0.013789117, -0.0512917, -0.0014843281, -0.0007309813, -0.055251896, -0.00073396333, -0.0038528417, -0.011230497, 0.01127821, -0.019335778, 0.03922026, -0.010323945, 0.013717548, -0.028126936, 0.024226382, 0.024059385, -0.023069337, 0.010616189, -0.0059701153, -0.01482688, 0.008946227, -0.044707276, -0.029629903, 0.0007436551, 0.018667793, 0.026361547, -0.023725394, -0.03922026, 0.020850673, -0.032778975, 0.007872679, -0.01609128, 0.014302035, -0.056587867, -0.015924284, -0.029773043, -0.020146903, -0.019967979, 0.0028672656, 0.014946163, 0.019299993, -0.016556483, -0.018799005, -0.051243987, -0.020421254, 0.031586144, -0.001930894, -0.023761177, 0.05234139, 0.013407412, -0.045971677, -0.024643872, -0.01349091, 0.02633769, -0.0106042605, -0.022043502, -0.014636027, 0.03146686, 0.0015894463, 0.026170695, 0.004923407, 0.014886522, -0.017880525, -0.0019249298, -0.005758388, -0.04010295, 0.011033679, 0.001693819, -0.038099, -0.013013778, -0.0025809864, -0.0057017286, -0.02860407, 0.016675767, 0.013944185, 0.013443197, -0.050862283, -0.008081425, -0.021339733, -0.04857205, -0.060261782, -0.020862602, 0.020540537, 0.00033212866, 0.040770937, -0.02326019, -0.004616253, 0.014337819, 0.0012360703, 0.023284046, -0.0021873524, -0.031657714, -0.006387606, 0.013478981, -0.008087389, 0.0115346685, -0.008731517, -0.008648019, -0.043538302, 0.027840657, -0.016389487, -0.013860688, 0.027506664, 0.04938317, -0.019359635, 0.028556356, 0.018775148, 0.011397493, 0.0108547555, -0.0006769312, 0.008141066, -0.019132998, 0.01071758, 0.017188683, -0.006978057, -0.035093065, -0.004488024, -0.0042345473, -0.042941887, 0.015816929, 0.004896568, -0.018548511, 0.013240416, 0.038480703, -0.024119027, -0.0055496427, -0.023236332, -0.024834726, 0.02550271, -0.02241328, -0.032564264, 0.005048654, -0.042178478, 0.012906423, -0.0013933749, 0.031800855, -0.013264272, -0.015304012, -0.0052663456, -0.01145117, 0.011868661, -0.018632008, 9.4541116e-05, -0.009882598, -0.020755246, -0.009602283, -0.012691714, 0.03681074, 0.00046408552, -0.005764352, 0.0073597627, 0.015160873, 0.012143012, 0.019288065, 0.00084318186, 0.021542514, -0.015781144, 0.011850769, 0.027005676, 0.025407284, -0.024333736, -0.000968429, 0.00044731135, -0.024047457, -0.0019010731, 0.027220385, 0.03463979, -0.0011928303, 0.015172801, -0.017093258, 0.02445302, -0.007836895, -0.04272718, -0.013168845, 0.04847662, -0.0011689736, 0.041701347, -0.0047504464, -0.03323225, -0.00606256, -0.0008797123, -0.025526566, -0.021256234, 0.01468374, 0.027458953, -0.03568948, -0.018703578, -0.025025578, -0.017248325, -0.016842762, -0.025979843, 0.03048874, 0.020779103, -0.027196528, 0.03001161, 0.031419147, 0.009262327, 0.0107474, -0.008558557, -0.040985648, 0.015518721, 0.037216302, -0.0010385078, -0.004183852, 0.026814824, -0.013335842, 0.027482808, 0.008206672, -0.005519822, -0.0046460736, -0.023415258, 0.03521235, -0.02333176, 0.04320431, -0.060882054, -0.008492951, -0.0030953945, -0.009960133, 0.008248421, -0.034854498, 0.028270077, -0.004261386, 0.0011041135, 0.0054661445, -0.015721502, -0.022663774, 0.038456846, 0.006596351, -0.011886553, 0.0065367096, -0.003542706, 0.024739299, -0.006500925, -0.042297762, 0.0059790616, 0.015196657, -0.0007063791, 0.029081201, 0.057255853, -0.023451043, 0.02269956, -0.009566499, 0.033423103, -0.017021688, -0.024691585, 0.04649652, 0.01300185, -0.006086416, 0.01018677, -0.013717548, -0.011940231, 0.0041570133, 0.014099253, -0.05424992, 0.011683772, -0.00019253025, -0.00025962695, 0.018178733, -0.043514445, 0.0071450532, 0.024667729, -0.002958219, 0.015208585, -0.008558557, -0.024178669, 0.0126797855, 0.015351725, 0.013801046, 0.045995533, -0.012560503, -0.020969955, 0.009250399, 0.013729476, 0.01629406, -0.0023886426, -0.031991705, -0.011164891, 0.017319895, 0.00067022146, -0.018655865, 0.0016490878, 0.006232538, -0.0164372, 0.018966, -0.014361676, 0.026671683, 0.01560222, 0.036214326, -0.033112966, -0.0487629, -0.0031490717, -0.002645101, -0.0070913755, 0.008803087, -0.02290234, 0.0059462585, -0.0015730449, -0.01446903, -0.02199579, 0.011409421, -0.012977993, 0.035021495, -0.018727435, -0.0051560085, -0.016604196, 0.008815016, -0.0049472633, -0.0011369163, 0.047188364, -0.005680854, 0.034186516, -0.010908432, -0.0138249025, 0.0009154972, 0.021626012, 0.009846814, 0.008904478, 0.042679466, -0.00086256536, -0.0054154494, -0.030679593, -0.016508771, 0.027220385, -0.0021888434, -0.03280283, -0.0006221355, -0.025908273, 0.017093258, 0.031085156, 0.0093040755, 0.038552273, -0.0222105, 0.023725394, 0.015912356, -0.022258213, 0.008069497, 0.010657938, 0.0002508671, 0.042035338, -0.01127821, 0.0019592238, -0.01679505, -0.051673405, 0.0044224183, -0.0012405434, 0.014099253, -0.032707404, 0.020958027, 0.0064054984, -0.00212622, 0.0028359538, 0.010795114, -0.0048339446, -0.007389583, -0.0060506314, 0.030751163, -0.0014276687, 0.049001466, -0.012071442, 0.0139799705, 0.012178796, -0.001656543, 0.016950117, 0.028747208, 0.026480831, -0.008719589, 0.020075332, 0.018178733, 0.020838745, -0.05353422, 0.023295974, -0.024834726, -0.04630567, -0.005018833, 0.024787012, 0.0021456033, 0.04026995, 0.011009823, -0.0040824614, -0.0102941245, 0.027363526, -0.009417395, 0.0056927823, -0.0038379312, 7.706801e-05, 0.020182688, -0.01601971, 0.00093711726, -0.007061555, 0.019574344, 0.024954008, 0.031323723, -0.022508707, -0.022627989, 0.0128348535, -0.00544527, -0.009363717, 0.010377623, 0.014647955, 0.026790967, -0.019288065, 0.010842827, 0.0063637495, 0.00012636546, -0.008475059, 0.04924003, 0.027101103, -0.050480574, 0.00056361227, -0.030226318, 0.010037666, -0.019979907, -0.02810308, 0.0002096772, 0.020958027, -0.0012964574, -0.027005676, 0.0067931684, -0.012417363, -0.008123174, -0.006703706, -0.0060506314, 0.025025578, -0.017630031, -0.020361612, -0.03673917, 0.03139529, 0.015375582, -0.0064353193, -0.0055078934, 0.038480703, -0.0067394907, -0.0066619567, 0.03786043, 0.007210659, 0.024763156, -0.0041719237, 0.011862697, -0.008415418, 0.0012547083, 0.017105186, 0.012131084, -0.025955986, -0.02324826, 0.021900363, -0.006500925, 0.017987879, -0.021828793, 0.035975758, 0.028031511, -0.0015700628, 0.012536646, 0.0057822447, 0.0035337596, 0.023880461, -0.016973974, 0.012584359, -0.0069601643, 0.01629406, -0.008385597, -0.036930025, -0.0053140586, -0.027745232, -0.008516808, 0.032277986, -0.030679593, 0.0037126841, 0.009972061, 0.010073451, 0.024906294, 0.009709639, 0.0155902915, -0.013478981, 0.015184728, 0.019264208, -0.03296983, 0.022830771, 0.01932385, 0.03504535, 0.011976016, 0.022496779, -0.039792817, 0.005299148, 0.01658034, -0.004485042, -0.004839909, -0.009393538, 0.041963767, -0.0081589585, 0.0010131602, 0.027649805, -0.0023946066, -0.014552529, -0.031777, -0.0086241625, 0.05587217, -0.008737481, -0.0017549514, 0.00020259476, -0.013860688, -0.0070019136, 0.013586337, 0.032564264, -0.007103304, 0.015005805, 0.013049562, -0.031085156, -0.009298111, 4.244798e-05, 0.031991705, -0.00110635, 0.004183852, -0.04890604, -0.036071185, 0.002251467, 0.010783185, -0.002642119, 0.033828665, 0.030584168, 0.026051411, -0.0323257, 0.021983862, 0.009345825, 0.0039095012, 0.014397461, 0.0057971547, -0.020588249, -0.022938125, 0.025598137, -0.016258277, -0.02662397, 0.011009823, -0.039959814, -0.0100794155, 0.011218568, 0.027959941, -0.028866492, -0.01086072, -0.02557428, -0.04869133, 0.020063404, -0.0023379473, -0.026790967, 0.005609284, -0.022723416, -0.012310008, 0.012512789, 0.019466989, 0.034615934, -0.0071748737, -0.013610193, -0.008027747, -0.01749882, 0.002840427, 0.002164987, -0.015196657, 0.01198198, 0.03394795, -0.030512597, -0.009649997, -0.014349747, -0.009900491, 0.011713593, -0.048166484, 0.01820259, 0.010824935, 0.0067633474, 0.0031729285, 0.0074850097, 0.00022812879, 0.019586273, 0.018154876, -0.011343815, 0.005173901, -0.0030208426, -0.00014994248, -0.016616125, 0.016747337, 0.016353702, -0.05143484, -0.008021783, 0.0016744355, -0.03478293, 0.032134846, -0.001972643, 0.02698182, -0.0035844548, -0.019299993, -0.02129202, -0.0062504304, 0.014516744, 0.021614084, -0.018751292, 0.019979907, -0.013920329, -0.023558397, -0.017510748, -0.015757287, -0.048739042, 0.0044432925, 0.006620208, -0.0030685558, -0.00062735414, 0.015196657, -0.0155902915, -0.023021623, -0.018417299, -0.029677616, 0.02057632, 0.008015819, 0.02164987, -0.043681443, -0.02382082, -0.013288129, -0.02936748, -0.008791159, 0.02593213, -0.0075565795, 0.003122233, 0.0041927984, 0.0062921797, 0.03394795, 0.019156853, -0.0069243796, 0.04890604, 0.03182471, 0.019908337, -0.024572304, 0.014862665, -0.010514799, 0.0034174586, 0.0013978479, -0.038671557, 0.022890411, 0.014528672, 0.042846464, 0.044087004, -0.027387382, 0.019299993, 0.0049025323, 0.043037314, 0.025550423, 0.038456846, 0.025240287, -0.0039393217, -0.0052723098, 0.009196721, 0.0015685718, -0.0011003859, -0.010687759, -0.030965872, 0.0036351501, -0.003992999, -0.017391466, 0.003071538, -0.013753332, -0.017439177, -0.029844612, -0.018727435, 0.047045223, 0.016532628, 0.008057568, -0.009369682, -0.004458203, 0.009363717, -0.01601971, -0.006369713, 0.013109204, -0.049287744, 0.030965872, 0.04337131, 0.045995533, 0.0100794155, -0.002761402, 0.0006072251, -0.027602091, 0.015065446, 0.015304012, 0.0556336, -0.033757094, 0.046949796, -0.018942144, 0.029486764, -0.020325826, 0.026361547, -0.0024781048, -0.033327676, -0.015805, 0.0066500288, -0.02586056, 0.03218256, 0.020826817, 0.0041987626, -0.015160873, -0.03330382, 0.04449257, -0.0026331728, -0.044850416, -0.032564264, 0.0032087134, -0.009363717, 0.013932257, 0.03640518, -0.00962614, 0.027673662, -0.020612106, 0.005248453, -0.04468342, -0.0045267907, 0.015518721, 0.036429036, -0.0014858191, -0.011558525, -0.012053549, -0.0040854434, -0.011457134, 0.0014351238, -0.010103272, -0.011856733, 0.0014559984, 0.03370938, 0.0056659435, -0.040436946, -0.004535737, -0.012572431, -0.0019294029, 0.0072464435, 0.020146903, 0.00019103922, -0.01560222, 0.011820948, 0.019550487, -0.042464755, -0.03282669, -0.023474898, 0.006864738, -0.0075148307, -0.018286087, -0.015077374, 0.013526695, 0.008057568, -0.023796963, 0.0020695603, -0.015184728, 0.017367609, -0.0072762645, -0.023629967, 0.042035338, -0.0070376983, 0.013180774, 0.051768832, -0.054774765, -0.007365727, -0.041916054, 0.015375582, 0.003040226, 0.046544235, 0.009793136, 0.0082186, -0.021339733, 0.030250175, 0.005167937, -0.028031511, 0.028627926, -0.008230529, -0.021160807, -0.019240351, -0.031252153, -0.0053110765, 0.00030566275, -0.019657843, 0.016174778, -0.002648083, -0.0042941887, -0.016055495, -0.04067551, -0.027172673, 0.052532244, 0.00035728994, -0.010270269, 0.027649805, 0.026170695, 0.035594054, -0.0008469095, 0.012954136, 0.022377495, -0.0049591917, -0.018810933, -0.027649805, 0.011713593, 0.009477036, 0.033900235, -0.0072703003, 0.017928239, 0.01748689, 0.007997926, -0.028270077, 0.0035009568, 0.024787012, -0.01320463, -0.028985774, -0.012053549, -0.040651653, -0.0115943095, -0.014003827, -0.0015283137, 0.0013568444, 0.020361612, -0.00987067, 0.026194552, -0.016329845, 0.029773043, -0.01728411, -0.013085348, -0.0018578331]"
../../../gradio,../../../gradio/gradio/components,number.pyi,"""""""gr.Number() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import FormComponent
from gradio.events import Events
from gradio.exceptions import Error

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Number(FormComponent):
    """"""
    Creates a numeric field for user to enter numbers as input or display numeric output.

    Demos: tax_calculator, blocks_simple_squares
    """"""

    EVENTS = [Events.change, Events.input, Events.submit, Events.focus]

    def __init__(
        self,
        value: float | Callable | None = None,
        *,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        precision: int | None = None,
        minimum: float | None = None,
        maximum: float | None = None,
        step: float = 1,
    ):
        """"""
        Parameters:
            value: default value. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be editable; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            precision: Precision to round input/output to. If set to 0, will round to nearest integer and convert type to int. If None, no rounding happens.
            minimum: Minimum value. Only applied when component is used as an input. If a user provides a smaller value, a gr.Error exception is raised by the backend.
            maximum: Maximum value. Only applied when component is used as an input. If a user provides a larger value, a gr.Error exception is raised by the backend.
            step: The interval between allowed numbers in the component. Can be used along with optional parameters `minimum` and `maximum` to create a range of legal values starting from `minimum` and incrementing according to this parameter.
        """"""
        self.precision = precision
        self.minimum = minimum
        self.maximum = maximum
        self.step = step

        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    @staticmethod
    def _round_to_precision(num: float | int, precision: int | None) -> float | int:
        """"""
        Round to a given precision.

        If precision is None, no rounding happens. If 0, num is converted to int.

        Parameters:
            num: Number to round.
            precision: Precision to round to.
        Returns:
            rounded number or the original number if precision is None
        """"""
        if precision is None:
            return num
        elif precision == 0:
            return int(round(num, precision))
        else:
            return round(num, precision)

    def preprocess(self, payload: float | None) -> float | int | None:
        """"""
        Parameters:
            payload: the field value.
        Returns:
            Passes field value as a `float` or `int` into the function, depending on `precision`.
        """"""
        if payload is None:
            return None
        elif self.minimum is not None and payload < self.minimum:
            raise Error(f""Value {payload} is less than minimum value {self.minimum}."")
        elif self.maximum is not None and payload > self.maximum:
            raise Error(
                f""Value {payload} is greater than maximum value {self.maximum}.""
            )
        return self._round_to_precision(payload, self.precision)

    def postprocess(self, value: float | int | None) -> float | int | None:
        """"""
        Parameters:
            value: Expects an `int` or `float` returned from the function and sets field value to it.
        Returns:
            The (optionally rounded) field value as a `float` or `int` depending on `precision`.
        """"""
        if value is None:
            return None
        return self._round_to_precision(value, self.precision)

    def api_info(self) -> dict[str, str]:
        return {""type"": ""number""}

    def example_payload(self) -> Any:
        return 3

    def example_value(self) -> Any:
        return 3

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def submit(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def focus(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Number` component in Gradio, which creates a numeric field for users to enter numbers as input or display numeric output. It includes parameters for setting the default value, label, precision, minimum and maximum values, step size, and other styling options. The component also provides methods for preprocessing and postprocessing the input values, as well as defining events like `change`, `input`, `submit`, and `focus`. These events allow users to trigger functions when certain actions occur, such as changing the input value, submitting the form, or focusing on the component.","[-0.06074405, 0.03725355, 0.018556794, 0.011774409, 0.02540333, -0.033497874, -0.009243406, 0.011535305, 0.0066190953, 0.0005551147, 0.031468406, 0.00200614, -0.0601842, -0.001976981, 0.052626185, 0.008286991, -0.016900564, -0.021799278, 0.0035136607, 0.025100077, -0.01825354, -0.010893807, 0.0077796243, 0.007919587, 0.019326592, -0.04320199, -0.026126474, 0.054259088, -0.009733278, -0.019583192, -0.04427504, -0.03627381, -0.0036302968, 0.01851014, -0.009628305, -0.06802214, 0.04604791, 0.015384294, -0.015605903, -0.011092088, -0.024306951, 0.002860499, -0.014742796, 0.014346234, -0.00075303146, 0.040566016, -0.020761216, -0.0052019674, 0.025589949, 0.05439905, -0.021845931, -0.01362309, -0.033801127, -0.007902092, 0.00896348, 0.025893202, -0.031211806, 0.032961346, 0.037650116, -0.055005558, 0.02799265, -0.035923902, -0.0019901025, 0.037393518, 0.025986511, 0.0298355, -0.039353002, 0.0033241273, 0.023875399, -0.0040297755, 0.026709653, -0.0154542755, 0.052952763, -0.01517435, -0.02967221, 0.018591786, -0.017122172, -0.055752028, 0.017880306, 0.02168264, 0.01148865, 0.008881835, -0.06503626, -0.01220013, 0.01449786, 0.014614496, -0.027106216, 0.0072664255, -0.05817806, -0.061910413, -0.045068167, -0.011710259, -0.0019930184, 0.0881302, 0.0019565697, 0.009908232, -0.025123404, -0.00224087, 0.02248743, 0.0053535947, 0.0093425475, -0.016247401, -0.020294672, -0.019559864, 0.040752634, 0.029322302, -0.028902411, 0.025100077, -0.029578902, 0.010164832, 0.00877103, 0.029368956, -0.052112985, 0.00093308836, -0.019128311, -0.027269507, -0.000854359, -0.017028863, -0.048753865, -0.019501546, -0.024027025, -0.002829882, -0.031538386, -0.028505849, 0.029555574, -0.03251813, -0.022114195, -0.046934344, -0.022569075, 0.024936786, 0.0233622, 0.003219155, -0.008222841, -0.05080666, -0.010508908, -0.003627381, -0.052952763, 0.020947834, -0.039353002, -0.002541208, 0.036973625, -0.013319836, 0.052766148, -0.0053506787, -0.012013513, -0.016760599, -0.06363662, 0.034617577, -0.016130766, -0.033661164, -0.03142175, 0.029438937, -0.06526953, -0.031888295, 0.043925136, 0.025426658, 0.053046074, -0.014357897, -0.012806638, -0.04663109, 0.020982824, 0.0071789487, 0.0264064, -0.014066307, 0.0076804836, 0.0047354233, -0.046771053, -0.008269495, -0.03827995, 0.05006019, -0.00844445, -0.040216107, -0.050340116, -0.029275646, -0.00018752889, -0.012561702, 0.026872944, -0.035410702, -0.025030095, 0.020189699, -0.010380608, -0.0071147988, -0.048427287, 0.008380299, 0.039516293, 0.0016168671, -0.0011102294, -0.06275019, -0.020376317, -0.04898714, 0.0076221656, -0.0077388017, 0.026056493, 0.026523037, -0.00016848442, -0.03527074, 0.031468406, -0.03251813, 0.0019201209, -0.017367108, 0.046981, -0.0015570913, 0.017810324, -0.014754459, -0.01821855, -0.012678338, -0.021146115, -0.012701665, 0.018311858, -0.010573057, 0.014696142, 0.011249547, 0.01896502, -0.0016737273, -0.052859455, 0.036996953, -0.005995093, 0.013238191, -0.037556805, -0.02064458, -0.006834872, -0.007645493, 0.0021577668, -0.015687548, 0.032028258, -0.017740343, 0.05659181, 0.02449357, 0.046654418, 0.011920203, 0.03844324, -0.0034845017, 0.022592401, -0.0026009837, 0.014614496, -0.02782936, 0.012946601, 0.0015264743, 0.015594239, 0.017623706, -0.018906703, -0.00896348, 0.0016139513, 0.0010730516, 0.018580122, 0.038559876, -0.03165502, -0.012946601, 0.035224084, 0.05164644, -0.03928302, -0.009925728, 0.038606532, -0.010783003, -0.019244947, -0.016504, 0.022790683, 0.07544019, 0.034034397, -0.017856978, -0.013308173, -0.123167664, -0.045348093, 0.011156238, -0.00248289, 0.036133848, 0.016282393, 0.028482523, -0.004922041, -0.043108683, -0.010975452, -0.023665454, 0.024376933, 0.012165139, -0.00925507, -0.002800723, 0.06466302, 0.06998163, -0.014544515, 0.0033678657, -0.011430332, -0.016107438, 0.002713246, 0.03524741, -0.033917762, 0.027176198, 0.03177166, -0.0015658389, 0.028202595, -0.047424216, 0.02465686, 0.023607135, 0.049080446, -0.01805526, -0.023047283, 0.010625544, 0.05733828, -0.038163316, 0.024470242, -0.02025968, 0.007079808, 0.011482819, -0.020119717, -0.063729934, -0.04481157, 0.021157779, 0.0049512, -0.005898868, -0.044321697, -0.018370178, 0.043761846, 0.04537142, 0.026709653, -0.0063566645, -0.04488155, -0.010415599, 0.025893202, 0.034244344, -0.0015104368, -0.011313696, 0.009960718, -0.0010059859, 0.04679438, -0.018918367, -0.0034611747, -0.024563551, -0.043341953, 0.008718545, 0.054539014, -0.05943773, 0.036577065, 0.03702028, -0.042525504, 0.043668535, 0.0021402715, -0.004662526, -0.01760038, 0.0019565697, -0.039353002, 0.032448146, 0.006053411, -0.028809102, 0.026546365, 0.01863844, 0.012211794, -0.015302649, -0.05934442, -0.011237883, 0.03226153, -0.032821383, -0.048194014, -0.02277902, -0.018288532, -0.02549664, 0.047284253, -0.0035807267, -0.0050386772, -0.049173757, -0.061163943, -0.00967496, -0.036996953, 0.032658093, -0.01851014, 0.00902763, 0.009185089, -0.00454589, -0.041009232, -0.033521198, -0.019478219, -0.03718357, -0.0036594558, -0.019956427, 0.014987731, -0.009797428, -0.04628118, -0.03412771, 0.023350537, -0.01805526, 0.0024260296, -0.049593646, 0.057944786, 0.023875399, 0.018860048, -0.025286695, 0.005455651, 0.0075346883, 0.051039934, 0.034710888, 0.011144574, 0.0019886445, -0.0038606531, -0.014404551, 0.00064259174, -0.016329046, 0.028389214, 0.019454893, 0.027596088, 0.06321674, 0.02740947, 0.01925661, -0.015559249, -0.019128311, -0.035690628, 0.014252924, -0.0104505895, -0.019676501, 0.017273799, 0.04532477, 0.0041172523, -0.029952137, 0.009260902, -0.00336495, 0.042828757, -0.009045125, 0.06699575, -0.010001541, 0.014031316, -0.007353903, 0.0055256328, 0.050106846, -0.024190316, -0.00017267602, 0.008683554, -0.045231458, 0.0028852841, 0.024353607, -0.015664222, -0.0038285782, 0.022534084, -0.025543293, -0.014509524, 0.016655628, 0.0013136135, 0.020283008, -0.0018807562, -0.0152093405, -0.014486196, 0.030395353, 0.071381256, 0.014801114, -0.008934321, 0.017448753, 0.011220387, 0.01643402, -0.0154542755, 0.02892574, -0.05150648, -0.03653041, -0.015360967, -0.058457986, -0.01391468, 0.02766607, -0.038909785, -0.013984662, 0.025846548, -0.010643039, 0.08677722, 0.0014645114, 0.017402098, -0.0009469389, -0.01905833, 0.008292823, -0.027969323, 0.02565993, -0.033871107, -0.03307798, -0.02857583, 0.0126433475, 0.010263972, -0.00818785, -0.008222841, 0.0046508624, 0.016165756, 0.01863844, -0.030442007, 0.04546473, 0.013168209, 0.038933113, 0.004268879, -0.015547585, -0.016294055, -0.022020886, 0.013879689, -0.021297742, -0.0021563089, 0.06979501, 0.004446749, -0.0133781545, -0.019909773, -0.010718852, -0.0011342856, -0.009628305, 0.029042374, -0.009978213, 0.029159011, 0.052672837, -0.025076749, 0.034897506, -0.055192176, -0.02582322, 0.021950904, -0.036133848, 0.0016285308, 0.06466302, 0.0013660997, -0.0037644284, 0.06914185, -0.00051429204, -0.019023338, -0.007196444, -0.00012957536, -0.02294231, -0.018195223, -0.030931879, -0.0062341965, -0.021507686, 0.005161145, 0.007645493, -0.021624323, -0.0084969355, 0.004099757, 0.012538374, -0.013879689, -0.011121247, 0.009080116, -0.012445066, -0.0062983464, -0.01404298, 0.02475017, -0.025473312, -0.008269495, -0.0041959817, -0.0014914834, 0.073434055, -0.06480299, -0.0077329697, -0.013051573, 0.05183306, 0.006724068, -0.029485593, -0.0065957685, -0.012246785, 0.041685723, -0.007972074, -0.032051586, 0.041429125, 0.0037965032, -0.030651953, -0.017821988, 0.033171292, 0.04047271, -0.036600392, -0.0034436793, -0.017215481, -0.022907319, 0.022930646, 0.025100077, 0.026686328, -0.01572254, -0.01449786, -0.01646901, -0.013693072, 0.01754206, 0.03258811, 0.0021796362, -0.064756334, -0.026593018, -0.032308184, -0.029765518, 0.033544526, -0.02967221, 0.01025814, 0.0028444615, 0.024516897, -0.010654703, -0.0027846855, -0.020726224, -0.015325977, 0.029695537, 0.0053331833, 0.020143045, 0.00066847034, 0.008934321, -0.036040537, -0.051973023, -0.01854513, 0.026009837, 0.02423697, 0.0042863744, -0.0142295975, -0.04604791, 0.0049774433, -0.010858816, 0.046444472, -0.011360351, 0.039119728, -0.043458592, 0.04336528, -0.029882155, 0.007902092, 0.019431565, -0.03109517, 0.010608048, 0.046747725, 0.034617577, 0.019466557, 0.03737019, -0.0004632638, -0.031048516, -0.0005839092, -0.025846548, 0.026966253, -0.034827523, -0.044321697, -0.031305116, 0.008356973, -0.0011043976, 0.024097007, 0.023350537, 0.013693072, -0.04313201, 0.03834993, 0.04035607, -0.0076804836, 0.0149644045, 0.031118497, -0.014976068, -0.0037556808, 0.015139359, 0.007814615, 0.023642126, -0.00961081, 0.03928302, -0.008333646, 0.0061175604, 0.015162686, 0.012596693, -0.01080633, -0.025776565, -0.070681445, 0.030465335, 0.016527327, 0.009295893, 0.020877851, 0.033964418, 0.009214248, -0.0051174066, 0.016853908, 0.009768269, -0.02161266, -0.01617742, 0.005067836, 0.002211711, -0.008625235, -0.023502164, -0.019758146, -0.038256623, -0.01550093, -0.0033212113, 0.007342239, -0.021449368, 0.013144882, -0.0010300421, -0.0100773545, 5.485539e-05, 0.03995951, 0.021402715, -0.03219155, -3.1978095e-06, 0.045814637, -0.046491127, 0.019291602, -0.029695537, 0.018405167, 0.039679583, -0.00643831, 0.0057268296, -0.020702899, 0.0070623127, 0.010363112, -0.0060825697, 0.008304486, -0.022020886, -0.016853908, -0.02080787, -0.026966253, 0.013984662, 0.025286695, 0.04497486, -0.017612042, 0.014019652, -0.0017859894, 0.014346234, 0.004924957, -0.015407622, 0.024866804, 0.00015308481, -0.024563551, -0.003481586, -0.036810335, -0.01025814, -0.009109275, -0.019104984, 0.010852984, -0.022370793, 0.012083494, -0.011867718, 0.012818301, 0.02656969, -0.009855745, 0.019174965, 0.030675279, -0.0066774134, -0.013098228, -0.019408237, -0.0026636757, 0.030278718, 0.035457358, -0.004283459, -0.019069994, -0.028272577, -0.0011889586, -0.039143056, -0.03426767, 0.05869126, -0.03492083, -0.017472079, 0.0060709063, -0.010234813, -0.013051573, -0.015116031, 0.025589949, 0.037486825, 0.015862502, -0.0044321697, 0.041825686, -0.0010533693, -0.024027025, 0.027899342, -0.023513827, -0.013809708, 0.010403935, -0.017623706, -0.04135914, 0.020901179, 0.0066890772, 0.015325977, -0.016480673, -0.014544515, -0.016667292, -0.032821383, 0.0068523674, 0.0014856516, 0.008147027, -0.004423422, -0.015862502, -0.028762449, -0.034594253, -0.0018078587, -0.0053885854, -0.017145498, 0.0066774134, 0.005989261, 0.023350537, 0.017413761, -0.032471474, 0.039306346, -0.0059601017, -0.016748937, 0.042525504, -0.01653899, -0.01718049, -0.045254786, -0.015524258, 0.053605925, -0.039329674, -0.032564785, -0.034897506, 0.010217317, 0.006671582, -0.0023473003, -0.0011649025, 0.023420518, -0.011721922, 0.03594723, -0.020621253, -0.0033707817, 0.0068581994, -0.014486196, -0.068068795, 0.022615729, 0.0023385526, 0.0009381912, -0.006094233, 0.04504484, -0.0041988976, 0.009500006, -0.06102398, 0.028225923, 0.02339719, -0.015477603, -0.046094567, -0.05313938, 0.01608411, 0.009628305, -0.0067590587, -0.020213027, -0.053465962, 0.025519967, -0.00048440407, 0.021717632, -0.007132294, -0.01809025, 0.028132614, 0.021589331, -0.010456421, 0.023478836, 0.042828757, -0.013343164, -0.022475766, -0.034151033, -0.02740947, 0.017996943, 0.007458875, 0.0067940494, 0.04607124, 0.01809025, 0.023887062, 0.034617577, 0.008654394, 0.013774717, 0.0300921, -0.020947834, 0.0077271378, -0.022335803, 0.026453055, 0.0041697384, 0.05715166, 0.0078029516, -0.01880173, 0.030162081, -0.004400095, 0.024190316, 0.016993871, 0.031561714, -0.009109275, -0.013436472, 0.023607135, 0.010223149, 0.018451823, -0.029415611, -0.009074285, 0.007406389, -0.037510153, 0.027456125, -0.006572441, 0.021169443, 0.03359118, -0.007050649, 0.03384778, -0.021659313, 0.0030646122, -0.023467172, 0.029298974, -0.0046741897, -0.0298355, -0.012048503, 0.0044059264, 0.03051199, -0.022300811, 0.013751389, -0.0056481003, 0.019454893, -0.013004919, -0.03795337, -0.007633829, -0.006840704, -0.0084852725, -0.016224073, -0.03508412, -0.026149802, 0.018836722, 0.009698288, -0.0022962722, -0.009284229, -0.0069223493, -0.019163303, 0.023432182, -0.018556794, -0.006607432, -0.0017058022, 0.011150406, -0.013086564, 0.018918367, 0.019361584, -0.008228673, -0.015874166, 0.030675279, 0.021146115, -0.018720085, -0.0069981627, 0.016818918, -0.022125857, -0.02181094, -0.034827523, -0.0061817104, -0.047097635, 0.0044992357, -0.002533918, -0.014077971, -0.011716091, -0.026872944, 0.034990814, 0.022837337, 0.026779637, 0.013541445, -0.009120938, -0.012048503, -0.023467172, 0.0013034078, -0.0064441413, -0.012153476, 0.021729296, 0.007073976, -0.0133781545, 0.027176198, -0.012048503, 0.04681771, 0.023373863, 0.0011627156, 0.017110508, 0.009272565, 0.0076163337, -0.010223149, 0.012526711, -0.0601842, -0.032051586, -0.020527944, 0.0007581343, 0.021659313, -0.05584534, -0.019466557, 0.023513827, -0.012596693, 0.01550093, -0.022242494, 0.002685545, 0.0037906715, -0.0200614, 0.02203255, -0.00039145973, 0.0058230544, 0.06144387, -0.0011029396, -0.03779008, -0.0031812482, -0.0012545665, -0.0060184198, 0.02135606, 0.018883375, -0.03401107, -0.030045446, -0.015944147, 0.0026986664, -0.0138680255, -0.016818918, 0.020539608, -0.00066883484, -0.010345617, 0.015640894, 0.016877236, 0.024073679, -0.011581959, -0.009109275, -0.0006484235, 0.009587483, -0.022639057, -0.032541458, 0.02203255, 0.051086586, 0.031118497, 0.032028258, 0.010339785, -0.0034057726, -0.057898134, 0.006753227, 0.04614122, -0.02060959, 0.047750797, 0.025123404, -0.014556179, 0.0005095537, -0.006076738, -0.0018136905, 0.031748332, 0.03737019, -0.0022671132, -0.00490163, -0.008426954, -0.03177166, -0.007295585, 0.012794974, 0.012631684, -0.025449986, 0.009050957, 0.008082878, 0.054445706, -0.03235484, 0.005161145, -0.0142295975, -0.023572145, -0.0010198364, 0.019699829, -0.033311255, 0.049173757, -0.035713956, -0.0041143363, 0.006426646, -0.019081658, -0.05076001, 0.0077154743, 0.037510153, 0.028552504, -0.008158691, -0.024703514, -0.00359239, 0.014952741, 0.016480673, -0.0077796243, -0.013086564, -0.015011059, 0.048660558, -0.008228673, -0.026546365, 0.015302649, 0.060277507, 0.013588099, -0.013051573, -0.007295585, 0.01074218, -0.023152255, -0.028972393, 0.007009826, 0.010013204, 0.015955811, -0.03503747, 0.019676501, -0.023712108, -0.024423588, 0.03524741, -0.0083686365, -0.014859432, 0.047517523, 0.0050532566, -0.049360376, -0.0009658922, -0.029602228, 0.002541208, 0.03977289, 0.012515048, -0.005455651, 0.021904249, 0.00017577417, -0.016970545, -0.022452438, -0.0007982279, 0.018825058, -0.006659918, -0.005181556, 0.004064766, -0.015290986, 0.01718049, -0.0039947843, 0.020656243, -0.026989581, -0.012153476, -0.00896348, -0.013681408, 0.020912843, -0.0062050377, -0.013553108, 0.017996943, -0.036040537, -0.003921887, -0.0046100398, 0.051179897, 0.007464707, 0.02277902, 0.008561086, -0.014066307, -0.01821855, 0.014357897, -0.012363421, -0.043808497, -0.02475017, 0.0045254785, 0.020796208, 0.042198922, 0.0045313104, -0.0029581818, 0.030418681, 0.0020819535, 0.007546352, 0.0016401943, -0.0008529011, -0.009424193, 0.031538386, -0.007872933, 0.0060009244, -0.0361805, -0.013319836, 0.049593646, 0.002570367, -0.027339488, -0.033801127, 0.012060167, 0.01789197, -0.0028211344, 0.01362309, -0.0030733598, 0.02556662, -0.015162686, -0.022744028, 0.004108505, 0.00048476856, -0.003423268, 0.062376957, -0.004569217, -0.022417448, 0.020784544, -0.00880019, -0.014346234, -0.022825673, -0.020166373, 0.018813394, -0.0008529011, 0.014159616, -0.031141823, -0.007849606, -0.0065899366, -0.0065316185, -0.015605903, 0.005487726, 0.047750797, -0.024703514, -0.018031932, -0.026336418, 0.03193495, 0.013926344, 0.015734203, 0.02591653, 0.05850464, 0.021927577, 0.016900564, 0.025963183, 0.009185089, -0.009424193, -0.0033824453, 0.03650708, -0.04170905, -0.0073014162, -0.0152093405, -0.027526107, -0.03160837, 0.012130149, -0.015407622, 0.0021358975, 0.005254454, 0.009698288, 0.020446299, -0.011640278, -0.0008798732, -0.028622486, -0.007814615, 0.014871095, 0.031211806, -0.0041843182, -0.023338873, 0.012946601, 0.06900188, 0.029485593, -0.045278113, 0.020901179, -0.00020538879, -0.00069434894, 0.0055518756, -0.006671582, -0.014404551, 0.02899572, 0.038979765, -0.011476987, -0.0015046049, 0.0048870505, 0.02319891, 0.010024868, 0.008992639, -0.04397179, 0.030721935, 0.013436472, 0.018591786, -0.0022015052, 0.019139975, -0.018066924, 0.0084969355, 0.014276252, 0.0023400106, 0.007406389, -0.025729911, 0.04362188, 0.0036011378, 0.031981602, -0.0005117406, 0.0025528714, -0.020551272, -0.008928489, -0.008007064, -0.041755702, 0.009890737, -0.01792696, 0.029159011, 0.0038898122, 0.018101914, 0.008520263, 0.048940483, -0.015652558, 0.0007435548, 0.0022481598, 0.008310318, -0.012806638, -0.011966858, 0.0030208735, -0.034547597, 0.0042309724, 0.014007989, 0.0051523973, -0.00909178, 0.02139105, -0.017530398, 0.036880318, 0.001211557, 0.021915913, -0.01750707, -0.0027555265, 0.012724993, 0.033054654, 0.04322532, -0.012690002, 0.00047966573, -0.008403627, 0.0061817104, -0.008928489, 0.021006152, 0.014427879, 0.006345001, -0.0013923427, 0.010532235, 0.0016737273, 0.000604685, 0.025449986, -0.032448146, -0.017845314, 0.03503747, -0.013938007, -0.047237597, 0.039819546, -0.003534072, 0.0012319682, 0.022988964, 0.014089635, -0.00880019, -0.0060300836, -0.008870171, -0.0072022756, -0.0050853314, -0.019536538, 0.05089997, -0.012293439, -0.0141129615, 0.025333349, -0.038583204, 0.021950904, -0.043855153, -0.021904249, 0.034990814, -0.03520076, 0.0061992058, 0.03776675, -0.027292835, -0.006426646, 0.03704361, -0.009400865, 0.04336528, 0.022405785, 0.0060592424, 0.003391193, -0.0016678955, -0.012165139, -0.028529176, -0.02042297, -0.024446916, -0.019279938, -0.010112345, -0.031141823, -0.00021395425, -0.0017203817, -0.021915913, 0.011412837, -0.0364371, -0.013949671, 0.01067803, -0.0089809755, -0.0008587329, -0.0036098857, 0.021204432, -0.012561702, -0.010724684, -0.047610834, 0.0036798671, 0.008765199, -0.018685095, -0.01517435, 0.016270729, -0.045674674, 0.03685699, 0.01725047, 0.028365886, 0.007231435, -0.029205665, -0.02385207, 0.029042374, 0.0024887216, 0.0065374505, -0.015547585, -0.030162081, 0.0034670064, -0.009010134, 0.021192769, 0.033964418, -0.017705351, 0.04187234, 0.017110508, 0.026779637, 0.0049686953, 0.059531037, -0.0035807267, 0.0004271795, -0.0011335566, 0.014824442, 0.023583809, -0.00666575, 0.0046362826, 0.023980372, -0.032891363, -0.015325977, 0.010928798, -0.0010212944, -0.0051494814, 0.028109286, -0.014894423, 0.0029377704, 0.035690628, 0.006391655, 0.0059601017, 0.03501414, -0.0058492976, 0.010100681, 0.0153376395, 0.03650708, 0.03508412, -0.007575511, -0.023245564, 0.004948284, -0.028692467, -0.0028240501, -0.0014280626, -0.0027015824, -0.0029858828, 0.005750157, -0.025170058, -0.029508919, 0.016818918, 0.005073668, -0.031235132, 0.008514431, -0.005184472, -0.00844445, -0.036320463, 0.013051573, 0.010269804, -0.013144882, -0.010135672, 0.057944786, 0.0002420198, -0.013821371, -0.02624311, 0.028855758, 0.02368878, 0.024703514, -0.014637823, 0.027736051, -0.020819534, 0.0019361584, -0.0047616665, 0.0163757, 0.020947834, 0.023758762, -0.014089635, -0.024470242, -0.028132614, -0.010164832, -0.009284229, 0.03468756, 0.02193924, 0.011891045, 0.00016766432, -0.0065374505, 0.035294067, 0.0026316007, 0.013611427, -0.046537783, -0.008520263, 0.027899342, 0.014637823, 0.040332746, -0.0020688318, -0.00637416, 0.0043738517, -0.0066540865, -0.02268571, -0.023933716, 0.025683258, 0.012491721, 0.0049307887, -0.01792696, 0.00017932792, 0.026942926, 0.023957044, 0.0052661174, 0.016667292, 0.015839174, -0.0063566645, 0.03520076, 0.026593018, -0.024843477, 0.024027025, 0.027689397, -0.013984662, 0.001797653, 0.008654394, -0.031328443, -0.026663, 0.018393504, -0.0004683666, -0.0050795, -0.011372014, -0.009365874, -0.015640894, 0.03116515, -0.0023983286, 0.009021798, -0.019816464, -0.01737877, -0.00072205, -0.019979754, -0.019664837, -0.024796823, -0.0023152255, -0.020026408, -0.0041843182, -0.01679559, -0.0023662539, 0.051693097, -0.022837337, -0.030208735, -0.015419285, 0.009109275, -0.0077329697, 0.038886458, 0.026686328, 0.030768588, -0.019361584, 0.04481157, 0.00073954544, -0.020819534, 0.014731132, 0.02967221, -0.00844445, -0.012841629, -0.030815244, -0.029298974, 0.0008827891, 0.013833035, 0.033054654, 0.016690617, -0.019431565, 0.003569063, 0.0073772296, -0.017215481, -0.0010489954, -0.015477603, 0.00253246, 0.028809102, 0.025426658, 0.0011634446, 0.040216107, -0.020469626, 0.0048783026, 0.014567842, -0.0040618503, -0.00012857301, 0.013074901, 0.018323522, 0.024213644, 0.021600995, -0.026616346, 0.023082273, -0.009692456, -0.013891353, -0.0035748947, 0.030045446, -0.011704427, -0.010882143, 0.028295904, -0.06615596, 0.008059551, -0.00506492, 0.017133836, 0.03862986, -0.016982209, -0.007925419, -5.4126416e-05, 0.016095774, 0.0043563563, -0.024330279, 0.009943223, 0.031375095]"
../../../gradio,../../../gradio/gradio/components,gallery.pyi,"""""""gr.Gallery() component.""""""

from __future__ import annotations

from pathlib import Path
from typing import Any, Callable, List, Literal, Optional

import numpy as np
from gradio_client.documentation import document, set_documentation_group
from gradio_client.utils import is_http_url_like
from PIL import Image as _Image  # using _ to minimize namespace pollution

from gradio import processing_utils, utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel, GradioRootModel
from gradio.events import Events

set_documentation_group(""component"")


class GalleryImage(GradioModel):
    image: FileData
    caption: Optional[str] = None


class GalleryData(GradioRootModel):
    root: List[GalleryImage]

from gradio.events import Dependency

@document()
class Gallery(Component):
    """"""
    Creates a gallery component that allows displaying a grid of images, and optionally captions. If used as an input, the user can upload images to the gallery.
    If used as an output, the user can click on individual images to view them at a higher resolution.

    Demos: fake_gan
    """"""

    EVENTS = [Events.select, Events.upload, Events.change]

    data_model = GalleryData

    def __init__(
        self,
        value: list[np.ndarray | PIL.Image.Image | str | Path | tuple]
        | Callable
        | None = None,
        *,
        format: str = ""png"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        columns: int | tuple | None = 2,
        rows: int | tuple | None = None,
        height: int | float | None = None,
        allow_preview: bool = True,
        preview: bool | None = None,
        selected_index: int | None = None,
        object_fit: Literal[""contain"", ""cover"", ""fill"", ""none"", ""scale-down""]
        | None = None,
        show_share_button: bool | None = None,
        show_download_button: bool | None = True,
        interactive: bool | None = None,
        type: Literal[""numpy"", ""pil"", ""filepath""] = ""filepath"",
    ):
        """"""
        Parameters:
            value: List of images to display in the gallery by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            format: Format to save images before they are returned to the frontend, such as 'jpeg' or 'png'. This parameter only applies to images that are returned from the prediction function as numpy arrays or PIL Images. The format should be supported by the PIL library.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            columns: Represents the number of images that should be shown in one row, for each of the six standard screen sizes (<576px, <768px, <992px, <1200px, <1400px, >1400px). If fewer than 6 are given then the last will be used for all subsequent breakpoints
            rows: Represents the number of rows in the image grid, for each of the six standard screen sizes (<576px, <768px, <992px, <1200px, <1400px, >1400px). If fewer than 6 are given then the last will be used for all subsequent breakpoints
            height: The height of the gallery component, specified in pixels if a number is passed, or in CSS units if a string is passed. If more images are displayed than can fit in the height, a scrollbar will appear.
            allow_preview: If True, images in the gallery will be enlarged when they are clicked. Default is True.
            preview: If True, Gallery will start in preview mode, which shows all of the images as thumbnails and allows the user to click on them to view them in full size. Only works if allow_preview is True.
            selected_index: The index of the image that should be initially selected. If None, no image will be selected at start. If provided, will set Gallery to preview mode unless allow_preview is set to False.
            object_fit: CSS object-fit property for the thumbnail images in the gallery. Can be ""contain"", ""cover"", ""fill"", ""none"", or ""scale-down"".
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            show_download_button: If True, will show a download button in the corner of the selected image. If False, the icon does not appear. Default is True.
            interactive: If True, the gallery will be interactive, allowing the user to upload images. If False, the gallery will be static. Default is True.
            type: The format the image is converted to before being passed into the prediction function. ""numpy"" converts the image to a numpy array with shape (height, width, 3) and values from 0 to 255, ""pil"" converts the image to a PIL image object, ""filepath"" passes a str path to a temporary file containing the image. If the image is SVG, the `type` is ignored and the filepath of the SVG is returned.
        """"""
        self.format = format
        self.columns = columns
        self.rows = rows
        self.height = height
        self.preview = preview
        self.object_fit = object_fit
        self.allow_preview = allow_preview
        self.show_download_button = (
            (utils.get_space() is not None)
            if show_download_button is None
            else show_download_button
        )
        self.selected_index = selected_index
        self.type = type

        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            interactive=interactive,
        )

    def preprocess(
        self, payload: GalleryData | None
    ) -> (
        List[tuple[str, str | None]]
        | List[tuple[PIL.Image.Image, str | None]]
        | List[tuple[np.ndarray, str | None]]
        | None
    ):
        """"""
        Parameters:
            payload: a list of images, or list of (image, caption) tuples
        Returns:
            Passes the list of images as a list of (image, caption) tuples, or a list of (image, None) tuples if no captions are provided (which is usually the case). The image can be a `str` file path, a `numpy` array, or a `PIL.Image` object depending on `type`.
        """"""
        if payload is None or not payload.root:
            return None
        data = []
        for gallery_element in payload.root:
            image = self.convert_to_type(gallery_element.image.path, self.type)  # type: ignore
            data.append((image, gallery_element.caption))
        return data

    def postprocess(
        self,
        value: list[GalleryImageType | CaptionedGalleryImageType] | None,
    ) -> GalleryData:
        """"""
        Parameters:
            value: Expects the function to return a `list` of images, or `list` of (image, `str` caption) tuples. Each image can be a `str` file path, a `numpy` array, or a `PIL.Image` object.
        Returns:
            a list of images, or list of (image, caption) tuples
        """"""
        if value is None:
            return GalleryData(root=[])
        output = []

        def _save(img):
            url = None
            caption = None
            orig_name = None
            if isinstance(img, (tuple, list)):
                img, caption = img
            if isinstance(img, np.ndarray):
                file = processing_utils.save_img_array_to_cache(
                    img, cache_dir=self.GRADIO_CACHE, format=self.format
                )
                file_path = str(utils.abspath(file))
            elif isinstance(img, PIL.Image.Image):
                file = processing_utils.save_pil_to_cache(
                    img, cache_dir=self.GRADIO_CACHE, format=self.format
                )
                file_path = str(utils.abspath(file))
            elif isinstance(img, str):
                file_path = img
                if is_http_url_like(img):
                    url = img
                    orig_name = Path(urlparse(img).path).name
                else:
                    url = None
                    orig_name = Path(img).name
            elif isinstance(img, Path):
                file_path = str(img)
                orig_name = img.name
            else:
                raise ValueError(f""Cannot process type as image: {type(img)}"")
            return GalleryImage(
                image=FileData(path=file_path, url=url, orig_name=orig_name),
                caption=caption,
            )

        if wasm_utils.IS_WASM:
            for img in value:
                output.append(_save(img))
        else:
            with ThreadPoolExecutor() as executor:
                for o in executor.map(_save, value):
                    output.append(o)
        return GalleryData(root=output)

    @staticmethod
    def convert_to_type(img: str, type: Literal[""filepath"", ""numpy"", ""pil""]):
        if type == ""filepath"":
            return img
        else:
            converted_image = PIL.Image.open(img)
            if type == ""numpy"":
                converted_image = np.array(converted_image)
            return converted_image

    def example_payload(self) -> Any:
        return [
            {
                ""image"": file(
                    ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
                )
            },
        ]

    def example_value(self) -> Any:
        return [
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
        ]

    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Gallery` component that allows displaying a grid of images with optional captions. It can be used as an input where users can upload images or as an output where users can click on individual images to view them at a higher resolution. The component provides various customization options such as setting the format of images, defining the number of columns and rows in the grid, specifying the height of the gallery, enabling image preview, setting object fit for thumbnail images, and more.

The component includes methods for preprocessing and postprocessing the data, converting images to different types, providing example payloads and values, and defining event handlers for selecting, uploading, and changing images. The `Gallery` component is part of the Gradio library for building interactive web interfaces for machine learning models.","[-0.054230936, -0.0016600692, 0.0058689923, -0.0053779013, -0.013569785, -0.055146836, -0.024705203, -0.01882416, -0.015100303, -0.02275289, 0.0059352745, -0.032538563, -0.028923165, -0.019631598, 0.0035943058, -0.027115468, 0.001547088, -0.0087010525, 0.021752631, 0.064161226, 0.015883638, -0.060304802, 0.0037991784, 0.016413897, -0.01708877, -0.024415972, -0.04577091, 0.06353455, 0.0012209492, -0.011762087, -0.05278478, -0.027814444, -0.011261958, 4.716373e-06, -0.03902217, -0.02942932, 0.029622141, 0.025886234, -0.016679026, -0.000709898, -0.023319302, -0.035961136, 0.009472337, 0.04714476, -0.018137235, 0.025018537, -0.021583913, -0.010279776, 0.010502725, 0.026344184, -0.042637568, -0.010364135, -0.01370235, -0.023680842, -0.03032112, 0.0109486235, -0.06401661, 0.0080683585, 0.0019432752, -0.00991221, 0.019800317, -0.009038489, 0.026006747, 0.0037479603, -0.04174577, 0.010894393, -0.01890852, 0.029405218, 0.009803748, -0.0026738865, 0.049145278, -0.037021652, 0.019667752, -0.027428802, -0.010918495, -0.01543774, -0.021788785, 0.0017911273, 0.04890425, -0.038781144, 0.0049982844, 0.012473115, -0.039817557, -0.009014387, -0.03077907, 0.011237855, -0.016498256, 0.002850137, -0.037166268, -0.0048235403, -0.074428946, 0.023729047, -0.019390572, 0.07086176, -0.025886234, 0.011129393, 0.007592331, -0.030899582, 0.02403033, 0.07650177, 0.032634974, 0.00010808527, -0.03572011, -0.06204019, 0.06970483, -0.049603228, -0.022957763, 0.025862131, -0.010816059, 0.0017052616, -0.024994435, -0.025331873, -0.030080093, 0.04796425, -0.0018980828, -0.054664783, 0.03405703, 0.0044830907, -0.021764683, -0.022078017, -0.031502146, -0.002404238, -0.008803489, -0.06811406, 0.0475304, -0.035768315, -0.0045764884, -0.03719037, -0.03444267, -0.011394522, 0.0074838693, -0.013581837, 0.03591293, -0.06700534, -0.03087548, 0.0057394407, -0.019511085, -0.022789044, -0.060160186, 0.026416492, 0.04531296, -0.039456017, 0.032393947, 0.015823381, -0.01397953, -0.03323754, -0.017209284, 0.036611907, -0.05244734, -0.033960618, -0.013075681, 0.019161597, -0.018040825, -0.010960675, -0.021415194, 0.02448828, 0.017679285, -0.000586372, -0.011960934, -0.026464697, 0.0049621304, 0.0027461944, 0.026705723, 0.000321243, -0.027983163, 0.03673242, -0.02887496, 0.028995473, -0.019318264, 0.003431613, 0.0007483116, -0.013617991, -0.023777252, -0.0053537986, 0.030538043, 0.010068877, -0.026826236, -0.017510567, 0.008044256, -0.01900493, -0.022343146, 0.008351564, -0.057990946, -0.011261958, -0.030080093, -0.017944414, -0.0067547644, -0.016823642, -0.052736573, -0.018318005, 0.0039829607, -0.019016981, -0.0132323485, 0.03224933, -0.00031841843, -0.035189852, 0.0015847485, 0.037696525, -0.0027989189, 0.03911858, 0.013955427, 0.027838547, -0.0026919635, 0.019956984, 0.0027175725, 0.005630979, -0.004302321, 0.0045704627, -0.019776214, -0.022825198, 0.0016706141, 0.00032519732, 0.0402032, -0.041239616, -0.038419604, -0.033840105, -0.02430751, 0.043240134, -0.011213752, 0.006815021, -0.07105458, 0.021728529, 0.031694967, -0.051483236, 0.03215292, -0.027525213, 0.0029962591, -0.027838547, 0.019125443, -0.028850857, 0.043336544, -0.015763124, -0.018775955, -0.003076099, 0.014967739, -0.045385268, 0.029405218, -0.03306882, 0.050470926, 0.049699638, 0.015835432, -0.011490933, 0.025645208, 0.0037389218, 0.008568488, 0.04798835, -0.03646729, -0.05278478, 0.045843218, 0.09631414, -0.0056550815, 0.0069957906, 0.008460026, -0.013220297, 0.02028237, 0.011310163, -0.04560219, 0.022945711, -0.015329278, -0.042950902, -0.0066222, -0.02952573, -0.026464697, -0.011918754, -0.0057454663, 0.052688368, 0.00087447383, 0.015702868, 0.0050826436, 0.017763644, 0.004916938, -0.019703906, 4.8817255e-05, -0.0006195131, 0.0014167832, 0.014027735, 0.009924261, 0.06102788, 0.010719649, -0.021041604, 0.0062546344, 0.007303099, -0.0034707799, 0.064884305, -0.004371616, 0.024319561, 0.010822085, -0.020053394, -0.009345798, -0.011918754, 0.018125184, -0.02759752, 0.030369325, -6.369311e-05, -0.026561107, 0.0475304, 0.04615655, 0.021162117, 0.03608165, 0.0049440535, -0.014859277, 0.0012804526, -0.04880784, -0.042059105, -0.020571603, 0.014244659, -0.019788265, 0.011671702, -0.013111835, -0.0154618425, -0.0036485367, 0.008689001, -0.02795906, -0.0077791265, -0.074236125, 0.018016722, 0.009213233, -0.019113392, 0.0062184804, 0.008375667, -0.006375148, 0.027091365, 0.003979948, -0.028151881, -0.057316072, -0.057990946, -0.0383955, -0.025910337, -0.013208246, -0.039263196, 0.028754447, -0.0021722503, -0.00808041, 0.03205651, 0.029308807, 0.0099664405, -0.06343814, 0.019848522, -0.050470926, 0.025259566, -0.021222373, -0.047819633, 0.031791378, 0.024729306, 0.043866802, 0.0456745, -0.03543088, 0.05693043, -0.021716477, -0.07346484, 0.009900158, -0.008146692, 0.010285801, 0.017305695, 0.052495547, -0.019583393, -0.03875704, -0.03892576, -0.07630895, -0.031140609, -0.06430584, 0.018534929, 0.017004412, 0.019294161, -0.030272914, 0.009876056, -0.0040853973, -0.02155981, 0.032876, -0.0017067681, 0.012364653, 0.026464697, -0.0223793, -0.018161338, -0.053700678, -0.009484388, 0.03097189, -0.02393392, -0.053845294, -0.034032926, -0.015847484, -0.0041667437, 0.040902175, -0.0264888, 0.01661877, -0.0013301644, 0.023909817, 0.036611907, 0.0033532795, 0.015293124, -0.004389693, -0.018896468, -0.049193483, -0.042902697, 0.028175984, 0.017209284, 0.056303762, 0.007074124, 0.02347597, 0.031333428, -0.020414934, -0.021909298, -0.008881822, 0.012714142, -0.0079116905, -0.04707245, 0.05784633, 0.030706761, 0.030176504, -0.0010785931, -0.013617991, 0.02466905, 0.022138273, -0.03543088, 0.017462362, 0.0045734756, -0.022596223, -0.017305695, -0.01252132, 0.06825867, 0.005908159, 0.0004910912, -0.0073513044, -0.013919273, -0.015992101, 0.022234684, 0.04321603, -0.0067306617, -0.03526216, -0.055387862, -0.014521839, 0.01553415, 0.00026851846, 0.022873404, 0.0015847485, -0.044180136, 0.074332535, 0.015100303, 0.0063691223, 0.024849819, -0.008484129, 0.011659651, 0.02311443, 0.007291048, -0.017197233, 0.008212974, 0.0077128443, 0.0066463025, -0.05620735, -0.029140089, -0.023680842, 0.023427764, -0.0140397865, -0.009876056, 0.03316523, -0.018209543, 0.016775437, -0.0033954591, 0.029887272, -0.025259566, -0.0060437364, 0.031333428, -0.008568488, 0.07269356, 0.03277959, 0.027814444, -0.039697044, 0.0044378983, -0.012436961, -0.01142465, 0.010785931, 0.0069777137, 0.045071933, 0.02694675, -0.04678322, 0.0032448177, -0.021535708, -0.019884676, -0.029284704, -0.009701312, -0.019499034, 0.0058689923, -0.019619547, -0.05008528, -0.009225285, 0.08219, 0.0049741818, -0.06531815, 0.044975523, -0.02704316, -0.018884417, -0.0029405218, -0.01699236, -0.010924521, 0.006742713, 0.03041753, -0.06184737, -0.024199048, -0.01892057, -0.017498516, 0.02118622, -0.023500072, 0.0035641775, 0.047626812, -0.02082468, -0.020752372, 0.010942598, 0.0024991422, 0.0237652, 0.0013203727, -0.009839902, 0.0043957187, 0.00927349, 0.011629523, -0.007435664, -0.014015684, -0.023066225, 0.014774917, -0.0009927273, 0.009357849, -0.020246215, 0.028224189, -0.038998067, -0.03451498, 0.021583913, 0.024560587, -0.022740839, -0.09568747, 0.0033352026, 0.010641315, -0.032562666, -0.013485426, 0.006052775, 0.018305954, -0.035937034, -0.024705203, 0.0017549733, 0.014557993, -0.004007064, -0.048831943, 0.01974006, -0.0054743118, 0.0058840564, 0.0021285643, -0.0059744413, 0.036756523, -0.007947844, -0.09539824, -0.008791437, 0.040781662, 0.045626294, -0.038708836, 0.045553986, -0.023355456, 0.0015116873, 0.036394984, 0.027573418, 0.02110186, -0.011304137, 0.0051037334, 0.0026512903, 0.03123702, 0.037865244, 0.037334986, -0.02321084, 0.015510048, -0.013895171, -0.020559551, -0.021692375, 0.01919775, -0.033647284, 0.013256451, -0.0034436644, 0.036298573, 0.015196714, 0.0004025894, 5.5454897e-05, -0.020426985, -0.009574773, 0.0003641758, -0.006242583, -0.023801355, -0.028007265, -0.014136197, -0.030851377, 0.011515035, -0.00059352745, 0.021595964, 0.056448378, 0.008942079, -0.019089289, -0.0136541445, -0.00035720863, 0.0027296238, 0.007917716, 0.03314113, 0.003521998, 0.03268318, -0.02072827, 0.02074032, 0.016703129, -0.017655183, -0.024066484, 0.023548277, 0.023921868, -0.008737206, 0.017920312, 0.0045885397, -0.028802652, -0.019173648, -0.024898024, 0.025139052, -0.044156034, -0.049603228, -0.038636528, -0.0064534815, -0.0072789965, 0.04104679, 0.029573936, -0.014871328, -0.011105291, -0.022981865, 0.00016947168, -0.011985037, 0.011828369, 0.030248811, -0.004739181, -0.010394263, -0.008429898, 0.034828313, 0.00644143, 0.005001297, 0.046180654, -0.015570304, 0.008128615, 0.0065077124, -0.015015944, -0.028947268, 0.0136541445, -0.028031368, 0.023066225, 0.06464328, 0.005106746, -0.008044256, 0.03277959, 0.0111595215, -0.015184662, -0.0024916101, 0.016546462, 0.0059051462, -0.03155035, 0.00063721347, 0.008731181, -0.011617471, -0.0025036614, 0.0067005334, -0.020149805, 0.014413377, -0.019137494, 0.04210731, -0.037334986, -0.0012955168, -0.01516056, -0.018896468, -0.00045041804, 0.017896209, -0.0034707799, 0.0049440535, -0.009339772, 0.063679166, -0.019089289, 0.016474154, 0.023078276, 0.022367248, -0.0038835376, -0.061606344, -0.006034698, -0.03162266, -0.0066643795, 0.017233387, -0.04266167, 0.01572697, -0.032876, 0.018992878, -0.0021466413, -0.054568373, -0.0075682285, 0.04220372, 0.022704685, -0.029911375, 0.007869511, -0.005965403, 0.0048928354, 0.00024159129, -0.030586248, 0.04524065, -0.008454001, -0.011569266, 0.03323754, -0.016666975, 0.01661877, 0.02576572, 0.030803172, -0.004516232, 0.014063889, 0.020716218, -0.009490414, -0.0076525877, 0.018354159, -0.023704944, 0.004778348, 0.008447975, -0.020836731, -0.006531815, 0.008152718, 0.0075200233, 0.022511864, 0.008562462, 0.02229494, -0.019728009, -0.02933291, 0.008514257, -0.0840218, -0.02037878, -0.010659392, -0.04557809, -0.022331094, -0.005245337, -0.037021652, -0.0034466772, 0.009815799, -0.0076947673, 0.041577052, 0.003558152, -0.0058840564, 0.032634974, 0.009104772, -0.01563056, 0.011135419, 0.006046749, -0.011141445, 0.031767275, 0.013220297, 0.01634159, 0.0074838693, -0.018233646, 0.020836731, -0.004956105, 0.004564437, 0.0144977365, -0.0077489982, 0.0081045125, 0.010671443, -0.0023560328, -0.028947268, -0.025283668, -0.0038503965, -0.024644947, -0.023198789, 0.011093239, 0.0077972035, 0.037720628, -0.008231051, -0.024644947, 0.016329538, -0.05905146, 0.028175984, -0.0040823845, 0.0058509153, 0.017594926, -0.009116823, 0.007598357, 0.017112873, -0.013389016, 0.030538043, -0.02247571, 0.0030233746, -0.022825198, -0.005817774, 0.014063889, -0.0065197637, 0.007821306, 0.035334468, -0.0039558453, 0.053122215, -0.008520283, -0.008749258, -0.0065800203, -0.00259254, -0.04331244, -0.0132444, -0.02082468, 0.04714476, -0.029549833, -0.0023409687, 0.031333428, 0.009616952, -0.060594033, -0.022403402, 0.042324234, -0.026729826, -0.027886752, -0.047578607, 0.026657518, 0.022041863, 0.04430065, -0.041504744, -0.06247404, -0.015594407, 0.0037600116, -0.0038383452, -0.0046759117, -0.018619288, 0.014389275, -0.010105031, 0.0028486305, 0.050808363, -0.018125184, -0.0016088511, -0.0105449045, -0.026006747, -0.021981606, -0.051579647, 0.0063992506, -0.014991841, 0.047385786, 0.025139052, -0.00023707205, 0.024379818, 0.016980309, 0.04302321, 0.0057243765, 0.011310163, 0.022355197, 0.015775176, 0.033671387, -0.0038021912, -0.003772063, -0.004124564, -0.023162635, 0.012177858, 0.037696525, -0.01146683, 0.01708877, 0.06748739, -0.027091365, 0.017643131, 0.0003344241, -0.00931567, -0.009026438, -0.017004412, -0.0124249095, -0.018040825, -0.025862131, 0.021668272, -0.018667493, 0.022078017, 0.013437221, -0.018751852, 0.0402032, -0.008062333, 0.0015229854, -0.024367766, 0.017956465, 0.005820787, -0.0484222, -0.01150901, -0.018426467, 0.06705354, -0.0033412282, -0.014991841, -0.011153496, -0.0120211905, 0.015570304, -0.006465533, 0.0014838186, 0.010707597, -0.02494623, -0.02384956, -0.006778867, 0.009249387, 0.0026527967, 0.033574976, 0.0028169958, -0.02265648, -0.017510567, 0.010629264, -0.01370235, 0.010683495, 0.015751073, -0.0074416897, -0.00060181273, -0.022981865, -0.008339513, 0.009683235, 0.056592993, -0.023186738, 0.012762347, 0.009616952, -0.001481559, -0.0429268, -0.008267205, -0.02622367, 0.011400548, -0.027766239, -0.0046457835, -0.03892576, -0.0054622605, -0.02694675, -0.05611094, -0.040420122, -0.017703388, 0.007990025, 0.009761568, 0.020860834, 0.021535708, -0.0014077447, 0.007507972, 0.011677728, -0.011756062, 0.010388237, -0.01334081, 0.0128105525, 0.010141185, -0.026778031, 0.0124249095, 0.030562146, 0.018800057, -0.007056047, 0.01635364, 0.006694508, 0.004862707, 0.021632118, 0.017703388, 0.021439297, -0.011045034, -0.011496958, -0.0029962591, -0.01178619, 0.0024012253, -0.011623497, -0.028007265, -0.0056731584, -0.020258266, -0.004157705, -0.012268242, 0.023596482, 0.0101592615, -0.017016463, -0.01045452, 0.009309644, 0.037310883, 0.06584841, -0.031405736, -0.026175465, -0.02759752, 0.013593888, 0.016883899, 0.033285744, -0.0035702032, -0.039962173, -0.0029525731, -0.017281592, -0.0030550093, -0.013762606, -0.01370235, 0.038516015, -0.0062004034, 0.005043477, 0.026705723, 0.0042902697, 0.019944932, 0.04420424, -0.0045734756, -0.012509269, 0.01964365, 0.005875018, -0.027067263, 0.058521204, 0.0067005334, 0.029140089, 0.02860983, -0.0016148768, 0.0013203727, -0.06657149, -0.04155295, 0.0030339195, -0.012334525, 0.030489838, 0.016281333, -0.011334266, 0.0020020255, 0.010376186, -0.009490414, 0.0053537986, 0.013135938, 0.012738245, 0.016401846, 0.030586248, -0.011292086, -0.06729457, -0.014654404, 0.03738319, -0.035141647, -0.008466052, -0.025235463, 0.031502146, 0.002389174, -0.025018537, 0.001986961, -0.00440777, 0.014244659, 0.04613245, 0.009629004, 0.014184402, -0.036587805, -0.027019057, 0.03032112, -0.024644947, -0.033840105, 0.0035611647, -0.01192478, 0.025886234, 0.0107738795, -0.022319043, -0.014654404, 0.03398472, 0.029646244, 0.042324234, -0.027525213, -0.0072247656, 0.02942932, -0.013316708, -0.034683697, -0.00019018487, 0.04743399, -0.0055466196, 0.010448494, 0.010695546, -0.018076979, -0.018703647, -0.02228289, 0.0031182787, 0.047192965, 0.0013640587, -0.034659594, -0.004073346, -0.003398472, 0.027091365, 0.006119057, -0.0038534093, 0.015823381, 0.0034828312, 0.037142165, -0.012870809, 0.0051157847, -0.011635548, -0.0057394407, 0.04806066, 0.011701831, -0.03297241, 0.0274047, 0.010442468, -0.024162894, -0.035961136, -0.005308606, 0.03555139, 0.014786968, 0.0009934806, -0.0012254685, -0.005697261, -0.008966181, 0.013533631, -0.023813406, -0.0091228485, -0.001110981, -0.01890852, -0.046927836, -0.0023861611, -0.018691596, -0.021680323, -0.00058335916, 0.028850857, 0.028730344, 0.0041396283, 0.03077907, 0.0044891164, -0.0118826, 0.029381115, -0.03490062, -0.025428284, 0.030562146, 0.0054261065, -0.0566412, -0.01800467, -0.0011275515, -0.021138014, 0.02668162, -0.011719908, -0.0013587862, -0.0031544329, 0.017149027, -0.010249646, -0.026103158, -0.021354938, 0.023692893, -0.013726452, -0.02137904, 0.020607756, -0.024452126, 0.0114065735, 0.045626294, 0.0040462306, -0.020981347, -0.03145394, 0.006567969, 0.00037735692, 0.025862131, 0.026199568, -0.018848263, 0.024922127, 0.0019010956, -0.029573936, 0.0026663544, 0.046204757, -0.024705203, 0.0057273894, 0.029839067, -0.020848783, 0.023608534, 0.0014145236, -0.029043678, 0.0018001657, -0.0493622, -0.020354677, 0.028826755, 0.0003871486, -0.019438777, 0.026970852, -0.020402882, -0.0050495025, -0.041577052, -0.0077068186, 0.024042381, -0.008948104, -0.00927349, 0.010990803, 0.029549833, 0.0005769569, 0.007917716, -0.0023876675, 0.042251926, 0.007074124, 0.001699236, 0.054664783, 0.015052098, -0.03829909, -0.011563241, -0.022909557, 0.01178619, -0.005007323, 0.0136541445, -0.05774992, -0.016305435, -0.008014128, 0.0039317426, -0.024644947, 0.018101081, 0.013822863, 0.013352862, 0.029043678, 0.024235202, -0.017920312, 0.04521655, 0.017980568, -0.0150762005, 0.002036673, -0.0042601414, -0.0009814292, 0.03463549, 0.024415972, -0.015847484, -0.011954908, -0.027428802, -0.009815799, 0.030538043, 0.009448234, 0.008682976, -0.0034888568, 0.020137753, -0.017510567, -0.021138014, -0.026344184, -0.021270579, 0.005507453, 0.002973663, -0.025163155, 0.017763644, 0.03251446, -0.01689595, -0.008689001, 0.0191857, -0.0055707223, 0.024644947, 0.02860983, -0.01091247, 0.0030384387, -0.016305435, 0.025524694, 0.016739283, 0.009472337, 0.006140147, 0.00835759, -0.0015516073, -0.01572697, 0.016462103, 0.0077489982, 0.003416549, -0.01652236, 0.029814964, 0.0020155832, 0.008640796, 0.008839643, 0.015401586, 0.0069777137, -0.006652328, 0.010105031, -0.009586824, -0.028392907, 0.008936053, 0.02001724, -0.076791, 0.01471466, 0.009387977, 0.005417068, -0.033406258, 0.06878893, 0.0071765603, 0.024825716, 0.011358368, 0.037696525, 0.008128615, 0.014883379, -0.012292345, -0.0038293067, 0.012690039, 0.008032205, 0.018800057, 0.01037016, -0.030200606, 0.013292605, 0.01992083, 0.027356494, 0.012226063, -0.005947326, -0.012894912, -0.018607236, -0.0070018163, 0.02063186, -0.013123887, 0.013208246, -0.016209025, -0.0067306617, -0.031140609, 0.018293902, -0.02247571, -0.0374796, 0.025597002, 0.031863686, 0.0024012253, -0.0057273894, 0.026874442, 0.023524174, 0.028633934, -0.039552428, 0.020559551, -0.0040432177, -0.01781185, 0.021547759, -0.0060588005, -0.010665418, -0.030224709, -0.007291048, -0.009394003, -0.027428802, 0.0074778437, 0.015582356, -0.021788785, 0.008725155, 0.040251404, -0.00039844675, 0.04210731, 0.02256007, -0.021728529, -0.006778867, -0.01616082, 0.0019854547, -0.030706761, -0.03152625, -0.002319879, -0.005646043, 0.003452703, -0.030658556, 0.019209802, 0.0024449113, -0.024090586, -0.03555139, -0.024753409, -0.012129652, -0.0022520903, 0.004302321, 0.020523395, 0.012461063, -0.021957504, 0.019800317, -0.01955929, -0.0058238, -0.010876316, 0.017064668, 0.008255154, -6.1668856e-05, 0.021415194, -0.006869252, -0.014919533, 0.011020931, 0.01543774, 0.010321955, 0.0019553264, -0.0071042525, 0.038323194, 0.009845927, 0.00089782325, -0.010846187, -0.011310163, -0.01150901, -0.02137904, -0.0065016868, -0.0010138173, 0.0063148914, 0.03497293, 0.00093397725, 0.011768113, 0.029718554, 0.058183767, -0.029501628, -0.0020321538, 0.01671518, 0.0047542453, -0.0034014848, 0.032634974, -0.018860314, -0.012009139, -0.035479084, -0.004356552, 0.019583393, -0.0062486087, 0.016883899, 0.031309325, -0.035479084, -0.012545423, 0.03490062, 0.028079573, 0.017390054, 0.03598524, -0.00955067, 0.023451867, -0.0014213024, 0.0374796, -0.010062851, 0.0111775985, -0.03919089, -0.022789044, 0.021993658, 0.013051579, -0.0011998594, 0.011762087, 0.0062365574, 0.013485426, -0.03591293, -0.03270728, 0.0011938338, -0.026368286, 0.007803229, -0.015305175, -0.0069415597, -0.0021541733, -0.01091247, -0.012858758, -0.008212974, -0.022704685, -0.010520802, 0.040154994, 0.010569007, 0.0015726972, -0.017799798, 0.022644429, -0.004847643, 0.012352602, 0.024548536, -0.00065905653, -0.019752111, 0.009653106, 0.011774139, 0.02247571, 0.023415713, 0.02100545, -0.013678247, -0.013642093, -0.0037690501, 0.017570823, -0.016401846, 0.013461323, 0.017426208, 0.028248291, -0.00052046636, 0.011249906, 0.018137235, -0.020619808, 0.02155981, -0.05784633, 0.006137134, 0.011261958, 0.03793755, 0.0067366874, -0.00596239, 0.021776734, -0.016450051, -0.005332709, 0.0255729, -0.003940781, 0.031020096, 0.058810435, 0.037503704, 0.012177858, 0.008405795, -0.020318523, 0.043818597, 0.028465215, 0.010569007, 0.011852472, 0.0020848783, 0.031478044, 0.019245956, -0.021150066, 0.001306815, 0.01572697, 0.0068089953, -0.0042571286, 0.023897765, -0.030489838, -0.012931066, 0.0237652, 0.013533631, -0.020451088, -0.015365432, -0.011129393, -0.025838029, 0.0035430877, 0.004808476, 0.007236817, 0.0038835376, -0.017378002, 0.00070537877, -0.012798501, -0.0023138532, -0.016558513, 0.004757258, -0.014124146, 0.017040566, 0.013352862, 0.01352158, 0.044975523, 0.00973144, -0.036105752, -0.031670865, 0.042999107, 0.012045293, 0.020089548, 0.034876518, 0.012159781, 0.0013776164, 0.021583913, 0.027019057, -0.008014128, 0.040058583, 0.008917976, 0.008309385, -0.008050282, -0.007755024, -0.019848522, 0.0021466413, 0.0065559177, 0.05876223, -0.016498256, -0.016510308, -0.010840162, -0.02219853, -0.017751593, -0.0007396497, 0.051772468, 0.016425949, 0.047578607, 0.008417847, 0.007489895, 0.01590774, -0.022439556, 0.0035611647, -0.0073332274, -0.025187258, -0.0047331555, -0.012834655, 0.0045433473, 0.022885455, -0.006935534, -0.039431915, 0.014883379, 0.0095265675, 0.00297065, -0.021342887, 0.021415194, -0.015931843, -0.0041848207, 0.002255103, -0.06984945, 0.00028169958, 0.009490414, 0.010321955, 0.021089809, 0.025452387, -0.022246735, 0.013135938, 0.011942857, -0.012690039, 0.016172871, -0.0173539, -0.029694451]"
../../../gradio,../../../gradio/gradio/components,markdown.py,"""""""gr.Markdown() component.""""""

from __future__ import annotations

import inspect
from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.events import Events


@document()
class Markdown(Component):
    """"""
    Used to render arbitrary Markdown output. Can also render latex enclosed by dollar signs. As this component does not accept user input,
    it is rarely used as an input component.

    Demos: blocks_hello, blocks_kinematics
    Guides: key-features
    """"""

    EVENTS = [Events.change]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        rtl: bool = False,
        latex_delimiters: list[dict[str, str | bool]] | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        sanitize_html: bool = True,
        line_breaks: bool = False,
        header_links: bool = False,
    ):
        """"""
        Parameters:
            value: Value to show in Markdown component. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Is used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: This parameter has no effect.
            rtl: If True, sets the direction of the rendered text to right-to-left. Default is False, which renders text left-to-right.
            latex_delimiters: A list of dicts of the form {""left"": open delimiter (str), ""right"": close delimiter (str), ""display"": whether to display in newline (bool)} that will be used to render LaTeX expressions. If not provided, `latex_delimiters` is set to `[{ ""left"": ""$$"", ""right"": ""$$"", ""display"": True }]`, so only expressions enclosed in $$ delimiters will be rendered as LaTeX, and in a new line. Pass in an empty list to disable LaTeX rendering. For more information, see the [KaTeX documentation](https://katex.org/docs/autorender.html).
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            sanitize_html: If False, will disable HTML sanitization when converted from markdown. This is not recommended, as it can lead to security vulnerabilities.
            line_breaks: If True, will enable Github-flavored Markdown line breaks in chatbot messages. If False (default), single new lines will be ignored.
            header_links: If True, will automatically create anchors for headings, displaying a link icon on hover.
        """"""
        self.rtl = rtl
        if latex_delimiters is None:
            latex_delimiters = [{""left"": ""$$"", ""right"": ""$$"", ""display"": True}]
        self.latex_delimiters = latex_delimiters
        self.sanitize_html = sanitize_html
        self.line_breaks = line_breaks
        self.header_links = header_links

        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: the `str` of Markdown corresponding to the displayed value.
        Returns:
            Passes the `str` of Markdown corresponding to the displayed value.
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a valid `str` that can be rendered as Markdown.
        Returns:
            The same `str` as the input, but with leading and trailing whitespace removed.
        """"""
        if value is None:
            return None
        unindented_y = inspect.cleandoc(value)
        return unindented_y

    def example_payload(self) -> Any:
        return ""# Hello!""

    def example_value(self) -> Any:
        return ""# Hello!""

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}
","The code defines a `Markdown` component class that is used to render arbitrary Markdown output. It can also render LaTeX enclosed by dollar signs. The component does not accept user input and is rarely used as an input component. It includes parameters such as `value`, `label`, `every`, `show_label`, `rtl`, `latex_delimiters`, `visible`, `elem_id`, `elem_classes`, `render`, `sanitize_html`, `line_breaks`, and `header_links`. The component has methods for preprocessing, postprocessing, providing example payload and value, and providing API information.","[-0.046870783, 0.01073237, -0.0029412243, 0.014573367, 0.01426656, -0.013405138, -0.033442043, 0.007906199, 0.0019101732, 0.034268063, 0.011617393, -0.0042982586, -0.040239014, -0.010891675, 0.016768223, -0.030869579, 0.007375186, -0.0016800674, 0.0315776, 0.030562771, 0.006454763, -0.016343413, 0.03278123, 0.040640224, -0.0061774557, -0.014726771, -0.06598727, -0.016921626, 0.042481072, 0.03922419, -0.0012596818, -0.05305414, 0.02537064, 0.023152184, -0.0024839626, -0.023706798, 0.01862087, -0.013393338, 0.0036167912, -0.0047024186, -0.049797256, -0.015198783, -0.006968076, 0.0044870633, -0.04602116, 0.011770797, -0.013322536, 0.012980327, 0.022385165, 0.03488168, -0.028415117, -0.012012703, -0.010177757, 0.010508165, -0.031648397, -0.01901028, -0.05262933, 0.056877434, 0.0635328, -0.023742199, 0.026692273, -0.061550353, -0.060936738, 0.056594227, -0.056452624, -0.023931004, -0.050835684, -0.016426014, -0.0009248483, -0.0032185311, 0.070093766, -0.015151583, -0.014313761, 0.002137329, -0.007646593, -0.017700447, -0.07368106, 0.009275034, -0.038681377, 0.0052127815, 0.043023884, 0.045431145, -0.08227167, -0.04913644, -0.0018290462, -0.010820873, -0.016449615, -0.005602191, -0.04174945, -0.021995755, -0.055650204, -0.010838574, -0.038327366, 0.07217062, 0.00633676, 0.036462918, -0.08010042, -0.0061715557, 0.0197891, -0.010909375, 0.044675928, -0.0042658076, -0.047720402, -0.018880477, 0.05621662, -0.011163082, -0.016839026, 0.007263083, 0.010095155, 0.009475639, -0.039837804, 0.032993633, -0.037005734, 0.009888649, -0.030751575, -0.04595036, 0.017358238, 0.01707503, -0.02019031, -0.018455666, -0.01306293, -0.010112855, 0.008537515, -0.025465043, -0.02579545, -0.019281687, 0.022090157, -0.0016299161, -0.008791221, 0.019954303, -0.016402414, 0.014632369, -0.03719454, -0.05428137, -0.022927979, 0.03813856, -0.049702853, -0.015481991, -0.021629946, 0.023329189, 0.008826623, -0.016001204, 0.03292283, 0.009587741, -0.026479868, -0.023057781, -0.012189708, -0.043425094, -0.03415006, -0.030798776, -0.012909526, 0.040333416, -0.044487122, -0.023317387, 0.015387588, -0.030727975, 0.02893433, -0.021972153, 0.018550068, -0.025512243, 0.011186683, 0.025040232, -0.0063544605, 0.011328286, -0.0013231083, 0.024686223, 0.031176386, -0.008838423, -0.029665949, 0.007693794, 0.010366562, -0.019966103, 0.00091821066, -0.041253842, -0.030067159, -0.021441141, -0.02027291, -0.047885608, -0.0002601597, -0.00059038366, 0.016898027, 0.030987581, -0.046870783, 0.027541894, -0.024261411, -0.024403015, 0.0029235238, 0.0105258655, -0.0014861, 0.039885007, 0.017134031, -0.024261411, 0.02492223, -0.019175483, -0.0021093031, -0.021700747, 0.05116609, -0.041891057, 0.0043926607, -0.0237776, 0.010909375, 0.044557925, 0.020414514, 0.022963379, 0.016154608, 0.035872906, -0.09161751, -0.07731555, -0.018160658, -0.038327366, 0.006531465, 0.049702853, 0.039837804, 0.0027833951, -0.035117686, -0.024780625, -0.028013907, 0.0238012, 0.023576995, -0.009823748, -0.049089238, 0.046988785, -0.009221933, -0.02026111, -0.012956727, -0.00912753, 0.029453542, -0.06759211, -0.0055402396, 0.006584566, 0.05036367, -0.016780023, -0.02619666, -0.0042481073, 0.0063603604, -0.024544619, -0.042717077, -0.029524345, -0.00081053295, 0.017582443, 0.0026845678, -0.008667319, 0.029972756, -0.00950514, 0.06433522, 0.06499604, -0.04130104, -0.055650204, 0.0011143906, 0.029477144, 0.019517692, 0.015588193, 0.015033579, -0.021146134, -0.039861407, 0.021488342, -0.010372462, 0.06815852, 0.02532344, -0.003932449, -0.019659296, -0.034574874, -0.046044763, 0.016201809, -0.011776697, 0.02577185, -0.025465043, 0.03809136, 0.03374885, -0.017511642, 0.032356415, 0.05201571, 0.0040593026, 0.023588795, 0.010065654, -0.028839927, 0.029123135, 0.049797256, -0.012024503, 0.046540376, -0.023919204, -0.018856876, 0.011186683, 0.043519497, -0.025583046, 0.014950977, 0.04163145, -0.01230771, -0.0020503018, -0.009422538, 0.07868438, -0.002814371, 0.04946685, -0.042693477, -0.008384111, -0.0017302186, 0.049702853, 0.011292885, 0.047531597, -0.006383961, -0.013534942, -0.0075226896, -0.002932374, -0.035448093, 0.04866443, -0.010219058, 0.0032745826, 0.0029220488, -0.009741146, -0.030350365, 0.016968828, 0.017240236, -0.013829949, -0.019895302, -0.043425094, 0.011971402, 0.0077881967, 0.049372446, 0.03655732, -0.017523441, 0.029052332, 0.020874726, 0.0435903, -0.03287563, -0.02692828, 0.013641144, -0.049372446, -0.01347594, -0.028863529, -0.011115881, 0.061644755, 0.0013599843, 0.020638721, 0.0070506777, 0.01904568, -0.03247442, 0.0039176987, 0.025111033, -0.039082587, 0.037926156, -0.02022571, -0.052487724, 0.024308613, 0.030161561, 0.0019927754, -0.008419513, -0.026432667, 0.008637818, 0.01426656, -0.016331611, -0.037430543, -0.044935532, 0.037902556, -0.043141887, 0.043023884, -0.04089983, -0.005584491, -0.035377294, -0.009693945, -0.0317428, -0.010549466, 0.012720721, -0.029193936, 0.0102544585, 0.029783951, -0.0033099835, -0.058057465, -0.041088637, 0.030255964, -0.052959736, -0.0021860052, 0.023470793, 0.008077304, 0.008968227, -0.013570342, -0.018089857, 0.0025282137, -0.029170336, -0.034055658, -0.021570943, 0.0278015, -0.031601198, 0.0003960475, 0.05074128, 0.024639022, 0.013169132, 0.016072005, -0.01700423, 0.01663842, 0.029854754, 0.029146735, 0.015576393, -0.05281813, -0.0049030236, 0.003684643, 0.039436594, 0.011381387, 0.024497418, 0.030161561, 0.0103193605, 0.024072608, 0.012897725, -0.0013260584, 0.0237894, 0.025512243, 0.00951694, 0.031601198, -0.010236758, 0.028957931, -0.016024804, 0.040286217, 0.014868375, 0.007605292, -0.003687593, 0.042858683, -0.039271392, 0.048310418, -0.024332214, 0.035259288, -0.00396785, -0.0007766071, -0.06471283, -0.034763675, -0.024285013, -0.017759448, 0.03676973, 0.058812685, -0.015222384, -0.029854754, -0.056547027, -0.008679119, 0.035400894, 0.05749105, 0.0002653223, 0.024285013, -0.04115944, -0.021653546, 0.056547027, 0.010036153, 0.027683498, -0.023694998, -0.006496064, -0.045289543, -0.028957931, -0.050174866, 0.011959602, -0.0028999231, -0.031105585, 0.0027907705, -0.020119507, -0.018432066, 0.04045142, -0.02024931, -0.031931605, 0.007440088, 0.008679119, 0.014773972, 0.0018673971, 0.03757215, -0.004599166, 0.009806047, 0.015753398, -0.010915276, 0.039106186, -0.01667382, 0.011729496, 0.053290144, -0.001464712, 0.025937054, 0.022904377, 0.007735095, 0.022503167, 0.010378362, 0.00909803, -0.03318244, -0.0040593026, -0.0044516623, -0.0019898252, -0.011776697, -0.03724174, -0.0127443215, -0.023600595, -0.007817697, -0.038563374, -0.034999683, 0.11016758, -0.03851617, -0.02534704, -0.0021255286, -0.029241137, 0.017523441, -0.002616716, -0.0010568642, -0.009552341, 0.043354295, 0.008041902, -0.031955205, -0.011239784, 0.029972756, -0.07202902, 0.0079357, -0.008879724, 0.0010340011, 0.03846897, 0.020497117, 0.013582143, 0.05465898, -0.00012519378, 0.025606645, 0.038327366, -0.04479393, -0.022326164, 0.02106353, -0.034433268, 0.013263535, -0.031034783, -0.02860392, -0.002028176, -0.05267653, 0.03415006, 0.040168215, 0.011517091, 0.0061184545, -0.03535369, -0.029571546, 0.005914899, 0.03495248, -0.024733424, 0.00086142175, 0.0277307, -0.0024898627, -0.0198717, 0.011723596, 0.03495248, -0.05069408, -0.00910983, -0.014809374, -0.021216935, -0.011216183, -0.02619666, 0.034622073, 0.015021779, 0.027258687, -0.02855672, -0.0055962913, 0.024332214, -0.0116645945, -0.011699995, 0.010189557, 0.04396791, 0.01699243, -0.0007467376, 0.007829498, -0.035164885, 0.016485015, 0.010354761, -0.018089857, 0.004985626, -0.018821474, -0.004678818, 0.012708921, 0.024426617, 0.00869682, 0.05267653, 0.0074754884, -0.022538569, -0.0018836225, -0.027447492, -0.014927377, 0.0009875374, -0.0053691356, -0.01547019, -0.012708921, 0.01030756, 0.0074872887, -0.042646274, 0.051307693, -0.013192733, 0.02572465, 0.0017228435, 0.0017906951, -0.00042186063, -0.02421421, -0.028249912, -0.05399816, 0.017322836, 0.041678652, -0.0055372897, -0.052582126, -0.0073928866, -0.033088036, 0.020060506, 0.012484715, 0.046233565, -0.020296512, -0.0019367238, 0.019258086, -0.009033128, 0.0020296513, -0.015316786, 0.0138181485, -0.0131455315, -0.0025223137, 0.002936799, -0.012567317, -0.0045726155, -0.00077955716, -0.0113341855, -0.04637517, -0.03216761, -0.028580321, 0.03530649, -0.016839026, -0.042599075, -0.013015728, 0.021181535, 0.0064901635, 0.021098932, 0.029052332, -0.029878354, 0.010885774, 0.015576393, 0.02815551, -0.04130104, 0.011729496, 0.0514493, -0.012968527, -0.031105585, 0.03212041, 0.006153855, 0.008561116, 0.02699908, 0.0437319, -0.02499303, -0.0038557472, -0.011711796, 0.020886527, -0.0111984825, -0.0044251117, -0.03615611, -0.00033649287, 0.0198599, 0.035495296, 0.015411189, 0.0017243185, -0.009410737, -0.0012677945, 0.011345986, 0.04075823, -0.014384563, 0.02659787, 0.013959752, -0.0031123285, 0.0002291839, -0.0036433418, 0.010537666, -0.009422538, -0.0022007555, 0.017016029, 0.011322386, -0.01938789, 0.016968828, -0.020449916, 0.011003777, -0.035117686, 0.069668956, 0.008460813, -0.022762774, 0.0071214796, 0.035259288, -0.054328572, 0.037005734, -0.030444767, 0.00833691, 0.022337964, -0.0005365448, 0.0031241288, -0.027966706, -0.016732821, 0.016461415, -0.024072608, -0.0018836225, -0.059567902, -0.022455966, -0.015210584, -0.033489246, -0.015293186, 0.029075934, 0.01901028, -0.01941149, -0.009021328, 0.007239483, -0.017570643, 0.0038645975, -0.0038881982, 0.047059588, 0.010278059, 0.035825703, 0.05824627, -0.004908924, 0.0019190235, 0.011056879, -0.03615611, 0.0035459895, 0.022444166, -0.022019355, -0.011511191, 0.025158234, 0.038327366, -0.0058116466, 0.0055402396, 0.024308613, 0.00073604356, -0.031931605, -0.026479868, -0.010750071, 0.0014057105, 0.00514788, -0.009198332, -0.01660302, -0.0124729145, -0.012177907, -0.046587575, -0.012885925, -0.005221632, -0.017098632, 0.0041773054, 0.0016387664, -0.016166408, -0.027305888, 0.001582715, -0.01819606, 0.0044280617, -0.0049767755, 0.0010553892, 0.031223588, -0.011310586, -0.031247187, -0.010189557, -0.0027243937, 0.008531615, 0.006944475, 0.005696594, -0.022231761, 0.027022682, -0.03214401, 0.03759575, -0.015729796, 0.0007541128, 0.015552793, -0.016095607, 0.0077763963, 0.017665045, 0.022479568, -0.037477747, -0.021323137, 0.009540541, 0.0058470475, -0.05631102, 0.0029131984, -0.02421421, 0.037524946, -0.0093812365, -0.0018024954, 0.0059562004, -0.04798001, 0.045761555, -0.009186531, -0.00830151, 0.017676845, 0.018703472, 0.0075167897, -0.02699908, -0.039932206, 0.027825102, -0.012779722, -0.025252637, 0.006973976, -0.0022966329, 0.013546742, 0.0074813887, 0.0044605127, 0.049702853, -0.022762774, 0.02577185, 0.016225409, -0.0073397853, 0.0060830535, -0.025229037, -0.043118287, -0.04443992, -0.01545839, 0.037029333, -0.0037318442, 0.0097175455, 0.0136175435, 0.054045364, -0.07075459, -0.045714352, 0.008685019, -0.023529794, -0.013133732, -0.012366712, -0.008820723, 0.006584566, 0.04115944, -0.041891057, -0.014325561, -0.017924652, -0.007499089, 0.007493189, -0.0059975013, -0.025889853, 0.025606645, -0.022491368, -0.022314362, -0.013759147, 0.008891525, -0.027447492, -0.013381538, -0.0094461385, 0.0027052183, -0.017582443, 0.014030554, 0.01821966, 0.035023283, 0.02532344, 0.01780665, 0.00010334479, -0.03129439, 0.0037937956, -0.000991225, 0.020402715, 0.03802056, 0.014644169, 0.02810831, -0.047507998, 0.027140684, -0.0103901625, -0.017712247, 0.013393338, -0.011257484, 0.012614518, -0.001902798, 0.028627522, -0.051307693, -0.028698323, -0.010024353, -0.033064432, 0.006265958, -0.031955205, 0.04012101, -0.029665949, -0.03488168, 7.8822304e-05, 0.011989103, 0.038256563, 0.0048263217, -0.037524946, 0.05026927, -0.039649, -1.1454586e-05, -0.01825506, 0.029831152, -0.0005358073, -0.05706624, -0.006038802, 0.032262012, 0.016886227, 0.018727072, -0.0012316561, 0.016909827, -0.012590918, -0.018939478, -0.017523441, -0.016532216, -0.015033579, -0.01228411, -0.057774257, -0.0013400713, 0.041395444, 0.0069149747, 0.046115562, 0.0037436443, 0.028745525, -0.026314665, 0.003212631, -0.01901028, -0.019989705, -0.011422688, -0.0064370623, -0.0003523495, -0.011168982, -0.006897274, 0.01148759, 0.033088036, -0.020237511, 0.015717996, 0.008814822, 0.0003125235, -0.0020031005, -0.039011784, 0.0198717, -0.034622073, -0.029783951, -0.0033129335, 0.031388793, 0.0022420567, -0.030845977, -0.03603811, 0.017145833, -0.017735848, 0.031435993, 0.048853233, -0.0014897876, -0.014207559, 0.012177907, -0.005510739, 0.0077881967, -0.0024234862, -0.026432667, -0.005021027, 0.030963982, 0.0010871025, 0.020638721, -0.0025665648, 0.014160357, 0.044935532, 0.022432366, -0.028792726, 0.030704375, 0.021913152, -0.0012795947, 0.024780625, 0.036061708, -0.048475623, 0.0015945152, 0.0016712171, 0.014549767, 0.015989404, 0.01390075, -0.006224657, 0.017169433, -0.037147336, 0.025842652, -0.035636898, -0.011115881, 0.02019031, 0.023211185, -0.0014145607, -0.009003627, 0.024804225, 0.021582745, -0.0015119131, -0.07108499, 0.016083805, 9.6153984e-05, -0.028698323, 0.014231159, 0.0030444767, -0.07023537, -0.008425413, 0.006383961, 0.0025164136, 0.0044192113, -0.015895002, 0.0089092245, -0.013298935, 0.0050593778, 0.049655654, -0.0010303134, -0.0044221617, 0.010042054, 0.015647195, -0.010649769, 0.0144907655, -0.02100453, -0.011847499, 0.020154908, -0.0015738647, 0.0064311624, 0.023352789, -0.007440088, 0.039908607, -0.056971837, -0.022385165, 0.012319511, 0.016579418, 0.0063190595, 0.016756423, -0.025252637, 0.004841072, 0.0001848406, -0.008956426, 0.029406343, 0.015269585, 0.022090157, 0.00082233327, 0.039814204, 0.021960353, -0.048570026, 0.028344315, -0.008165806, -0.030468369, 0.011310586, 0.015588193, 0.07302024, -0.0019794998, 0.011404987, -0.03490528, 0.017334638, -0.005979801, 0.0035607398, -0.02891073, 0.023931004, -0.018325862, -0.036344916, -0.020013304, -0.02655067, 0.01906928, 0.004531314, -0.022267161, 0.0065609654, 0.004838122, -0.014455365, 0.0038645975, 0.012065805, -0.018160658, 0.0039530997, 0.0037731451, -0.006543265, -0.007174581, -0.017570643, 0.008283809, -0.043259893, 0.010626168, -0.021193335, 0.032616023, 0.019116482, 0.043543097, -0.0103193605, -0.021323137, 0.013688345, 0.00050409394, 0.044510722, -0.025111033, -0.009983052, 0.021523742, -0.011410888, 0.050033264, 0.0028158461, 0.018703472, 0.008148106, 0.03297003, -0.0158596, 0.0073043844, 0.0025547645, 0.009617243, -0.0014329987, 0.034032058, -0.026739474, -0.025087433, 0.016579418, -0.02813191, 0.0039796503, 0.005587441, 0.007569891, -0.022857176, 0.047531597, 0.0057939463, -0.002572465, -0.010773672, 0.033088036, -0.010207257, -0.050033264, 0.0005000376, 0.020556118, -0.023919204, 0.028721925, 0.0073928866, 0.014632369, 0.01739364, 0.026432667, 0.008767622, -0.008915124, 0.02059152, -0.021110732, 0.025535844, 0.009888649, 0.008431313, -0.023329189, 0.004318909, -0.02257397, -0.05078848, 0.014478966, 0.025630247, -0.00036562484, 0.020839326, 0.0057968963, 0.0020812775, 0.021098932, 0.014242959, -0.007994702, -0.0111984825, -0.00435136, 0.009434338, 0.0053632353, 0.016201809, -0.018019054, -0.01666202, 0.017252035, 0.019163683, -0.005310134, -0.005602191, 0.004150755, 0.033253238, -0.01740544, 0.0070683784, 0.0039206487, -0.023954604, -0.0041360045, -0.004077003, 0.0068323724, 0.0020606269, 0.010868074, 0.01307473, -0.001860022, -0.02534704, -0.023340989, 0.020036906, 0.037524946, 0.055225395, 0.0025665648, -0.014738572, -0.013239934, -0.031270787, -0.0046227667, -0.015328587, -0.028415117, -0.018125257, 0.008626018, -0.019352488, -0.01779485, -0.0011453663, -0.025630247, -0.0034427368, -0.050033264, 0.02537064, -0.0030149762, 0.030397566, 0.021877753, 0.031483196, 0.023848401, 0.0041714055, 0.050882883, -0.002848297, 0.018007254, 0.02218456, 0.007056578, 0.014408164, -0.0050298767, 0.004531314, 0.010773672, 0.014419964, -0.0047230693, 0.020119507, 0.018939478, 0.017346438, 0.016827224, 0.012496515, -0.020792125, -0.030161561, 0.0075403904, -0.00832511, 0.030562771, -0.011995003, 0.0042186063, 0.02496943, 0.010384262, 0.038681377, -0.00873222, -0.015104381, -0.01666202, 0.007003477, 0.00038019085, -0.007410587, -0.025299838, 0.004118304, -0.0112633845, 0.0107913725, 0.0039767004, 0.02813191, 0.009564141, -0.015670795, -0.018373063, 0.00476732, -0.033418443, 0.023848401, 0.026456267, 0.022278963, 0.0003978913, 0.021559143, -0.0072512827, 0.0040180013, 0.022833576, -0.0019101732, 0.004708319, -0.00060660904, 0.033536445, -0.021500142, 0.0079239, 0.012767922, 0.033442043, -0.014891976, 0.00074636884, -0.0021329038, 2.203913e-06, 0.009328135, 0.015175182, 0.0029854754, 0.017240236, 0.014467165, 0.02017851, 0.03610891, -0.011753096, 0.028415117, 0.013428738, -0.027943105, 0.003050377, -0.0063721607, 0.020768523, -0.0151633825, 0.021452941, -0.021134334, -0.01784205, -0.01703963, 0.0068323724, 0.02577185, -0.0017759448, -0.027848702, -0.0019485242, -0.00062320323, 0.018880477, 0.0069621755, 0.012708921, 0.04635157, 0.02099273, -0.008024203, -0.043354295, -0.016732821, -0.015175182, -0.005746745, 0.008561116, -7.6978504e-05, 0.0067261695, -0.015080781, 0.012897725, -0.026763076, -0.025016632, -0.010643869, -0.020284712, 0.019128282, 0.012756121, -0.05187411, 0.025535844, -0.04401511, -0.022066556, -0.0026668673, 0.027518295, 0.02178335, 0.0039855507, 0.031152787, 0.005661193, 0.01427836, -0.0071568806, 0.01938789, -0.008926925, -0.028721925, 0.030255964, -0.010555366, -0.0062836586, 0.006944475, -0.017488042, 0.0125437165, 0.014372762, -0.024709823, -0.020697722, -0.009605442, 0.022491368, 0.020060506, -0.008685019, 0.060936738, 0.020815725, -0.029146735, 0.02891073, -0.04012101, 0.024049006, -0.03853977, 0.018172458, 0.0027583195, 0.0007913575, -0.033866853, -0.007333885, -0.015529192, 0.010136455, 0.001547314, -0.021677148, -0.008059603, -0.032592423, -0.027069883, -0.036297716, 0.010160056, -0.018172458, -0.015835999, 0.020154908, 0.016862625, 0.0026388415, -0.029477144, 0.010478664, -0.0033040834, 0.005861798, 0.011009677, -0.012508316, -0.0049325246, 0.013664745, 0.0068087718, -0.03129439, 0.0038763979, -0.030090759, 0.0058853985, -0.00012288903, 0.026314665, -0.01306293, -0.0044959136, -0.003489938, -0.058104664, 0.0043366095, 0.047791205, -0.000222915, -0.0014123481, -0.002497238, -0.014832974, 0.02421421, 0.026291063, -0.009393037, 0.046941586, 0.013971552, -0.004056352, 0.005861798, 0.018915877, 0.010932975, 0.016473215, -0.02577185, 0.0021225784, 0.013971552, -0.014349162, 0.03773735, 0.0020783274, 0.0046994686, 0.003127079, 0.017322836, 0.03653372, 0.03407926, 0.003256882, -0.004289408, 0.01938789, -0.013735547, -0.031601198, 0.016402414, 0.034456868, -0.011593793, -0.015706196, 0.020449916, 0.022550369, -0.03636852, 0.0037760953, -0.003371935, -0.023942804, -0.014419964, -0.04720119, 0.03278123, 0.044227514, 0.0010568642, -0.01659122, -0.009770647, 0.045289543, -0.011835699, 0.0030710276, 0.013263535, -0.0044870633, -0.05824627, 0.003767245, 0.038563374, -0.02259757, -0.000971312, -0.016213609, -0.027423892, 0.022857176, -0.010006652, -0.0102544585, -0.008366411, -0.035872906, -0.0052186814, -0.014891976, 0.02178335, 0.028297113, 0.0011239784, 0.0042274566, -0.013169132, -0.02061512, 0.010213157, -0.013346137, 0.015529192, 0.032309216, 0.0023231837, -0.011930101, 0.034315266, -0.027541894, 0.014349162, -0.010637969, -0.0020930779, 0.0068441727, 0.015529192, 0.028037507, -0.00990635, 0.018078055, 0.003138879, 0.008207107, 0.032356415, -0.01707503, 0.05069408, 0.018774273, -0.029618748, 0.016024804, -0.00041042911, -0.014596968, 0.0067910715, -0.04085263, -0.01388895, 0.0073220846, -0.012484715, 0.018809674, -0.023813, -0.012874125, 0.0036993932, 0.009670344, 0.0069090743, -0.009422538, -0.00023305588, -0.02853312, -0.009322235, 0.006861873, 0.020862926, -0.0030238263, -0.040970635, 0.033111636, -0.020296512, 0.02139394, -9.5531705e-06, 0.0075580906, 0.00673797, 0.029217537, -0.019376088, -0.007445988, -0.028839927, 0.01149349, 0.013794548, -0.040239014, 0.01827866, -0.0014920002, 0.00024688436, 0.026338264, -0.0079298, -0.0277307, 0.009174732, 0.040687427, 0.028839927, 0.017157633, 0.005006276, 0.018455666, 0.019517692, 0.03771375, 0.006537365, -0.007994702, 0.033630848, 0.02891073, -0.005401586, -0.041371845, 0.02617306, 0.0054487875, -0.01666202, 0.015021779, -0.007864898, -0.020544318, -0.029500743, 0.0074754884, -0.04054582, 0.0237304, -0.0031123285, 0.009275034, -0.054045364, -0.0064901635, -0.008761721, -0.005790996, -0.010472764, -0.0120717045, -0.013452339, 0.026456267, -0.01266172, -0.042268667, 0.0129449265, 0.010095155, 0.0046227667, -0.01070877, -0.021358538, 0.033088036, 0.028179111, 0.01266172, -0.008549316, 0.013110131, -0.015352188, -0.0027937205, -0.013829949, -0.05074128, -0.0038881982, 0.015080781, -0.041088637, 0.018750673, -0.021924954, -0.013204533, 0.007876699, 0.026220262, 0.038232964, 0.002653592, -0.009758846, -0.013204533]"
../../../gradio,../../../gradio/gradio/components,radio.pyi,"""""""gr.Radio() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import FormComponent
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Radio(FormComponent):
    """"""
    Creates a set of (string or numeric type) radio buttons of which only one can be selected.

    Demos: sentence_builder, blocks_essay
    """"""

    EVENTS = [Events.select, Events.change, Events.input]

    def __init__(
        self,
        choices: list[str | int | float | tuple[str, str | int | float]] | None = None,
        *,
        value: str | int | float | Callable | None = None,
        type: str = ""value"",
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            choices: A list of string or numeric options to select from. An option can also be a tuple of the form (name, value), where name is the displayed name of the radio button and value is the value to be passed to the function, or returned by the function.
            value: The option selected by default. If None, no option is selected by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            type: Type of value to be returned by component. ""value"" returns the string of the choice selected, ""index"" returns the index of the choice selected.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: Additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If True, choices in this radio group will be selectable; if False, selection will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.choices = (
            # Although we expect choices to be a list of tuples, it can be a list of tuples if the Gradio app
            # is loaded with gr.load() since Python tuples are converted to lists in JSON.
            [tuple(c) if isinstance(c, (tuple, list)) else (str(c), c) for c in choices]
            if choices
            else []
        )
        valid_types = [""value"", ""index""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return self.choices[0][1] if self.choices else None

    def example_value(self) -> Any:
        return self.choices[0][1] if self.choices else None

    def preprocess(self, payload: str | int | float | None) -> str | int | float | None:
        """"""
        Parameters:
            payload: Selected choice in the radio group
        Returns:
            Passes the value of the selected radio button as a `str | int | float`, or its index as an `int` into the function, depending on `type`.
        """"""
        if self.type == ""value"":
            return payload
        elif self.type == ""index"":
            if payload is None:
                return None
            else:
                choice_values = [value for _, value in self.choices]
                return (
                    choice_values.index(payload) if payload in choice_values else None
                )
        else:
            raise ValueError(
                f""Unknown type: {self.type}. Please choose from: 'value', 'index'.""
            )

    def postprocess(self, value: str | int | float | None) -> str | int | float | None:
        """"""
        Parameters:
            value: Expects a `str | int | float` corresponding to the value of the radio button to be selected
        Returns:
            The same value
        """"""
        return value

    def api_info(self) -> dict[str, Any]:
        return {
            ""enum"": [c[1] for c in self.choices],
            ""title"": ""Radio"",
            ""type"": ""string"",
        }

    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Radio` component in Gradio, which creates a set of radio buttons where only one option can be selected at a time. The component allows users to select from a list of string or numeric options. It provides methods for preprocessing and postprocessing the selected value, as well as for handling events such as selection, change, and input. The component can be customized with various parameters such as label, info, scale, and visibility. It also includes methods for generating example payloads, values, and API information related to the component.","[-0.036863524, 0.026511438, 0.014896903, 0.007953431, 0.013520833, -0.05519429, -0.014505544, 0.014025813, -0.0021682568, -0.035399083, -0.0069497842, -0.016184602, -0.035651572, 5.2914384e-05, 0.03668678, -0.021587886, -0.027521398, -0.019176606, -0.003626386, 0.04691262, -0.017989904, -0.029894803, 0.0048825233, 0.006482678, 0.007764064, -0.0120185185, -0.02508487, 0.091148846, -0.0133693395, -0.006773041, -0.03416188, -0.031586483, 0.002529633, -0.006615235, -0.019997198, -0.059789605, 0.024201155, 0.0411811, 0.003399145, -0.013419838, -0.036106054, -0.014013189, -0.050093994, 0.018860994, 0.005725208, 0.05221491, -0.024302151, 0.0073222066, 0.022484224, 0.020098194, -0.065849364, 0.015376634, -0.03863095, -0.0224716, 0.001174867, 0.021562636, -0.087765485, 0.018494884, -0.002068839, -0.03696452, -0.007934495, -0.028758598, 0.011317859, 0.01297798, 0.01859588, 0.009342126, -0.016828451, 0.011355733, 0.03368215, 0.026258947, 0.039388422, -0.051861424, 0.026385194, -0.017851034, -0.0011851244, 0.012637119, -0.026309446, -0.038050227, 0.060749065, 0.009897604, -0.016108856, -0.013268343, -0.048250817, -0.05867865, -0.014328801, 0.009537806, -0.014619164, 0.001991514, -0.028051626, -0.08943192, -0.065344386, -0.025665596, -0.0014912684, 0.07574697, -0.009720861, -0.009752422, -0.010989622, 0.007631507, 0.007094966, 0.050018247, 0.030803766, -0.03817647, -0.019984575, -0.035020348, 0.021057656, -0.024226405, 0.0112358, 0.062314503, -0.01882312, -0.0068551004, 0.009929164, 0.0044406657, -0.06069857, 0.025324736, -0.023822421, -0.02694067, -0.006290154, -0.035979807, -0.017396552, -0.016929448, -0.013697577, -0.038151223, 0.016197227, -0.045473427, 0.024478894, -0.012700241, -0.00045290374, -0.036383793, -0.018078275, 0.010939124, 0.019694211, 0.0053717224, 0.0155155035, -0.035828315, -0.030172542, 0.0461804, -0.05569927, -0.010068034, -0.0387067, 0.03368215, 0.026738679, -0.020514803, 0.020060321, -0.023822421, -0.022812461, -0.045094695, -0.05524479, 0.025463605, -0.053325865, -0.010004912, -0.01710619, 0.014189932, -0.054083332, 0.031106753, 0.0075431354, 0.0037936606, 0.04297378, -0.012832798, -0.02221911, -0.025261613, -0.012308882, 0.020944037, 0.0049677384, -0.012144764, 0.0011338374, -0.042090066, -0.0049172407, 0.026839675, -0.0412316, 0.07190912, 0.02421378, -0.009133821, -0.050977707, 0.005163418, -0.021398518, -0.008142799, 0.021562636, -0.009190632, -0.0033297103, 0.011380982, -0.001176445, -0.0045984723, -0.007025531, 0.021802502, 0.009077012, -0.020514803, -0.022433726, -0.09715811, -0.028859595, -0.031359244, 0.029112084, 0.0020025603, 0.01205008, 0.011677657, -0.011273674, -0.041888073, -0.0035317023, -0.0061165676, -0.007587321, -0.03752, 0.028379863, -0.0021067124, 0.019845705, -0.032268208, -0.043504007, -0.009765047, -0.01084444, -0.005636837, 0.026814425, -0.023330066, 0.021512138, -0.016399218, 0.028379863, -0.007536823, -0.03847946, -0.00490146, 0.024049662, 0.026713429, -0.00043436151, -0.0042576105, -0.019176606, -0.0021382738, 0.004418573, -0.029793806, 0.027066916, -0.0025959117, 0.04042363, 0.009840793, 0.043907993, -0.010970686, 0.051280696, 0.0114630405, 0.05625475, 0.005930356, 0.018772623, -0.036080804, 0.03019779, -0.021259649, 0.024693511, -0.01859588, -0.0487053, -0.03693927, 0.027521398, -0.008969703, 0.006135504, 0.020628424, -0.017282933, -0.027571896, 0.011696594, 0.030172542, 0.0063722134, -0.01117899, 0.028758598, 0.0025170085, 0.0075178863, 0.020009823, 0.03691402, 0.03592931, 0.014593915, -0.018292893, -0.024491519, -0.025690846, -0.012940107, 0.03946417, -0.03072802, 0.06877825, 0.014480295, 0.027369903, -0.0027915912, -0.04140834, -0.05423483, -0.020779917, 0.042064816, 0.0113431085, -0.00991654, 0.015566002, 0.07039418, 0.051558435, -0.003960935, -0.018924117, -0.061355043, -0.0012009051, 0.03272269, 0.00032646154, -0.02219386, 0.00755576, 0.04092861, 0.005753613, 0.013470335, -0.039716657, 0.04466546, 0.003496985, 0.06302147, -0.027167913, -0.017989904, -0.008944455, 0.06958621, -0.023519432, 0.022408478, -0.021196526, 0.017068317, 0.008729838, -0.006716231, -0.04416048, -0.028632352, 0.0070381556, 0.009361062, -0.006204939, -0.0041187415, -0.0002459804, 0.035272837, 0.039161183, 0.0030598617, -0.03847946, -0.08786648, 0.008704589, 0.022458976, -0.014770659, 0.01923973, -0.004292328, 0.0050561097, 0.015780618, 0.022458976, -0.008647779, -0.021247024, -0.056507237, -0.05418433, -0.03393464, 0.03416188, -0.054739807, 0.032899432, 0.012820174, -0.01460654, 0.07362605, 0.037015017, -0.0046868436, -0.04921028, 0.032823686, -0.07054567, 0.019769957, -0.01497265, -0.0050150803, 0.009430497, 0.031233, 0.012523498, 0.029036338, -0.04039838, 0.013003229, -0.025577225, -0.02918783, 0.0021761472, 0.004800464, -0.028581856, -0.02059055, 0.029642312, -0.03893394, -0.0011867025, -0.04888204, -0.060294583, -0.0012387785, -0.023266943, 0.06423343, -0.03966616, 0.020678923, -0.013697577, -0.010244777, -0.033353914, -0.033530656, -0.038100723, -0.040827613, 0.018835746, -0.018671626, -0.01210689, 0.021310147, -0.055093292, -0.019870954, 0.023216445, 0.012409878, -0.018722124, -0.024643013, 0.07791838, -0.027092164, -0.0349446, -0.042595044, -0.003345491, 0.008351103, 0.011993269, 0.0423678, -0.011551412, -0.009935477, -0.016828451, -0.017068317, 0.026334696, -0.028556606, 0.009455746, 0.015717495, -0.022458976, 0.031788476, 0.01600786, 0.040347885, -0.00854047, -0.017371304, -0.044791706, 0.049286027, 0.010617199, -0.03095526, 0.032268208, 0.040878113, 0.004188176, -0.006394306, 0.031510737, 0.021196526, 0.054285325, 0.010232152, 0.02769814, -0.00786506, -0.0028499796, -0.015288263, -0.0069750333, 0.04921028, 0.015376634, -0.003446487, 0.011368357, -0.05042223, 0.007094966, 0.033833645, 0.001072293, -0.011494602, 0.0053559416, -0.038984437, -0.013621829, 0.025640348, 0.009417873, 0.004974051, 0.00966405, 0.0005905896, 0.004951958, 0.034288127, 0.048276067, 0.0006548956, -0.032571197, 0.040145893, 0.020489555, 0.03514659, -0.017434428, 0.017939406, -0.0039735595, -0.0060124155, -0.054032836, -0.05564877, -0.024920752, -0.01410156, -0.0337579, 0.016310846, 0.044311974, -0.014076311, 0.06292048, 0.03678778, 0.012851736, 0.009872355, -0.006163909, 0.01862113, -0.035070844, 0.027243659, -0.022812461, -0.01266868, 0.005652617, 0.0072212107, 0.020072946, 0.0023355314, -0.026435692, -0.009178007, 0.010762381, 0.025349984, -0.03171273, 0.020855665, 0.029314077, 0.02132277, -0.010251089, -0.013937442, -0.01511152, 0.02488288, 0.020931412, -0.035626322, 0.0133693395, 0.10917663, 0.004680531, -0.008332166, -0.0039735595, 0.002763186, 0.0051255445, -0.012731803, -0.015767993, -0.012498249, 0.023468934, -0.0011685548, -0.04769534, 0.015465005, -0.011059057, -0.027117414, 0.032066215, -0.01460654, 0.012794925, 0.06362745, 0.012334131, 0.01735868, 0.044311974, 0.015439756, 0.010137469, -0.015679622, -0.0032287145, -0.02208024, 0.0003807074, -0.010276338, -0.0046679066, -0.042064816, -0.022092866, 0.0016774797, -0.030096794, -0.00062964665, -0.03320242, 0.03491935, -0.004446978, 0.017825786, 0.003320242, -0.00056021195, 0.0045321933, -0.053022876, 0.022118114, -0.0230902, -0.03418713, -0.021247024, -0.037595745, 0.04645814, -0.049336523, -0.023607804, -0.015490254, 0.023355315, 0.039413672, -0.0131042255, -0.010339461, -0.025425732, -0.0032113558, -0.0049456456, -0.0071644005, 0.051305946, -0.0034307062, -0.041812327, 0.014215181, 0.014960025, 0.04466546, -0.06352645, 0.029516067, -0.0361818, -0.01205008, 0.005753613, 0.01573012, 0.026410442, -0.015831117, -0.048301317, -0.012277321, -0.004544818, 0.015932111, 0.03918643, -0.0059429808, -0.020060321, -0.024403147, -0.00047460207, -0.041004356, 0.005160262, -0.025160616, 0.007284333, 0.008433162, 0.052012917, 0.010995935, 0.0133693395, 0.009449434, -0.020047696, 0.019807832, -0.007467388, 0.024125408, -0.00949362, 0.025261613, -0.015427132, -0.04065087, -0.0324702, 0.01772479, -0.01474541, -0.0005432478, 0.00074879033, -0.009948102, 0.010655073, 0.0019836237, 0.043478757, -0.044791706, 0.018886244, -0.028051626, 0.03764624, -0.028607104, 0.004311265, 0.016891573, -0.005390659, 0.007991305, 0.017093565, 0.045650173, -0.030071545, 0.016146729, 0.009973351, -0.04140834, 0.007631507, -0.011589286, 0.029667562, -0.041862823, -0.02297658, -0.021676257, 0.01634872, -0.02033806, 0.010920187, 0.016689582, 0.009821856, -0.029440321, 0.015288263, 0.019845705, -0.013255719, -0.001150407, 0.033656903, 0.028076876, -0.009884979, 0.04542293, 0.025375234, 0.02221911, -0.0003448065, 0.02283771, 0.009708236, -0.0030567057, -0.002576975, -0.003730538, -0.011709219, -0.011002247, -0.043049525, 0.04393324, 0.026208451, 0.0012387785, -0.0062649054, 0.022888208, 0.0046868436, -0.0038125974, 0.008319542, 0.057870682, 0.00912751, -0.0034307062, -0.00012841477, -0.00093579065, -0.009960726, -0.013268343, -0.002834199, -0.016500214, -0.0047657466, 0.009733485, 0.021234399, -0.019643713, -0.016525462, -0.006520551, -0.01196802, 0.008452099, 0.032545947, 0.023216445, -0.0056589297, -0.028253619, 0.036383793, -0.045650173, -0.007101278, -0.01398794, 0.016815826, 0.021499515, -0.012952731, 0.028733348, -0.01935335, -0.018898867, 0.008111238, -0.044589713, -0.000817436, -0.046963118, -0.011721843, 0.0090517625, -0.03749475, 0.006425868, 0.017257683, 0.016979944, -0.016336096, -0.012656055, 0.0064195553, 0.020439057, 0.023746673, -0.014657038, 0.012536122, 0.007227523, 0.0006556847, 0.003910437, -0.027597144, 0.02255997, 0.026991168, -0.005207604, 0.005652617, -0.010251089, -0.012144764, -0.02205499, -0.0056399927, 0.002376561, -0.008281669, 0.019567966, 0.016424468, 0.010831816, -0.003831534, 0.005769394, 0.014455046, 0.021133404, 0.022648342, 0.013053727, -0.012334131, -0.028152622, 0.026991168, -0.05691122, -0.0066026105, 0.026486188, -0.05120495, -0.018204521, -0.0013713357, -0.050093994, 0.013192597, -0.012308882, -0.0049393335, 0.013179972, 0.027167913, -0.0015149394, 0.04519569, -0.0073474557, -0.018810496, 0.028632352, -0.02992005, 0.015212515, 0.0348941, -0.005295975, -0.018078275, -0.010415208, 0.012479313, 0.036106054, 0.008843458, -0.038075473, 0.0063027786, -0.02511012, 0.009739798, 0.026435692, -0.0030567057, 2.1809306e-05, -0.009929164, -0.021436391, -0.01696732, -0.015932111, -0.012491937, -0.010068034, 0.01522514, -0.012990604, -0.018419137, 0.0033107735, -0.026385194, 0.042746536, -0.021360645, 0.007909246, 0.040524628, -0.0022582065, -0.013748074, -0.0016948384, -0.003579044, 0.06115305, -0.028127374, -0.03201572, -0.042595044, -0.0053748786, -0.0076946295, -0.00811755, -0.015919488, 0.014682286, -0.014063687, 0.052416902, 0.015187266, 0.008338478, 0.024276903, 0.008900268, -0.04643289, 0.018431762, 0.008527846, -0.008969703, -0.018608505, 0.053022876, 0.025854964, 0.010876002, -0.062062014, -0.007972368, 0.02946557, -0.03274794, -0.033303417, -0.031611733, 0.043074775, 0.030576525, 0.021272274, -0.0069182226, -0.035121344, -0.001174078, -0.029743308, 0.015755368, 0.010086971, -0.020022448, 0.032343954, -0.0065773614, 0.009777671, 0.016411843, 0.033303417, 0.0008710901, -0.028556606, -0.02221911, -0.018772623, 0.0044848514, 0.0062964666, 0.008458411, 0.010339461, 0.02095666, 0.018166646, 0.016916823, 0.0122836325, 0.03373265, 0.016058357, -0.01839389, 0.037848234, -0.027647642, 0.02848086, -0.02511012, 0.064485915, -0.0035222338, -0.033404414, -0.0025517258, 0.008527846, -0.004538506, 0.004475383, 0.023835044, 0.027243659, -0.0099796625, 0.019908827, 0.014934776, 0.009575679, 0.0005807267, -0.013255719, 0.005747301, -0.04138309, 0.061759025, -0.013217846, -0.0070823412, 0.028127374, 0.018267643, 0.038024977, -0.01946697, 0.018027779, -0.032949932, 0.02008557, -0.011961709, -0.06620285, -0.015894238, 0.01056039, 0.036358543, -0.0274709, -0.0035348583, -0.014758034, 0.008142799, 0.005314912, -0.02488288, -0.007852435, 0.01042152, -0.011134804, -0.030273538, -0.024706135, -0.013672328, 0.003907281, 0.008900268, -0.0019757333, -0.013243094, -0.023039702, -0.0067351675, -0.0036484788, -0.004642658, 0.03446487, -0.0131042255, 0.0211839, -0.017282933, 0.011633472, 0.030475529, 0.0028925873, -0.015149393, 0.012567684, 0.03443962, -0.020805167, -0.015250389, 0.012794925, -0.025349984, -0.016538087, -0.01786366, 0.012239447, -0.04042363, -0.00887502, -0.00515395, -0.019807832, -0.026915422, -0.026359944, 0.01586899, 0.023393188, 0.01839389, 0.008862395, 0.004055619, 0.011709219, 0.0018873619, 0.01573012, 0.0044596028, 0.001277441, 0.0050213924, -0.00056376256, -0.018027779, 0.012466688, 0.015603875, 0.03921168, -0.002150898, -0.004775215, 0.023532057, 0.03443962, 0.03214196, -0.028430361, 0.020123444, -0.061759025, -0.011273674, 0.002248738, -0.0028184184, -0.00083479466, -0.0102700265, -0.05913313, -0.0016285598, -0.026789177, 0.02817787, -0.04022164, -0.0076946295, -0.019795207, -0.026132703, 0.03173798, -0.0041755517, 0.022130739, 0.09195682, 0.012473, -0.013937442, 0.008029179, -0.0027237346, -0.0077956254, 0.035979807, 0.020666298, -0.046761125, 0.0069434717, 0.001379226, 0.019025113, -0.021953996, -0.007991305, 0.054133832, -0.0074421396, -0.020742044, 0.0030803767, 0.02134802, 0.011614535, 0.024706135, 0.018583255, -0.000625307, 0.0019536405, 0.00017980041, -0.02820312, 0.04446347, 0.017434428, 0.026662933, 0.013861694, 0.018520134, -0.0041818637, -0.06337496, -0.023481559, 0.008022866, -0.014846405, 0.04643289, -0.006962409, -0.03544958, 0.016979944, -0.0038189094, 0.008414226, 0.03216721, 0.03519709, -0.01311685, 0.003036191, 0.02423903, 0.007025531, -0.026789177, -0.020161318, -0.0011851244, -0.010970686, 0.015237764, -0.010427833, 0.04686212, -0.02474401, -0.012384629, -0.008944455, -0.018797873, 0.035348583, 0.035020348, 0.0034338625, 0.014366674, -0.04393324, 0.005283351, 0.01104012, -0.009424185, -0.02157526, 0.0005752035, 0.012536122, 0.027369903, 0.00464897, -0.009796607, -0.0034780481, 0.030021047, 0.017825786, 0.008395289, 0.003418082, -0.018494884, 0.020401184, -0.0324702, -0.03388414, 0.008755087, 0.022484224, 0.023330066, -0.0034654236, -0.00011352182, 0.0036106054, -0.006646796, 0.00081585796, -0.0111979265, 0.022951331, -0.022282232, -0.026157953, 0.008445786, -0.023266943, -0.025122743, 0.025387857, 0.0036169176, 0.008767711, 0.046256147, 0.014303552, -0.028581856, 0.017131438, -0.011532475, -0.028278867, -0.009569366, 0.030399783, -0.024390522, 0.032242958, 0.008458411, -0.031510737, -0.022812461, -0.0070318435, -0.005516904, 0.015666997, -0.003986184, -0.0032508073, 0.009619865, 0.009954413, 0.011526164, -0.007057092, -0.028884843, -0.01910086, 0.0067225434, -0.014960025, 0.030803766, -0.012485625, 0.0029478194, -0.015086271, -0.012132139, 0.03196522, -0.008325854, 0.036333293, -0.012624495, 0.01598261, 0.020211816, -0.0061923144, -0.032823686, 0.025690846, -0.016197227, -0.011728155, -0.027496148, 0.027849635, -0.0054664062, 0.05463881, 0.007783001, -0.0072653964, 0.02572872, 0.01607098, 0.0008221702, -0.02019919, 0.008723525, 0.0006229399, 0.012498249, -0.00887502, 0.014518169, -0.0075683845, -0.007934495, 0.066505834, -0.015098895, -0.032596443, -0.015010524, -0.020678923, 0.005873546, 0.0024333713, 0.011210551, -0.024226405, 0.006583674, -0.027268907, -0.0065962984, -0.00362323, 0.019176606, -0.033505406, 0.041004356, -0.0047184047, 0.0019378599, 0.02095666, -0.013432462, 0.016702207, -0.0073663923, -0.018671626, 0.007341143, 0.003705289, -0.010244777, -0.01584374, 0.0059713856, -0.008616217, 0.0044880076, -0.013217846, 0.010282651, 0.07640344, -0.020880913, -0.013028478, -0.02334269, 0.037999727, 0.018078275, 0.0022045523, 0.021663632, 0.052113913, 0.018684251, -0.00848366, 0.01497265, -0.016626459, -0.011481978, -0.008079676, 0.00094604807, -0.0032034654, -0.016134104, -0.025387857, -0.031333994, -0.025349984, 0.013003229, 0.027622394, -0.009234818, 0.0018763155, 0.02511012, 0.05716371, 0.010472018, -0.006151285, -0.01834339, 0.02334269, 0.004260767, 0.03317717, -0.009367375, -0.0090391375, -0.0045858477, 0.042342555, 0.014215181, -0.057264704, 0.0029541317, -0.010049097, 0.0004552708, 0.037721988, -0.015995234, -0.0043838555, 0.0141646825, 0.009600928, -0.006672045, 0.003241339, -0.00021047398, 0.016841074, 8.1985245e-06, 0.002526477, -0.026107455, 0.037267506, 0.013381964, 0.0131042255, 0.0027442495, 0.016752703, -0.033808395, 0.0070634047, -0.008142799, -0.01648759, -0.002913102, -0.021903498, 0.02336794, 0.033808395, 0.017989904, 0.0032634318, -0.00224716, 0.00362323, -0.011646096, 0.0061670654, -0.01280755, 0.0045826915, -0.015376634, 0.02384767, 0.0024254809, 0.01839389, 0.005412752, 0.03764624, -0.018696876, 0.018217145, 0.020716796, 0.00089239393, -0.027824385, -0.021613134, 0.001966265, -0.068576254, 0.030500779, 0.022711465, 0.0037084452, -0.011134804, 0.00904545, -0.0020341217, 0.024289528, 0.0027489837, 0.030677522, -0.013205221, -0.011923835, 0.029541317, 0.034843605, 0.03542433, -0.0056715542, 0.011242112, 0.0058640777, 0.010162718, 0.0014810109, -0.009960726, -0.007820874, -0.0040745554, -0.020552676, 0.012649743, 0.022547347, -0.01620985, 0.01078763, -0.03764624, 0.005949293, -0.0024680886, -0.006520551, -0.032116715, 0.0030314566, -0.026385194, -0.021234399, 0.027799137, 0.009765047, 0.0077577517, -0.013659703, -0.008016554, -0.013331466, -0.014391923, 0.0008300605, 0.057315204, -0.04342826, 0.0061954707, -0.004061931, -0.025880214, -0.012637119, -0.03544958, -0.023885543, 0.006842476, -0.027723389, 0.022623094, 0.0093168765, -0.007928182, -0.0068235393, 0.04514519, 0.0044311974, 0.06514239, -0.006716231, -0.0011567193, 0.017232435, 0.0046868436, -5.3111642e-05, -0.0262337, -0.011709219, -0.03393464, -0.022900833, -0.004450134, 0.0005752035, 0.0019220792, -0.015250389, -0.027142663, -0.006233344, -0.024554642, -0.007814562, 0.005359098, -0.004879367, -0.005548465, -0.0006612079, 0.012592933, 0.00598401, -0.0073853293, -0.010011224, -0.008243795, 0.00828798, 0.016033107, -0.0021067124, 0.028278867, -0.014063687, 0.013672328, 0.01586899, 0.038529955, 0.019075612, -0.019201856, -0.017989904, 0.031283498, 0.021840375, 0.032318704, 0.004623721, -0.021941371, -0.017510174, -0.001480222, 0.027571896, 0.026587185, 0.005359098, 0.072010115, 0.0060092593, 0.044892702, 0.025905462, 0.046836875, -0.010004912, -0.0037684115, 0.006384838, 0.0008537314, 0.036131304, 0.026031706, 0.0025438357, 0.0032271363, -0.06186002, 0.001583585, 0.02769814, -0.0023844515, 0.008982328, 0.031182501, 0.00048564852, 0.025349984, 0.022017118, 0.027016418, 0.016639084, 0.059486616, -0.034616362, 0.0020767292, 0.020300187, 0.042544547, 0.025577225, 0.013268343, -0.0174723, -0.035020348, 0.0029178362, -0.019252354, 0.016222475, 0.012731803, -0.0097019235, 0.025703471, -0.006804602, -0.025602475, 0.008761399, -0.02132277, -0.017901532, -0.023279568, -0.018444385, -0.01882312, -0.029314077, -0.0074232025, 0.010838129, -0.041509338, -0.031106753, 0.04514519, 0.03221771, -0.015263014, -0.042090066, 0.023948666, 0.004008277, 0.023355315, 0.0021240711, 0.008717214, -0.021196526, -0.0048351814, -0.014076311, -0.0018479103, 0.017800536, 0.033505406, -0.01059195, -0.017005194, -0.023557307, 0.013811197, -0.0022361137, 0.023355315, 0.004547974, 0.018040402, -0.0031908408, 0.017876284, 0.022004494, -0.0059713856, 0.025514103, -0.0548913, -0.008193296, 0.0012443017, 0.030829014, 0.016689582, -0.018431762, -0.007991305, 0.011923835, -0.017295558, 0.009783983, -0.039716657, 0.01084444, 0.015237764, 0.058729146, 0.010686634, -0.011690281, 0.01193646, 0.038428962, 0.0052202283, 0.014795907, 0.017434428, 0.006062913, 0.009998599, 0.03042503, -0.01474541, 0.022938706, 0.029566566, -0.031561237, -0.00064897793, 0.01634872, -0.024112783, -0.030399783, 0.002706376, -0.0013760698, -0.041862823, -0.041761827, 0.0044091046, -0.025236364, 0.039060187, -0.003219246, -0.0036989767, -0.03143499, 0.0015031039, 0.009512557, -0.017434428, -0.0011006981, -0.047240857, -0.014253054, -0.02070417, 0.004869899, -0.014366674, -0.009941789, 0.04668538, -0.0032381827, -0.019277602, -0.032268208, 0.026107455, -0.006403775, 0.024693511, 0.02531211, 0.04961426, -0.00011194376, 0.019441722, -0.00044225183, -0.033606403, -0.014253054, 0.026082205, -0.00044264633, -0.031283498, 0.007372705, -0.013217846, 0.019391224, 0.0038694076, 0.04948802, 0.02694067, -0.025564602, 0.0012640274, -0.019315476, -0.028834345, 0.028253619, 0.041054856, 0.0031261405, 0.03416188, 0.0014944245, -0.016462341, 0.02045168, -0.047644842, 0.013003229, 0.013142099, -0.0256151, 0.009455746, 0.021953996, -0.015338761, 0.01637397, 0.0073916414, -0.0053180684, 0.030273538, 0.004907772, 0.0024144344, -0.009985975, 0.017939406, -0.027900133, 0.01205008, 0.014417172, -0.06615235, -0.016449716, 0.01637397, 0.026511438, 0.03769674, -0.0039167493, 0.0010044363, -0.011784965, 0.008609905, 0.011147428, -0.021587886, 0.0042292057, 0.0023229069]"
../../../gradio,../../../gradio/gradio/components,bar_plot.pyi,"""""""gr.BarPlot() component.""""""

from __future__ import annotations

from typing import Any, Callable, Literal

import altair as alt
import pandas as pd
from gradio_client.documentation import document, set_documentation_group

from gradio.components.plot import AltairPlot, AltairPlotData, Plot

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class BarPlot(Plot):
    """"""
    Creates a bar plot component to display data from a pandas DataFrame (as output). As this component does
    not accept user input, it is rarely used as an input component.

    Demos: bar_plot
    """"""

    data_model = AltairPlotData

    def __init__(
        self,
        value: pd.DataFrame | Callable | None = None,
        x: str | None = None,
        y: str | None = None,
        *,
        color: str | None = None,
        vertical: bool = True,
        group: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        group_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        y_lim: list[int] | None = None,
        caption: str | None = None,
        interactive: bool | None = True,
        label: str | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        every: float | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        sort: Literal[""x"", ""y"", ""-x"", ""-y""] | None = None,
        show_actions_button: bool = False,
    ):
        """"""
        Parameters:
            value: The pandas dataframe containing the data to display in a scatter plot. If a callable is provided, the function will be called whenever the app loads to set the initial value of the plot.
            x: Column corresponding to the x axis.
            y: Column corresponding to the y axis.
            color: The column to determine the bar color. Must be categorical (discrete values).
            vertical: If True, the bars will be displayed vertically. If False, the x and y axis will be switched, displaying the bars horizontally. Default is True.
            group: The column with which to split the overall plot into smaller subplots.
            title: The title to display on top of the chart.
            tooltip: The column (or list of columns) to display on the tooltip when a user hovers over a bar.
            x_title: The title given to the x axis. By default, uses the value of the x parameter.
            y_title: The title given to the y axis. By default, uses the value of the y parameter.
            x_label_angle: The angle (in degrees) of the x axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            y_label_angle: The angle (in degrees) of the y axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            color_legend_title: The title given to the color legend. By default, uses the value of color parameter.
            group_title: The label displayed on top of the subplot columns (or rows if vertical=True). Use an empty string to omit.
            color_legend_position: The position of the color legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            height: The height of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            y_lim: A tuple of list containing the limits for the y-axis, specified as [y_min, y_max].
            caption: The (optional) caption to display below the plot.
            interactive: Whether users should be able to interact with the plot by panning or zooming with their mouse or trackpad.
            label: The (optional) label to display on the top left corner of the plot.
            show_label: Whether the label should be displayed.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            visible: Whether the plot should be visible.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            sort: Specifies the sorting axis as either ""x"", ""y"", ""-x"" or ""-y"". If None, no sorting is applied.
            show_actions_button: Whether to show the actions button on the top right corner of the plot.
        """"""
        self.x = x
        self.y = y
        self.color = color
        self.vertical = vertical
        self.group = group
        self.group_title = group_title
        self.tooltip = tooltip
        self.title = title
        self.x_title = x_title
        self.y_title = y_title
        self.x_label_angle = x_label_angle
        self.y_label_angle = y_label_angle
        self.color_legend_title = color_legend_title
        self.group_title = group_title
        self.color_legend_position = color_legend_position
        self.y_lim = y_lim
        self.caption = caption
        self.interactive_chart = interactive
        self.width = width
        self.height = height
        self.sort = sort
        self.show_actions_button = show_actions_button
        super().__init__(
            value=value,
            label=label,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            every=every,
        )

    def get_block_name(self) -> str:
        return ""plot""

    @staticmethod
    def create_plot(
        value: pd.DataFrame,
        x: str,
        y: str,
        color: str | None = None,
        vertical: bool = True,
        group: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        group_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        y_lim: list[int] | None = None,
        interactive: bool | None = True,
        sort: Literal[""x"", ""y"", ""-x"", ""-y""] | None = None,
    ):
        """"""Helper for creating the bar plot.""""""
        import altair as alt

        interactive = True if interactive is None else interactive
        orientation = (
            {""field"": group, ""title"": group_title if group_title is not None else group}
            if group
            else {}
        )

        x_title = x_title or x
        y_title = y_title or y

        # If horizontal, switch x and y
        if not vertical:
            y, x = x, y
            x = f""sum({x}):Q""
            y_title, x_title = x_title, y_title
            orientation = {""row"": alt.Row(**orientation)} if orientation else {}  # type: ignore
            x_lim = y_lim
            y_lim = None
        else:
            y = f""sum({y}):Q""
            x_lim = None
            orientation = {""column"": alt.Column(**orientation)} if orientation else {}  # type: ignore

        encodings = dict(
            x=alt.X(
                x,  # type: ignore
                title=x_title,  # type: ignore
                scale=AltairPlot.create_scale(x_lim),  # type: ignore
                axis=alt.Axis(labelAngle=x_label_angle)
                if x_label_angle is not None
                else alt.Axis(),
                sort=sort if vertical and sort is not None else None,
            ),
            y=alt.Y(
                y,  # type: ignore
                title=y_title,  # type: ignore
                scale=AltairPlot.create_scale(y_lim),  # type: ignore
                axis=alt.Axis(labelAngle=y_label_angle)
                if y_label_angle is not None
                else alt.Axis(),
                sort=sort if not vertical and sort is not None else None,
            ),
            **orientation,
        )
        properties = {}
        if title:
            properties[""title""] = title
        if height:
            properties[""height""] = height
        if width:
            properties[""width""] = width

        if color:
            domain = value[color].unique().tolist()
            range_ = list(range(len(domain)))
            encodings[""color""] = {
                ""field"": color,
                ""type"": ""nominal"",
                ""scale"": {""domain"": domain, ""range"": range_},
                ""legend"": AltairPlot.create_legend(
                    position=color_legend_position, title=color_legend_title or color
                ),
            }

        if tooltip:
            encodings[""tooltip""] = tooltip  # type: ignore

        chart = (
            alt.Chart(value)  # type: ignore
            .mark_bar()  # type: ignore
            .encode(**encodings)
            .properties(background=""transparent"", **properties)
        )
        if interactive:
            chart = chart.interactive()

        return chart

    def preprocess(self, payload: AltairPlotData) -> AltairPlotData:
        """"""
        Parameters:
            payload: The data to display in a bar plot.
        Returns:
            (Rarely used) passes the data displayed in the bar plot as an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""bar"").
        """"""
        return payload

    def postprocess(self, value: pd.DataFrame | None) -> AltairPlotData | None:
        """"""
        Parameters:
            value: Expects a pandas DataFrame containing the data to display in the bar plot. The DataFrame should contain at least two columns, one for the x-axis (corresponding to this component's `x` argument) and one for the y-axis (corresponding to `y`).
        Returns:
            The data to display in a bar plot, in the form of an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""bar"").
        """"""
        # if None or update
        if value is None:
            return value
        if self.x is None or self.y is None:
            raise ValueError(""No value provided for required parameters `x` and `y`."")
        chart = self.create_plot(
            value=value,
            x=self.x,
            y=self.y,
            color=self.color,
            vertical=self.vertical,
            group=self.group,
            title=self.title,
            tooltip=self.tooltip,
            x_title=self.x_title,
            y_title=self.y_title,
            x_label_angle=self.x_label_angle,
            y_label_angle=self.y_label_angle,
            color_legend_title=self.color_legend_title,
            color_legend_position=self.color_legend_position,  # type: ignore
            group_title=self.group_title,
            y_lim=self.y_lim,
            interactive=self.interactive_chart,
            height=self.height,
            width=self.width,
            sort=self.sort,  # type: ignore
        )

        return AltairPlotData(type=""altair"", plot=chart.to_json(), chart=""bar"")

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        import pandas as pd

        return pd.DataFrame({self.x: [1, 2, 3], self.y: [4, 5, 6]})","The code defines a `BarPlot` component for displaying bar plots based on data from a pandas DataFrame. The component does not accept user input and is typically used as an output component. It uses Altair for creating the bar plots. The component has various parameters such as `value`, `x`, `y`, `color`, `vertical`, `group`, `title`, `tooltip`, `x_title`, `y_title`, `height`, `width`, and others to customize the appearance of the bar plot. The `create_plot` method generates the bar plot based on the provided parameters. The `preprocess` and `postprocess` methods handle the data processing and conversion to AltairPlotData format. The `example_value` method provides an example DataFrame for demonstration purposes.","[-0.064522944, -0.03044854, -0.0075247646, -0.015038608, 0.024288936, -0.016567588, -0.026844515, 0.008403928, 0.0084967585, -0.02117637, 0.022585215, -0.028067699, -0.014132141, -0.017484976, 0.0044886474, 0.007557528, -0.014350567, 0.021307424, -0.0040709083, 0.017233785, -0.00023344244, -0.025665017, -0.0066237585, 0.036717355, -0.006192368, -0.013389493, -0.01097589, 0.022257576, -0.04722363, 0.036018394, -0.019123167, -0.01581402, -0.021504007, 0.01497308, -0.0037214274, -0.024463676, 0.013160147, -0.017976433, 0.013433179, -0.021067156, 0.0070387674, 0.019210538, 0.0026525068, 0.02170059, -0.0068258024, 0.041195083, -0.037023153, 0.023087593, 0.017364841, 0.034751523, -0.030077215, -0.0023084863, 0.009031901, -0.044274885, -0.0048026345, 0.063168705, -0.060722336, 0.04117324, 0.0065145455, -0.020575698, 0.023611816, -0.018478813, -0.02712847, 0.035865497, -0.0711194, -0.002092791, -0.049058408, 0.018882899, -0.031103816, 0.034249146, 0.045650966, 0.025817914, -0.00065152283, 0.016818777, -0.017921826, -0.020684911, -0.022497844, -0.027106626, 0.013181989, 0.008720645, -0.018675394, 0.0089882165, -0.019712918, 0.01983305, 0.0051766885, -0.060416542, -0.019199617, 0.0013180624, 0.018446049, -0.013400415, 0.016742328, -0.04866524, -0.018304072, 0.05836334, 0.05028159, 0.09689363, -0.047529425, 0.027390579, 0.015409932, 0.002730321, 0.041981414, -0.021602299, 0.0018456969, -0.018740922, 0.0124175, -0.046349928, -0.044558838, -0.016611272, 0.024026824, 0.031890146, -0.017463133, -0.0041910424, -0.042243525, 0.037241578, -0.059411783, -0.0056190006, 0.030579595, -0.0025514849, 0.033550184, 0.00399992, -0.051242664, 0.022585215, 0.044558838, -0.030929076, 0.0013651605, -0.0037405395, -0.027237682, -0.06443557, -0.0072517325, -0.0031699026, 0.020826887, 0.0050265207, -0.04252748, -0.029531151, -0.0075684497, 0.030754335, -0.043357495, 0.00054947706, -0.021536771, 0.013400415, 0.019680154, 0.054912213, 0.046480983, -0.039797157, -0.04134798, -0.010746543, 0.017299313, -0.02092518, -0.03062328, 0.033615712, -0.020433722, 0.08557918, -0.0040790993, -0.046743095, -0.020870574, 0.023022067, 0.03770027, -0.037481844, 0.0006037422, -0.033375442, 0.020379115, -0.01557375, -0.025555804, 0.022388631, -0.02415788, -0.007617595, -0.008125435, 0.010610027, -0.034270987, -0.03230516, 0.0015207888, 0.004035414, -0.0062415134, -0.017233785, 0.058974933, -0.028722975, -0.01234105, 0.015016765, 0.031693567, -0.038661346, -0.01463452, -0.042745903, -0.05779543, -0.030666964, -0.03545049, -0.005935718, -0.011936963, 0.008753409, 0.010910362, 0.036302347, 0.04551991, 0.005335047, -0.016818777, 0.028548235, 0.0074319337, -0.02509711, 0.037984226, -0.0037924158, -0.012199074, 0.029290883, 0.017419448, 0.011205237, -0.02985879, 0.0067165894, 0.021067156, 0.010074885, -0.021842567, -0.01845697, -0.018446049, -0.016982596, 0.010620948, -0.015955996, 0.027499793, -0.006585534, -0.025643174, -0.021449402, -0.023415232, 0.010670094, 0.002713939, 0.0026647933, -0.0056626857, 0.007289957, 0.016545745, -0.02994616, -0.0008873543, -0.002850455, 0.062993966, -0.04490832, 0.009397765, -0.0069459365, 0.0042156153, -0.0078196395, 0.025927128, 0.018183937, -0.02712847, -0.009288551, -0.0049964874, -0.029137984, 0.034904424, -0.007579371, -0.012548555, -0.008038064, 0.014831103, 0.00018429666, 0.047704168, 0.03376861, -0.014754654, -0.07142519, 0.0031699026, 0.04626256, 0.006159604, -0.009709021, -0.008791633, -0.015420852, -0.03920741, -0.0078687845, -0.014710969, 0.0032190483, -0.030361168, -0.075138435, -0.023917612, -0.02518448, -0.057620693, -0.019199617, -0.017987354, 0.0019685614, 0.042068783, 0.038006067, -0.0505437, -0.005902954, 0.033484656, 0.040212166, 0.058669135, -0.0062906593, -0.024944212, -0.01786722, 0.035690755, 0.07125045, 0.0070060035, 0.024529204, -0.032370687, 0.02297838, 0.01744129, 0.020106083, 0.015289797, 0.012450263, 0.028875874, -0.017004438, -0.03455494, -0.016392848, 0.040255852, -0.036367875, 0.008316558, 0.022279419, 0.018489733, 0.024223408, 0.049276832, 0.011014114, 0.03582181, -0.02800217, 0.010304231, -0.01497308, -0.005640843, -0.04466805, 0.029880632, -0.0345331, 0.005859269, 0.053208493, -0.018882899, 0.033637553, 0.030645123, 0.0010197748, 0.029334567, -0.0093267765, -0.052946385, 0.034904424, 0.06281922, 0.035931025, -0.02315312, -0.049276832, -0.07911378, -0.020226218, 0.00357399, 0.0020695832, -0.0035330353, -0.032785695, -0.029028771, 0.013531471, 0.03516653, 0.0038087976, 0.020073319, -0.041741148, -0.028744819, 0.05914967, 0.01726655, -0.0126468465, -0.023349704, -0.04551991, -0.05744595, 0.0452578, -0.0023303288, -0.0019631006, -0.0030497685, 0.023174964, 0.020990707, -0.015617436, 0.0021569536, 0.012319208, 0.012199074, -0.0071698227, -0.053208493, -0.026473192, -0.016796933, -0.02177704, 0.0033528341, -0.038421076, -0.03770027, -0.04278959, -0.05836334, -0.010014817, -0.017080888, 0.00072899566, -0.01981121, -0.0032654637, 0.022071915, 0.02067399, -0.043750662, -0.045301486, 0.008578668, 0.020095162, -0.035931025, -0.023699185, -0.035712596, -0.012843429, 0.0043330193, -0.03955689, 0.024223408, -0.030492224, 0.002006786, -0.038158964, 0.003047038, -0.024463676, -0.02577423, 0.0063780295, -0.0020723136, -0.008349322, 0.051941626, 0.00030118853, 0.0053896536, 0.03029564, 0.011849592, -0.06334344, -0.063168705, 0.024223408, 0.0376129, -0.013717133, 0.02229034, 0.037831325, 0.041653775, -0.014012007, -0.041566405, -0.012963564, -0.00055493775, 0.005588967, -0.04348855, 0.011751302, 0.031234872, 0.03265464, 0.013105541, 0.04254932, 0.022519687, -0.066794574, 0.0029296344, -0.04626256, 0.050849497, -0.0036040237, -0.033965193, 0.0027699105, 0.010812071, 0.0236555, 0.012865272, -0.042964328, 0.0037214274, -0.028242439, -0.0301209, 0.03590918, 0.021558614, -0.013433179, -0.014394252, -0.02732505, 0.03759106, 0.030383011, 0.01998595, -0.008911767, -0.047791537, -0.045913078, -0.016239949, 0.035275746, 0.021427559, 0.041872203, -0.0031262175, -0.0019453537, -0.003958965, -0.002245689, -0.091127194, -0.013520549, 0.07256101, -0.005523439, -0.04145719, -0.009523359, -0.011014114, 0.0069077117, -0.02747795, 0.0036040237, 0.021088999, -0.018238544, -0.04490832, 0.0034511257, 0.010691937, 0.028613763, -0.014033849, 0.062426057, -0.046218872, 0.061421297, 0.0007569815, -0.03503548, 0.012919879, 0.02715031, 0.016447453, -0.047485743, 0.0023685533, 0.026080025, 0.069459364, -0.013498707, -0.02765269, -0.03479521, 0.021449402, -0.013192911, -0.0484905, -0.029531151, 0.04626256, 0.029596679, -0.02859192, 0.060329173, 0.054912213, 0.07928852, 0.009217563, -0.057314895, 0.005913875, -0.023196807, -0.04272406, -0.03794054, 0.0054251477, -0.00765582, 0.018773686, -0.0048790835, -0.08090487, -0.0015972378, 0.023109436, 0.00045084424, 0.035363115, 0.009982053, 0.020062398, 0.024660258, 0.022585215, -0.0035166533, 0.014852946, 0.019712918, -0.016807856, 0.03726342, -0.06600824, 0.01598876, 0.04560728, 0.006252435, -0.013465943, 0.036018394, -0.013891873, 0.0149512375, -8.097108e-05, -0.028067699, 0.007240811, 0.009556123, -0.023502603, -0.005684528, 0.016392848, 0.033288073, -0.005318665, -0.063168705, -0.019876737, -0.027958486, -0.018839214, 0.0027084784, -0.015682964, -0.0149512375, -0.04466805, -0.00054777064, 0.009130193, 0.045476224, -0.0141212195, -0.023611816, 0.022388631, 0.00082660466, 0.0030224652, -0.02732505, 0.02101255, -0.011434584, -0.01207894, 0.0021815265, 0.013891873, 0.06059128, 0.08239017, -0.019701995, -0.008879004, -0.0060613123, 0.013804503, 0.028460866, -0.009698099, -0.008240108, -0.01777985, -0.036717355, 0.02203915, 0.061377615, 0.019625546, 0.004756219, 0.01088852, 0.0003063079, -0.004076369, -0.018708158, -0.047704168, 0.021165447, -0.021405715, 0.0036886635, -0.0037323488, -0.02109992, -0.010642791, 0.014568992, 0.015082293, -0.01999687, -0.010134951, -0.0146126775, -0.011849592, 0.00765582, -0.014164905, -0.0020450104, -0.03258911, 0.0151041355, 0.013487785, 0.01829315, 0.021962702, -0.020193454, -0.04866524, -0.007350024, -0.054082196, 0.0051029697, -0.009375922, -0.010020277, -0.024267092, 0.0024709404, 0.020521091, 0.0025105302, 0.0074046305, -0.024529204, -0.019898579, 0.0033992496, -0.034860738, -0.015715728, 0.03516653, 0.06775565, -0.03352834, -0.0067056683, -0.0012457089, 0.018020118, -0.014623599, -0.023327861, -0.009348619, 0.018893821, 0.007683123, 0.025970813, 0.029225355, -0.045563597, -0.0062251315, -0.0051439246, -0.05460642, -0.0065636914, -0.011205237, 0.018500654, 0.01531164, -0.0034729682, -0.012297366, 0.05071844, -0.027499793, 0.018522497, 0.038508445, 0.04152272, 0.027193997, 0.004090021, 0.013061855, -0.006088616, -0.0006361648, -0.044646207, 0.00842031, 0.015693884, 0.02101255, 0.01335673, -0.017091809, -0.019920422, -0.023546288, 0.02612371, 0.021656906, -0.0034975412, 0.045214113, 0.015606514, 0.032043047, 0.0077377297, -0.028111383, -0.013913715, -0.007197126, 0.0031125657, -0.0010839374, 0.00902098, -0.028439023, 0.010686476, -0.0049473415, -0.04034322, -0.010741082, 0.043029856, 0.030142743, -0.016032444, 0.04425304, -0.006541849, 0.002025898, 0.037743956, -0.016403768, -0.005777359, -0.009152036, -0.039819, -0.011958806, -0.01965831, -0.005979403, 0.020215295, -0.013389493, 0.013662525, -0.025053425, 0.0022648012, 0.035668913, 0.013935558, 0.034926265, 0.010937666, -0.010539039, -0.03062328, 0.007857864, 0.01803104, 0.0048954654, 0.012013412, -0.016239949, 0.003300958, 0.029815104, 0.0045214114, 0.024747629, -0.016294556, -0.029509308, -0.0071752835, 0.022847325, -0.03140961, 0.0132912025, 0.029028771, -0.0065309275, 0.014710969, 0.025315536, -0.01828223, 0.009517899, -0.0031098356, -0.04831576, 0.019210538, -0.024267092, 0.013891873, 0.026691617, 0.04058349, -0.0071916655, 0.018675394, -0.04945157, -0.012100782, -0.076012135, -0.019297909, 0.0047125337, -0.004985566, 0.016032444, 0.036957625, 0.00842577, -0.0054087657, 0.013389493, -0.016491137, 0.036040235, -0.0019603705, -0.006405333, -0.0038142584, 0.008032604, 0.0011576561, -0.026363978, -0.00091329234, -0.015890468, 0.026931886, 0.0023617276, -0.012690532, 0.008529522, -0.033244386, -0.024966054, -0.026691617, 0.004357592, -0.008911767, 0.013280281, 0.005242216, 0.017299313, -0.014852946, -0.043423023, 0.01063187, -0.009152036, -0.04630624, 0.0017132764, 0.02014977, -0.018413285, -0.002738512, 0.019691074, -0.009386843, -0.046568353, -0.02926904, 0.052334793, -0.01804196, -0.0074155517, -0.010762925, -0.022891011, -0.020783203, -0.0038087976, -0.03521022, 0.017736165, 0.020794123, -0.000105032035, 0.0046470063, -0.009780009, -0.022432316, -0.0020477406, 0.01523519, -0.029137984, 0.0354068, 0.01795459, 0.014394252, -0.016829697, -0.013684369, -0.029028771, 0.003172633, -0.049538944, 0.0028095003, 0.020695832, -0.014842024, 0.03750369, -0.020400958, 0.009654415, -0.064959794, -0.028722975, 0.011008654, 0.010566342, -0.01615258, -0.04178483, 0.018708158, 0.014317803, -0.011041418, -0.017135493, -0.033921506, -0.0066128373, -0.027434265, 0.0059084143, 0.027936643, -0.036324188, 0.0014498004, -0.020269902, -0.03097276, 0.01234105, -0.044777263, 0.0018320454, 0.020390037, -0.032698322, -0.0045541753, -0.023721028, -0.005722753, 0.019232381, 0.009026441, 0.014448858, 0.02994616, -0.0052367556, -0.026953729, -0.02527185, 0.00040442878, 0.018664474, 0.022759955, 0.031081973, 0.030950919, -0.022694428, -0.024463676, -0.0049309595, -0.023393389, 0.0022306722, 0.043881718, -0.013116461, -0.04517043, 0.02800217, -0.037001308, 0.0032026665, -0.018271308, -0.002416334, 0.007786875, 0.04126061, -0.001982213, -0.0043193675, -0.03820265, -0.02756532, 0.010593645, -0.02102347, 0.001139909, 0.0132912025, 0.053208493, -0.015759412, -0.032567266, 0.002526912, -0.0037159668, -0.041566405, -0.05600434, -6.4791794e-07, -0.0420251, 0.0355597, 0.000944691, 0.013924637, -0.0033965192, -0.0010266007, 0.02126374, -0.012603161, -0.0098018525, -0.021121763, 0.03717605, -0.0050374423, -0.013007249, -0.002143302, -0.010877598, 0.018555261, -0.011035957, -0.00357399, -0.014022929, -0.017048124, 0.0037077758, 0.015377168, 0.005717292, -0.013957401, 0.03905451, 0.01182775, 0.021230975, 0.01880645, 0.012057097, 0.009992975, -0.013094619, -0.0048572407, 0.028307967, 0.029203512, 0.010724701, -0.004349401, -0.010304231, -0.010735622, -0.018402362, -0.024551045, -0.02994616, -0.041981414, -0.029662207, -0.024201564, -0.005651764, 0.020575698, 0.007956156, -0.012843429, 0.00314806, -0.0123082865, -0.019374358, -0.00038599913, 0.012734217, 0.023677344, -0.0074319337, 0.013891873, -0.0093103945, -0.021088999, 0.02629845, 0.0010600471, 0.023502603, -0.011303528, -0.0015521875, 0.019265145, 0.026735302, -0.003786955, -0.008229188, 0.0053377775, -0.014579914, -0.027041098, 0.008562286, 0.023174964, -0.0019603705, 0.009228485, 0.021853488, -0.004177391, -0.0116639305, 0.009927447, 0.010102187, 0.024725785, 0.020783203, 0.02509711, 0.034576785, 0.047354687, -0.03276385, 0.08544812, -0.0020463755, -0.043291967, 0.006388951, 0.011849592, 0.0038333705, 0.008622354, 0.02800217, -0.021809803, -0.02577423, 0.029968003, -0.0006518641, 0.019691074, -0.016960753, 0.027499793, -0.012526712, -0.009255788, 0.025577646, 0.007535686, -0.024856841, -0.0090045985, 0.027674533, -0.036040235, -0.024529204, 0.015464538, -0.013149225, -0.021165447, 0.033965193, 0.014820182, 0.022825483, 0.012330129, 0.03545049, -0.026691617, -0.0067984993, -0.04049612, 0.028963244, -0.004379435, 0.04145719, 0.010298771, -0.0015549178, 0.024376305, 0.040714547, 0.023043908, 0.011025036, 0.005875651, 0.032851223, 0.0141212195, -0.018009197, -0.0045923996, 0.020936102, 0.016207185, -0.014186747, -0.014863867, -0.0028231519, 0.025118953, -0.041719303, -0.010074885, 0.00075834664, 0.016239949, 0.0077977967, 0.0023521716, 0.003961696, -0.003027926, -0.03647709, -0.00029333885, 0.0034074406, -0.038486604, -0.038049754, -0.04244011, -0.006678365, -0.0036122145, 0.002858646, 0.009725403, 0.013640683, 4.1232113e-05, -0.030710649, 0.04348855, 0.035079163, 0.011177934, 0.017408526, 0.0033828677, -0.019964106, 0.036105763, 0.033659395, -0.014984001, 0.024703944, 0.005771898, 0.025927128, -0.01531164, -0.027936643, 0.016982596, 0.045083057, 0.019254223, 0.00859505, -0.0061814464, 0.009681718, 0.020826887, 0.022192048, 0.012865272, -0.015453616, -0.0028231519, 0.019581862, 0.010795689, 0.007923392, -0.007562989, -0.015955996, 0.03138777, 0.028701134, -0.010588185, -0.038486604, 0.026910042, -0.0034183618, -0.036105763, -0.002100982, 0.024529204, -0.0051166215, -0.005995785, 0.021471243, -0.014470701, 0.032894906, 0.022869168, -0.030666964, -0.020291746, 0.021722434, -0.032130416, -0.0052777105, 0.0024368113, -0.02433262, -0.025992654, 0.00790701, 0.0025432939, -0.031256713, 0.019691074, -0.006345266, -0.014164905, 0.014754654, 0.009343158, 0.0036395178, -0.032873064, 0.009070126, -0.009594347, -0.048097335, 0.011587482, 0.023895768, 0.018686317, 0.042287212, -0.017506817, -0.021110842, 0.0139683215, -0.0023630927, -0.011685774, -0.017157337, -0.037460003, 0.0023549017, 0.033244386, -0.021318346, -0.006432636, -0.010642791, 0.029705891, 0.04626256, -0.01122708, 0.0104789715, -0.0043603224, 0.009654415, 0.0067220503, 0.012351972, 0.03223963, -0.02747795, -0.0047971737, -0.004106403, -0.0026019958, -0.0011569735, 0.017059045, -0.00029931142, 0.028526394, -0.029509308, 0.007257193, 0.022519687, -0.0005904319, 0.007164362, -0.004406738, -0.014405173, 0.0080216825, 0.012919879, 0.0063015805, -0.022847325, -0.03558154, 0.0054497207, -0.010489893, 0.00876433, 0.017113652, 0.008644196, -0.012854351, -0.007623056, -0.002237498, 0.0376129, 0.007967076, -0.00012474153, 0.01122708, 0.04178483, 0.03726342, -0.004993757, 0.029684048, -0.019876737, 0.013979243, 0.010746543, 0.0028395338, -0.03346281, 0.013826345, 0.015388088, -0.0069732396, -0.008524062, 0.011003193, 0.048446815, -0.028395338, 0.00040169846, 0.012068018, 0.030950919, 0.0037651125, 0.015639279, -0.0021323806, -0.0046415455, 0.00017363134, -0.0139683215, 0.025490277, -0.006345266, -0.01812933, 0.01666588, -0.009840077, -0.022082835, 0.0045377933, -0.0038907074, -0.0065309275, 0.006279738, -0.0023549017, -0.010058503, 0.025708701, 0.015082293, 0.0001798599, 0.007360945, -0.0018115679, -0.036717355, 0.0104953535, -0.017113652, -0.02612371, 0.0066729044, 0.018664474, 0.017768929, 0.0002761037, 0.0022825482, -0.016753249, -0.010020277, 0.008458534, -0.01617442, 0.020597542, 0.035952866, -0.013269359, 0.0017050854, 0.0056790677, 0.021132683, -0.0045787483, -0.0036449784, -0.03341913, 0.022235734, -0.0008033969, 0.0032217787, 0.024966054, 0.017998276, 0.007612135, -0.014317803, 0.0011508303, 0.022891011, -0.021198211, 0.037569217, -0.028635606, -0.011270764, -0.03641156, 0.0029733195, 0.0014020198, -0.047835223, -0.039884526, -0.006481782, 0.023000224, -0.022344947, 0.023262335, 0.029290883, 0.0066892863, -0.009971132, 0.024136037, -0.016087051, 0.017201021, -0.008119974, 0.039338462, 0.05665962, 0.031955674, 0.00255285, -0.016043365, -0.018653553, -0.012570398, -0.029028771, 0.046218872, -0.00049145776, -0.027674533, -0.016196264, -0.046349928, 0.004174661, 0.004076369, -0.005837426, -0.0226289, 0.028111383, 0.01795459, 0.018751845, 0.01301817, -0.030732492, -0.053645346, 0.044711735, 0.022781799, 0.0059521, -0.021078078, 0.011123328, 0.013181989, 0.008114514, -0.031365927, -0.0019972296, -0.02629845, -0.021602299, -0.0057391347, 0.0048954654, -0.020783203, 0.0009289917, 0.0061814464, 0.0129308, -0.04449331, -0.01497308, -0.001076429, -0.050631072, 0.002791753, 0.022869168, -0.033877824, 0.04796628, 0.003047038, -0.0061377613, -0.0020777741, 0.020433722, 0.017768929, -0.020619383, 0.0011044148, 0.016261792, -0.023284176, -0.035319433, -0.050849497, -0.022334024, 0.030099059, 0.0138154235, -0.010577263, 0.003131678, -0.005711831, 0.021285582, -0.03413993, -0.0138154235, 0.022432316, -0.013203832, -0.027237682, -0.018074725, 0.015792176, -0.01692799, 0.0035111927, 0.0068039596, 0.01225368, 0.0430517, -0.042287212, 0.027412422, 0.015868625, 0.0015931423, -0.021034392, -0.0037405395, -0.002798579, 0.053645346, -0.012220916, 0.042614847, 0.046087816, -0.0068476447, -0.035363115, 0.0070333066, -0.03197752, 0.042068783, -0.0064380965, 0.004543254, 0.037460003, 0.0007836021, 0.04543254, 0.026342137, 0.0030934536, -0.002696192, 0.012625004, 0.023284176, 0.012898036, 0.04167562, 0.0069732396, 0.009523359, -0.029400095, -0.027412422, -0.0258616, 0.0010450303, 0.0204228, -0.006050391, -0.018850135, -0.028024014, 0.022650743, 0.024594732, -0.007770493, -0.014787418, 0.004330289, 0.03208673, -0.018402362, 0.06334344, 0.013771739, 0.0019344324, -0.02083781, -0.018325914, 0.0047889827, 0.020346351, -0.017889062, 0.02016069, 0.0055343607, -0.029968003, -0.008453074, -0.021132683, 0.037656587, -0.023524445, -0.0052886317, 0.027084783, 0.009894683, 0.042068783, 0.0088353185, -0.0029214434, -0.014929395, -0.042330895, -0.016349161, 0.021045314, -6.377859e-05, -0.02441999, 0.024703944, 0.006012167, -0.010795689, 0.023415232, 0.0152570335, 0.027215838, 0.0035767204, -0.0031289477, -0.012483027, -0.006585534, 0.009605269, 0.009785471, 0.0476168, -0.0068203416, -0.030907232, 0.003887977, -0.019407121, -0.0044968384, 0.03853029, -0.032851223, -0.0027849274, -0.0476168, 0.041369822, 0.00433848, 0.01488571, -0.020127926, 0.008502219, -0.005935718, 0.009856459, 0.01182775, 0.045301486, -0.0052094525, -0.008928149, 0.05250953, 0.028242439, -0.012745138, 0.02136203, 0.005924796, -0.0014675475, 0.012985406, -0.006110458, -0.0049446113, -0.00093035685, 0.008245569, 0.0034920804, 0.021842567, 0.014241354, 0.05250953, -0.0096325725, 0.0025828837, 0.026647933, 0.02544659, 0.0024941482, -0.00382791, 0.028220598, 0.011096024, -0.028133227, -0.0044476925, -0.0051684976, -0.018653553, 0.0010306961, -0.03588734, -0.022093756, 0.045782022, 0.024070509, 0.031256713, -0.02297838, 0.020444643, -0.004174661, 0.0037733035, -0.0039180107, -0.0032026665, -0.011090564, -0.005848347, -0.02994616, 0.018085646, 0.00289141, 0.021154527, 0.016349161, 0.0023521716, 0.027172154, -0.023415232, 0.0048763533, 0.010582724, 0.036127605, 0.016687721, -0.0026347598, -0.0061213793, 0.00037678427, -0.026407665, 0.0023753792, -0.004057257, -0.01174038, 0.005561664, 0.0041692, -0.010762925, -0.0023330592, 0.018020118, 0.007027846, -0.010063963, -0.01506045, -0.0069787004, 0.009790931, 0.014153983, 0.0029378254, 0.008393006, -0.049189463, -0.00081227045, 0.009184799, 0.0024859572, 0.04178483, -0.0067220503, 0.0010873503, 0.016436532, 0.03547233, -0.074439466, 0.004234728, -0.025402905, 0.0139683215, 0.010074885, -0.0033637553, -0.016873384, -0.038071595, 0.018740922, -0.010391601, -0.015093214, -0.01854434, -0.023546288, -0.025905285, -0.062557116, 0.0044941083, -0.006132301, -0.029902475, 0.03385598, 0.032152258, 0.00034862786, 0.007885166, -0.008660578, -0.024398148, -0.022738112, 0.007890628, -0.0022429586]"
../../../gradio,../../../gradio/gradio/components,label.py,"""""""gr.Label() component.""""""

from __future__ import annotations

import json
import operator
from pathlib import Path
from typing import Any, Callable, List, Optional, Union

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.data_classes import GradioModel
from gradio.events import Events


class LabelConfidence(GradioModel):
    label: Optional[Union[str, int, float]] = None
    confidence: Optional[float] = None


class LabelData(GradioModel):
    label: Optional[Union[str, int, float]] = None
    confidences: Optional[List[LabelConfidence]] = None


@document()
class Label(Component):
    """"""
    Displays a classification label, along with confidence scores of top categories, if provided. As this component does not
    accept user input, it is rarely used as an input component.

    Guides: image-classification-in-pytorch, image-classification-in-tensorflow, image-classification-with-vision-transformers
    """"""

    CONFIDENCES_KEY = ""confidences""
    data_model = LabelData
    EVENTS = [Events.change, Events.select]

    def __init__(
        self,
        value: dict[str, float] | str | float | Callable | None = None,
        *,
        num_top_classes: int | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        color: str | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show in the component. If a str or number is provided, simply displays the string or number. If a {Dict[str, float]} of classes and confidences is provided, displays the top class on top and the `num_top_classes` below, along with their confidence bars. If callable, the function will be called whenever the app loads to set the initial value of the component.
            num_top_classes: number of most confident classes to show.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            color: The background color of the label (either a valid css color name or hexadecimal string).
        """"""
        self.num_top_classes = num_top_classes
        self.color = color
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: LabelData | None
    ) -> dict[str, float] | str | int | float | None:
        """"""
        Parameters:
            payload: An instance of `LabelData` containing the label and confidences.
        Returns:
            Depending on the value, passes the label as a `str | int | float`, or the labels and confidences as a `dict[str, float]`.
        """"""
        if payload is None:
            return None
        if payload.confidences is None:
            return payload.label
        return {
            d[""label""]: d[""confidence""] for d in payload.model_dump()[""confidences""]
        }

    def postprocess(
        self, value: dict[str, float] | str | int | float | None
    ) -> LabelData | dict | None:
        """"""
        Parameters:
            value: Expects a `dict[str, float]` of classes and confidences, or `str` with just the class or an `int | float` for regression outputs, or a `str` path to a .json file containing a json dictionary in one of the preceding formats.
        Returns:
            Returns a `LabelData` object with the label and confidences, or a `dict` of the same format, or a `str` or `int` or `float` if the input was a single label.
        """"""
        if value is None or value == {}:
            return {}
        if isinstance(value, str) and value.endswith("".json"") and Path(value).exists():
            return LabelData(**json.loads(Path(value).read_text()))
        if isinstance(value, (str, float, int)):
            return LabelData(label=str(value))
        if isinstance(value, dict):
            if ""confidences"" in value and isinstance(value[""confidences""], dict):
                value = value[""confidences""]
                value = {c[""label""]: c[""confidence""] for c in value}
            sorted_pred = sorted(
                value.items(), key=operator.itemgetter(1), reverse=True
            )
            if self.num_top_classes is not None:
                sorted_pred = sorted_pred[: self.num_top_classes]
            return LabelData(
                label=sorted_pred[0][0],
                confidences=[
                    LabelConfidence(label=pred[0], confidence=pred[1])
                    for pred in sorted_pred
                ],
            )
        raise ValueError(
            ""The `Label` output interface expects one of: a string label, or an int label, a ""
            ""float label, or a dictionary whose keys are labels and values are confidences. ""
            f""Instead, got a {type(value)}""
        )

    def example_payload(self) -> Any:
        return {
            ""label"": ""Cat"",
            ""confidences"": [
                {""label"": ""cat"", ""confidence"": 0.9},
                {""label"": ""dog"", ""confidence"": 0.1},
            ],
        }

    def example_value(self) -> Any:
        return {""cat"": 0.9, ""dog"": 0.1}
","This code defines a `Label` component for displaying classification labels along with confidence scores of top categories. The component does not accept user input and is typically used as an output component. It includes parameters for customizing the appearance of the label, such as color, scale, visibility, and container settings. The component can display a single label or multiple labels with corresponding confidence scores. The `preprocess` method processes the input data, while the `postprocess` method formats the output data. The component also provides methods for generating example payloads and values.","[-0.014309165, 0.015363777, 0.04426973, 0.007388275, -0.021859227, -0.025118936, -0.03693538, 0.00052393536, -0.024975127, 0.025262747, 0.0017886456, -0.020157468, -0.052970275, -0.029217541, -0.0017227324, -0.011732557, 0.04096208, 0.026101643, 0.001975899, 0.016178705, -0.04985438, -0.042903528, 0.030056437, 0.017736653, -0.02430401, -0.0032657015, -0.034778222, 0.027084349, 0.028186899, 0.043862265, -7.059458e-05, -0.048008807, -0.027204191, 0.0011774502, 0.01994175, 0.02442385, 0.019953735, 0.013829796, -0.010594055, -0.0043382896, -0.059250012, 0.04673848, -0.033531863, 0.0030559774, -0.0031908, 0.004431167, -0.022614233, -0.006327671, -0.0071905353, 0.06308496, -0.053114086, 1.4617478e-05, -0.0060879863, 0.034394726, -0.0075979987, -0.0025106953, -0.061503045, 0.04654673, 0.012739232, -0.030487869, 0.027803402, -0.015807193, -0.012511531, 0.015974972, -0.026029738, -0.03976366, -0.031326763, -0.026700854, -0.011588746, -0.047577374, 0.057044912, -0.05042962, -0.01531584, 0.03127883, -0.025814021, -0.021859227, -0.032549158, 0.05738047, -0.0059411796, -0.0011767012, -0.021931132, 0.008592689, -0.013098759, -0.020660805, 0.0060670143, -0.004071641, -0.028091025, 0.0062317974, -0.05335377, -0.04455735, -0.0126793105, -0.014968297, -0.044653222, 0.0863823, -0.026029738, 0.025646243, -0.024735441, -0.02475941, 0.0017571871, -0.021140173, 0.020253342, 0.0021391842, -0.0038349521, -0.0047637294, 0.008406934, -0.035065845, -0.050956927, 0.009233845, 0.011558785, 0.005323992, -0.0064594974, 0.04568387, -0.06466688, 0.063180834, 0.0037780271, -0.027252128, 0.016130768, -0.010090718, -0.00082691154, -0.014680676, 0.0066752136, -0.018347848, -0.013901701, -0.031830102, -0.02583799, -0.011432951, 0.007975502, -0.05201154, -0.015124093, -0.040362872, -0.03571299, -0.014369086, 0.0025106953, -0.027707528, -0.046211172, 0.010618024, -0.03885286, -0.008305068, -0.04501275, 0.013769875, 0.04563593, -0.024783378, 0.014081465, -0.028234836, -0.01032441, -0.014956313, -0.049614694, 0.005039367, -0.08048606, 0.0031788158, 0.03573696, 0.042112567, -0.07765778, -0.011930296, -0.0013984093, 0.012703279, 0.030200249, -0.044749096, -0.0029705898, -0.037366815, 0.040003344, -0.01602291, 0.029816752, -0.022170817, -0.00052281184, 0.01225387, 0.022003038, -0.028091025, -0.046115298, 0.03801396, 0.013793844, 0.018156102, -0.0032177644, -0.078952074, -0.015555524, 0.047409594, 0.010000836, -0.008017447, 0.0022035995, -0.03712713, 0.014680676, 0.028881984, -0.04362258, -0.014081465, -0.0114868805, 0.0029406294, 0.013230585, -0.0049255164, 0.022110896, 0.029313415, -0.0026530079, -0.026916571, 0.0322136, 0.03480219, -0.011450928, 0.0028282772, 0.026293391, 0.0072025196, -0.031638354, -0.038876828, -0.0024312998, 0.007663912, 0.019833893, -0.024148215, 0.0046588676, 0.019354524, -0.07837684, -0.036120456, 0.020996362, -0.013266537, -0.0028507477, -0.008454871, 0.0479369, -0.007813715, -0.072336785, -0.037007287, -0.045875616, 0.03499394, 0.021715416, -0.01568735, -0.0026664902, 0.04870389, 0.038397457, -0.04985438, -0.034850128, 0.004506069, 0.04115383, -0.0037420744, 0.008215186, -0.022973761, 0.021691447, -0.020097546, 0.0091020195, 0.0077178413, -0.0022560304, -0.030344058, 0.024735441, -0.034706317, 0.050813116, -0.0108637, -0.024543693, 0.019666113, 0.009485515, -0.030655649, 0.081205115, 0.013482254, -0.04287956, -0.030775491, 0.04096208, 0.03513775, 0.035521243, 0.011618706, 0.026820697, -0.03604855, 0.0025781065, -0.002238054, 0.0025361618, 0.008532768, 0.06370814, -0.0077537936, -0.057620157, -0.058914453, -0.08091749, -0.026700854, -0.040746365, -0.018983014, 0.00913198, -0.016670058, -0.036432046, -0.019785956, -0.03681554, -0.029289447, 0.015076156, 0.03621633, -0.011864383, 0.021787321, 0.025262747, 0.082067974, -0.006285726, 0.01897103, -0.019186744, -0.0026275413, -0.018827219, 0.036695696, -0.0038529285, 0.013110743, -0.043287024, -0.05881858, 0.0009445068, -0.02646117, 0.066104986, 0.004077633, 0.02444782, 0.007064701, -0.0043772385, 0.018611502, 0.044940844, 0.013757891, -0.006926882, 0.0023219436, -0.03094327, -0.010186591, -0.0036012598, -0.036599826, 0.017628796, -0.02722816, 0.0058333217, -0.010881676, 0.019773971, -0.022422485, -0.010276473, 4.44259e-05, 0.03973969, 0.028546425, -0.036623795, 0.00062467775, 0.0014298679, 0.028858015, -0.0068250163, 0.022973761, -0.020684773, -0.0077478015, 0.05181979, 0.0008081862, 0.014896392, 0.002333928, -0.07478157, -0.0003509131, 0.03554521, 0.005737448, 0.03973969, 0.010965566, -0.009857025, 0.012499547, 0.037007287, -0.006968827, 0.0014088955, 0.03743872, -0.06250972, 0.045204498, -0.039619848, -0.023393208, -0.015136077, 0.01925865, 0.06394783, 0.0083230445, -0.028810078, 0.055415057, 0.014261228, -0.028977858, -0.027084349, -0.011804462, 0.053162023, -0.039116513, -0.0016643093, -0.017353158, -0.03276487, -0.021116205, -0.046354983, -0.0009190403, -0.022446454, -0.023680829, 0.0054528224, -0.008382966, 0.012415658, 0.0077178413, -0.04057859, -0.05148423, 0.057668094, -0.026221486, 0.025310684, 0.02583799, 0.0017496969, -0.04101002, -0.06730341, -0.047673248, 0.02430401, -0.020229373, -0.009251822, -0.0021511684, 0.07919176, -0.04160923, 0.010797787, 0.023237413, -0.0082811, 0.033843454, 0.018383801, 0.0061419155, -0.013338443, 0.018431738, 0.0076699043, -0.009581388, -0.04096208, -0.020385167, 0.028810078, 0.034250915, -0.014860439, 0.022782013, 0.029457226, 0.032069787, 0.00026215494, -0.01492036, -0.017880464, 0.027036412, -0.012715263, -0.0039757667, 0.037534595, -0.0011871873, 0.02050501, 0.05675729, 0.048368335, -0.015303856, 0.014620755, -0.0012261361, 0.0150162345, 0.01755689, 0.012307799, -0.01786848, -0.013889717, 0.02291384, 0.00788562, -0.026844665, 0.051196612, 0.00026159317, 0.018503644, 0.03559315, 0.072192974, -0.060831927, -0.02220677, -0.03310043, 0.014285197, 0.017544907, 0.011396999, -0.008640626, -0.011480888, -0.014093449, -0.019702066, 0.023525035, 0.002128698, 0.01191232, 0.020888506, -0.019845877, 0.012379705, -0.06974819, -0.0042544, -0.015303856, -0.049231198, -0.05800365, -0.035641085, -0.033052493, -0.019630162, 0.059777316, -0.05320996, 0.019378493, 0.006735135, -0.023764718, -0.022027006, -0.00657934, 0.035928708, -0.0019324564, 0.053497583, -0.0010388825, -0.0071605747, 0.03554521, -0.055942364, 0.025023062, 0.016226642, -0.016430372, 0.05023787, -0.018611502, 0.015699334, -0.0029690918, 0.033507895, -0.01032441, -0.02042112, 0.0014283699, -0.0012568457, -0.012799153, -0.029936595, -0.031063111, 0.023584956, 0.026844665, -0.032141693, -0.040434778, 0.022242723, 0.09136774, -0.014848455, -0.024735441, -0.0050723236, -0.0012351242, -0.013050822, -0.013518206, 0.07070693, -0.010683937, 0.020349214, -0.01707752, -0.021248031, -0.015267903, 0.022422485, -0.042016692, 0.05742841, 0.03293265, 0.01855158, 0.00456599, 0.002822285, 0.015447667, 0.0147885345, 0.011193266, 0.015423698, 0.006159892, 0.006327671, 0.015112109, 0.019630162, -0.028043088, -0.018299913, -0.02098438, -0.0080474075, 0.035760928, -0.033531863, 0.012978916, 0.008856342, 0.011474896, 0.014764566, -0.0019309584, -0.0371511, 0.010282465, -0.02782737, -0.057284597, -0.006483466, -0.014033528, -0.03278884, -0.04518053, 0.0027069368, 0.018994996, -0.06111955, 0.031830102, 0.0054678028, -0.03710316, -0.011355054, 0.006159892, -0.010168615, -0.0004909787, 0.021236047, -0.0014740598, 0.0062437817, 0.011474896, -0.003088934, -0.0050843074, 0.019138807, 0.0394281, -0.0026799724, -0.05134042, 0.05368933, -0.012703279, 0.0052221264, -0.0017152423, -0.0039038614, 0.0038109836, -0.019642146, -0.010779811, 0.029888658, -0.00092203636, 0.0072564483, 0.0344906, -0.0013916682, 0.019546272, 0.003721102, 0.016142752, 0.008221178, 0.019785956, -0.02677276, -0.0009242834, -0.01996572, -0.05249091, -0.012787169, 0.002122706, 0.00040746367, -0.057955716, 0.039260324, 0.00435327, 0.005563677, -0.014261228, -0.010875684, -0.04362258, -0.026101643, 1.8444473e-05, 0.026029738, -0.0004464124, -0.004889564, 0.009527459, -0.0161068, -0.044054013, 0.008305068, 0.0380619, -0.034442663, -0.026101643, 0.0015070164, -0.0032297487, -0.02197907, -0.015136077, -0.02459163, 0.002712929, -0.021511685, -0.012247878, -0.02251836, -0.011750533, 0.01934254, 0.02694054, -0.020684773, -0.005533716, -0.04673848, -0.021931132, -0.020253342, -0.06763897, 0.025238778, -0.024519725, 0.016274579, 0.009827065, 0.041681137, -0.02677276, -0.011067432, 0.020960411, 0.0029705898, -0.015663382, -0.00765792, 0.030344058, 0.01222391, -0.03250122, 0.0010396315, -0.008125305, 0.018923093, 0.04220844, 0.014321149, -0.0053479606, 0.022015022, 0.018839203, -0.018911108, 0.00796951, 0.024244089, -0.035257593, 0.024807347, 0.028282773, 0.013350427, -0.0072744247, 0.018515628, 0.00819721, 0.0065014423, 0.028091025, 0.027419908, 0.010869692, -0.02181129, -0.017628796, 0.005404886, -0.00041832437, -0.009910954, 0.01477655, -0.0029286451, 0.03451457, 0.008077368, 0.02311757, -0.051532168, 0.018455707, -0.012343752, -0.0044401553, -0.022686139, 0.041705105, -0.0080953445, -0.023501066, 0.03276487, 0.014848455, -0.060400497, 0.031446606, 0.008161258, -0.004583966, 0.01071989, -0.018983014, -0.013170663, -0.036767602, -0.01330249, 0.023956466, -0.02768356, 0.019642146, -0.04146542, -0.03542537, -0.003400524, -0.03326821, 0.009323727, 0.03096724, -0.0011894343, -0.01687379, -0.015747271, -0.0007587513, -0.019917782, 0.02266217, -0.009946907, 0.0030155308, -0.013518206, 0.021427795, 0.022015022, 0.012871058, -0.0015774237, -0.026125612, -0.03710316, -0.020528978, -0.0039607864, -0.018983014, -0.038948733, 0.025190841, 0.049998187, -0.010821756, -0.007178551, 0.011432951, -0.02336924, -0.033627737, -0.030823428, 0.006543387, -0.00082391547, 0.044821, 0.032381378, -0.0126793105, -0.048080713, 0.0141893225, -0.06250972, -0.042975433, 0.045108624, 0.01577124, -0.02152367, 0.015100124, -0.006001101, -0.016765932, 0.02753975, 0.010174607, -0.002278501, 0.01749697, -0.02374075, 0.022793997, -0.03377155, 0.0030350052, 0.0029001825, 0.007831691, -0.026173549, -0.0027938224, 0.02845055, -0.024903221, -0.0036312202, -0.021128189, -0.0047098007, 0.0051322444, -0.03326821, -0.05651761, -0.014333134, 0.007951533, 0.0059052273, -0.008251139, -0.00958738, -0.0028297752, 0.003136871, -0.013590111, 0.008191218, -0.0060700104, -0.015112109, 0.034107104, 0.0071605747, -0.01809618, -0.030559774, -0.028642299, 0.029672941, 0.017089505, -0.026700854, 0.00998286, -0.0045000766, -0.020720726, 0.005755424, -0.009557419, 0.014429008, -0.020097546, -0.0026260433, 0.004299341, -0.0224105, 0.041273672, -0.025478464, -0.028043088, 0.0077597857, -0.014141386, 0.0059921127, 0.02345313, -0.019150792, 0.014357102, 0.004260392, -0.020181436, -0.032381378, 0.038613174, 0.0049255164, -0.029049762, 0.027371971, 0.0150162345, 0.01994175, -0.058866516, -0.06111955, -0.010498181, -0.03252519, -0.011385014, -0.03451457, -0.0023713787, 0.013314474, -0.00799947, -0.0056235977, -0.035473306, -0.013877733, 0.0052341106, 0.04546815, 0.0032806818, -0.013434317, 0.0038948732, 0.0015332318, -0.019210713, -0.019630162, -0.0026739803, -0.032597095, -0.03727094, 0.0027353994, -0.028498488, -0.013973607, 0.018743329, 0.004398211, 0.0385173, 0.050046124, 0.0022215757, 0.050621368, 0.021092236, 0.012835105, 0.003187804, -0.012307799, 0.005752428, -0.003451457, 0.0017736653, 0.005485779, 0.01934254, 0.005680523, -0.037558563, -0.010606039, 0.015495603, 0.015207982, 0.0078257, 0.045995455, -0.029457226, -0.005036371, 0.019977704, -0.040362872, 0.051388357, 0.0026844665, 0.017197363, -0.009341704, -0.040314935, -0.023273366, -0.0007613728, 0.048152618, -0.0010179102, -0.009485515, 0.01809618, -0.01880325, -0.007693873, -0.015447667, -0.009940915, 0.028594362, -0.059154138, -0.01965413, 0.009024122, -0.0038019954, 0.00022152091, -0.0030335071, 0.011025487, 0.015172029, 0.031806134, 0.0031248867, -0.014524881, 0.019318571, 0.014452976, -0.029625006, 0.005599629, 0.050956927, 0.002497213, 0.041249704, -0.023261381, 0.008209194, -0.024615599, 0.028666267, 0.00055689196, 0.014093449, -0.0027758463, -0.009803097, -0.0024268057, 0.022470422, 0.012319784, 0.03139867, 0.016981648, -0.026053706, 0.029121667, -0.010540126, -0.023980435, 0.0068250163, -0.060879864, -0.017856495, 0.019845877, 0.00927579, 0.004107593, -0.029601038, -0.0052880393, -0.033292178, -0.031638354, 0.00079395494, -0.040602557, 0.0034304846, 0.019150792, 0.013674001, 0.04096208, 0.014584802, 0.0033675674, 0.03017628, 0.0017407087, -0.012703279, 0.014572818, 0.05479188, 0.010102702, -0.0089642005, -0.0061419155, 0.00064227957, 0.029025793, 0.03434679, 0.0022440462, 0.0124516105, 0.022338595, 0.023129554, -0.0011519836, -0.011642675, 0.00016431496, -0.0022050976, -0.013937654, 0.012307799, 0.005845306, -0.005809353, -0.01202617, -0.010641992, -0.0046918243, 0.0034784214, 0.008754477, 0.037318878, -0.0065853316, 0.027036412, -0.0020433103, 0.022817966, -0.0434548, 0.06322877, 0.039667785, -0.037031256, 0.016070846, 0.029433258, -0.026125612, 0.030559774, 0.02436393, -0.038876828, -0.008388958, 0.0068310085, -0.037223004, -0.0060939784, 0.0004363007, 0.0264372, -0.015459651, -0.04426973, 0.04379036, 0.017041568, -0.0074781566, 0.008802414, 0.010498181, 0.013805828, 0.002392351, -0.02433996, -0.052586783, 0.03295662, -0.029984532, 0.060831927, 0.030344058, 0.022997728, 0.0052940315, -0.023704797, -0.056949038, 0.02845055, 0.028594362, -0.00084413885, 0.014596786, 0.0077178413, 0.017053552, -0.0061838604, -0.021511685, 0.042639874, 0.01846769, -0.003984755, -0.0069568427, 0.0054198657, 0.008562729, -0.036887445, 0.013901701, 0.028091025, -0.014165354, -0.022182802, 0.027324034, 0.010228536, 0.005315004, -0.001803626, -0.0033316147, 0.014357102, -0.0031248867, 0.013578127, 0.014704645, -0.015879098, -0.026485138, -0.01917476, -0.015184013, -0.005902231, 0.0029451235, 0.0063037025, 0.008826382, -0.016682042, 0.045132592, -0.0006853479, -0.0038768968, 0.031063111, 0.0028522457, 0.03156645, 0.02938532, 0.00070557126, 7.1343595e-05, -0.011984225, -0.017365143, 0.0006052034, 0.037510626, -0.00414055, 0.06639261, 0.032740902, 0.0029061746, 0.00049809436, 0.008299076, 0.0015639414, 0.03465838, 0.0025346638, -0.051723916, -0.014440992, 0.029481195, 0.014021544, 0.028306741, 0.008221178, -0.02212288, -0.0029136648, 0.008754477, -0.006004097, -0.012571452, 0.013769875, -0.01080378, 0.043838296, 0.0059381835, -0.048512146, -0.003457449, 0.016945696, 0.0014785537, -0.02895389, -0.011672636, 0.022590265, -0.02799515, 0.03139867, 0.012331768, -0.014836471, 0.025023062, 0.028426582, -0.01477655, -0.029936595, 0.0045300373, -0.03324424, -0.025766084, 0.04503672, -0.025814021, -0.019546272, 0.03278884, 0.021535654, 0.010138655, 0.0024327978, -0.00033368578, -0.014129402, 0.010114687, -0.016058862, -0.019690081, -0.013314474, 0.05244297, 0.004158526, -0.012271847, -0.025957832, 0.042903528, 0.02938532, 0.06289321, -0.003085938, -0.018947061, 0.04343083, 0.019522304, -0.009761152, -0.03899667, -0.025742115, -0.022110896, -0.020145483, 0.021475732, 0.0097431755, -0.0124036735, 0.019102855, 0.013194632, 0.006525411, 0.004398211, 0.0102465125, 0.025909895, -0.010647984, -0.004628907, 0.008700548, -0.008976185, -0.0063935844, -0.021092236, -0.017065536, 0.0004988434, 0.010504173, -0.0038918771, 0.041585263, 0.042160504, 0.0048056743, 0.0031638355, -0.026892602, -0.015136077, 0.028714204, -0.034083135, -0.03849333, -0.01699363, -0.0028432575, -0.0111213615, -0.013578127, 0.007615975, -0.013590111, -0.022242723, -0.0055816527, -0.012583436, -0.0127632, 0.01965413, -0.022758044, 0.033507895, 0.00298557, -0.044964813, -0.021463748, 0.034370758, 0.0075620464, -0.001754191, 0.018192055, 0.023069633, 0.025070999, 0.029505163, 0.04623514, 0.00026384022, 0.0041285655, 0.021475732, -0.005368933, 0.017676732, -0.022422485, 0.0058662784, -0.031925976, 0.018659439, 0.012211925, 0.0058123493, -0.012667326, -0.021152157, 0.0035473306, -0.01477655, 0.011888351, -0.035784896, -0.0054917713, 0.0002659, -0.019450398, -0.013038837, 0.003024519, -0.034442663, 0.009119996, 0.0016118783, 0.0060190773, 0.018695392, -0.00201335, -0.0080534, 0.021991054, 0.049470883, 0.017820543, -0.021919148, 0.007987486, -0.016777916, 0.010833739, 0.0020403145, -0.036599826, 0.005851298, -0.0021137178, 0.009269798, -0.012122044, -0.009563412, -0.017820543, -0.0041675144, 0.02039715, 0.025334653, -0.032069787, -0.028330708, 0.026748791, -0.023644878, 0.02504703, 0.0046199188, -0.0053899055, -0.003508382, -0.015843146, 0.013038837, -0.0015654394, -0.024292026, -0.002551142, 0.004727777, -0.0018425747, 0.018791266, 0.0052580787, 0.030847397, 0.010042781, 0.022937808, 0.03372361, -0.010893661, 0.0007463925, -0.0075920066, -0.010486198, -0.032740902, -1.1861341e-05, -0.007502125, 0.0043382896, -0.050621368, -0.0010853214, 0.019750003, 0.010474213, 0.03636014, 0.0002203974, -0.0072624404, 0.0054648067, 0.010905645, 0.010090718, 0.04223241, -0.00020148479, 0.015351793, -0.034107104, -0.020840568, 0.0037630468, -0.019066902, 0.015195997, -0.008430903, 0.013877733, 0.0026215494, -0.027324034, 0.010444253, 0.004592954, 0.0042244396, -0.004302337, 0.0041225734, 0.013997575, 0.011528824, 0.004473112, -0.01855158, -0.033531863, 0.0052970275, 0.0015130085, 0.013506222, 0.0037151098, 0.016214658, 0.019750003, -0.0024657543, -0.026101643, 0.018359832, -0.017808558, -0.031111049, 0.004838631, 0.007550062, 0.017173395, -0.0034993938, -0.011894343, -0.0092398375, -0.0059112194, -0.024975127, 0.004946489, 0.004092613, -0.0012411163, 0.032549158, -0.008400942, 0.019306587, 0.039476037, 0.0012883042, 0.0115767615, -0.03818174, -0.013314474, -0.03513775, -0.03293265, 0.017437048, -0.0078257, -0.025622275, -0.041896854, -0.0092398375, 0.010378339, 0.011480888, -0.0053329803, 0.010570087, -0.015711319, -0.03959588, -0.023333287, 0.02475941, 0.0068429927, -0.01347027, -0.02436393, 0.008149274, 0.0046588676, -0.019642146, 0.006537395, 0.030439932, -0.005045359, 0.03374758, -0.014704645, 0.015207982, 0.0407943, 0.018144118, -0.012619389, -0.0036222322, -0.018371817, -0.002494217, 0.015279887, 0.012283831, -0.018623486, 0.0007917079, -0.004236424, -0.018503644, 0.009197893, 0.06236591, -0.0046948204, -0.0036881454, -0.011229219, -0.008442887, 0.068118334, 0.038109835, 0.007136606, 0.03559315, -0.007837683, 0.033052493, 0.0025062012, 0.012499547, -0.0065493793, 0.010540126, -0.016813869, 0.023381224, -0.022710107, 0.02160756, 0.01080378, 0.004625911, 0.0009392637, 0.004317317, 0.009084043, 0.019773971, 0.012175973, 0.026628949, -0.016741963, -0.0065493793, 0.0022740068, 0.022674154, 0.009647301, 0.029313415, -0.016094815, -0.012062123, 0.025742115, -0.0016882777, -0.014536865, 0.008305068, -0.035976645, 2.1662892e-05, -0.0074362117, -0.019690081, 0.04256797, 0.0048236507, 0.012367721, -0.027419908, 0.0026470157, 0.024040356, -0.020205405, -0.03638411, -0.0224105, -0.016885774, -0.013638048, 0.023393208, 0.009539443, -0.006219813, 0.014081465, 0.004266384, -0.03537743, -0.018311897, -0.0152918715, 0.0015190006, 0.01809618, -0.019761987, -0.009060075, 0.0011107879, 0.033459958, 0.04597149, -0.012966932, -0.026820697, -0.02614958, 0.03511378, -0.027348002, 0.0129070105, 0.0156514, 0.019474367, 0.0038169757, 0.0015489612, 0.03374758, -0.017101489, 0.033675674, -0.05320996, -0.020612868, -0.007292401, 0.031039143, -0.0020642828, 0.017473001, 0.016514262, -0.011978233, 0.023477098, -0.0026470157, 0.008904279, 0.033148367, 0.009221861, 0.013853764, 0.021391843, 0.016154736, -0.018539596, 0.06255766, -0.012571452, -0.0058572902, 0.016849821, -0.0017811555, 0.029361352, -0.005150221, 0.011474896, 0.00021290725, -0.002551142, 0.015711319, 0.0065194187, -0.012074107, -0.042088598, -0.0060760025, 0.041033987, 0.01755689, 0.023057649, -0.03681554, -0.01732919, -0.004317317, -0.0031578434, 0.012918995, -0.01369797, -0.038972702, -0.006645253, -0.030991206, -0.03307646, -0.016286563, 0.010030797, -0.007052717, -0.014452976, 0.0008141783, -0.013014869, 0.013937654, -0.012271847, -0.021128189, -0.009875001, 0.020493025, 0.014680676, -0.05249091, 0.038157772, 0.009970875, 0.035689022, -0.0063096946, 0.036623795, 0.022326611, 0.02249439, 0.01965413, 0.03465838, -0.0063396553, -0.022710107, 0.030679617, -0.046139266, 0.0030559774, 0.02382464, 0.008802414, -0.008976185, -0.022686139, 0.0076399436, -0.013638048, -0.0045330334, 0.0060999705, -0.0035233623, 0.004149538, 0.01957024, 0.011337077, 0.03602458, 0.012739232, -0.03307646, -0.022182802, -0.002918159, 0.01523195, 0.0012553476, 0.00935968, -0.022734076, 0.0063156867, 0.0034364767, -0.042328283, 0.023860592, 0.0035263584, 0.006699182, 0.00839495, 0.017425064, 0.00138268, -0.0036042558, 0.01863547, -0.0689812, 0.0016073842, 8.220429e-05, 0.018216023, 0.019150792, -0.036336172, 0.017820543, -0.025502432, -0.005854294, -0.0073942672, 0.010270481, 0.02056493, -0.015867114]"
../../../gradio,../../../gradio/gradio/components,markdown.pyi,"""""""gr.Markdown() component.""""""

from __future__ import annotations

import inspect
from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Markdown(Component):
    """"""
    Used to render arbitrary Markdown output. Can also render latex enclosed by dollar signs. As this component does not accept user input,
    it is rarely used as an input component.

    Demos: blocks_hello, blocks_kinematics
    Guides: key-features
    """"""

    EVENTS = [Events.change]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        rtl: bool = False,
        latex_delimiters: list[dict[str, str | bool]] | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        sanitize_html: bool = True,
        line_breaks: bool = False,
        header_links: bool = False,
    ):
        """"""
        Parameters:
            value: Value to show in Markdown component. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Is used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: This parameter has no effect.
            rtl: If True, sets the direction of the rendered text to right-to-left. Default is False, which renders text left-to-right.
            latex_delimiters: A list of dicts of the form {""left"": open delimiter (str), ""right"": close delimiter (str), ""display"": whether to display in newline (bool)} that will be used to render LaTeX expressions. If not provided, `latex_delimiters` is set to `[{ ""left"": ""$$"", ""right"": ""$$"", ""display"": True }]`, so only expressions enclosed in $$ delimiters will be rendered as LaTeX, and in a new line. Pass in an empty list to disable LaTeX rendering. For more information, see the [KaTeX documentation](https://katex.org/docs/autorender.html).
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            sanitize_html: If False, will disable HTML sanitization when converted from markdown. This is not recommended, as it can lead to security vulnerabilities.
            line_breaks: If True, will enable Github-flavored Markdown line breaks in chatbot messages. If False (default), single new lines will be ignored.
            header_links: If True, will automatically create anchors for headings, displaying a link icon on hover.
        """"""
        self.rtl = rtl
        if latex_delimiters is None:
            latex_delimiters = [{""left"": ""$$"", ""right"": ""$$"", ""display"": True}]
        self.latex_delimiters = latex_delimiters
        self.sanitize_html = sanitize_html
        self.line_breaks = line_breaks
        self.header_links = header_links

        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: the `str` of Markdown corresponding to the displayed value.
        Returns:
            Passes the `str` of Markdown corresponding to the displayed value.
        """"""
        return payload

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a valid `str` that can be rendered as Markdown.
        Returns:
            The same `str` as the input, but with leading and trailing whitespace removed.
        """"""
        if value is None:
            return None
        unindented_y = inspect.cleandoc(value)
        return unindented_y

    def example_payload(self) -> Any:
        return ""# Hello!""

    def example_value(self) -> Any:
        return ""# Hello!""

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Markdown` component in Gradio, which is used to render arbitrary Markdown output. It can also render LaTeX enclosed by dollar signs. The component does not accept user input and is rarely used as an input component. The component has various parameters such as `value`, `label`, `every`, `show_label`, `rtl`, `latex_delimiters`, `visible`, `elem_id`, `elem_classes`, `render`, `sanitize_html`, `line_breaks`, and `header_links`. The component provides methods for preprocessing, postprocessing, example payload and value, API information, and handling change events.","[-0.05450874, 0.026862925, 0.013027784, -0.0021881172, 0.0073579457, -0.014911614, -0.02358457, -0.0011965072, -0.0082203485, -0.00573406, 0.010544554, 0.018605879, -0.04785417, 0.0036025187, 0.016905539, -0.021382691, -0.026495945, -0.009388568, 0.022055488, 0.04555443, 0.01171889, -0.02335215, 0.011309096, 0.06634995, 0.0017798522, -0.016477395, -0.064979896, 0.025639659, 0.034129124, 0.029847695, -0.019364303, -0.050300702, 0.028110655, 0.01050174, -0.0019281732, -0.048221152, 0.026006639, -0.01055067, 0.0022278735, -0.0018456028, -0.039976336, -0.02417174, -0.027596883, 0.016440697, -0.013553789, 0.020024866, -0.009388568, 0.022875076, 0.044135444, 0.040563505, -0.020245055, 0.007657646, -0.02500356, 0.0025199282, -0.034496106, -0.0090460535, -0.059597526, 0.043695066, 0.049371023, -0.043010037, 0.016624186, -0.049958188, -0.024758907, 0.03806804, -0.04660644, -0.02100348, -0.051230386, -0.01365165, 0.01847132, -0.0053303824, 0.05837426, -0.018397924, 0.0077004605, -0.034031264, -0.027180973, -0.02458765, -0.05230686, -0.031095425, -0.000730137, 0.0053303824, 0.034226988, 0.02505249, -0.101090714, -0.035401322, 0.0030642818, 0.0026177894, -0.012526245, 0.008819749, -0.036453333, -0.034642898, -0.054166224, -0.016477395, -0.03723622, 0.06967724, -0.008367141, 0.029456249, -0.06277802, -0.0024312416, 0.020550871, 0.0068135923, 0.028232982, -0.024905698, -0.035401322, -0.050936803, 0.048979577, -0.017774057, 0.0016116531, 0.023401082, -0.002810454, -0.0061836103, -0.03253888, 0.029284991, -0.051866483, 0.0070949434, -0.013431462, -0.04944442, 0.011896263, -0.013578254, -0.03567044, -0.015657807, -0.029798763, 0.0027217672, -0.0038135322, -0.027083112, -0.0033364585, -0.01847132, 0.018238898, -0.018764902, -0.03138901, 0.012599641, -0.012226545, 0.008807517, -0.02757242, -0.073102385, -0.018459085, 0.034985412, -0.05299189, -0.02288731, -0.017150192, 0.031584732, 0.012978854, -0.01598809, 0.027156508, 0.0051163104, -0.01681991, -0.03975615, -0.02026952, -0.016440697, -0.036159746, -0.043328088, -0.022349073, 0.055829868, -0.060429346, -0.016281672, 0.027058646, -0.007657646, 0.04117514, -0.028086191, 0.015144035, -0.023450011, 0.009339637, 0.038435023, 0.011920729, 0.0062937043, -0.008691306, 0.017296983, 0.011174536, 0.016465163, -0.033493027, 0.045994807, -0.01438561, -0.024599882, -0.01548655, -0.032612275, -0.031633664, -0.02918713, -0.010960464, -0.039951872, 0.01365165, 0.0062050177, -0.0053793127, 0.037260685, -0.0339334, 0.043254692, -0.010428344, -0.021480553, -0.011333561, -0.025248213, -0.016954469, 0.030018952, 0.022312375, -0.022410236, 0.036159746, 0.0057829907, 0.0058380375, -0.039609358, 0.044991728, -0.04188463, -0.0069970824, -0.009547592, 0.021529485, 0.040857088, 0.015327524, -0.0038961025, -0.018459085, 0.029162664, -0.05739565, -0.08195883, 0.003422087, -0.035009876, 0.00983506, 0.036453333, 0.013920769, -0.010532321, -0.038581815, -0.012660804, -0.022826146, 0.012422267, 0.019364303, -0.018495783, -0.049248695, 0.037725527, -0.011951311, -0.011541516, 0.024330763, -0.004385409, 0.052208997, -0.04467368, 0.023107497, 0.02045301, 0.071781255, -0.02583538, -0.013969699, -0.0039450335, 0.030826306, -0.027939398, -0.026887389, -0.031878315, 0.03075291, 0.034593966, -0.0056606643, -0.015107336, 0.044991728, -0.022813914, 0.048147757, 0.05695527, -0.039266843, -0.054998044, 0.029945554, 0.04707128, -0.0058502704, 0.012538478, 0.010942115, -0.0026407258, -0.022997404, 0.03567044, -0.014728124, 0.064833105, 0.0022034082, -0.017284751, -0.0121776145, -0.029333921, -0.04462475, 0.03469183, -0.013052249, 0.034642898, -0.028208517, 0.023083031, 0.031609196, -0.011254049, 0.0119818915, 0.011810634, 0.015315292, 0.032098502, 0.01971905, -0.024734441, 0.03924238, 0.045994807, -0.016379533, 0.04959121, -0.03373768, -0.006042935, 0.010299901, 0.026960786, -0.034496106, 0.017431542, 0.060820792, -0.008312093, 0.009039937, -0.020024866, 0.06840504, 0.0037584852, 0.07231949, -0.040881556, -0.014189887, -0.01613488, 0.050080515, 0.007957346, 0.022324607, -0.023755828, 0.0016697582, 0.0043731765, 0.008636259, -0.038288232, 0.012550711, 0.011088908, 0.0033364585, 0.0132235065, -0.011131722, -0.007547552, 0.022287909, 0.025248213, -0.008116371, -0.021627346, -0.06586065, 0.014899381, 0.018642576, 0.03963382, 0.026177896, -0.041444257, 0.035817232, 0.018030943, 0.048808318, -0.033860005, -0.038043577, -0.019315373, -0.044747077, -0.018300062, -0.02615343, -0.022593725, 0.06542027, 0.026349153, -0.0057585253, 0.039707217, 0.029089268, -0.013798442, -0.014764822, 0.03552365, -0.049371023, 0.021553949, -0.017125726, -0.058765706, 0.02855103, 0.04220268, -0.006269239, -0.01378621, -0.045334242, 0.0012255597, 0.003275295, -0.02955411, -0.036453333, -0.039120052, 0.011725006, -0.0400742, 0.046092667, -0.03723622, -0.00047248654, -0.054264087, -0.031609196, -0.032905858, -0.020416312, 0.027034182, -0.03652673, 0.02678953, 0.015694505, -0.0013127174, -0.047927566, -0.03268567, 0.025859846, -0.053921573, 0.0056637223, 0.0035260646, -0.016734282, 0.0017966721, -0.039707217, -0.00831821, 0.013541556, -0.02997002, -0.03765213, -0.027694745, 0.026398083, -0.02146832, -0.010764742, 0.033811077, 0.012165382, 0.0076454133, 0.0111439545, 0.009376335, 0.015670039, 0.02683846, 0.008477234, 0.0065261247, -0.04389079, 0.0014166951, 0.0075597847, 0.026618272, 0.018116571, 0.032783534, 0.030214673, 0.01898509, 0.015926925, -0.001155222, -0.021174736, 0.038532883, 0.027596883, 0.009737198, 0.024795605, 0.018899461, 0.0031499104, -0.032049574, 0.029284991, 0.032930326, 0.021333762, -0.0023777236, 0.0358417, -0.03652673, 0.03170706, -0.032930326, 0.040710296, 0.027083112, 0.0025765044, -0.04665537, -0.0056698387, -0.052062206, -0.010825905, 0.03300372, 0.037994646, -0.007859485, 0.002386898, -0.05739565, -0.026911855, 0.029700901, 0.0455055, 0.000981671, 0.021749672, -0.020232823, -0.010648532, 0.043107897, 0.022361305, 0.0115354, -0.02026952, -5.122427e-05, -0.025443936, 0.00873412, -0.059597526, 0.023388848, 0.016293906, -0.012526245, -0.012030822, -0.031682592, 0.007975696, 0.012709735, -0.018226666, -0.037113894, 0.018263364, 0.019731283, 0.038826466, 0.017810754, 0.039951872, -0.018141037, 0.0025092247, 0.0052049975, -0.030239139, 0.03735855, -0.031829383, -0.0058533284, 0.046802163, 0.004553608, 0.020465242, 0.019865843, 0.007926765, 0.022006558, 0.0042936644, 0.00923566, -0.03735855, 0.0036147514, -0.0035535882, -0.016844375, -0.00916838, -0.025517331, -0.02652041, -0.006281472, 0.01080144, -0.04650858, -0.02348671, 0.12839401, -0.022373538, -0.03975615, 0.004590306, -0.034814153, 0.032783534, -0.0033762145, -0.010862604, -0.01128463, 0.03442271, 0.015437619, -0.03562151, -0.0010030782, 0.015046174, -0.06899221, -0.012758666, -0.009547592, 0.008972657, 0.059499666, 0.024795605, 0.0076821116, 0.05543842, 0.002255397, 0.03170706, 0.023939319, -0.030557187, -0.031364545, 0.010116411, -0.02105241, 0.021125806, -0.04775631, -0.038435023, 0.010403878, -0.059499666, 0.03718729, 0.017443774, 0.004978693, -0.01686884, -0.023731364, -0.012954389, 0.009620988, 0.036477797, -0.0144712385, 0.0113457935, -0.004997042, -0.0030291127, -0.020526405, -0.015192965, 0.047536124, -0.050545357, -0.021676276, -0.022630423, -0.01981691, 0.00074848597, -0.023731364, 0.032025106, 0.011706657, 0.017859686, -0.015865762, -0.0048441337, 0.023890387, -0.0075781336, -0.03148687, 0.013578254, 0.039315775, 0.04168891, -0.034080196, 0.015462084, -0.03625761, 0.00643438, 0.007633181, 0.0009778484, 0.013553789, -0.028306378, 0.0004040601, 0.00046598795, 0.0128075965, 0.016648652, 0.044942796, -0.0065077757, -0.03038593, 0.0019556968, -0.025395006, -0.028257448, 0.008899261, 0.008465001, -0.0013073657, -0.0026300221, 0.032710135, 0.00046675248, -0.026055569, 0.030092347, -0.0105139725, 0.03258781, -0.0006517715, 0.0047462727, -0.0025183992, -0.008458885, -0.03368875, -0.055683076, 0.006893105, 0.029798763, 0.0012530832, -0.03965829, -0.028306378, -0.026422549, 0.02955411, 0.0098839905, 0.05010498, -0.020440778, 0.0188016, 0.009853409, 0.010526205, -8.429068e-05, -0.004241675, 0.016978934, -0.021443855, 0.0021177796, 0.005165241, 0.017211355, 0.006012353, 0.012991087, 0.0018394864, -0.054851253, -0.02223898, -0.0376766, 0.029113734, -0.046777695, -0.052111138, -0.03038593, 0.024379695, 0.005070438, 0.028746754, 0.029284991, -0.029431783, 0.008061324, 0.019927006, 0.04132193, -0.041028347, -0.0018043176, 0.051132526, -0.0029358387, -0.027156508, 0.021774137, 0.01990254, 0.017859686, 0.010599601, 0.04748719, -0.024795605, 0.010000201, -0.017162424, 0.005278393, -0.024049412, -0.0018440738, -0.045432106, 0.010489508, 0.014459006, 0.02803726, 0.0085017, 0.013969699, -0.012189847, 0.0059787133, 0.018642576, 0.04990926, -0.009107216, 0.018605879, 0.020232823, 0.0006009295, 0.006954268, -0.014092026, 0.0035688789, -0.027327765, -0.0065200087, 0.011419189, 0.018899461, -0.010697463, 0.010409995, -0.013272437, 0.009743315, -0.025859846, 0.052894026, 0.014825986, -0.010887069, -0.005162183, 0.041297466, -0.0394381, 0.021553949, -0.024440857, 0.0062417155, 0.04178677, -0.008275395, 0.0009503249, -0.03442271, -0.0047004, 0.013957467, -0.04692449, 0.00016361184, -0.058863565, -0.027229905, -0.013406997, -0.023205359, 0.0038808119, 0.023046333, 0.018128805, -0.026128964, -0.012844294, 0.013798442, -0.0015948332, 0.008935959, 0.0033364585, 0.05304082, 0.022226745, 0.026128964, 0.059548594, -0.030679515, 0.020232823, 0.007180572, -0.02151725, 0.009186729, 0.010146992, -0.0039113937, -0.0019908657, 0.011565981, 0.033199444, -0.010067481, 0.009926804, 0.035034344, 0.011376375, -0.026080035, -0.015657807, -0.003180492, 0.008978774, 0.007981812, 0.0016774037, -0.015364223, -0.0077799726, -0.008568979, -0.048465803, -0.023792526, 0.0056147915, -0.04215375, -0.011364142, -0.0090582855, -0.02491793, -0.021823067, -0.011853449, -0.0082203485, 0.031217752, 0.00092356594, -0.0001844456, 0.0515729, -0.005030682, -0.038704142, 0.0068380577, -0.0035627626, 0.013896303, 0.015572178, 0.0033578656, -0.032710135, 0.013761744, -0.018789368, 0.036379933, -0.008911494, -0.014287748, 0.0065077757, -0.014263283, 0.008935959, 0.019682351, 0.019755749, -0.035425786, -0.020342916, 0.009290706, -0.0032997604, -0.04362167, -0.0097005, -0.011009395, 0.040294386, -0.0047218073, 0.0048777736, 0.008954308, -0.042080354, 0.042080354, 0.0038196484, 0.00045948935, 0.025248213, 0.01958449, -0.0092540085, -0.008202, -0.026226826, 0.04545657, -0.012697503, -0.02196986, 0.004345653, 0.0025413353, 0.0151685, 0.0041376976, 0.0033089349, 0.040416714, -0.017761825, 0.0430345, 0.009724966, -0.013394765, 0.0040245457, -0.012299941, -0.035866164, -0.030899704, -0.016526325, 0.017248053, -0.012244894, 0.019523328, 0.019107416, 0.042349473, -0.064979896, -0.032196365, 0.021774137, -0.0333707, -0.029994486, -0.018911695, 0.016563024, 0.016379533, 0.05465553, -0.034324847, -0.0340068, -0.016587488, -0.0014939138, -0.005070438, -0.011437538, -0.026177896, 0.036722448, -0.01055067, 0.0027875176, -0.00017718246, 0.026275756, -0.028697824, -0.0050429148, -0.028330844, 0.0030092348, -0.011101141, 0.009541476, 0.0044007, 0.035817232, 0.044257767, 0.031584732, 0.014226586, -0.02058757, 0.0011903909, 0.0068502906, 0.0028073958, 0.034960948, 0.0038410558, 0.039266843, -0.028722288, 0.047903102, -0.014483471, -0.033884473, 0.020379614, -0.00067585456, 0.019682351, 0.01105221, 0.028599963, -0.035278995, -0.021798603, -0.008354908, -0.014361144, 0.004223326, -0.030459328, 0.035009876, -0.022544796, -0.034716293, 0.021505019, -0.00023394964, 0.023156429, 0.019975936, -0.024208438, 0.052062206, -0.03694264, -0.00673408, -0.021920929, 0.031022029, -0.007394644, -0.073102385, -0.020612035, 0.027009716, 0.024856769, 0.0065872883, -0.009205078, -7.382602e-05, -0.0060551674, -0.027596883, -0.024685511, -0.007938997, -0.0038716374, -0.012006357, -0.03442271, -0.019193046, 0.02578645, 0.021345994, 0.0467043, -0.0013792326, 0.006061284, -0.025040258, 0.010495624, -0.010599601, -0.035230067, 0.0055964426, -0.0031927247, -0.0010160755, -0.013162344, 0.016991166, 0.018177735, 0.043425947, -0.025321608, 0.009663803, 0.009816711, -0.0063365186, -0.0080123935, -0.020000402, -0.006721847, -0.044942796, -0.031095425, -0.0002849828, -0.009498661, 0.00958429, -0.020930083, -0.013382532, 0.010385529, -0.028844615, 0.024428625, 0.03938917, -0.0036392168, -0.016342836, 0.005847212, -0.0061683194, -0.005293684, 0.005211114, -0.018520249, -0.0049114134, 0.026911855, -0.0064771944, 0.012140917, 0.013370299, 0.012244894, 0.046166062, 0.008202, -0.023450011, 0.029994486, 0.02955411, -0.0010099591, 0.013957467, 0.05313868, -0.043743998, 0.006269239, -0.0040428946, 0.009382451, 0.0077616237, 0.008636259, -0.036184214, 0.009094983, -0.030410396, 0.024306297, -0.03897326, -0.021700742, 0.012783132, 0.0045291428, 0.0009931392, -0.030018952, 0.041566584, 0.053530127, 0.0050949035, -0.064637385, 0.020012634, -0.006440496, -0.019290907, 0.0140430955, -0.0034801923, -0.08024626, -0.008948192, -0.00011735709, 0.0037982413, -0.012758666, -0.012893225, 0.0100919455, -0.018581413, 0.02160288, 0.042985573, 0.011957427, 0.0034832503, 0.002755407, 0.017321449, -0.022997404, 0.012538478, -0.015841296, -0.027132044, 0.036184214, 0.021076875, 0.012165382, 0.02683846, -0.004804378, 0.028624428, -0.07055799, -0.04530978, 0.0060674, -0.0020841397, 0.02992109, 0.01870374, -0.029113734, 0.008391606, -0.0040459526, 0.012495664, 0.036746915, 0.02882015, 0.021309296, 0.006061284, 0.04320576, 0.010703579, -0.04655751, 0.016881073, -0.0073090154, -0.029945554, 0.016440697, 0.010446693, 0.056319173, -0.016709816, -0.0056147915, -0.029945554, 0.008746353, 0.00806744, 0.026251292, -0.02422067, 0.03860628, -0.015621109, -0.030508257, -0.014434541, -0.011492586, 0.015462084, -0.0020229763, -0.00253369, 0.020024866, -0.0063732164, -0.025028026, 0.008978774, 0.012140917, 0.0007706577, -0.000130641, -0.001665171, -0.00923566, 0.005119369, -0.017627265, -0.004177454, -0.033077117, 0.019657888, 0.009076634, 0.005685129, -8.500744e-05, 0.03226976, -0.02541947, -0.01930314, 0.010263203, 0.015315292, 0.041713376, -0.02652041, -0.003938917, -0.0001244291, -0.010189807, 0.044429027, 0.007364062, 0.00898489, 0.025321608, 0.031046495, -0.026031103, 0.009920688, -0.017443774, -0.0018394864, -0.0031896664, 0.023278754, -0.02583538, 0.0016911654, 0.01911965, -0.03395787, -0.018324526, 0.010079713, 0.0020826105, -0.00057149463, 0.03300372, 0.0046881675, -0.0027049473, -0.0005630847, 0.027034182, 0.002440416, -0.043499343, -0.0034129126, 0.029872159, -0.025468402, 0.023731364, -0.00069305673, 0.0018425446, 0.0077983215, 0.011223467, 0.005507756, -0.007602599, 0.028526567, -0.0115537485, 0.016722048, 0.02053864, -0.0023242056, -0.03212297, 0.0043884674, -0.014238818, -0.0448694, 0.0029633623, 0.022398002, -0.017480474, 0.02656934, 0.011309096, 0.0077616237, 0.014654729, 0.010232621, -0.0029343097, -0.020624267, -0.00016695671, 0.0017156308, 0.010024666, 0.0029113735, -0.0027982213, -0.027009716, 0.00466676, 0.030239139, -0.02656934, -0.02408611, 0.009015472, 0.02371913, -0.015082872, 0.013773977, 0.00024732912, -0.018508017, -0.0056484314, -0.0025306318, 0.0033425747, 0.003645333, 0.012049171, 0.0086423755, -0.0048441337, -0.016599722, -0.014116491, 0.019413233, 0.026667202, 0.049077436, 0.002905257, -0.026422549, 0.005342615, -0.021859765, 5.4951408e-05, -0.024306297, -0.01073416, -0.026813993, 0.0023807818, -0.028257448, -0.006581172, 0.018593645, -0.039266843, -0.004568899, -0.031780455, 0.03295479, 0.0064771944, 0.033860005, 0.01796978, 0.039829545, 0.03129115, 0.0022844495, 0.03652673, -0.0049511697, 0.010935999, 0.016563024, -0.0040795924, 0.0027508198, -0.010911534, -0.008232581, -0.0017829104, 0.0025642717, 0.014483471, 0.01893616, 0.0111439545, 0.012116451, 0.012636339, 0.025664123, -0.013590487, -0.02256926, -0.013272437, -0.008299861, 0.014654729, 0.010465042, -0.0040245457, 0.008605678, 0.015254129, 0.043132365, 0.008299861, -0.03236762, -0.007871717, 0.012758666, -0.0076882276, -0.00536708, -0.023046333, 0.0100858295, -0.004415991, 0.011015512, 0.007253968, 0.035058808, 0.0034893667, -0.00013513268, -0.008122487, 0.0016942236, -0.04420884, 0.025395006, 0.02615343, 0.024514254, 0.0012332052, 0.027499022, -0.019327605, -0.0007289902, -0.0039297426, -0.0111439545, 0.0043242457, -0.016881073, 0.03750534, -0.0028914954, 0.0032997604, 0.0031162705, 0.030459328, -0.0029404259, 0.0050979615, -0.012410035, -0.02325429, 0.010324366, 0.00540072, 0.014348912, 0.02173744, -0.00021980563, 0.013541556, 0.033444095, -0.018092107, 0.027376696, 0.00861791, -0.03263674, -0.008807517, -0.023009636, 0.018532483, -0.044331163, 0.039584894, 0.0043150713, -0.027401162, -0.01626944, 0.007994045, 0.03258781, 0.0018608936, -0.023131963, 0.012636339, 0.017663963, 0.00655059, 0.0107096955, 0.022862844, 0.05230686, 0.01723582, 0.003220248, -0.029236061, -0.024367461, -0.016611954, -0.004419049, 0.013541556, -0.0062111337, 0.007266201, -0.016599722, 0.022740517, -0.005012333, -0.015939157, -0.035058808, -0.0072600846, 0.028599963, -0.006532241, -0.04968907, 0.028869081, -0.042716455, -0.021358227, 0.013761744, 0.0273033, 0.0148749165, 0.0053548478, 0.028942477, -0.0076821116, 0.0064282636, 0.0027691687, 0.042814314, -0.02215335, -0.02358457, 0.020220589, -0.026226826, -0.006397682, -0.018410156, -0.021590648, 0.028795686, 0.007082711, -0.013064482, -0.015547712, -0.023816992, 0.018214433, 0.024073878, 0.00014621853, 0.079708025, 0.013700581, -0.01875267, 0.033713214, -0.029627506, 0.020599801, -0.04163998, 0.015816832, -0.021933163, -0.0033731563, -0.023156429, -0.0005240931, -0.0027278834, 0.00074733916, -0.011431422, -0.013455927, -0.027327765, -0.026031103, -0.0053334404, -0.025125887, 0.009975735, -0.020049332, -0.00758425, 0.032098502, 0.019865843, -0.02615343, -0.019963704, 0.0065077757, -0.0069787335, 0.00776774, -6.2501254e-05, -0.022532562, -0.0034618431, 0.017199121, 0.021064643, -0.0042661405, -0.0008394664, -0.023939319, 0.022055488, -0.0034434942, 0.024465322, -0.0073334803, 0.0040428946, -0.0028471518, -0.046581976, 0.015229664, 0.028918011, -0.009119449, 0.022667121, -0.0004327304, 0.0019878075, 0.014140957, 0.05308975, 0.0098839905, 0.03902219, 0.0115537485, -0.0010902359, 0.0057095946, 0.027058646, 0.021211434, 0.006544474, -0.04489387, -0.011027744, 0.0036300423, -0.03373768, 0.029382853, 0.008507816, -0.0026024987, 0.008275395, 0.039046656, 0.025908777, 0.021908697, 0.02992109, -0.006893105, 0.024294065, -0.0057982816, -0.0097005, 0.008440536, 0.024416393, -0.012110335, -0.02325429, 0.018324526, 0.021566182, -0.023829224, 0.0066056373, 0.0023027984, -0.009339637, -0.023034101, -0.041272998, 0.013822908, 0.028110655, -0.0015214373, -0.023180893, -0.028599963, 0.01231829, -0.017639497, 0.019804679, 0.005287568, -0.0036361585, -0.0630716, 0.027694745, 0.039144516, -0.025933241, -0.02725437, 0.0032324807, -0.022349073, 0.024024947, -0.02223898, 0.00941915, -0.022972938, -0.051230386, -0.008257046, -0.010409995, 0.014556867, 0.03806804, -0.002607086, -0.006599521, -0.0170034, -0.006269239, 0.008819749, -0.0047034584, 0.022312375, 0.030483792, 0.0027263544, -0.012648572, 0.022214513, -0.015743434, 0.009327404, -0.018911695, -0.01406756, 0.01598809, 0.017480474, 0.046826627, -0.015131802, 0.010819789, 0.00064680196, 0.013798442, 0.018263364, -0.032514416, 0.04200696, 0.017125726, -0.020783292, 0.014324446, -0.009914572, 0.0018043176, 0.0132112745, -0.0333707, -0.0088014, 0.004272257, -0.01535199, 0.02146832, -0.00022630424, -0.015290827, 0.003143794, 0.029015873, -0.017492706, -0.011296863, 0.013822908, -0.02450202, -0.025492866, 0.008954308, 0.01788415, -0.015339757, -0.03787232, 0.0200371, -0.02882015, 0.03549918, 0.0023410255, -0.0050918455, -0.0047799125, 0.018153269, -0.005932841, -0.015743434, -0.036184214, -0.007987928, 0.006623986, -0.04760952, 0.010587368, -0.008330442, -0.009162263, 0.023633502, -0.012550711, -0.033346236, 0.009076634, 0.04232501, 0.024856769, 0.020000402, 0.010556786, 0.022826146, 0.023560107, 0.01948663, 0.0021758846, -0.016171578, 0.03562151, 0.02380476, -0.0028731464, -0.037994646, 0.019804679, -0.00073395966, -0.019657888, 0.009847293, 0.003990906, -0.004223326, -0.03850842, 0.01013476, -0.03156027, 0.0052539282, -0.0032967022, 0.012758666, -0.040367782, -0.0023349093, 0.004327304, -0.011822867, 0.00026338449, -0.028966943, 0.0017645614, 0.03405573, -0.026177896, -0.016000321, 0.019327605, 0.0070949434, 0.017590567, 0.013871838, -0.021957627, 0.03300372, 0.023180893, 0.0038685792, -0.015498782, 0.02233684, -0.025076956, 0.005073496, -0.023963783, -0.06654568, 0.0017630323, 0.021333762, -0.02045301, 0.01796978, -0.012049171, -0.012281592, 0.002498521, 0.02776814, 0.025125887, -0.007712693, 0.00425085, -0.012526245]"
../../../gradio,../../../gradio/gradio/components,textbox.pyi,"""""""gr.Textbox() component.""""""

from __future__ import annotations

from typing import Any, Callable, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import (
    FormComponent,
)
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Textbox(FormComponent):
    """"""
    Creates a textarea for user to enter string input or display string output.

    Demos: hello_world, diff_texts, sentence_builder
    Guides: creating-a-chatbot, real-time-speech-recognition
    """"""

    EVENTS = [
        Events.change,
        Events.input,
        Events.select,
        Events.submit,
        Events.focus,
        Events.blur,
    ]

    def __init__(
        self,
        value: str | Callable | None = None,
        *,
        lines: int = 1,
        max_lines: int = 20,
        placeholder: str | None = None,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        autofocus: bool = False,
        autoscroll: bool = True,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        type: Literal[""text"", ""password"", ""email""] = ""text"",
        text_align: Literal[""left"", ""right""] | None = None,
        rtl: bool = False,
        show_copy_button: bool = False,
    ):
        """"""
        Parameters:
            value: default text to provide in textarea. If callable, the function will be called whenever the app loads to set the initial value of the component.
            lines: minimum number of line rows to provide in textarea.
            max_lines: maximum number of line rows to provide in textarea.
            placeholder: placeholder hint to provide behind textarea.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be rendered as an editable textbox; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            autofocus: If True, will focus on the textbox when the page loads. Use this carefully, as it can cause usability issues for sighted and non-sighted users.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            type: The type of textbox. One of: 'text', 'password', 'email', Default is 'text'.
            text_align: How to align the text in the textbox, can be: ""left"", ""right"", or None (default). If None, the alignment is left if `rtl` is False, or right if `rtl` is True. Can only be changed if `type` is ""text"".
            rtl: If True and `type` is ""text"", sets the direction of the text to right-to-left (cursor appears on the left of the text). Default is False, which renders cursor on the right.
            show_copy_button: If True, includes a copy button to copy the text in the textbox. Only applies if show_label is True.
            autoscroll: If True, will automatically scroll to the bottom of the textbox when the value changes, unless the user scrolls up. If False, will not scroll to the bottom of the textbox when the value changes.
        """"""
        if type not in [""text"", ""password"", ""email""]:
            raise ValueError('`type` must be one of ""text"", ""password"", or ""email"".')

        self.lines = lines
        if type == ""text"":
            self.max_lines = max(lines, max_lines)
        else:
            self.max_lines = 1
        self.placeholder = placeholder
        self.show_copy_button = show_copy_button
        self.autofocus = autofocus
        self.autoscroll = autoscroll
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.type = type
        self.rtl = rtl
        self.text_align = text_align

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: the text entered in the textarea.
        Returns:
            Passes text value as a {str} into the function.
        """"""
        return None if payload is None else str(payload)

    def postprocess(self, value: str | None) -> str | None:
        """"""
        Parameters:
            value: Expects a {str} returned from function and sets textarea value to it.
        Returns:
            The value to display in the textarea.
        """"""
        return None if value is None else str(value)

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    def example_payload(self) -> Any:
        return ""Hello!!""

    def example_value(self) -> Any:
        return ""Hello!!""

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def submit(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def focus(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def blur(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Textbox` component in Gradio, which creates a textarea for users to enter string input or display string output. The component has various parameters such as `value`, `lines`, `max_lines`, `placeholder`, `label`, `info`, `type`, `text_align`, and others to customize its behavior and appearance. The component supports events like `change`, `input`, `select`, `submit`, `focus`, and `blur`, which can trigger functions when certain actions occur. The component also provides methods for preprocessing, postprocessing, and defining API information.","[-0.05258963, 0.044663887, 0.016655713, 0.038136806, 0.0028366582, -0.043335162, 0.022763198, -0.002250969, 0.00563835, -0.016177839, 0.010711407, 0.03988513, 0.0017716364, 0.016877169, 0.013345551, -0.020105742, 0.00052996114, -0.0029721532, -0.015047254, 0.046132483, -0.0011932321, -0.0069058854, 0.001711902, 0.04240272, 0.022401877, -0.05235652, -0.03478002, 0.07865133, -0.026154948, 0.01285602, -0.038323294, -0.046365593, 0.038043562, -0.009283608, -0.0025991772, -0.028136384, 0.04932609, 0.03333474, 0.039558776, -0.021108115, -0.075947255, -0.0074944883, 0.0012937608, 0.019884288, 0.013019197, 0.027996518, -0.0077509093, 0.04983893, 0.014126469, 0.040607773, -0.026574546, -0.027879963, -0.03923242, -0.027087389, 0.0061949, 0.0023748088, -0.08275407, 0.046715256, 0.036528345, -0.012529666, 0.00642801, 0.0017075312, -0.0023660671, -0.016935445, 0.008030642, 0.0074245553, 0.0025612968, -0.0038288326, 0.004566043, 0.019534623, 0.052682873, -0.05520046, 0.0028002346, -0.013893359, -0.015140498, -0.01072889, 0.019453034, -0.028859025, 0.041656766, 0.009009704, 0.028882336, -4.079426e-05, -0.06909382, -0.00095502276, -0.03151648, 0.04979231, -0.03550266, 0.032355677, -0.038789514, -0.04767101, -0.057578184, 0.012121723, -0.02760023, 0.0772993, 0.013730182, 0.00083555386, -0.061074834, -0.029791465, 0.019511312, -0.017331732, 0.023765571, -0.03333474, -0.030770527, -0.024406623, 0.033707716, -0.008677522, -0.009056326, -0.019732766, -0.017529877, -0.021143083, -0.039791886, -0.011538948, -0.04487369, 0.014604345, 0.011719609, -0.07860471, -0.0050584883, -0.026038393, -0.027227255, 0.014534412, 0.03338136, 0.014522756, 0.0010715778, -0.015163809, 0.01656247, -0.013648594, -0.046365593, -0.05217003, -0.03755403, 0.0067368806, 0.017879542, -0.009522546, -0.0030042059, -0.047787562, -0.03363778, 0.029931331, -0.054314643, 0.022355255, -0.014977321, 0.012832709, -0.009580824, -0.0321925, -0.007453694, 0.019744422, -0.017914508, -0.057345074, -0.056878854, 0.011410737, -0.038742892, -0.00044618722, -0.031819522, 0.030280996, -0.035595905, 0.001572036, 0.03596888, 0.002956127, 0.06293972, 0.003586981, -0.035059754, -0.027413743, 0.009656584, -0.039022624, 0.019756077, 0.0075644213, -0.011305838, 0.008584278, 0.025339063, 0.025572173, -0.029301934, 0.037437476, 0.015175465, -0.03242561, -0.017564842, -0.0006589001, -0.009802278, -0.0055101393, 0.0032081772, 0.02211049, -0.014674278, 0.0010519092, -0.006614498, 0.016632402, 0.0077683926, 0.02734381, 0.010740546, -0.042565897, -0.006235694, -0.044617265, -0.01599135, -0.03615537, 0.016853858, -0.023625705, 0.019627867, 0.008566795, -0.0055946414, -0.028928958, 0.024709666, -0.01853225, -0.008823216, 0.012319867, 0.071751274, 0.0146859335, -0.024919465, -0.0060550338, -0.054361265, -3.751615e-05, -0.025781972, 0.013392173, 0.0016157441, -0.047601074, 0.01749491, -0.01345045, -0.012844364, -0.04382469, -0.057904538, 0.011777886, 0.008479378, 0.036574967, -0.016399292, -0.018264173, -0.036714833, 0.048300404, 0.008083091, -0.029162068, 0.02524582, 0.0020076605, 0.033078317, 0.007284689, 0.022506777, -0.0024403709, 0.023917092, 0.0044232635, 0.010979484, -0.044430777, 0.04650546, -0.023357628, -0.013182374, -0.013077474, 0.03778714, 0.032029323, -0.040444594, -0.023206107, 0.023474183, -0.030211063, 0.033218183, 0.03405738, -0.022634987, -0.06680934, 0.025781972, 0.04979231, -0.002626859, 0.016306048, 0.0045165075, 0.009930489, 0.011544776, 0.009155397, -0.0049419333, 0.04237941, 0.013042508, -0.020851694, -0.002089249, -0.062846474, -0.0446872, 0.055247083, 0.00070515793, 0.02387047, 0.036528345, 0.016259426, 0.0029226174, -0.020268919, -0.028579293, 0.00031160258, 0.0463889, 0.029814776, -0.017693054, -0.006748536, 0.026761035, 0.017716365, -0.012832709, 0.07510806, -0.03128337, -0.0031761245, 0.0031003638, 0.027297188, -0.018310795, 0.0039803544, 0.04237941, -0.000551451, 0.041307103, -0.0146393115, 0.035782393, 0.027740097, 0.027040767, -0.0005215838, -0.0054402063, 0.011719609, 0.039605398, -0.009510891, 0.010478297, -0.04937271, -0.015595063, 0.0091146035, 0.0090912925, -0.03550266, -0.0146160005, 0.0010854187, 0.017483255, -0.0031061915, 0.017355043, -0.029371867, 0.054594375, 0.023345973, -0.012937608, -0.02185407, -0.077019565, -0.018753704, 0.058557246, 0.05725183, -0.008875665, -0.047228098, 0.019394757, 0.002772553, 0.042519275, -0.03384758, 0.0033655264, -0.02666779, -0.03771721, 0.0029138757, 0.018345762, -0.030910393, 0.0495592, -0.026807657, -0.0101111485, 0.015070565, 0.03545604, 0.007966536, -0.026714412, 0.023567427, -0.044803753, 0.017075311, -0.033777647, -0.00821713, -0.0007102572, 0.045526396, 0.041796632, 0.009936316, -0.02501271, 0.02257671, -0.0044407467, -0.028322872, 0.011066901, -0.010035388, 0.0026691102, -0.07025937, 0.0147791775, -0.015210431, -0.0056878855, -0.03613206, -0.065177575, -0.006754364, -0.021247981, 0.023182796, -0.03170297, 0.029115446, -0.00712734, -0.002928445, -0.034360424, -0.024709666, -0.0271107, -0.021422815, 0.022040557, -0.013893359, -0.008147197, 0.0059472206, -0.04195981, -0.03426718, 0.020828383, -0.015152154, -0.022063868, -0.027740097, 0.02526913, -0.0045456463, 0.0148257995, 0.00029976497, -0.001054823, -0.026947523, 0.016865512, 0.05333558, 0.053009227, -0.0025059332, -0.025828594, -0.006119139, -0.021481091, 0.011719609, 0.03361447, 0.016853858, 0.029628288, 0.022098834, 0.018089341, 0.007890776, -0.00061373506, 0.01798444, -0.056925476, 0.03841654, -0.03802025, -0.027250566, 0.010513264, 0.027506987, 0.028835714, -0.0319827, 0.039558776, 0.0055043115, 0.028928958, 0.017413322, 0.0345236, 0.014033225, -0.004009493, -0.022390222, 0.01425468, 0.053428825, -0.016877169, 0.011072728, -0.019581245, -0.062426873, 0.04081757, 0.043871313, 0.00764601, -0.03895269, -0.01140491, 0.0031557274, 0.0019348135, 0.0119702015, -0.0061832443, 0.018473972, -0.010472469, -0.03314825, -0.02120136, 0.0345236, 0.0225534, 0.016935445, -0.0474379, 0.011136834, 0.037740517, 0.018718738, -0.01669068, 0.018625494, 0.036295235, -0.04242603, -0.022390222, -0.03289183, -0.016037973, 0.031096881, -0.018835293, 0.00081661367, 0.03247223, 0.038369916, 0.06349918, 0.020560307, -0.009400163, -0.01518712, -0.026388058, -0.0029182467, -0.015373608, 0.035992194, -0.015781552, -0.029744843, 0.046901744, 0.008024814, 0.0222387, -0.006562048, -0.046412215, 0.042099677, 0.038579714, 0.018695427, -0.021947313, 0.057345074, 0.00787912, -0.0018386556, -0.040701017, -0.024220135, -0.010629819, 0.010618163, -0.009108775, -0.010991139, -0.0011750204, 0.14956342, -0.004362072, -0.033894204, -0.009697379, -0.013520383, 0.0030333446, -0.004784584, 0.0019887201, -0.009621617, 0.030747216, 0.030444173, -0.04568957, -0.0026370576, -0.020793417, -0.049465954, 0.030490795, 0.0012558805, -0.027227255, 0.04979231, 0.017529877, 0.010146115, 0.064571485, 0.021585992, 0.003047914, -0.0032052633, -0.03356785, -0.03620199, 0.026504613, -0.02208718, 6.9568785e-05, -0.052682873, -0.02874247, 0.026574546, -0.030514106, 0.008695005, -0.03818343, 0.05002542, -0.0073487945, -0.028322872, -0.012180001, -0.005568417, -0.008316201, -0.024266757, 0.034150623, -0.02014071, -0.032309055, -0.021143083, 0.0010402537, 0.027273877, -0.07067897, -0.004105651, -0.03293845, -0.008339512, 0.0044465745, -0.023695638, -0.01049578, 0.008840699, 0.0147209, -0.0035024786, 0.001032969, 0.055713303, -0.023311006, -0.055806547, -0.00023056041, 0.039955065, 0.046831813, -0.0705391, 0.029814776, -0.014347924, 0.019033436, -0.0056412634, 0.034710087, 0.02143447, -0.03151648, -0.026621168, -0.0021635527, 0.010425847, -0.00033928442, 0.004784584, -0.028369494, -0.024453245, -0.018485628, 0.0101810815, 0.00026170246, 0.020315541, -0.00972069, 0.0072730337, 0.042286165, 0.046412215, -0.018811982, -0.0387662, 0.008135541, -0.03338136, -0.014371235, 0.006911713, -0.0076518375, -0.0024709667, 0.002248055, -0.00811223, -0.03289183, -0.013590316, 0.02571204, -0.0027128183, 0.00019923625, -0.010408364, 0.016014662, 0.017098622, 0.008566795, 0.05520046, 0.0039570434, 0.000997274, -0.031329993, 0.018240862, -0.036295235, 0.01332224, 0.00063886726, -0.019219924, -0.008496862, -0.009277781, 0.021679236, 0.009306919, 0.01993091, 0.0061366223, -0.031096881, -0.009423474, -0.005186699, 0.031656347, -0.0440578, -0.02897558, -0.026830968, -0.0032751963, -0.016317705, 0.022168767, 0.03200601, 0.024383312, -0.038976002, 0.04004831, 0.0120401345, -0.015606718, -0.008461895, 0.049652442, -0.01065313, -0.01891688, 0.037973627, 0.0225534, -0.00969155, -0.0053615314, 0.06527082, 0.021387847, -0.0245698, -0.031819522, 0.046645325, 0.010658957, -0.024383312, -0.03823005, 0.009598306, 0.005684972, 0.024686355, 0.024266757, 0.043614894, 0.031003637, 0.0034616843, 0.034686778, 0.0374841, -0.0071623065, -0.0034296317, 0.03221581, 0.025991771, 0.024639733, -0.0021897776, 0.008170508, -0.025595484, -0.032728653, 0.020467063, -0.011515637, -0.029511733, 0.010280154, -0.015676651, 0.007861637, -0.018392384, 0.025991771, -0.026061704, -0.05538695, -0.03172628, 0.036481723, -0.013835082, 0.0054168953, 0.013298929, -0.00034037713, 0.06405865, 0.0012573374, 0.048347026, -0.041773323, 0.034640156, 0.0024476557, -0.022658298, 0.023987025, -0.010798824, -0.025082642, -0.008176335, 0.0066261534, 0.030514106, -0.003610292, 0.00925447, -0.037274297, -0.018112652, -0.013998259, 0.024360001, 0.006468804, -0.0014438254, 0.014476134, -0.0034733398, -0.005466431, 0.038859446, -0.0077217706, 0.0107871685, -0.024686355, -0.00021963338, -0.0074944883, -0.009598306, 0.030863771, 0.0149423545, 0.009400163, 0.006935024, -0.047927428, -0.0013695216, 0.03433711, -0.0063639046, -0.019021781, -0.037414163, 0.02524582, 0.0054868283, 0.017320078, -0.005186699, -0.01620115, 0.00032380444, 0.009592479, -0.016550815, -0.034919888, 0.0015268709, -0.078418225, 0.005373187, -0.03946553, -0.00979645, 0.002865797, -0.020571962, 0.0038055216, 0.01111935, 0.009574995, -0.0050118663, 0.043917935, -0.0045106797, -0.041866567, 0.035479352, -0.020828383, -0.008141369, 0.026830968, -0.007949053, -0.023893781, 0.00096886366, -0.006614498, 0.029977953, -0.0043737274, -0.009586651, 0.0039016795, -0.013077474, 0.0073721055, -0.0011145575, -0.015804863, -0.03526955, -0.012669532, -0.03543273, -0.040374663, -0.033777647, 0.013100785, 0.01332224, -0.007663493, -0.017774642, -0.031003637, -0.04585275, -0.047181476, 0.025222508, -0.013951637, 0.004968158, 0.03993175, 0.008048125, -0.047531143, -0.02573535, -0.003260627, 0.04237941, -0.012867675, -0.018392384, 0.0011553518, 0.028416116, 0.0034820815, -0.00012857477, 0.0009885323, 0.012821053, 0.005419809, 0.028905647, -0.017110279, 0.0046243207, 0.02781003, 0.0035986365, -0.04079426, 0.014161436, -0.008252096, -0.011340804, -0.022215389, 0.051097725, 0.009295263, -0.0036219475, -0.045363218, -0.017471598, 0.011603054, -0.022448499, -0.041540213, -0.049232844, 0.025408996, 0.014884077, 0.05263625, -0.0011247561, -0.02874247, 0.003656914, -0.006515426, 0.0058219237, -0.029977953, -0.026947523, 0.005865632, 0.008380307, 0.02029223, 0.022203734, -0.003866713, 0.012634565, -0.008228785, -0.018730393, -0.021516059, 0.0022684522, 0.015257053, 0.031329993, 0.010769685, 0.03289183, 0.029488422, 0.031003637, 0.00417267, -0.006847608, -0.016166182, -0.053149093, 0.012809398, 0.0057374216, 0.025665417, -0.013263962, 0.01775133, 0.0055567613, -0.012867675, 0.042542584, 0.016644059, 0.012319867, 0.020105742, 0.049465954, -0.036038816, -0.008106402, -0.009609962, -0.0070632347, 0.04035135, -0.012296556, -0.023800537, 0.010361742, -0.03573577, 0.006678603, -0.0003571319, -0.0039308183, 0.030887082, -0.0041668424, 0.016317705, -0.021504404, -0.009825589, -0.015070565, 0.013287273, -0.018648805, -0.036644902, -0.012867675, -0.0056587467, 0.029604977, 0.010909551, -0.009038842, 0.02897558, 0.014429512, 0.015303675, -0.016947102, 0.03359116, 0.018940192, 0.010064526, 0.0062298663, -0.0011925036, 0.015513474, 0.015105532, 0.010804651, -0.0031848662, -0.006911713, -0.0120867565, 0.03081715, 0.027390432, 0.011381599, 0.029138757, -0.025059331, 0.013462106, -0.012343178, -0.007943225, -0.004178498, 0.026714412, -0.031866144, 0.021003217, 0.0001436905, -0.025875216, -0.020327197, -0.0008530371, -0.02120136, -0.029791465, -0.0019741508, -0.012937608, -0.071564786, -0.009790623, -0.02039713, 0.035386108, -0.036015503, -0.06074848, 0.028229628, 0.040001687, -0.0046709427, 0.017681397, 5.140259e-05, 0.004804981, 0.008957254, 0.011608881, -0.04797405, 0.005606297, 0.024150202, -0.022600021, -0.013298929, 0.033544537, -0.016399292, 0.03314825, 0.0054722587, -0.006777675, -0.000961579, 0.007267206, 0.0020673948, -0.0027536126, 0.048486892, -0.04932609, -0.0029954643, -0.019138336, -0.0048108087, -0.032145876, -0.012226623, -0.0347334, -0.00082389836, 0.0060900003, -0.0009819762, -0.027506987, -0.013298929, 0.04284563, -0.00891646, -0.002625402, -0.006025895, -0.0025219594, 0.059070088, 0.0027710958, -0.026551235, -0.003211091, -0.0027477848, -0.003750158, 0.012995886, 0.014674278, -0.037414163, 0.02666779, -0.013310584, 0.025991771, -0.0028949357, -0.022448499, 0.016993724, -0.0026967921, 0.023567427, 0.0058918567, -0.0005875102, -0.008287063, 0.007943225, 0.01762312, -0.049186222, 0.0045689573, -0.005370273, -0.018881915, 0.01772802, 0.0021038183, -0.0003813535, 0.032285742, 0.0016609092, 0.0102976365, -0.033288117, -0.040024996, 0.010350087, -0.02156268, 0.018613838, 0.010740546, -0.03153979, -0.0049331915, 0.0014277991, 0.047647696, 0.021014871, 0.02052534, -0.026341436, 0.0012376687, 0.029721532, -0.0059035122, -0.002768182, 0.008263752, 0.013392173, -0.013287273, 0.013765149, 0.008729972, 0.024453245, 0.016842201, 0.011550603, -0.027506987, -0.015268709, 0.022133801, 0.00029502992, -0.020198986, 0.023800537, -0.004571871, -0.0015691221, 0.0033247322, -0.03270534, -0.019219924, -0.026248192, 0.0043300195, 0.048393648, -0.0034733398, -0.0020936197, -0.019662833, 0.010449158, 0.0011808481, -0.02350915, 0.033031695, -0.0019071316, 0.06834787, 0.009376852, -0.012599599, -0.003120761, 0.036714833, 0.04610917, 0.007523627, 0.009347714, 0.0040735984, -0.022192078, -0.035292864, 0.0047641867, 0.045596328, 0.020187331, -0.032798585, 0.007034096, -0.013042508, 0.013741838, 0.0173667, 0.018415695, 0.010192737, -0.00010043765, 0.01355535, -0.017926164, -0.017191866, -0.027553609, -0.0015297848, 0.020268919, 0.02454649, -0.012214967, 0.0075352825, 0.005600469, -0.052076787, -0.022157112, 0.03429049, 0.023392595, -0.02325273, 0.009627446, 0.01611956, 0.007803359, 0.017424976, 0.002839572, 0.004012407, -0.026504613, -0.0146626225, 0.03729761, -0.017086968, 0.040887505, -0.0010074725, 0.0016594522, 0.0064862873, -0.02371895, 0.0104375025, 0.038509782, 0.03454691, 0.0051371627, 0.0014489248, 0.00025113966, -0.0077683926, -0.05212341, 0.02340425, -0.020571962, -0.052776117, -0.0010038302, 0.017669743, 0.0051371627, 0.03818343, 0.028672537, 0.0031295025, 0.004985641, 0.01666737, -0.014592689, -0.015245398, 0.007925742, -0.018357417, 0.042519275, -0.0021460694, 0.0057141106, -0.00938268, 0.009598306, 0.018567216, 0.015571752, -0.02272823, -0.010618163, 0.020245608, -0.0049331915, -0.0003263541, 0.024919465, 0.014184747, 0.009714861, -0.0025860646, 0.01853225, -0.0054343785, 0.0051488183, 0.004807895, 0.03701788, 0.023380939, -0.022903064, -0.008613417, -0.01611956, 0.013870048, -0.027740097, -0.015874796, 0.013986603, 0.016632402, 0.007663493, -0.034593534, 0.001923158, -0.024872843, -0.007104029, -0.01171378, 0.008135541, 0.02327604, -0.03172628, -0.0120867565, -0.024476556, 0.031423237, 0.01495401, 0.005134249, 0.0067601916, 0.048300404, 0.01899847, -0.0049594166, 0.020653551, -0.0008464809, 0.009959627, -0.0073779332, -0.017949475, -0.02713401, -0.0102043925, -0.022611676, -0.014277991, -0.031866144, 8.158852e-05, 0.018602183, -0.018788671, -0.006748536, -0.020338852, 0.027786719, -0.0013702501, -0.016772268, -0.0072497227, 0.00072774047, -0.013019197, 0.046482146, -0.027273877, 0.0037705551, 0.014394546, 0.027390432, 0.004169756, -0.044500712, 0.026038393, -0.0015050168, -0.00027554337, 0.00899222, -0.016958756, 0.009493407, 0.025199197, 0.022296978, 0.010693924, 0.019161647, 0.010641474, 0.0020586532, 0.015909761, 0.0003655093, -0.059256576, 0.026784346, 0.034383733, 0.024173513, 0.002625402, 0.010862929, -0.033264805, -0.008182163, -0.0119002685, 0.004402866, 0.008071436, -0.02736712, 0.018310795, 0.021259638, -0.005326565, -0.0061074835, 0.013357206, -0.0147325555, 0.007337139, -0.03084046, -0.02122467, -0.0030916221, 0.0041639283, 0.0013068733, 0.0024549402, -0.009464269, -0.012657876, 0.029768154, -0.0147209, 0.025152575, -0.008502689, -0.021947313, -0.019744422, -0.004364986, 0.024756288, -0.015793206, 0.013182374, -0.018800326, -0.01575824, 0.0073196557, -0.0016842202, 0.02107315, 0.028859025, 0.016480882, 0.037857074, -0.00979645, 0.0039104214, 0.005600469, 0.020700173, 0.034710087, -0.006870919, -0.008351168, -0.019243235, 0.0019056747, 0.002861426, -0.003167383, -0.002839572, -0.016271083, -0.00095939357, -5.923363e-05, 0.020816728, -0.016317705, -0.0089048045, -0.050911237, -0.020781761, 0.031586412, -0.0041347896, -0.02643468, -0.004248431, -0.01425468, -0.017949475, 0.020420441, 0.008426929, 0.021341225, 0.0006625425, 0.0036889666, -0.01518712, -0.011521465, -0.00039118782, 0.04398787, -0.022425188, -0.014429512, 0.020711828, -0.02005912, -0.00021726586, -0.02920869, -0.019033436, 0.029348556, -0.014009914, -0.0025933494, -0.005483914, 0.005277029, 0.0015997178, 0.01775133, 0.0062939716, 0.03795032, -0.013147407, 0.02454649, 0.010956173, 0.004056115, -0.027413743, -0.017471598, 0.020944938, -0.003986182, -0.03151648, -0.012762776, 0.0065562204, -0.011649676, 0.0066436366, -0.014814144, 0.016947102, -0.02897558, -0.02526913, 0.00070843607, -0.007686804, 0.008118058, 0.0117837135, -0.004898225, 0.013042508, -0.015315331, -0.03480333, 0.002108189, -0.012005168, -0.034407046, 0.016748957, 0.0040269764, -0.0193831, -0.02247181, 0.011434048, 0.020851694, 0.01690048, -0.007640182, -0.0014066736, 0.021958968, 0.00097614835, -0.0031790384, -0.025432307, -0.01656247, -0.0027288448, -0.026388058, 0.01414978, -0.0043970384, -0.02200559, 0.020746795, -0.0003128774, 0.0017221005, 0.041936498, 0.067974895, -0.00712734, 0.028416116, 0.011101867, 0.029465111, -0.010723063, 0.033521228, 0.018625494, -0.01713359, -0.04058446, -0.036784768, 0.012098412, -0.02920869, 0.018695427, 0.036085438, -0.009528373, 0.012727809, 0.031213436, 0.04979231, 0.011288355, 0.03526955, -0.0040677707, -0.009709034, 0.0068534357, 0.049186222, 0.013881704, -0.015490163, -0.0065503926, -0.018275829, -0.008939771, -0.021469437, -0.030280996, -0.0146859335, -0.00945844, -0.010175254, -0.030747216, -0.028229628, 0.024196824, 0.006987474, -0.01285602, -0.021084804, -0.020595273, 0.0073196557, -0.029115446, -0.0033480432, 0.040234797, -0.044337533, -0.0004935377, 0.04960582, 0.015012288, 0.007214756, -0.042589206, 0.03270534, -0.015198776, 0.03916249, 0.0049652443, 0.03566584, -0.026737723, -0.0038346604, -0.008747455, 0.0044669714, -0.0012369403, 0.04079426, -0.021469437, -0.03783376, -0.011457359, 0.006445493, -0.015699962, 0.018788671, -0.007995675, 0.014009914, -0.005008952, -0.036411792, 0.04352165, 0.013508728, -0.0089281155, -0.040374663, 0.018567216, -0.0030770528, 0.0148724215, 0.048533514, 0.0118070245, 0.021469437, -0.0091612255, 0.0091146035, -0.017809609, -0.0010366113, -0.016655713, 0.032751963, 0.015431886, -0.014417857, -0.022879753, 0.019919254, 0.01842735, -0.015222087, -0.001405945, 0.010396709, 0.009196192, 0.043638203, 0.04499024, -0.045712885, 0.02617826, -0.0048661726, -0.027227255, 0.04219292, 0.0074886605, -0.016212804, -0.020152364, 0.011037761, 0.020816728, -0.033987448, -0.025385685, -0.01575824, -0.016247772, 0.023602394, -0.006095828, -0.022611676, -0.012098412, -0.00036077425, -0.026248192, 0.0027987778, -0.031376615, -0.0011808481, -0.019196613, -0.014697589, 0.032378986, -0.018042719, -0.005271201, 0.043848004, -0.059489686, -0.012308211, -0.022646643, 0.023229418, 0.000515756, 0.048766624, 0.016760614, 0.037414163, -0.0024593112, 0.022366911, -0.019371446, -0.016014662, 0.017378354, -0.0027944068, -0.0021926914, -0.02179579, -0.01819424, 0.00782667, 0.016212804, 0.00046439894, 0.0071156844, -0.00034183406, -0.028019829, -0.0052362345, -0.03613206, -0.035642527, 0.037414163, 0.015781552, -0.0121100675, 0.044430777, 0.0042775697, 0.032518853, -0.0040969094, -0.015676651, 0.036924634, 0.023765571, -0.01874205, 0.011463188, -0.0010446245, -0.015373608, 0.033241495, 0.026924212, -0.011643847, 0.012867675, 0.0029240744, -0.016620748, -0.009376852, 0.02130626, -0.0294418, -0.02853267, -0.024919465, -0.056226145, -0.041866567, 0.0070166127, 0.022518432, 0.01505891, 0.008071436, -0.0045573018, 0.0049739857, -0.010565713, -0.0052886843, -0.032378986, 0.02757692, -0.0037822106]"
../../../gradio,../../../gradio/gradio/components,code.pyi,"""""""gr.Code() component""""""

from __future__ import annotations

from pathlib import Path
from typing import Any, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document(""languages"")
class Code(Component):
    """"""
    Creates a code editor for viewing code (as an output component), or for entering and editing code (as an input component).
    """"""

    languages = [
        ""python"",
        ""markdown"",
        ""json"",
        ""html"",
        ""css"",
        ""javascript"",
        ""typescript"",
        ""yaml"",
        ""dockerfile"",
        ""shell"",
        ""r"",
        ""sql"",
        ""sql-msSQL"",
        ""sql-mySQL"",
        ""sql-mariaDB"",
        ""sql-sqlite"",
        ""sql-cassandra"",
        ""sql-plSQL"",
        ""sql-hive"",
        ""sql-pgSQL"",
        ""sql-gql"",
        ""sql-gpSQL"",
        ""sql-sparkSQL"",
        ""sql-esper"",
        None,
    ]

    EVENTS = [
        Events.change,
        Events.input,
        Events.focus,
        Events.blur,
    ]

    def __init__(
        self,
        value: str | Callable | tuple[str] | None = None,
        language: Literal[
            ""python"",
            ""markdown"",
            ""json"",
            ""html"",
            ""css"",
            ""javascript"",
            ""typescript"",
            ""yaml"",
            ""dockerfile"",
            ""shell"",
            ""r"",
            ""sql"",
            ""sql-msSQL"",
            ""sql-mySQL"",
            ""sql-mariaDB"",
            ""sql-sqlite"",
            ""sql-cassandra"",
            ""sql-plSQL"",
            ""sql-hive"",
            ""sql-pgSQL"",
            ""sql-gql"",
            ""sql-gpSQL"",
            ""sql-sparkSQL"",
            ""sql-esper"",
        ]
        | None = None,
        *,
        every: float | None = None,
        lines: int = 5,
        label: str | None = None,
        interactive: bool | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default value to show in the code editor. If callable, the function will be called whenever the app loads to set the initial value of the component.
            language: The language to display the code as. Supported languages listed in `gr.Code.languages`.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            interactive: Whether user should be able to enter code or only view it.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        if language not in Code.languages:
            raise ValueError(f""Language {language} not supported."")

        self.language = language
        self.lines = lines
        super().__init__(
            label=label,
            every=every,
            interactive=interactive,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: str | None) -> str | None:
        """"""
        Parameters:
            payload: string corresponding to the code
        Returns:
            Passes the code entered as a `str`.
        """"""
        return payload

    def postprocess(self, value: tuple[str] | str | None) -> None | str:
        """"""
        Parameters:
            value: Expects a `str` of code or a single-element `tuple`: (filepath,) with the `str` path to a file containing the code.
        Returns:
            Returns the code as a `str`.
        """"""
        if value is None:
            return None
        elif isinstance(value, tuple):
            with open(value[0]) as file_data:
                return file_data.read()
        else:
            return value.strip()

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""string""}

    def example_payload(self) -> Any:
        return ""print('Hello World')""

    def example_value(self) -> Any:
        return ""print('Hello World')""

    def process_example(self, value: str | tuple[str] | None) -> str | None:
        if isinstance(value, tuple):
            return Path(value[0]).name
        return super().process_example(value)

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def focus(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def blur(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Code` component in Gradio, which can be used as an input or output component for viewing or entering code. It supports various programming languages such as Python, Markdown, JSON, HTML, CSS, JavaScript, etc. The component provides methods for preprocessing and postprocessing code, as well as defining events like `change`, `input`, `focus`, and `blur`. These events allow users to trigger functions when the code changes, is inputted, focused on, or blurred. The component also provides methods for API information, example payload, example value, and processing examples.","[-0.03384416, 0.011831997, -0.024251312, 0.0028555247, 0.029390339, -0.025034402, -0.007977727, -0.0021947927, 0.0125294365, -0.008858703, 0.024973223, 0.01848826, -0.041259043, -0.0095622605, -0.0011295152, -0.024190133, 0.0002812317, 0.010437119, 0.009806976, 0.045247905, -0.0113853915, -0.05975954, 0.0036493207, 0.07331678, 0.0037869732, -0.041332457, -0.0525649, 0.0767428, 0.0025771607, 0.018329196, -0.021363668, -0.031127818, 0.013973258, 0.004655713, 0.000495549, -0.06866718, 0.013141225, 0.0029136445, 0.029023265, -0.014878706, -0.035287984, -0.03660945, -0.027187899, 0.013141225, -0.04338807, 0.044293515, -0.04625124, 0.0072252266, -0.0063993116, 0.04480742, -0.023737408, 0.013471591, -0.016187934, -0.014058908, -0.037881967, 0.020764114, -0.068960845, 0.045370262, -0.010847017, -0.025597246, 0.013973258, 0.00015227808, -0.008968825, 0.02642928, -0.028068874, 0.012823095, -0.013667364, -0.020715171, 0.012358136, 0.0072252266, 0.045737337, 0.016334763, 0.02880302, -0.04544368, -0.015355901, -0.005285856, -0.04355937, -0.0096050855, 0.047939777, 0.0044874717, 0.0005456392, 0.007586182, -0.053445876, -0.023113385, -0.014829762, 0.03068733, -0.019638423, 0.01761952, -0.028851964, -0.04642254, -0.043828554, -0.0050503174, -0.054816283, 0.07963044, 0.010314761, 0.04894311, -0.06842247, -0.019283585, 0.016004397, 0.046642784, 0.01872074, -0.059270106, -0.01321464, -0.03915449, 0.060297914, 0.0014805291, -0.010565594, 0.015784154, -0.024251312, 0.0030727098, -0.02187757, 0.012358136, -0.03494538, 0.021681799, -0.0107919555, -0.055941977, 0.047450345, -0.036291316, -0.027897574, -0.02306444, -0.0051604393, 0.023566108, -0.022831962, -0.045884166, 0.0068092104, -0.017533869, -0.0068520354, -0.028191231, -0.020568343, 0.012945453, -0.014328096, -0.011091732, 0.0075311214, -0.047303516, -0.025352532, 0.035141155, -0.07870052, -0.027408142, -0.016567243, 0.03147042, 0.034504894, -0.026820825, 0.027187899, 0.010987729, -0.02115566, -0.06793304, -0.06059157, 0.015808625, -0.075274505, -0.017264683, -0.010859253, 0.061864093, -0.0465449, -0.0054969233, 0.0100700455, 0.015282487, 0.028680664, -0.0066440273, 0.0012296956, -0.010639009, 0.0005012845, 0.029537167, 0.010204638, -0.0024578618, 0.014242445, -0.014120087, -0.006552259, 0.034823023, -0.03585083, 0.054326855, 0.0028035226, -0.024752978, -0.051194493, 0.028068874, 0.025132287, -0.045272376, 0.007151812, -0.025156759, -0.0054938644, -0.0133369975, -0.012321428, -0.004410998, -0.021987693, 0.026037736, 0.011721875, -0.023615051, -0.008613988, -0.041503757, -0.061325718, -0.01338594, 0.019699601, -0.003927685, 0.03558164, 0.03558164, 0.011085615, -0.049138885, 0.038028795, -0.038640585, -0.03142148, -0.015245779, 0.04581075, 0.02445932, -0.0028555247, 0.0005647576, -0.008999415, -0.020140091, -0.013263583, -0.027554972, 0.030246843, -0.018072244, 0.0046679494, 0.003242481, 0.0031155348, -0.0032088328, -0.035190098, -0.011324212, 0.018622853, 0.04216449, 0.011550575, -0.023321392, -0.06548588, 0.0063075433, -0.0049860794, -0.017521633, 0.03714782, -0.0044905306, 0.04277628, -0.01941818, 0.046520427, -0.009501081, 0.051488154, -0.009439902, 0.012033887, -0.0008618576, 0.07346361, -0.025890905, 0.017717406, -0.046667255, 0.03795538, 0.008601752, -0.04196872, -0.037049934, 0.03477408, -0.0061545963, 0.020886473, 0.03996205, -0.032131154, -0.016873138, 0.0093481345, 0.055648316, 0.015306958, 0.00423052, 0.057361327, -0.0013864666, 0.0055795144, 0.011275269, 0.01706891, 0.033574972, 0.011868704, -0.035899773, -0.011287505, -0.06651369, -0.043363597, 0.01408338, 0.012137892, 0.04896758, 0.026722938, 0.02897432, -0.01199718, -0.007200755, 0.014046673, -0.027554972, 0.028044403, 0.0075250035, 0.026013263, 0.0012786387, 0.042702865, 0.053103276, 0.01330029, 0.011483277, -0.03915449, 0.014144559, 0.01637147, 0.032302454, -0.04700986, 0.031910907, -0.0018124246, -0.0034229588, -0.0022391474, -0.07062491, 0.04576181, 0.017497161, 0.038004324, -0.028754078, -0.02306444, 0.010021102, 0.058878563, 0.007830897, 0.035508227, -0.0076045357, -0.024789685, 0.005004433, 0.0072925235, -0.03161725, -0.038665056, 0.025548303, -0.0061362423, -0.009458256, 0.0066256737, -0.016016632, 0.026869768, 0.027824158, 0.0075250035, -0.01605334, -0.08535679, 0.015441552, 0.020189034, 0.039252374, -0.019748544, -0.03225351, 0.03193538, 0.002892232, 0.050117746, -0.04135693, -0.043045465, -0.015955454, -0.043632783, -0.0024792745, 0.030736273, -0.019601716, 0.04091644, 0.008870939, -0.0039185076, 0.045247905, 0.019858668, 0.0059771775, -0.06303873, 0.046495955, -0.057067666, 0.038714, -0.040475953, 0.0012870509, 0.010437119, 0.028558305, 0.004383467, 0.04341254, -0.029463753, -0.007586182, -0.0052246773, -0.053396933, -0.022991026, -0.021510497, 0.017276919, -0.029390339, 0.05050929, -0.011110086, -0.05520783, -0.025132287, -0.05158604, -0.015466023, -0.04184636, 0.00915848, -0.0221957, 0.041503757, -0.0383714, -0.004998315, -0.07150588, -0.04833132, 0.0117647005, -0.042874165, 0.010455472, 0.006212716, -0.019565009, -0.04767059, -0.042727336, -0.0068581533, 0.015771918, -0.002564925, -0.019687366, -0.018867569, 0.017962122, 0.018953219, -0.0021672621, 0.035655055, 0.020935416, 0.014744112, 0.030246843, 0.019711837, 0.005555043, 0.017949887, -0.00605671, -0.028533833, -0.020140091, -0.01810895, 0.030295786, 0.006894861, 0.043290183, 0.017142324, 0.020739643, 0.0052675023, 0.006344251, -0.037735138, -0.011110086, 0.027824158, 0.0029365867, -0.03839587, 0.05535466, 0.019124521, -0.0049279593, 0.0027958753, 0.03301213, 0.02894985, 0.035092212, -0.008699638, 0.020972123, -0.044905305, 0.002306444, -0.03161725, 0.008589516, 0.051194493, 0.02530359, -0.038689528, -0.020360334, -0.066660516, 0.010369821, 0.034700666, 0.005282797, -0.013924315, 0.027236842, -0.035801884, 0.0020234918, 0.01571074, 0.013434884, 0.006711324, 0.0102413455, -0.035018794, 0.022966554, 0.013838665, 0.039570507, 0.021216838, -0.040059935, 0.041650586, -0.017888706, 0.0017298331, -0.037392538, -0.0059190574, -0.00093297806, -0.028925378, -0.0013964082, -0.04720563, 0.0007922666, 0.0049830205, -0.02677188, -0.0023370336, 0.015258015, -0.009739679, 0.028582776, 0.014854234, 0.01787647, 0.0088403495, -0.024618385, 0.030736273, -0.054228965, 0.025352532, -0.014695169, -0.017803056, 0.019430416, 0.007439353, 0.015111186, -0.009580614, 0.01454834, 0.046300184, 0.012272485, -0.006986629, -0.010957139, 0.0012809329, 0.025817491, -0.01927135, -0.04816002, 0.00076817744, -0.037368067, -0.00058617024, 0.016163463, -0.0050166687, 0.0030207075, 0.10082281, -0.04341254, -0.047303516, -0.00014090263, -0.032914244, -0.016090048, -0.019944318, 0.0096907355, -0.011232444, 0.013961023, 0.009550025, -0.05094978, 0.02077635, -0.016555008, -0.044073272, 0.007898195, -0.008185735, -0.00779419, 0.06871613, -0.014682934, 0.0036768513, 0.0664158, 0.011611753, 0.022917612, 0.0038389752, -0.006038356, -0.023872003, 0.0155394375, 0.009072829, 0.01681196, -0.056382462, -0.04674067, 0.022611717, -0.04911441, 0.013067811, -0.0036676743, 0.020091146, -0.024275783, -0.012847567, -0.00015189571, -0.003964392, -0.011819761, -0.0362179, 0.012352018, -0.033110015, -0.014670697, -0.0046985387, -0.016236877, 0.059416935, -0.06103206, -0.015343665, -0.019430416, 0.00028199644, -0.005206323, -0.033942048, 0.00420299, -0.018206837, 0.008283622, -0.007879841, 0.008870939, 0.045908637, -0.037049934, -0.04532132, -0.011991062, 0.039521564, 0.06866718, -0.0660732, -0.003103299, -0.04059831, 0.021424847, 0.023223506, 0.016909845, 0.009978277, -0.031299118, -0.009311426, 0.0018445435, -0.004615947, 0.042237904, 0.01191153, 0.0024028008, -0.020874238, -0.007971609, -0.056871895, -0.03210668, 0.02500993, -0.009256366, 0.0017818351, -0.003845093, -0.020862, 0.021375904, -0.019124521, -0.0113853915, -0.011281387, 0.014181267, -0.01454834, 0.03807774, -0.016016632, 0.006882625, -0.010871489, -0.032645054, -0.0038634469, 0.020384805, 0.009917098, 0.02045822, -0.01791318, 0.005350094, 0.020127855, -0.01950383, 0.042849693, -0.028705135, 0.039741807, -0.014291388, 0.03276741, -0.04480742, 0.015380372, 0.015759682, -0.022942083, -0.0013857018, -0.0065644947, 0.019516066, -0.010253582, 0.02248936, 0.011354801, -0.0036768513, 0.010528887, -0.033085544, 0.04840474, -0.027506027, -0.04140587, -0.03142148, -0.0020647875, -0.024447083, 0.027310256, 0.023027733, -0.010743013, 0.0024150365, -0.010008866, 0.02987977, -0.023798587, 0.0055275126, 0.03276741, 0.01164846, -0.001141751, 0.04297205, 0.010235228, 0.017264683, 0.0063993116, 0.017325861, -0.010382057, 0.007812544, -0.011550575, -0.010118988, -0.018818626, 0.008669049, -0.04840474, 0.009335899, 0.029855298, 0.018635089, 0.018879805, 0.04260498, 0.003973569, -0.0021611443, 0.013948787, 0.043045465, -0.0060322382, 0.009030004, 0.015172364, 0.005686578, 0.019112285, -0.020127855, -0.013349233, -0.014854234, -0.015429316, 0.018757448, 0.010840899, -0.01611452, -0.037368067, -0.019626187, 0.007947138, -0.0055733966, 0.0068030925, -0.0012901098, -9.559201e-05, -0.0056437524, 0.05946588, -0.062598236, 0.003089534, 0.0073904097, -0.0008633871, 0.044097744, 0.0014874117, 0.015331429, -0.022746312, 0.0041234572, 0.021632856, -0.015343665, 0.001784894, -0.050851893, -0.01810895, -0.006998865, -0.018329196, -0.021804156, 0.02880302, 0.019393709, -0.018427081, -0.005821171, 0.00040989855, -0.01133033, 0.01999326, -0.0061240066, 0.022819726, 0.019332528, 0.0024104482, 0.032669526, -0.045272376, 0.02784863, 0.007873723, -0.0007069985, -0.0010216874, -0.006888743, -0.009146244, 0.016041104, 0.0044997074, 8.6128406e-05, -0.044929776, -0.009519435, 0.04118563, -0.020727407, -0.015135657, -0.040549368, -0.0050931424, 0.0061301244, 0.012761916, 0.018696269, -0.02848489, -0.029512696, 0.008785289, -0.051194493, -0.04598205, 0.010278054, -0.046691727, -0.00704169, 0.0077697188, -0.02448379, 0.013961023, -0.023137856, 0.014658461, 0.03993758, 0.007898195, -0.019454887, 0.027408142, -0.03462725, -0.016860902, 0.0011937531, -0.024948752, -0.012339782, 0.004294758, -0.0004859898, -0.032326926, -0.0077880723, -0.02187757, 0.017117852, 0.0058028176, -0.0036799102, 0.00023018557, -0.016481593, 0.008858703, -0.020947652, -0.007384292, -0.020115618, 0.022758547, -0.010687952, -0.01298216, -0.037074406, -0.017448219, -0.018904276, 0.0039368616, -0.019308057, -0.018329196, -0.00379615, -0.018659562, 0.022954319, -0.011556692, 0.015478259, 0.040818553, 0.025670663, -0.0053959778, -0.02329692, -0.008974943, 0.03222904, -0.01880639, -0.057508156, -0.0025205703, 0.016126756, 0.006065887, -0.0054235086, 0.0076412433, 0.024410376, 0.01431586, 0.039692864, -0.015319194, 0.0010293348, 0.009598968, 0.008399861, -0.028191231, -0.009494963, -0.0014453513, 0.0038787415, -0.00904224, 0.046055466, 0.0049157236, 0.024300255, -0.065387994, -0.0045975936, 0.004313112, 6.0270766e-05, -0.02958611, -0.03335473, 0.030467087, 0.030858632, 0.03068733, -0.017766349, -0.04324124, 0.0022177347, 0.008858703, -0.023982124, -5.1046136e-05, -0.024104482, 0.04025571, -0.025279116, -0.017864235, 0.019467123, 0.028264647, -0.033942048, 0.0040989853, -0.03362392, -0.0049157236, 0.005946588, -0.010700188, -0.009452138, 0.008412098, 0.05961271, 0.031910907, 0.007316995, 0.010057809, -0.005545866, 0.005655988, -0.015380372, 0.018206837, -0.0003435577, 0.04338807, -0.03474961, 0.027603915, -0.008038906, -0.032987658, 0.016714072, 0.016958788, 0.008889292, -0.011269151, 0.02941481, -0.017435983, 0.0031537716, -0.02037257, 0.0031277707, 0.021902042, -0.036315788, 0.024239076, -0.0071273404, -0.060297914, 0.03210668, -0.0075617107, -0.005230795, 0.040353596, -0.022709602, 0.040891968, -0.012162363, 0.006387076, -0.027457085, 0.022464888, -0.016224641, -0.054326855, -0.0070233364, -0.013520534, 0.027432613, 0.0007632066, -0.007420999, -0.028264647, 0.007096751, 0.004719951, -0.018047772, -0.0067786206, 0.006380958, -0.008081731, -0.020751879, -0.037392538, 0.004931018, 0.016787486, 0.016395941, -0.011183501, 0.01431586, -0.043828554, 0.008100085, -0.0029595287, -0.0058089355, 0.024239076, -0.0076351254, -0.004007217, -0.00046763613, 0.026796354, 0.014413746, 0.03979075, -0.02196322, 0.019797489, 0.025377003, -0.010045573, -0.0044660587, 0.0069805114, -0.028215703, -0.033574972, -0.02500993, -0.026967654, -0.028900906, 0.030418143, -0.0024272725, -0.01817013, -0.021375904, -0.058095474, 0.030809687, 0.044734005, 0.0005444921, -0.014022201, 0.008338682, 0.010479944, 0.0057141082, 0.027114483, -0.025156759, 0.0011478689, 0.0246918, -0.0019959612, 0.0155394375, 0.0073965276, 0.007543357, 0.012205188, -0.010957139, -0.0072925235, 0.03364839, 0.033746276, -0.0015799447, -0.0330366, 0.04377961, -0.052613843, -0.0025251587, -0.00018181601, -0.0031568306, -0.00053187396, -0.022758547, -0.053690594, -0.0011341036, -0.04360831, 0.030124485, -0.041503757, 0.0035422577, -0.01069407, -0.026062207, 0.016138991, -0.028558305, 0.027334727, 0.08305646, 0.009017768, -0.023566108, 0.009397077, -0.0144382175, 0.009397077, 0.028607247, 0.015649559, -0.04199319, -0.039864164, -0.00046113587, 0.024887571, 0.011293623, -0.012676266, 0.012388725, -0.017717406, -0.0036768513, 0.054375798, 0.010804192, 0.015147893, 0.018463789, 0.032840826, -0.01582086, -0.005402096, -0.029316923, -0.01034535, 0.036242373, 0.004612888, 0.049457014, 0.021216838, 0.0155394375, 0.022354767, -0.08379061, -0.039252374, 0.014242445, 0.011440452, 0.0442201, 0.037465952, -0.043877497, 0.0023462104, -0.01637147, 0.012394843, 0.03318343, 0.036487088, 0.0039919224, -0.0011325742, 0.032008793, -0.002147379, -0.030613916, -0.0037808553, 0.011801408, -0.026233507, 0.028754078, -0.0014789996, 0.05276067, -0.0047719534, -0.0076779504, -0.00649108, 0.0075127673, 0.0020754938, 0.02439814, -0.035116684, -0.0022146758, -0.0044997074, -0.012095067, 0.011905411, -0.012835331, -0.013557241, -0.01596769, 0.008919882, 0.025279116, 0.0067052064, -0.012156245, -0.029610582, 0.016224641, 0.012639558, -0.0069499216, 0.0039858045, -0.015478259, 0.026453752, -0.04625124, -0.015147893, -0.0066440273, 0.042996522, 0.024214605, 0.0056926957, -0.0038022678, -0.0031782433, -0.028607247, -0.03142148, 0.006937686, 0.005233854, 0.020348098, -0.020103382, 0.0024471555, -0.027261313, 0.0024639796, 0.040647253, -0.0047077155, 0.017130088, 0.009543907, 0.024324726, -0.016041104, -0.009238012, -0.011727993, -0.005946588, -0.014009966, 0.028460419, -0.033403672, 0.011691285, 0.005334799, -0.044636115, -0.020764114, 0.005279738, 0.016457122, 0.019883139, 0.013410413, -0.0052950326, -0.007690186, 0.03477408, -0.0041876948, -0.013018868, -0.041430343, -0.031715136, -0.015270251, -0.024251312, 0.0246918, -0.021265782, 0.0064115473, 0.01022911, -0.023798587, -0.0018491319, 0.0014996475, 0.017032202, -0.00014788084, 0.009543907, 0.008601752, -0.039252374, -0.015845332, 0.028705135, -0.002005138, -0.051047664, -0.015759682, 0.010926549, 0.004891252, 0.028068874, 0.022917612, 0.025450418, 0.028215703, -0.008167381, 0.008620106, -0.014682934, -0.02428802, 0.029219037, 0.0062433057, -0.027506027, 0.014193502, -0.019809725, 0.018292489, 0.051683925, 0.0027285784, -0.04563945, -0.008412098, 0.0005146674, 0.0052552666, 0.013508298, 0.016346999, -0.013863136, 0.032693997, -0.012553908, -0.028289119, -0.005408214, 0.010798073, 0.005126791, -0.0019944317, -0.01199718, -0.013434884, 0.028191231, 0.0049463133, 0.0067357956, 0.016946552, -0.01214401, 0.007555593, -0.0061576553, 0.009800858, -0.016530536, -0.009403195, -0.021290254, -0.008497748, -0.02416566, 0.003002354, 0.043363597, -0.0138509, -0.018867569, -0.018035537, 0.031250175, 0.014744112, 0.027334727, 0.016249113, 0.05555043, 0.047254574, 0.0041020443, 0.023627287, -0.0025863375, -0.030638387, 0.006729678, 0.0010140401, 0.0055948095, -0.009959923, -0.022367002, -0.01431586, -0.016041104, 0.020323627, 0.010443237, -0.003640144, -0.006760267, 0.0030497676, 0.03717229, 0.007420999, 0.0008045024, -0.020886473, 0.0023370336, 0.0010507475, 0.015833097, -0.0112997405, 0.017974358, 0.013190168, 0.040329125, 0.02477745, -0.03161725, 0.022819726, 0.0124866115, -0.017754113, -0.012688502, -0.011458806, -0.002480804, 0.018561674, 0.021290254, -0.015331429, 0.011746347, -0.015625088, 0.015747447, 0.004799484, 0.009501081, -0.032693997, 0.02831359, 0.018855333, 0.041283514, -0.0082897395, 0.028900906, -0.028264647, 0.0012189894, 0.019124521, -0.0024700977, -0.0069132145, -0.024434848, 0.024655093, 0.009984395, 0.0026031616, -0.0044935895, 0.0011226326, -0.035655055, -0.016481593, -0.005995531, -0.0063014254, 0.019075578, -0.012278602, 0.006065887, 0.0220244, 0.0025893964, 0.0054938644, 0.027579444, -0.02376188, 0.016151227, -0.017227976, -0.01990761, -0.0052216183, -0.012321428, 0.016273584, -0.038689528, 0.02848489, 0.0041601644, 0.004340642, -0.018365903, 0.015894275, 0.02564619, 0.006096476, -0.0015570027, 0.008938235, 0.018659562, 0.017778585, 0.005937411, 0.0030757687, 0.025254644, 0.0018384256, 0.0012885804, -0.020262448, -0.020727407, -0.012376489, -0.026233507, 0.009397077, 0.0030635328, -0.009525553, -0.010816428, 0.032963187, 0.0073965276, -0.015258015, -0.038762942, 0.0033709568, 0.028117817, -0.017252447, -0.045419205, -0.0050441995, -0.028754078, -0.023872003, 0.03418676, 0.004570063, 0.008669049, -0.0045486502, 0.008534455, 0.007445471, 0.016261349, -0.028435947, 0.043657254, -0.043510426, -0.0029304686, 0.009078947, -0.011991062, -0.007690186, -0.026135622, 0.008479394, 0.043681726, -0.005484687, 0.022036636, -0.00035502875, -0.002153497, 0.012095067, 0.035679527, 0.0022819724, 0.05931905, 0.012131774, 0.007537239, 0.015331429, -0.0047627767, 0.023688465, -0.022868669, -0.015123421, -0.009335899, -0.0004978432, -0.03979075, 0.003848152, -0.009972159, 0.009660146, -0.033085544, 0.00010247464, -0.027775215, -0.014230209, -0.0010178637, -0.023859767, -0.019283585, 0.021167895, -0.008717991, -0.0026934005, -0.008118439, -0.016298056, -0.010932667, -0.0018185425, 0.020335862, 0.015294722, 0.01793765, -0.0468875, 0.009072829, 0.02155944, 0.0044660587, -0.005830348, -0.028338062, -0.01848826, 0.042727336, -0.011948237, 0.014964356, -0.012566144, -0.001791012, -0.011263033, -0.018879805, 0.018781919, 0.027310256, 0.008632341, 0.010375939, -0.004863722, 0.003930744, 0.01611452, 0.047425874, -0.0083325645, 0.021021066, 8.168338e-05, -0.0018246603, 0.0095622605, 0.013740778, 0.016444886, -0.0017038321, -0.04896758, 0.005007492, 0.0036737924, -0.0021550264, 0.01393655, 0.020959888, -0.01738704, 0.01793765, 0.03822457, 0.03636473, 0.019357, 0.026967654, -0.01353277, 0.03430912, 0.017962122, 0.030320257, 0.01558838, 0.013704071, -0.027799686, -0.026625052, 0.040549368, -0.033721805, -0.01486647, -0.007261934, -0.023333628, 0.012364253, -0.008522219, -0.014389275, 0.018427081, -0.013275819, 0.01179529, -0.021229073, -0.042751808, -0.018757448, 0.002720931, 0.0083753895, -0.00013497593, -0.021278018, -0.045198962, 0.03362392, 0.02863172, -0.031029932, -0.034553837, 0.03178855, -0.014474925, 0.038493756, 0.003141536, 0.004313112, -0.019136757, -0.03068733, -0.01057783, -0.002950352, 0.0120216515, 0.041112214, -0.025719605, -0.012700737, 0.00010304819, -0.005405155, -0.016726308, 0.018586146, 0.021583911, 0.015625088, 0.014536104, -0.0106634805, 0.02199993, 0.0074515888, 0.009213541, -0.06396864, 0.00034891083, 0.0131656965, 0.02454497, 0.042482622, 0.00076053006, -0.015784154, -0.0008916823, 0.017851999, -0.014780819, -0.05004433, 0.014768584, 0.00034011638, 0.010204638, 0.03318343, 0.008204089, 0.0025419828, 0.037979852, 0.00362179, 0.0042152256, 0.005937411, -0.015612853, 0.03178855, 0.013520534, -0.037686195, 0.006992747, 0.022183465, -0.016090048, 0.0016181816, 0.00840598, 0.0029289392, -0.011568928, 0.018904276, 0.012333664, -0.026380336, -0.035532698, 0.012908746, -0.030491559, 0.017056674, -0.010174049, -0.00072841113, -0.016567243, -0.004851486, 0.0015386491, -0.0051573804, -0.023394806, -0.025890905, -0.0014101734, -0.017105617, 0.011464924, -0.0034076641, -0.014120087, 0.02118013, -0.031715136, -0.01567403, -0.029928712, 0.013948787, 0.01840261, 0.032302454, 0.034235705, 0.04896758, 0.0005464039, 0.027775215, -0.010865371, -0.02877855, 0.0017726583, 0.014756348, -0.006790857, -0.01880639, 0.0041632233, 0.007482178, 0.021534968, -0.00041486934, 0.028656192, 0.0034902557, -0.010712423, -0.0057477565, -0.01054724, -0.023688465, -0.010467708, 0.025230173, -0.003254717, 0.013899843, 0.004065337, 0.0014124676, 0.013912079, -0.021351432, 0.009452138, 0.023003262, -0.02784863, -0.012835331, 0.039766278, -0.0151846, 0.021987693, -0.0047750124, -0.030002126, 0.033477087, 0.025915377, -0.0088403495, -0.01571074, 0.034064405, -0.016420413, -0.010938785, -0.013104518, -0.07679174, -0.0069743935, 0.010100635, -0.0020907884, 0.031225706, -0.022783019, -0.0017191267, 0.015172364, -0.010559476, 0.002671988, -0.030246843, -0.009715208, -0.011752465]"
../../../gradio,../../../gradio/gradio/components,line_plot.pyi,"""""""gr.LinePlot() component""""""

from __future__ import annotations

from typing import Any, Callable, Literal

import altair as alt
import pandas as pd
from gradio_client.documentation import document, set_documentation_group

from gradio.components.plot import AltairPlot, AltairPlotData, Plot

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class LinePlot(Plot):
    """"""
    Creates a line plot component to display data from a pandas DataFrame (as output). As this component does
    not accept user input, it is rarely used as an input component.

    Demos: live_dashboard
    """"""

    data_model = AltairPlotData

    def __init__(
        self,
        value: pd.DataFrame | Callable | None = None,
        x: str | None = None,
        y: str | None = None,
        *,
        color: str | None = None,
        stroke_dash: str | None = None,
        overlay_point: bool | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        stroke_dash_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        stroke_dash_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        x_lim: list[int] | None = None,
        y_lim: list[int] | None = None,
        caption: str | None = None,
        interactive: bool | None = True,
        label: str | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        every: float | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        show_actions_button: bool = False,
    ):
        """"""
        Parameters:
            value: The pandas dataframe containing the data to display in a scatter plot.
            x: Column corresponding to the x axis.
            y: Column corresponding to the y axis.
            color: The column to determine the point color. If the column contains numeric data, gradio will interpolate the column data so that small values correspond to light colors and large values correspond to dark values.
            stroke_dash: The column to determine the symbol used to draw the line, e.g. dashed lines, dashed lines with points.
            overlay_point: Whether to draw a point on the line for each (x, y) coordinate pair.
            title: The title to display on top of the chart.
            tooltip: The column (or list of columns) to display on the tooltip when a user hovers a point on the plot.
            x_title: The title given to the x axis. By default, uses the value of the x parameter.
            y_title: The title given to the y axis. By default, uses the value of the y parameter.
            x_label_angle: The angle for the x axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            y_label_angle: The angle for the y axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            color_legend_title: The title given to the color legend. By default, uses the value of color parameter.
            stroke_dash_legend_title: The title given to the stroke_dash legend. By default, uses the value of the stroke_dash parameter.
            color_legend_position: The position of the color legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            stroke_dash_legend_position: The position of the stoke_dash legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            height: The height of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            x_lim: A tuple or list containing the limits for the x-axis, specified as [x_min, x_max].
            y_lim: A tuple of list containing the limits for the y-axis, specified as [y_min, y_max].
            caption: The (optional) caption to display below the plot.
            interactive: Whether users should be able to interact with the plot by panning or zooming with their mouse or trackpad.
            label: The (optional) label to display on the top left corner of the plot.
            show_label: Whether the label should be displayed.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            visible: Whether the plot should be visible.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            show_actions_button: Whether to show the actions button on the top right corner of the plot.
        """"""
        self.x = x
        self.y = y
        self.color = color
        self.stroke_dash = stroke_dash
        self.tooltip = tooltip
        self.title = title
        self.x_title = x_title
        self.y_title = y_title
        self.x_label_angle = x_label_angle
        self.y_label_angle = y_label_angle
        self.color_legend_title = color_legend_title
        self.stroke_dash_legend_title = stroke_dash_legend_title
        self.color_legend_position = color_legend_position
        self.stroke_dash_legend_position = stroke_dash_legend_position
        self.overlay_point = overlay_point
        self.x_lim = x_lim
        self.y_lim = y_lim
        self.caption = caption
        self.interactive_chart = interactive
        self.width = width
        self.height = height
        self.show_actions_button = show_actions_button
        super().__init__(
            value=value,
            label=label,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            every=every,
        )

    def get_block_name(self) -> str:
        return ""plot""

    @staticmethod
    def create_plot(
        value: pd.DataFrame,
        x: str,
        y: str,
        color: str | None = None,
        stroke_dash: str | None = None,
        overlay_point: bool | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        stroke_dash_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        stroke_dash_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | None = None,
        width: int | None = None,
        x_lim: list[int] | None = None,
        y_lim: list[int] | None = None,
        interactive: bool | None = None,
    ):
        """"""Helper for creating the scatter plot.""""""
        import altair as alt

        interactive = True if interactive is None else interactive
        encodings = {
            ""x"": alt.X(
                x,  # type: ignore
                title=x_title or x,  # type: ignore
                scale=AltairPlot.create_scale(x_lim),  # type: ignore
                axis=alt.Axis(labelAngle=x_label_angle)
                if x_label_angle is not None
                else alt.Axis(),
            ),
            ""y"": alt.Y(
                y,  # type: ignore
                title=y_title or y,  # type: ignore
                scale=AltairPlot.create_scale(y_lim),  # type: ignore
                axis=alt.Axis(labelAngle=y_label_angle)
                if y_label_angle is not None
                else alt.Axis(),
            ),
        }
        properties = {}
        if title:
            properties[""title""] = title
        if height:
            properties[""height""] = height
        if width:
            properties[""width""] = width

        if color:
            domain = value[color].unique().tolist()
            range_ = list(range(len(domain)))
            encodings[""color""] = {
                ""field"": color,
                ""type"": ""nominal"",
                ""scale"": {""domain"": domain, ""range"": range_},
                ""legend"": AltairPlot.create_legend(
                    position=color_legend_position, title=color_legend_title or color
                ),
            }

        highlight = None
        if interactive and any([color, stroke_dash]):
            highlight = alt.selection(
                type=""single"",  # type: ignore
                on=""mouseover"",
                fields=[c for c in [color, stroke_dash] if c],
                nearest=True,
            )

        if stroke_dash:
            stroke_dash = {
                ""field"": stroke_dash,  # type: ignore
                ""legend"": AltairPlot.create_legend(  # type: ignore
                    position=stroke_dash_legend_position,  # type: ignore
                    title=stroke_dash_legend_title or stroke_dash,  # type: ignore
                ),  # type: ignore
            }  # type: ignore
        else:
            stroke_dash = alt.value(alt.Undefined)  # type: ignore

        if tooltip:
            encodings[""tooltip""] = tooltip

        chart = alt.Chart(value).encode(**encodings)  # type: ignore

        points = chart.mark_point(clip=True).encode(
            opacity=alt.value(alt.Undefined) if overlay_point else alt.value(0),
        )
        lines = chart.mark_line(clip=True).encode(strokeDash=stroke_dash)

        if highlight:
            points = points.add_selection(highlight)

            lines = lines.encode(
                size=alt.condition(highlight, alt.value(4), alt.value(1)),
            )

        chart = (lines + points).properties(background=""transparent"", **properties)
        if interactive:
            chart = chart.interactive()

        return chart

    def preprocess(self, payload: AltairPlotData | None) -> AltairPlotData | None:
        """"""
        Parameters:
            payload: The data to display in a line plot.
        Returns:
            (Rarely used) passes the data displayed in the line plot as an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""line"").
        """"""
        return payload

    def postprocess(
        self, value: pd.DataFrame | dict | None
    ) -> AltairPlotData | dict | None:
        """"""
        Parameters:
            value: Expects a pandas DataFrame containing the data to display in the line plot. The DataFrame should contain at least two columns, one for the x-axis (corresponding to this component's `x` argument) and one for the y-axis (corresponding to `y`).
        Returns:
            The data to display in a line plot, in the form of an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""line"").
        """"""
        # if None or update
        if value is None or isinstance(value, dict):
            return value
        if self.x is None or self.y is None:
            raise ValueError(""No value provided for required parameters `x` and `y`."")
        chart = self.create_plot(
            value=value,
            x=self.x,
            y=self.y,
            color=self.color,
            overlay_point=self.overlay_point,
            title=self.title,
            tooltip=self.tooltip,
            x_title=self.x_title,
            y_title=self.y_title,
            x_label_angle=self.x_label_angle,
            y_label_angle=self.y_label_angle,
            color_legend_title=self.color_legend_title,  # type: ignore
            color_legend_position=self.color_legend_position,  # type: ignore
            stroke_dash_legend_title=self.stroke_dash_legend_title,
            stroke_dash_legend_position=self.stroke_dash_legend_position,  # type: ignore
            x_lim=self.x_lim,
            y_lim=self.y_lim,
            stroke_dash=self.stroke_dash,
            interactive=self.interactive_chart,
            height=self.height,
            width=self.width,
        )

        return AltairPlotData(type=""altair"", plot=chart.to_json(), chart=""line"")

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        import pandas as pd

        return pd.DataFrame({self.x: [1, 2, 3], self.y: [4, 5, 6]})","The code defines a `LinePlot` component that creates a line plot to display data from a pandas DataFrame. The component does not accept user input and is used to visualize data. It includes parameters such as x-axis column, y-axis column, color, title, tooltip, legends, labels, and interactive options. The `create_plot` method generates the line plot using Altair library based on the provided parameters. The `preprocess` and `postprocess` methods handle the data processing and visualization. The `example_value` method provides an example DataFrame for demonstration purposes.","[-0.067497276, -0.006978885, 0.006864306, -0.013999435, 0.024894828, -0.02733223, -0.03324866, -0.00076884916, -0.016665993, 0.025686463, 0.044998184, -0.028728006, -0.021457467, -0.027936373, 0.0070517985, -0.016249344, -0.008025718, 0.011582865, -0.0137806935, 0.023832371, 0.007364286, 0.00065850205, -0.0086246515, 0.0047758487, -0.01881174, -0.0037081838, 0.00031411494, 0.014103597, -0.012155759, 0.0338528, -0.023874037, -0.023603214, 0.00921317, 0.022853244, 0.026144778, -0.028853003, 0.018624248, -0.023769874, -0.00036098802, -0.028061368, -0.00245563, 0.018322177, 0.003562356, 0.027103072, -0.0005448999, 0.025686463, -0.03768598, 0.023582382, 0.006307037, 0.040185876, -0.035665225, 0.0072653317, -0.008114256, -0.055956073, -0.043539908, 0.054289475, -0.050997943, 0.074788645, 0.019457549, -0.0051482297, 0.053456176, 0.0026821834, -0.027623884, 0.044706527, -0.05624773, -0.008239251, -0.03914425, -0.0020025233, -0.016665993, 0.024603173, 0.05083128, 0.0057393517, -0.017634705, 0.009390246, -0.023457386, -0.035081916, -0.041165005, -0.012759902, 0.007827809, 0.010103758, -0.014884816, 0.02733223, -0.020051274, 0.020363761, -0.012853648, -0.08299665, -0.012499495, -0.008202794, 0.009890226, -0.0008560852, -0.0009413682, -0.028644677, -0.02541564, 0.04495652, 0.03951924, 0.10024595, -0.038644273, 0.029894626, 0.029936291, 0.012697404, 0.04237329, -0.017718036, -0.03083209, 0.028373854, 0.0077236467, -0.014093181, -0.012072429, -0.026353102, 0.033706974, 0.03987339, -0.038060963, 0.0135932015, -0.04816472, 0.027019743, -0.053456176, -0.010843312, 0.026394768, -0.014655658, 0.029373813, 0.016905569, -0.038831767, 0.01975962, 0.033894464, -0.041644152, 0.0012213049, -0.013468206, -0.008015301, -0.081871696, -0.012530744, 0.02172829, 0.0018814345, 0.00804655, -0.04189414, -0.03601938, -0.04453987, 0.04337325, -0.007405951, 0.020655416, -0.02583229, 0.0042680567, 0.009900642, 0.047123097, 0.02072833, -0.037415158, -0.007447616, -0.021665793, -0.002835823, -0.01809302, -0.025332311, 0.017540958, 0.0066924384, 0.11016222, 0.0045545036, -0.020749163, -0.019113813, 0.029269652, 0.062539145, -0.01429109, -0.003166539, -0.027353063, 0.027186403, -0.0033566353, -0.019499213, 0.014686907, -0.016999314, -0.0017408151, -0.015270217, -0.006551819, -0.024603173, -0.020499172, -0.0006506899, -0.009983972, -0.017822197, -0.034477774, 0.063414104, -0.018176349, -0.011999516, 0.011603698, 0.042269126, -0.042998265, -0.036415197, -0.026353102, -0.052622877, -0.024519844, -0.03035294, 0.029248819, -0.011624531, 0.024540676, 0.0061455853, 0.04695644, -0.0073330374, -0.014020268, -0.042227462, 0.017363882, -0.025228148, -0.014634826, 0.040540032, 0.016436836, -0.010676652, 0.03368614, 0.01587436, 0.02364488, -0.032811176, 0.0072549153, 0.027186403, 0.0412275, -0.03610271, -0.03316533, -0.021332473, -0.0380193, 0.03229036, -0.031477895, 0.029061327, -0.005416448, -0.02960297, -0.0008788708, -0.01931172, -0.02439485, 0.023269894, 0.016936816, -0.0011067261, -0.0010865447, -0.005385199, -0.024603173, 0.01479107, -0.0007102578, 0.06333078, -0.05174791, -0.006817433, -0.0036066254, 0.0035024628, -0.0068486817, 0.014103597, -0.011770358, -0.0019491401, -0.03229036, -0.031852882, -0.06295579, 0.0135932015, 0.009463159, -0.0011295117, 0.006817433, 0.0028254068, 0.020530421, 0.06220582, 0.026540596, -0.0023045945, -0.04633146, 0.018853405, 0.052789535, 0.013353628, -0.004153478, -0.0016600892, -0.008609028, -0.040748354, -0.018572167, 0.0014035892, -0.011718277, -0.027728047, -0.0528312, -0.01650975, -0.0061403774, -0.04345658, -0.0017603457, -0.005916428, -0.014405669, 0.028873835, 0.0594976, -0.07712188, -0.028498849, 0.014936897, 0.015113973, 0.042623278, -0.03291534, -0.033956964, -0.017790949, 0.039810892, 0.06691396, 0.0156243695, 0.0338528, -0.034061126, 0.0035675643, -0.010228754, 0.032227866, -0.032436192, 0.013353628, 0.009838144, -0.0330195, -0.017853446, -0.03893593, 0.039623402, -0.041769147, -0.00019091026, 0.003679539, 0.0017212847, 0.025623966, 0.030852921, 0.03324866, 0.025353143, -0.017353466, 0.016238928, -0.026311439, -0.015145222, -0.05149792, 0.013697363, -0.012739069, 0.0074267834, 0.023082402, 0.0034503816, 0.0045336713, 0.02749889, 0.024936493, 0.019374218, -0.025936453, -0.020082522, 0.04156082, 0.046248134, 0.025519803, -0.038165126, -0.04137333, -0.068913884, -0.029269652, 0.045414835, -0.013009892, -0.026686423, -0.02172829, -0.010400622, 0.00058265874, 0.010395413, 0.023665711, 0.01734305, -0.039810892, -0.05424781, 0.028728006, 0.012405749, 0.009483992, -0.05708103, -0.0371235, -0.054622795, 0.05499778, -0.037310995, -0.015655618, -0.012155759, 0.02841552, -0.004036295, 0.013426541, 0.011853688, -0.0077601033, 0.022999072, 0.013020308, -0.06008091, -0.021322057, -0.006765352, -0.0101922965, -0.007791352, -0.022228269, -0.04845638, -0.04328992, -0.016353507, -0.0018866427, -0.029373813, -0.010119383, -0.03501942, -0.008260083, 0.020603335, 0.026082281, -0.054289475, -0.042581614, -0.0116661955, 0.013530704, 0.024269853, -0.032832008, -0.019322136, 0.021415802, -0.014988978, -0.028519683, 0.018624248, -0.050414633, -0.061414186, -0.024811499, 0.0040753563, 0.00018960822, 0.0027160363, -0.005458113, -0.021915782, 0.02691558, 0.022749081, 0.011426622, 0.022499092, 0.023728209, 0.03737349, -0.0669973, -0.035248578, 0.029040495, 0.059039284, -0.02658226, 0.023436554, 0.053039525, 0.040935848, -0.008041342, -0.03495692, -0.01567645, 0.009499617, 0.02050959, -0.038394284, -0.0051742704, 0.0194263, 0.036477692, 0.018332593, 0.02899883, 0.0024829728, -0.039019257, 0.009379829, -0.0437899, 0.05833098, -0.014895232, -0.00048533198, -0.003466006, 0.013489039, 0.01872841, 0.005926844, -0.035706893, -0.015343131, -0.024332352, -0.04912302, 0.02524898, 0.048081394, -0.016166015, -0.034477774, -0.02197828, 0.05441447, 0.0272489, 0.035123583, 0.016863903, -0.037748475, -0.04991465, -0.020572087, 0.0132078, 0.04437321, 0.01925964, 0.01725972, 0.005202915, 0.0050492752, -0.008025718, -0.060455892, -0.026457265, 0.03951924, -0.023874037, -0.030040454, 0.007541362, -0.0013788505, 0.03410279, 0.008697566, 0.00015892914, 0.038977593, -0.028894667, -0.03358198, -0.024978159, 0.0007955408, 0.045164842, -0.0034451734, 0.05458113, -0.031852882, 0.058622632, -0.0031040413, -0.0023931325, 0.043748233, -0.009062135, 0.026769754, -0.01822843, -0.021936614, 0.019488797, 0.06358077, 0.009067343, -0.03383197, 0.0065778596, 0.011947434, -0.034561105, -0.019405467, -0.0066976463, 0.04120667, 0.017978441, -0.020686666, 0.02197828, 0.044123217, 0.07541362, -0.014332755, -0.030477937, -0.0008404609, -0.008572571, -0.015509791, -0.031519562, -0.0063174535, -0.006213291, 0.011603698, -0.0028644677, -0.09632944, 0.010364165, 0.016207678, -0.020499172, 0.03683185, 0.031311236, 0.03110291, 0.042581614, 0.024457347, 0.005869555, 0.029811297, 0.0005462019, -0.02508232, 0.0330195, -0.05374783, 0.0446232, 0.027748879, -0.0068330574, -0.022353264, 0.026144778, -0.0152598005, 0.022103274, -0.008582987, -0.02708224, 0.014697324, -0.0018514878, -0.0104631195, -0.018520085, -0.0038149501, 0.024540676, 0.0015962897, -0.045414835, -0.026019784, -0.027290566, -0.016655577, -0.0050909403, -0.013301547, 0.008036134, -0.07028883, 0.02289491, 0.015686866, 0.033040334, -0.038435947, -0.006468489, 0.02824886, 0.02239493, 0.0032811176, -0.02089499, 0.022624087, -0.009379829, -0.011041221, -0.0138744395, 0.011062053, 0.05749768, 0.06974719, -0.035561066, -0.007900722, -0.0036508944, 0.022103274, 0.029394647, -0.020384593, 0.018624248, -0.009291291, -0.030332109, 0.0148744, 0.051289596, -0.004020671, 0.015218136, 0.019103395, -0.009520449, 0.004486798, -0.031957045, -0.01872841, 0.015238969, -0.045331504, -0.0111558, -0.013072389, -0.02106165, -0.007395535, -0.004353991, 0.042394124, -0.037227664, -0.006530986, 0.0001332954, -0.027144738, 0.024749001, -0.03266535, -0.029811297, -0.029457144, 0.015478542, -0.011416206, 0.03166539, 0.009202753, -0.029290484, -0.028457185, -0.008426744, -0.05958093, -0.001649673, -0.023999032, -0.023957366, 0.0040258793, 0.0070934636, -0.0042446204, -0.0018033127, 0.007541362, -0.0022290766, -0.017197223, -0.0014348379, -0.020134604, -0.028540514, 0.01884299, 0.06953886, -0.028540514, -0.022749081, 0.0048930314, 0.02256159, 0.0036326658, -0.044456538, 0.0061195446, 0.030894587, 0.006812225, 0.03760265, 0.010536033, -0.05708103, -0.014686907, -0.009499617, -0.037227664, -0.00498157, -0.00033690047, 0.012593241, -0.02247826, -0.004609189, -0.023290727, 0.050372966, -0.015738947, 0.006932012, 0.07203876, 0.017572207, 0.034540273, 0.008723606, 0.003554544, -0.030457104, -0.0014673887, -0.043748233, -0.02061375, 0.013603617, 0.024124026, 0.02816553, 0.0039113006, -0.0050466713, -0.0115724495, 0.024644839, 0.028707175, -0.012884896, 0.017030563, -0.0061247526, 0.027103072, 0.0113849575, -0.020113772, -0.013176551, 0.008598612, -0.0032446608, 0.03229036, 0.008676733, -0.01504106, -0.015103557, -0.01015584, -0.013968186, -0.017728452, 0.054372806, 0.036227703, -0.014478582, 0.045373168, 0.017665954, -0.012697404, 0.04420655, -0.009864185, 0.004234204, -0.025394809, -0.024353184, -0.0020051275, -0.034540273, -0.0037003714, 0.01204118, -0.022457426, -0.00448159, -0.03251952, -0.0028045743, 0.00837987, -0.0015337922, 0.030582098, 0.017728452, 0.0051404177, -0.01445775, -0.0075101135, 0.02247826, 0.008744439, 0.012364084, 0.013811942, 0.019488797, 0.0029009245, 0.0029035287, 0.015895192, -0.017405547, -0.02449901, -0.008968388, 0.035144415, -0.031457063, -0.0061612097, 0.025019823, 0.015884776, -0.0027629093, 0.048498042, -0.022124106, -0.014801485, 0.0137806935, -0.04287327, 0.011041221, -0.036061045, 0.027957205, 0.039352577, 0.003726412, -0.035081916, 0.029561307, -0.03768598, -0.018363843, -0.05833098, -0.021415802, 0.012551577, 0.023540717, 0.0011379749, 0.02841552, 0.011312043, 0.005426864, 0.015155639, -0.030957084, 0.037081838, -0.0027394728, 0.0067913923, -0.025498971, -0.0023944345, 0.016322257, -0.023561548, 9.424465e-06, -0.007057007, -0.0007649431, 0.013509871, -0.011009973, 0.013916105, -0.041519158, -0.018155517, -0.018551335, -0.010562073, -0.0047732447, 0.025707295, 0.003463402, 0.014416085, 0.0023996427, -0.059705924, 0.014780654, -0.020207517, -0.030769592, 0.0100048045, 0.010676652, -0.015738947, 0.0033930922, 0.026478099, -0.008332997, -0.034061126, -0.043498244, 0.06428907, 0.0006913783, -0.016738908, -0.029373813, -0.027811378, -0.0272489, 0.022999072, -0.03285284, 0.023186564, -0.007057007, 0.014322339, 0.01856175, -0.00355194, -0.027353063, 0.009140256, 0.0061247526, -0.030332109, 0.0055049863, 0.04029004, 0.025103154, -0.021874117, -0.0025129195, -0.016936816, -0.016780572, -0.051289596, 0.0031873714, 0.01939505, -0.005926844, 0.05183124, -0.024165692, 0.014051517, -0.049956318, -0.041685816, -0.02164496, 0.021238726, -0.0052784327, -0.038810935, 0.014666075, 0.035040252, -0.003562356, -0.030165449, -0.02674892, -0.012051597, -0.02466567, 0.009551697, 0.02674892, -0.034790263, 0.009218378, -0.032040372, -0.01931172, 0.019811701, -0.029123824, -0.027353063, 0.0016314446, -0.01040583, -0.0049997983, -0.021113731, -0.013218217, 0.02156163, -0.0011243036, 0.031040413, 0.019520046, -0.014863984, -0.03049877, -0.015655618, -0.0061976663, 0.02106165, 0.011062053, 0.051956236, 0.0150723085, 0.022853244, -0.018749243, 0.010634988, 0.008848601, 0.02541564, 0.035581898, -0.004523255, -0.036227703, 0.042102467, -0.021176228, -0.006942428, -0.014166095, -0.0027368688, 0.022999072, 0.03804013, -0.0086194435, 0.0194263, -0.044831526, -0.032894507, 0.010759982, -0.0056976867, 0.0053253057, 0.010150632, 0.06016424, -0.009218378, -0.03024878, 0.012989059, -0.004739392, -0.018572167, -0.06324745, -0.016228512, -0.009900642, 0.0036482902, -0.008806936, 0.017665954, 0.016738908, -0.003382676, 0.021155396, -0.022124106, 0.0011496932, -0.010452703, 0.032561187, 0.0026509347, -0.009348581, -0.0020480945, 0.010395413, 0.028957164, 0.0034477776, -0.015113973, -0.038165126, -0.0009576436, -0.0023957365, 0.021134563, -0.003932133, -0.02649893, 0.025290646, 0.0046248133, 0.009723566, 0.008254875, 0.015895192, -0.0029165489, -0.024519844, -0.014499415, 0.020957487, 0.031957045, -0.004851367, 0.011634947, -0.011291211, 0.00025275673, -0.019957528, -0.004101397, -0.049872987, -0.047748074, -0.04495652, -0.011416206, -0.0113849575, -0.002533752, 0.013311963, 0.00921317, 0.026040616, -0.022853244, -0.012051597, -0.005124793, 0.0007102578, 0.021832451, 0.00014745498, -0.00094527437, 0.005952885, -0.040144213, 0.025457306, -0.00802051, 0.0034035083, 0.0060726716, -0.0038383866, 0.047789738, 0.046789777, -0.0060570473, 0.003132686, -0.003338407, -0.010968307, -0.017447213, -0.009733982, 0.015999354, 0.0077132303, 0.011520368, 0.013509871, -0.005541443, 0.011041221, 0.007369494, -0.009525658, 0.037498485, 0.022707418, 0.030332109, 0.021197062, 0.029436313, -0.036311034, 0.09199629, 0.012739069, -0.043914896, -0.011134967, -0.011364125, 0.006973677, 0.020072106, 0.0077653117, -0.010348541, -0.027769713, 0.02306157, 0.0103225, 0.018593, -0.032748677, -0.0020910613, -0.014166095, 0.024853164, 0.010067302, -0.005921636, -0.009749606, -0.0010110269, 0.024415681, -0.01675974, -0.01917631, 0.007359078, -0.010400622, 0.034123622, 0.021457467, 0.020072106, 0.022249103, 0.00031427768, 0.019228391, -0.030102951, -0.027040575, -0.022082442, -0.0061664176, -0.005452905, 0.0018983609, -0.008150713, 0.058539305, 0.025498971, 0.03710267, 0.023269894, -0.0006591531, 0.0075361542, 0.015718115, 0.03995672, -0.0036014172, -0.022207437, 0.021374138, -0.004192539, -0.019634625, -0.037977632, -0.008859018, 0.008765271, -0.0157077, -0.02331156, -0.005921636, 0.016968066, -0.008062175, -0.004825326, 0.029019661, -0.0017681578, -0.015488958, -0.029457144, -0.005320098, -0.03560273, -0.025290646, -0.018572167, -0.008504865, 0.017384715, -0.009020469, -0.008885058, 0.005114377, 0.007609068, -0.017540958, 0.025186483, 0.03501942, -0.005208123, 0.0039842143, 0.013343211, 0.0028254068, 0.018238846, 0.041394163, -0.012864064, 0.046581455, -0.002503805, 0.0012877084, -0.03176955, -0.025603132, 0.03083209, 0.038060963, 0.018468004, -0.0058122654, 0.0020780412, 0.0019973153, 0.026478099, 0.019030482, 0.029894626, -0.0072497074, -0.018238846, 0.031248739, -0.007947596, 0.00270562, -0.011989099, -0.035561066, 0.051039606, 0.025853124, -0.005156042, -0.045289837, 0.015999354, -0.023936534, -0.022665752, 0.005111773, 0.03418612, -0.0297488, -0.0028097825, 0.013155719, -0.03166539, 0.024540676, 0.014853567, -0.03820679, -0.016395172, 0.0038383866, -0.016540999, -0.027686382, 0.0064059915, -0.018145101, 0.00062855537, 0.0130411405, 0.011062053, -0.0045154425, 0.01809302, 0.007499697, 0.0035571482, 0.0073747025, 0.01759304, -0.004762829, -0.016645161, 0.009114215, -0.0011562033, -0.04153999, 0.0067966008, 0.030102951, 0.01625976, 0.0627058, -0.001864508, -0.027040575, 0.010207921, -0.00035577992, -0.014259841, -0.032769512, -0.0134994555, 0.009577738, 0.011624531, -0.012364084, -0.014718156, -0.007791352, 0.029457144, 0.048123058, 0.0055258186, 0.003846199, -0.009801688, 0.014218176, 0.009015261, 0.00160931, 0.054956116, -0.00031134812, 0.005921636, -0.017415963, 0.010801648, -0.013124471, 0.024249021, -0.0041274377, 0.013114054, -0.008317373, 0.0059685092, 0.011301627, -0.021238726, -0.0056612296, -0.025686463, -0.0040883766, 0.009254835, -0.006484113, 0.0067393114, -0.0055518593, -0.013343211, 0.0025441682, 0.018343009, -0.022061609, 0.004739392, -0.0015845714, -0.02483233, -0.0037107877, 0.022061609, 0.033977795, 0.03008212, 0.003554544, 0.023686543, 0.047123097, 0.02239493, -0.0032316404, 0.059289273, -0.011030804, 0.003979006, 0.0065830676, 0.0013710384, -0.016561832, 0.0019048711, 0.014988978, -0.015218136, -0.0057758084, -0.024186524, 0.019634625, -0.020207517, 0.0013671323, 0.008577779, 0.010509992, -0.009681901, 0.011676612, -0.001605404, -0.01659308, 0.016822238, -0.00093355606, 0.024165692, 0.0032368486, -0.012062013, 0.025957286, -0.018895071, -0.0004579893, 0.013186968, 0.019613791, 0.0055518593, -0.0072444994, -0.008838185, -0.025228148, 0.018572167, -0.009036094, -0.012603658, 0.009385038, -0.002874884, -0.03676935, 0.020040859, -0.0041352496, -0.021040818, -0.003010295, 0.038456783, 0.0044216965, 0.017884694, 0.00023371453, -0.0039217165, -0.015509791, 0.0066976463, -0.0005745211, 0.014593161, 0.010530825, -0.0013684344, -0.00081962836, 0.0024985971, 0.02508232, -0.013676532, -0.013270298, -0.019509628, 0.00829654, -0.009442328, 0.0048461584, 0.009150673, 0.013270298, 0.004195143, 0.005364367, 0.0029504017, 0.032373693, -0.011489119, 0.019707538, -0.025123985, -0.004700331, -0.03685268, 0.03426945, -0.0015741552, -0.041331664, -0.036748517, -0.029998789, 0.019092979, -0.025165651, 0.025728129, 0.031227905, 0.0070413826, -0.00932254, 0.001650975, -0.016551415, 0.023853203, -0.026457265, 0.029352982, 0.063705765, 0.026769754, 0.018759659, -0.009306916, -0.008004885, -0.004741996, -0.018113852, -0.0040467116, -0.007978844, -0.03862344, -0.0239157, -0.046248134, -0.014916064, -0.00084827305, -0.009426703, -0.020572087, 0.019988777, 0.031957045, 0.02089499, 0.0067028543, -0.023561548, -0.047331423, 0.036352698, -0.0007167679, 0.008051759, -0.00498157, 0.029415479, 0.008541322, 0.004434717, -0.046081472, 0.015384796, -0.009030885, -0.03345698, -0.00220564, 0.018468004, -0.011416206, -0.024894828, 0.015634786, 0.0018306553, -0.042998265, 0.0041717067, 0.0039165085, -0.036165208, 0.025165651, 0.028728006, -0.027040575, 0.04237329, 0.01662433, -0.011353709, 0.0021249142, 0.019624207, 0.008770479, -0.021499133, -0.010411038, 0.018863821, -0.009385038, -0.021499133, -0.05599774, -0.0194263, 0.021686625, 0.02322823, 0.0033670515, 0.0023840184, -0.016353507, 0.007697606, -0.018343009, 0.002458234, 0.0014647846, -0.011676612, -0.020540837, -0.020092938, -0.016978482, -0.019082563, -0.010770398, 0.03168622, -8.259758e-05, 0.046789777, -0.02331156, 0.004791473, 0.023457386, 0.0010897998, -0.013114054, -0.0033514271, -0.023978198, 0.062289152, -0.021603296, 0.043248255, 0.0297488, -0.027144738, -0.022749081, -0.016957648, -0.004525859, 0.0454565, 0.0059685092, 0.009030885, 0.028790504, -0.0020949675, 0.055956073, 0.033477817, 0.0016027999, 0.015884776, 0.010884977, 0.022040777, 0.02139497, 0.013301547, 0.016655577, 0.0046352297, -0.034498606, -0.013145302, -0.019082563, -0.004403468, 0.01645767, -0.010895394, -0.013822359, -0.026957246, 0.002913945, 0.030623764, 0.005749768, 0.005963301, 0.015718115, 0.020051274, -0.030457104, 0.054956116, 0.009390246, -0.010041261, -0.036040213, -0.008734022, 0.011093303, 0.013145302, -0.0089840125, 0.0013801527, -0.019832533, -0.036956843, -0.016374338, -0.009411079, 0.019509628, -0.014145263, -0.0113849575, 0.034811094, 0.008838185, 0.05649772, 0.010291251, 0.015686866, -0.0055622756, -0.017613873, -0.041519158, 0.0115724495, 0.00039679388, 0.008010093, 0.039227583, 0.02422819, 0.003992026, 0.010296459, 0.000118810305, 0.0058539305, -0.010884977, 0.0021327264, 0.0028644677, -0.0005794037, 0.023144899, 0.009411079, 0.037206832, 0.0063851587, -0.020655416, -0.02322823, -0.014905648, -0.010968307, 0.01720764, -0.016603496, -0.004791473, -0.018801324, 0.051247932, 0.00921317, 0.02933215, -0.021790788, 0.023290727, 0.0053487425, -0.0034139247, -0.01362445, 0.03410279, -0.0077601033, -0.011041221, 0.031727888, 0.05258121, -0.029832128, 0.024811499, 0.022124106, -0.008374662, 0.017738868, 0.020415843, 0.002708224, 0.009666276, -0.0021756934, 0.014155678, 0.025373977, 0.028228028, 0.056289393, -0.03210287, -0.018624248, 0.035727724, 0.034727763, 0.014009851, 0.0135932015, 0.01614518, -0.010864145, 0.006182042, 0.008843393, 0.009150673, -0.0040493156, -0.0052628084, -0.06883056, -0.022582421, 0.035144415, 0.01204118, 0.01928047, -0.021936614, 0.030790424, -0.016905569, -0.016395172, -0.01629101, -0.0075153215, -0.015280633, 0.012926562, -0.013155719, 0.010306875, -0.007192418, 0.023749042, 0.012145343, 0.0076663573, 0.024707336, 0.0005377387, 0.0012909635, 0.003466006, 0.025769792, 0.032957003, -0.006859098, -0.012207841, -0.0059008035, -0.01800969, 0.011103719, 0.0052576005, -0.006093504, -0.03320699, 0.024769833, -0.0355194, 0.016697243, 0.015030643, -0.0019764828, -0.016999314, -0.0063174535, -0.0020624166, -0.007348662, 0.0156243695, 0.02741556, 0.00862986, -0.04645646, 0.026228108, 0.0037732853, -0.0009765231, 0.027686382, -0.03293617, -0.011551617, 0.006984093, 0.02381154, -0.06308079, 0.00837987, -0.026019784, 0.001059202, 0.0100048045, -0.018613832, 0.0014022872, -0.034123622, 0.015738947, -0.003562356, 0.016530583, 0.0038331787, -0.034790263, -0.035811055, -0.06691396, -0.026123945, -0.0035910008, -0.013843191, 0.019853365, 0.017936775, -0.004442529, 0.00080725906, 0.027519723, -0.022103274, -0.021603296, 0.0005133256, -0.01057249]"
../../../gradio,../../../gradio/gradio/components,file_explorer.pyi,"""""""gr.FileExplorer() component""""""

from __future__ import annotations

import itertools
import os
import re
from pathlib import Path
from typing import Any, Callable, List, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component, server
from gradio.data_classes import GradioRootModel

set_documentation_group(""component"")


class FileExplorerData(GradioRootModel):
    root: List[List[str]]

from gradio.events import Dependency

@document()
class FileExplorer(Component):
    """"""
    Creates a file explorer component that allows users to browse files on the machine hosting the Gradio app. As an input component,
    it also allows users to select files to be used as input to a function, while as an output component, it displays selected files.

    Demos: file_explorer
    """"""

    EVENTS = [""change""]
    data_model = FileExplorerData

    def __init__(
        self,
        glob: str = ""**/*"",
        *,
        value: str | list[str] | Callable | None = None,
        file_count: Literal[""single"", ""multiple""] = ""multiple"",
        root_dir: str | Path = ""."",
        ignore_glob: str | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        height: int | float | None = None,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        root: None = None,
    ):
        """"""
        Parameters:
            glob: The glob-style pattern used to select which files to display, e.g. ""*"" to match all files, ""*.png"" to match all .png files, ""**/*.txt"" to match any .txt file in any subdirectory, etc. The default value matches all files and folders recursively. See the Python glob documentation at https://docs.python.org/3/library/glob.html for more information.
            value: The file (or list of files, depending on the `file_count` parameter) to show as ""selected"" when the component is first loaded. If a callable is provided, it will be called when the app loads to set the initial value of the component. If not provided, no files are shown as selected.
            file_count: Whether to allow single or multiple files to be selected. If ""single"", the component will return a single absolute file path as a string. If ""multiple"", the component will return a list of absolute file paths as a list of strings.
            root_dir: Path to root directory to select files from. If not provided, defaults to current working directory.
            ignore_glob: The glob-style, case-sensitive pattern that will be used to exclude files from the list. For example, ""*.py"" will exclude all .py files from the list. See the Python glob documentation at https://docs.python.org/3/library/glob.html for more information.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            height: The maximum height of the file component, specified in pixels if a number is passed, or in CSS units if a string is passed. If more files are uploaded than can fit in the height, a scrollbar will appear.
            interactive: if True, will allow users to select file(s); if False, will only display files. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        if root is not None:
            warnings.warn(
                ""The `root` parameter has been deprecated. Please use `root_dir` instead.""
            )
            root_dir = root
            self._constructor_args[0][""root_dir""] = root
        self.root_dir = os.path.abspath(root_dir)
        self.glob = glob
        self.ignore_glob = ignore_glob
        valid_file_count = [""single"", ""multiple""]
        if file_count not in valid_file_count:
            raise ValueError(
                f""Invalid value for parameter `file_count`: {file_count}. Please choose from one of: {valid_file_count}""
            )
        self.file_count = file_count
        self.height = height

        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return [[""Users"", ""gradio"", ""app.py""]]

    def example_value(self) -> Any:
        return [""Users"", ""gradio"", ""app.py""]

    def preprocess(self, payload: FileExplorerData | None) -> list[str] | str | None:
        """"""
        Parameters:
            payload: List of selected files as a FileExplorerData object.
        Returns:
            Passes the selected file or directory as a `str` path (relative to `root`) or `list[str}` depending on `file_count`
        """"""
        if payload is None:
            return None

        if self.file_count == ""single"":
            if len(payload.root) > 1:
                raise ValueError(
                    f""Expected only one file, but {len(payload.root)} were selected.""
                )
            elif len(payload.root) == 0:
                return None
            else:
                return self._safe_join(payload.root[0])
        files = []
        for file in payload.root:
            file_ = self._safe_join(file)
            files.append(file_)
        return files

    def _strip_root(self, path):
        if path.startswith(self.root_dir):
            return path[len(self.root_dir) + 1 :]
        return path

    def postprocess(self, value: str | list[str] | None) -> FileExplorerData | None:
        """"""
        Parameters:
            value: Expects function to return a `str` path to a file, or `list[str]` consisting of paths to files.
        Returns:
            A FileExplorerData object containing the selected files as a list of strings.
        """"""
        if value is None:
            return None

        files = [value] if isinstance(value, str) else value
        root = []
        for file in files:
            root.append(self._strip_root(file).split(os.path.sep))

        return FileExplorerData(root=root)

    @server
    def ls(self, subdirectory: list | None = None) -> list[dict[str, str]] | None:
        """"""
        Returns:
            a list of dictionaries, where each dictionary represents a file or subdirectory in the given subdirectory
        """"""
        if subdirectory is None:
            subdirectory = []

        full_subdir_path = self._safe_join(subdirectory)

        try:
            subdir_items = sorted(os.listdir(full_subdir_path))
        except FileNotFoundError:
            return []

        files, folders = [], []
        for item in subdir_items:
            full_path = os.path.join(full_subdir_path, item)
            is_file = not os.path.isdir(full_path)
            valid_by_glob = fnmatch.fnmatch(full_path, self.glob)
            if is_file and not valid_by_glob:
                continue
            if self.ignore_glob and fnmatch.fnmatch(full_path, self.ignore_glob):
                continue
            target = files if is_file else folders
            target.append(
                {
                    ""name"": item,
                    ""type"": ""file"" if is_file else ""folder"",
                    ""valid"": valid_by_glob,
                }
            )

        return folders + files

    def _safe_join(self, folders):
        combined_path = os.path.join(self.root_dir, *folders)
        absolute_path = os.path.abspath(combined_path)
        if os.path.commonprefix([self.root_dir, absolute_path]) != os.path.abspath(
            self.root_dir
        ):
            raise ValueError(""Attempted to navigate outside of root directory"")
        return absolute_path

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `FileExplorer` component that allows users to browse files on the machine hosting the Gradio app. It can be used as an input component to select files for a function or as an output component to display selected files. The component has parameters such as `glob` for file pattern matching, `value` for initial file selection, `file_count` to specify single or multiple file selection, `root_dir` for the root directory, and other configuration options. The component provides methods for preprocessing and postprocessing file data, as well as listing files and directories in a specified subdirectory. Additionally, it includes a method to handle event changes triggered by the component.","[-0.047134794, 0.04315223, 0.03790462, -0.023672817, 0.008275529, -0.04938377, -0.031555947, 0.011133604, -0.0042109736, 0.0081291115, 0.01672676, 0.00092169957, 0.0036135893, -0.029916069, 0.0047380775, -0.0036458012, -0.012217094, 0.008064688, 0.0030542735, 0.016738474, 0.038537145, -0.047884453, 0.0061671142, 0.03270386, -0.016773615, -0.031954203, -0.04048157, 0.092489146, 0.029072702, -0.0075492975, -0.040106744, -0.024317056, 0.04092668, 0.006582941, -0.025722666, -0.043363072, 0.044253293, 0.017593553, -0.020006517, -0.04685367, -0.04694738, -0.02827619, -0.027854508, 0.065782554, 0.0019371065, -0.009230173, -0.017230438, 0.03856057, 0.025066715, 0.026987715, -0.032774143, -0.023005152, 0.008205249, -0.017488133, -0.008913911, 0.021400414, -0.058754504, 0.0015300652, -0.013493857, -0.004793716, -0.009745563, 0.02131842, 0.022934873, 0.0185072, -0.00024488365, 0.02567581, -0.0414655, 0.034859132, 0.014630059, -0.0010783665, 0.0065419436, -0.016925888, -0.0032504734, -0.07267004, 0.00398549, -0.0029268903, -0.011701704, -0.07276375, 0.018800035, -0.04380818, -0.011490863, 0.023450263, -0.037998326, -0.017289005, -0.00973385, 0.014653485, -0.009856841, 0.014032674, -0.032563303, -0.05088309, -0.023590824, -0.012709058, -0.0031450526, 0.046572547, 0.019994805, 0.014758906, -0.054912504, -0.057208333, 0.008855344, 0.052569818, -0.0077074287, -0.019549694, -0.023415122, -0.051023647, 0.058895063, 0.0077542826, -0.010881765, 0.015625698, -0.012345943, -0.045026377, -0.021634683, -0.022489762, -0.0057630013, -0.005616584, 0.019971376, -0.02124814, 0.024926152, -0.03314897, -0.023052005, 0.0055843717, -0.018050376, 0.020826457, -0.030220618, 0.005467238, 0.022150073, -0.0029268903, -0.009265314, -0.022442909, -0.01429037, -0.035069972, 0.001875611, 0.06437694, 0.038232595, -0.07805821, -0.0145129245, 0.024012506, -0.06714131, 0.00738531, -0.048352987, 0.049618036, 0.0036165176, -0.018718041, 0.019584835, -0.01713673, -0.0019517483, -0.02412964, -0.014536351, 0.045518342, -0.0555216, -0.03375807, 0.010963759, -0.009950548, -0.028815007, 0.0037892906, 0.01477062, 0.013669559, 0.04729878, -0.0018331498, -0.020603903, -0.018331498, -0.042308863, -0.008468801, 0.015930248, 0.0129433265, 0.00887877, 0.03745951, -0.005288608, 0.027175128, -0.023403408, 0.078854725, -0.003710225, -0.02820591, -0.006020697, -0.010752917, 0.026823727, -0.03347695, -0.013353297, -0.013060461, -0.007648862, -0.018214364, -0.012767625, -0.026964288, 0.0023617179, 0.022665463, -0.02820591, -0.019303713, 0.0148174735, -0.06072236, -0.044300146, 0.0072916024, 0.006618081, 0.054069135, -0.003678013, 0.05182016, -0.017452992, -0.007039764, -0.009241886, 0.011174601, -0.022442909, 0.03923995, 0.033781495, 0.009968119, 0.026144348, -0.01199454, -0.062877625, 0.03516368, 0.01528601, 0.02516042, 0.034741998, 0.0056458674, 0.012322515, -0.022032939, 0.0109169055, 0.01843692, -0.03694412, -0.02227892, 0.035772778, 0.005344247, 0.0001826561, 0.0074848738, -0.007824563, 0.008339954, 0.008896341, 0.00041179985, 0.05130477, 0.020861598, 0.027877934, -0.019924523, 0.018308071, -0.025488397, 0.025605531, 0.02501986, -0.0017804395, -0.005470166, 0.05987899, -0.006805496, -0.00090046896, -0.04479211, 0.032539874, 0.017851248, -0.057020918, 0.028627593, 0.0027643666, -0.032680437, 0.021072438, 0.022888018, 0.010454225, -0.042308863, 0.005411599, 0.07454419, -0.009487868, 0.0062608216, 0.015789688, 0.0016618412, 0.00824039, 0.016925888, -0.0229583, 0.022196926, 0.0034642434, -0.040341012, -0.00014751585, -0.049852304, -0.016609626, 0.032844424, -0.020545335, 0.058754504, 0.028041922, 0.026027214, -0.029447531, -0.008749923, 0.010846625, -0.021002159, 0.038373157, 0.01847206, -0.01154943, -0.024035932, 0.02124814, 0.0007899236, -0.008193536, 0.005865494, -0.013739839, 0.015672553, -0.016703334, 0.020381346, -0.03218847, 0.04235572, 0.011256594, 0.011420582, 0.011613853, -0.026894007, 0.0074145934, 0.00583621, 0.05641182, -0.023696244, -0.0020278855, 0.007379453, 0.025441544, -0.002487637, 0.028463606, -0.0017804395, 0.010009116, -0.012240522, 0.0017277291, 0.013587564, -0.038092036, -0.0077191424, 0.020931877, 0.02694086, -0.0039562066, 0.004058699, 0.021154432, -0.026659738, 0.011162887, -0.016094236, -0.0069929105, -0.04938377, 0.0287213, 0.011133604, 0.024668457, -0.042004317, -0.0025593818, 0.027573384, 0.051023647, 0.014407503, -0.0067235017, -0.014466071, -0.022196926, -0.006577084, -0.02261861, -0.02790136, 0.03820917, 0.017663835, -0.04900894, -0.0038478577, 0.02494958, -0.043269366, -0.028533885, 0.040106744, -0.06315875, 0.02272403, -0.0175467, 0.001198429, 0.009850984, 0.021868952, 0.006524374, 0.011455722, -0.053178918, 0.016141089, -0.0024114999, -0.013868687, -0.0104132285, -0.027877934, -0.028346471, 0.00021944357, 0.035187107, -0.029283544, -0.061612576, -0.045284074, -0.05922304, -0.011192171, -0.027690519, 0.023297988, -0.028838435, 0.035351094, -0.019678542, 0.010225814, -0.054537673, -0.005809855, 0.021435555, -0.0105127925, 0.0344843, 0.008814347, -0.032024484, -0.021154432, -0.0376235, -0.0077718524, -0.0026662666, -0.012275661, -0.018179225, -0.0045653046, 0.02334484, 0.02909613, -0.020147078, -0.030478314, -0.054069135, 0.0020996302, 0.010348804, 0.03635845, 0.012568497, -0.033406667, -0.016879035, -0.001057868, 0.010577216, -0.029962923, 0.019315425, 0.0015007816, 0.03738923, 0.01206482, 0.048165575, -0.015977101, -0.013329869, -0.07459104, -0.022864591, 0.020744463, -0.043667622, -0.013177595, 0.016340218, 0.078807876, -0.019865956, -0.030150337, 0.044885818, -0.002453961, 0.055053063, -0.01284962, 0.0287213, -0.0132478755, -0.011203884, -0.040247303, 0.002593058, 0.07070219, 0.035866484, 0.00030107144, -0.015192303, -0.037178386, 0.023871945, 0.024035932, 0.046666257, 0.03300841, 0.05678665, -0.07267004, -0.007783566, -0.026120922, 0.002123057, 0.055709016, 0.025605531, -0.06072236, 0.029119557, 0.040528424, 0.025558677, 0.00095171516, -0.01528601, 0.019256858, 0.019315425, 0.03214162, -0.019772248, -0.011730988, -0.009318024, -0.0071041877, -0.057864282, -0.03813889, -0.028932141, -0.0010776344, -0.05182016, 0.006793782, 0.023415122, 0.004231472, 0.02947096, -0.03019719, 0.051539037, 0.0034261746, 0.0034144612, 0.03012691, -0.034905985, 0.037412655, 0.017499845, -0.022735743, -0.028323043, 0.0074380203, -0.0036955832, -0.015168875, 0.023871945, 0.0084336605, 0.025558677, 0.0061436878, -0.04989916, 0.0056722225, -0.027057994, -0.0137046985, -0.049618036, 0.0022035867, -0.011555286, 0.043714475, -0.019725395, -0.045471486, 0.006694218, 0.10007944, -0.038092036, -0.012814479, 0.021505835, -0.016375357, -0.03249302, -0.003560879, 0.00021834542, -0.009909552, 0.037740633, 0.0037687921, -0.04643199, -0.022747457, -0.01816751, 0.0052534677, 0.010583073, 0.008410234, -0.019514553, 0.055943284, -0.0012423544, 0.0010051577, 0.024551323, -0.025886653, 0.014829187, -0.031040557, 0.012755912, -0.00065485324, 0.0070046238, 0.020662468, 0.03108741, -0.03975534, -0.03471857, 0.020264212, -0.006020697, -0.024926152, -0.006559514, 0.032774143, -0.012779338, -0.018050376, -0.006717645, 0.0038624995, -0.0185072, -0.09633115, 0.016890747, -0.010260954, -0.0047058654, -0.016551059, -0.02405936, 0.021728389, -0.04071584, -0.0248793, 0.0026252698, -0.012099961, 0.010389801, -0.025886653, -0.0038215024, 0.0007394095, 0.008580078, -0.0042373287, 0.022759171, 0.069109164, -0.03331296, -0.052757233, 0.054350257, -0.00084629445, 0.024363909, -0.051726453, 0.03769378, -0.017417852, 0.00647752, 0.02062733, 0.02790136, -0.014758906, -0.016609626, -0.00574836, -0.021470694, 0.00040960358, 0.05247611, 4.051653e-05, 0.018999163, -0.032001056, -0.036217887, -0.032282177, -0.023333129, 0.012826192, 0.0072506056, 0.019830815, -0.033125546, 0.02569924, -0.00414655, 0.0025989146, -0.0062432517, -0.045541767, -0.026612885, 0.0035755208, 0.02635519, 0.0017072306, -0.02879158, 0.010887622, -0.0034905984, -0.032375887, 0.011947686, 0.02813563, 0.03033775, -0.0221735, -0.012146814, -0.014618346, 0.012041394, 0.008550795, -0.031485666, 0.02642547, -0.030267471, 0.04078612, -0.035889912, 0.009968119, -0.025511824, -0.0185072, -0.010547932, 0.03366436, 0.030736009, 0.002222621, 0.040294155, -0.0064833765, -0.043456778, -0.012181954, -0.041934036, 0.004140693, -0.047720462, -0.025066715, -0.028861862, 0.018858602, -0.016644767, -0.0028053636, 0.028978996, 0.0038302876, -0.009359021, 0.008843631, 0.0055814437, -0.0015329935, 0.021154432, 0.026167775, 0.01154943, 0.0033910344, 0.006735215, 0.025043286, 0.025792945, 0.004618015, 0.01905773, -0.0038390725, 0.021868952, -0.007859703, -0.009423445, -0.018729756, -0.0277608, -0.02858074, 0.020264212, 0.043667622, -0.0012218559, -0.009932978, 0.0036253028, 0.018354926, -0.0071510416, 0.023356555, 0.03071258, -0.0069109164, 0.007906557, 0.0037160818, -0.0021128077, 0.026402043, -0.006213968, -0.010788058, -0.007701572, -0.004758576, -0.024785591, 0.03574935, 0.00824039, -0.0074263066, -0.0155788455, -0.029119557, -0.022923158, 0.049477477, 0.00508948, 0.017417852, 0.0070104804, 0.0574426, -0.022700604, -0.02961152, 0.0035081685, 0.010260954, 0.024973007, -0.06016011, 0.023871945, -0.048399843, -0.008375093, 0.012755912, -0.02124814, -0.01295504, -0.019268572, -0.00599727, -0.015906822, 0.002950317, -0.00086166826, -0.020685896, 0.008316526, -0.021037297, 0.02258347, 0.0016823396, 0.006079264, 0.0018082588, 0.0063486723, 0.035351094, 0.010952045, -0.01669162, 0.021845523, -0.03659272, 0.03183707, 0.018589193, -0.021564402, 0.012556784, -0.05678665, -0.013821833, -0.0003032677, 0.008591792, 0.019409133, -0.04952433, 0.019010877, 0.049336914, -0.0145129245, 0.017839536, -0.02261861, 0.021880664, 0.008568365, 0.0005219792, 0.039802194, -0.0007635684, -0.0459166, 0.0072506056, -0.025582105, -0.025933506, 0.02501986, -0.042917963, 0.0009773383, 0.008802634, -0.045190364, 0.025066715, 0.010102822, -0.005716148, 0.034952838, 0.02405936, -0.01943256, 0.04359734, 0.0024056432, -0.013119028, 0.015485139, -0.008205249, 0.046010304, 0.0074497336, -0.0016750187, -0.025418116, -0.034460876, -0.011250738, 0.0008536153, -0.01751156, -0.06728187, 0.0033588225, 0.0036399446, 0.0073501696, -0.018378353, 0.019128012, 0.013833546, 0.009370734, -0.02316914, -0.0035345238, -0.006741072, -0.019069444, 0.029916069, 0.034086045, -0.021716677, 0.007285746, -0.014887754, -0.015204016, 0.029752081, -0.029564666, 0.0023748954, 0.009921265, 0.04109067, 0.00025165547, -0.0017130873, -0.03146224, 0.029189836, -0.025863227, 0.012814479, -0.039075963, 0.034367166, 0.031181118, -0.013212735, 0.006500947, 0.020533621, -0.0037746488, 0.039403938, 0.011537717, -0.012252235, 0.021810384, -0.00651266, -0.027596813, 0.025816372, -0.015520278, -0.02279431, 0.015309437, 0.020135365, 0.0026018429, 0.0099564055, -0.06568885, -0.029377252, -0.005174402, -0.003016205, -0.036077328, -0.02501986, 0.015028315, 0.04643199, 0.048915233, -0.00010002161, -0.07707429, -0.04092668, 0.033359814, -0.0073911664, 0.02532441, -0.017347572, 0.017698973, 0.048399843, 0.012486503, 0.012310802, 0.026027214, 0.0053676735, -0.018284645, -0.042964816, 0.004559448, 0.0032768287, 0.008228676, -0.016387071, 0.034460876, 0.041067243, 0.032563303, 0.037998326, 0.0035081685, 0.025933506, 0.027104849, -0.008205249, 0.02569924, -0.035187107, 0.010547932, -0.0009238958, 0.0011296127, -0.028885288, -0.03499969, 0.012498217, -0.016879035, 0.028627593, -0.013505571, 0.046666257, 0.014372364, -0.0013924325, 0.01891717, 0.001256264, 0.026776873, -0.0032768287, -0.029634947, 0.025956934, 0.014231803, 0.048540402, -0.011555286, 0.00067901216, 0.019315425, -0.029752081, 0.019151438, -0.0074145934, -0.00034774208, -0.010653353, 0.008533224, -0.021529261, -0.04701766, 0.003279757, -0.020404773, 0.020592188, -0.0080295475, -0.008867057, 0.005915276, 0.0077952794, -0.011285878, -0.022806024, -0.013189308, -0.00348767, -0.011244881, -0.020709323, -0.023520542, 0.016269937, 0.0016354859, 0.030759435, -0.02357911, -0.0054086708, -0.0066532213, -0.0014773548, 0.014278656, 0.018706327, 0.022899732, 0.005909419, 0.01765212, -0.0022533687, 0.0029063919, 0.027339118, 0.045869745, 0.0060031265, 0.059410453, -0.009564006, -0.014020961, -0.015040028, -0.0016325576, -0.01302532, -0.012755912, -0.026776873, 0.011444009, -0.032165047, 0.006735215, 0.017019596, 0.0071100444, -0.012076533, -0.018823462, 0.019854244, 0.014243516, 0.007467304, -0.012908186, -0.028533885, 0.018038664, -0.024106214, 0.007520014, -0.025769519, -0.016340218, 0.007953411, 0.0175467, -0.030314324, -0.011859835, -0.0017511559, 0.012006253, 0.013001894, 0.005030913, 0.029142983, -0.0022958298, 0.023497116, -0.023040293, 0.031040557, -0.015859967, -0.024855873, -0.014138095, -0.02364939, 0.011092607, -0.013493857, -0.034976266, 0.01477062, -0.037272096, 0.051023647, -0.05242926, 0.0055258046, -0.019198291, -0.009277027, -0.009306311, -0.036709853, 0.03296156, 0.046525694, 0.013517284, -0.024996433, -0.002568167, -0.019865956, 0.045260645, 0.011198027, -0.007356026, -0.06906231, -0.025558677, -0.0010168711, 0.03628817, 0.00740288, -0.01751156, 0.035374522, 0.004700009, -0.005294465, -0.0020952376, 0.010026686, 0.036311597, 0.012896473, -0.011098463, -0.011748558, 0.0138569735, 0.0065653706, -0.03694412, 0.006114404, -0.0020352064, 0.025347836, 0.009364878, 0.011174601, 0.008509798, -0.046759963, -0.018038664, 0.014723766, 0.003710225, 0.034226608, 0.024223348, -0.06048809, 0.02135356, 0.0070280507, 0.021599542, 0.0039444934, 0.007016337, -0.01525087, 0.02227892, 0.024621604, 0.009792417, -0.036171034, -0.014829187, 0.018495487, -0.02827619, -0.015168875, 0.005004558, 0.024223348, -0.013306443, 0.0080822585, 0.0070573343, -0.01994795, 0.012357656, 0.015789688, -0.027057994, 0.022899732, -0.05833282, -0.008023691, 0.043948743, -0.009968119, -0.013646131, -0.02984579, -0.0024920297, 0.019186579, 0.004336893, -0.025769519, -0.011192171, 0.026495751, 0.0048522833, -0.010225814, -0.0067644985, 0.013376723, 0.03057202, -0.02046334, -0.008064688, 0.028768154, 0.046057157, 0.012873046, -0.0062081115, -0.014501211, -0.008744067, -0.023590824, -0.014852613, -0.0007383114, 0.04701766, -0.0024993506, -0.029283544, -0.011449866, -0.03502312, 0.0062432517, 0.03389863, 0.0027189772, -0.022606896, 0.02076789, 0.0074145934, -0.00029375055, 0.0053998856, -0.0114732925, -0.0055082347, 0.0008294564, 0.0021801598, -0.029447531, 0.04153578, 0.03663957, -0.023860231, -0.055053063, -0.0043603196, 0.008855344, 0.020603903, 0.035561938, 0.010542076, 0.011947686, 0.021166146, -0.007684002, -0.0019898168, -0.007906557, -0.013212735, -0.02532441, 0.0007730856, 0.027034568, 0.01067678, 0.0053764586, -0.038537145, 0.0055960855, 0.0033588225, -0.013411864, 0.03183707, -0.03354723, 0.008000264, -0.0010351733, -0.010594786, -0.023274561, 0.042917963, -0.010290237, -0.04212145, -0.03132168, -0.0022504404, -0.012427936, 0.019830815, 0.009329737, -0.026800299, 0.010020829, -0.01936228, -0.028182482, -0.014993175, 0.009048616, -0.004008917, 0.00025641403, -0.01998309, 0.024926152, -0.00029905819, 0.019350566, 0.054912504, -0.0054408824, -0.03211819, -0.014700339, -0.019128012, -0.0043193228, 0.020076798, 0.0048142145, 0.024902726, 0.011754415, -0.011215597, -0.032516446, 0.02947096, 0.02375481, -0.03214162, 0.0006581477, 0.017886389, -0.00973385, 0.028112203, -0.0050016292, -0.014149808, -0.008550795, -0.027292263, -0.0008243318, 0.014794047, 0.019748822, -0.02450447, 0.009113039, 0.018015236, -0.021435555, -0.019994805, 0.0322119, 0.045354355, -0.02190409, -0.03071258, 0.00039935432, 0.03296156, 0.021025585, -0.009950548, 0.020674182, 0.029798934, -0.003941565, 0.024082787, -0.030806288, 0.029260118, 0.0027306904, -0.01843692, -0.0098041305, 0.037061255, -0.032516446, 0.007361883, -0.034226608, -0.002800971, 0.015028315, 0.005847924, -0.01153186, -0.015813114, 0.0041992604, 0.06559514, -0.004178762, 0.0056370823, -0.021728389, 0.016785327, -0.0013075103, -0.014606632, -0.029260118, 0.009159893, 0.027690519, 0.03834973, 0.044534415, -0.041371793, -0.014594918, 0.031181118, -0.01596539, 0.0028112202, -0.0046912236, -0.020346206, 0.042308863, 0.039310228, 0.00037629355, 0.0005402814, 0.014430931, -0.011607997, 0.019912811, -0.046525694, -0.011151174, 0.009757277, 0.014501211, 0.0026823727, 0.013517284, 0.011695848, -0.028416751, 0.008410234, 0.01720701, 0.008111542, -0.01891717, -0.032165047, 0.013013607, 0.03314897, 0.03523396, 0.03938051, -0.015672553, -0.009640142, -0.0059796995, 0.020814743, 0.0014839435, 0.0030513452, 0.013610992, 0.009774847, 0.0033558942, 0.01843692, 0.0075844377, 0.0069577703, -0.02190409, 0.009101326, 0.012767625, 0.00039898828, 0.005112907, -0.0046970807, 0.012568497, -0.03546823, 0.025277555, 0.03214162, 0.019994805, -0.025605531, 0.042941388, -0.004931349, 0.037576646, 0.019994805, 0.05969158, 0.0053676735, 0.0024744596, 0.03731895, -0.020861598, 0.016387071, 0.019701969, 0.0149697475, 0.026753446, -0.010301951, -0.0021215929, -0.017734114, 0.015953675, 0.014056101, 0.017476419, -0.00044986844, -0.001486872, -0.007701572, 0.021704962, -0.047556475, -0.0027541174, 0.0049137785, -0.0016676978, -0.021212999, -0.010858338, 0.005420384, -0.0011127747, 0.017289005, 0.0006478984, -0.020111939, -0.018015236, -0.0010439584, 0.032305606, -0.005675151, -0.0072564622, 0.031227972, -0.004231472, -0.015239157, -0.01617623, -0.026917433, -0.0064306664, -0.011268307, -0.002875644, 0.012826192, -0.065173455, 0.025418116, 0.0022606896, -0.028182482, 0.033922058, 0.014934608, -0.0007039032, 0.053788014, 0.0073150294, 0.009897838, 0.008984191, -0.0011332731, -0.010524506, -0.045494914, 0.019608261, -0.0005922597, -0.008568365, 0.0045887316, 0.004190475, 0.0013843796, -0.0092477435, -0.025722666, 0.0014663734, -0.0032270465, -0.01802695, 0.0055140913, -0.026003787, 0.008820203, 0.025956934, 0.0047790743, 0.020111939, -0.021072438, -0.009692853, 0.0048288563, 0.007765996, 0.007689859, -0.0073501696, 0.007643005, -0.03249302, 0.029049275, 0.036990974, 0.023215994, -0.018015236, -0.014934608, -0.014161522, 0.057536308, -0.011227311, -0.005502378, 0.0014209839, -0.012181954, -0.02165811, -0.029142983, 0.0135524245, 0.04694738, 0.0026662666, 0.029752081, -0.041348364, 0.039567925, 0.0077542826, 0.008814347, 0.016398786, -0.011859835, -0.0036750848, -0.031860497, 0.0306423, 0.005619512, 0.005760073, 0.0069402, -0.027971642, -0.0067879255, -0.007074904, -0.01158457, 0.015789688, 0.008275529, -0.020135365, -0.0015154234, 0.016492492, 0.009124752, 0.043948743, 0.030548593, -0.028041922, 0.027877934, 0.021131005, 0.03603047, -0.020053372, -0.0154265715, -0.012615351, -0.0076195784, 0.00441303, 0.0068289223, 0.026402043, 0.021025585, -0.013353297, 0.031040557, -0.048025012, -0.022712316, 0.02320428, 0.010471796, 0.0018229006, -0.022091506, 0.010987186, -0.017394425, -0.024691885, 0.0069460566, -0.018858602, -0.024035932, -0.004989916, 0.04701766, 0.03523396, 0.008205249, -0.047041085, 0.04153578, -0.01802695, 0.027339118, -0.011947686, 0.03628817, -0.019514553, 0.0025095998, -0.020662468, -0.005850852, 0.005493593, -0.0108641945, -0.01161971, -0.030244045, 0.020557048, -0.006840636, -0.027526531, 0.037717205, 0.01827293, 0.010952045, 0.026823727, -0.0049020653, 0.040083315, -0.019502841, -0.011654851, -0.05374116, 0.019338852, -0.0031596944, -0.002354397, 0.015742833, -0.0033207538, -0.033195827, -0.009376591, 0.016387071, -0.0041494784, 0.0028287903, 0.0027804726, 0.021154432, 0.015145449, 0.017277291, 0.0011369336, -0.003098199, 0.021880664, 0.047603328, 0.01699617, -0.033804923, -0.026238056, 0.030033203, 0.035936765, -0.042449426, 0.017195297, -0.011356158, -0.053085208, 0.002833183, 3.003851e-05, -0.021330133, -0.0497586, 0.018483773, -0.003760007, -0.035936765, -0.03153252, -0.022009512, -0.04263684, 0.0373658, -0.012791052, 0.0018858602, -0.012088247, -0.0028727157, 0.03420318, -0.026238056, -0.011748558, -0.014102955, 0.01064164, -0.03354723, 0.015895108, -0.040387865, 0.002140627, 0.026917433, 0.008457088, -0.009511295, -0.058567088, 0.02724541, 0.0030249902, -0.003437888, 0.03626474, 0.024176493, 0.007379453, 0.02347369, 0.004975274, -0.016820468, 0.03680356, -0.010149676, 0.009880268, -0.010723634, -0.020568762, -0.010940332, 0.0039064246, -0.0051539037, 0.009809988, 0.011748558, -0.00032376617, 0.004527236, -0.024551323, -0.025511824, 0.0103078075, 0.015719406, 0.004957704, 0.019514553, 0.014571492, 0.023309702, 0.01160214, -0.03649901, -0.018905455, 0.0011200956, -0.012779338, -0.0075141573, 0.011455722, 0.008849487, 0.024012506, 0.0016647695, 0.00055199483, -0.0037043684, 0.014056101, -0.00019693184, -0.029447531, 0.03760007, -0.033195827, 0.007836277, -0.023461975, -0.09670597, -0.0013975571, 0.04486239, 0.014993175, 0.018319786, -0.0058713504, 0.0110691795, -0.011666564, -0.004451099, -0.0002090113, -0.0152742965, 0.004509666, 0.010360518]"
../../../gradio,../../../gradio/gradio/components,multimodal_textbox.py,"""""""gr.MultimodalTextbox() component.""""""

from __future__ import annotations

from pathlib import Path
from typing import Any, Callable, List, Literal, TypedDict

import gradio_client.utils as client_utils
from gradio_client.documentation import document
from pydantic import Field
from typing_extensions import NotRequired

from gradio.components.base import FormComponent
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events


class MultimodalData(GradioModel):
    text: str
    files: List[FileData] = Field(default_factory=list)


class MultimodalPostprocess(TypedDict):
    text: str
    files: List[FileData]


class MultimodalValue(TypedDict):
    text: NotRequired[str]
    files: NotRequired[list[str]]


@document()
class MultimodalTextbox(FormComponent):
    """"""
    Creates a textarea for users to enter string input or display string output and also allows for the uploading of multimedia files.

    Demos: chatbot_multimodal
    Guides: creating-a-chatbot
    """"""

    data_model = MultimodalData

    EVENTS = [
        Events.change,
        Events.input,
        Events.select,
        Events.submit,
        Events.focus,
        Events.blur,
    ]

    def __init__(
        self,
        value: dict[str, str | list] | Callable | None = None,
        *,
        file_types: list[str] | None = None,
        lines: int = 1,
        max_lines: int = 20,
        placeholder: str | None = None,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        autofocus: bool = False,
        autoscroll: bool = True,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        text_align: Literal[""left"", ""right""] | None = None,
        rtl: bool = False,
        submit_btn: str | Literal[False] | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show in MultimodalTextbox. A dictionary of the form {""text"": ""sample text"", ""files"": [{path: ""files/file.jpg"", orig_name: ""file.jpg"", url: ""http://image_url.jpg"", size: 100}]}. If callable, the function will be called whenever the app loads to set the initial value of the component.
            file_types: List of file extensions or types of files to be uploaded (e.g. ['image', '.json', '.mp4']). ""file"" allows any file to be uploaded, ""image"" allows only image files to be uploaded, ""audio"" allows only audio files to be uploaded, ""video"" allows only video files to be uploaded, ""text"" allows only text files to be uploaded.
            lines: minimum number of line rows to provide in textarea.
            max_lines: maximum number of line rows to provide in textarea.
            placeholder: placeholder hint to provide behind textarea.
            label: The label for this component. Appears above the component and is also used as the header if there is a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will be rendered as an editable textbox; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            autofocus: If True, will focus on the textbox when the page loads. Use this carefully, as it can cause usability issues for sighted and non-sighted users.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            text_align: How to align the text in the textbox, can be: ""left"", ""right"", or None (default). If None, the alignment is left if `rtl` is False, or right if `rtl` is True. Can only be changed if `type` is ""text"".
            rtl: If True and `type` is ""text"", sets the direction of the text to right-to-left (cursor appears on the left of the text). Default is False, which renders cursor on the right.
            autoscroll: If True, will automatically scroll to the bottom of the textbox when the value changes, unless the user scrolls up. If False, will not scroll to the bottom of the textbox when the value changes.
            submit_btn: If False, will not show a submit button. If a string, will use that string as the submit button text. Only applies if `interactive` is True.
        """"""
        self.file_types = file_types
        if value is None:
            value = {""text"": """", ""files"": []}
        if file_types is not None and not isinstance(file_types, list):
            raise ValueError(
                f""Parameter file_types must be a list. Received {file_types.__class__.__name__}""
            )
        self.lines = lines
        self.max_lines = max(lines, max_lines)
        self.placeholder = placeholder
        self.submit_btn = submit_btn
        self.autofocus = autofocus
        self.autoscroll = autoscroll

        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.rtl = rtl
        self.text_align = text_align

    def preprocess(self, payload: MultimodalData | None) -> MultimodalValue | None:
        """"""
        Parameters:
            payload: the text and list of file(s) entered in the multimodal textbox.
        Returns:
            Passes text value and list of file(s) as a {dict} into the function.
        """"""
        if payload is None:
            return None
        return {
            ""text"": payload.text,
            ""files"": [f.path for f in payload.files],
        }

    def postprocess(self, value: MultimodalValue | None) -> MultimodalData:
        """"""
        Parameters:
            value: Expects a {dict} with ""text"" and ""files"", both optional. The files array is a list of file paths or URLs.
        Returns:
            The value to display in the multimodal textbox. Files information as a list of FileData objects.
        """"""
        if value is None:
            return MultimodalData(text="""", files=[])
        if not isinstance(value, dict):
            raise ValueError(
                f""MultimodalTextbox expects a dictionary with optional keys 'text' and 'files'. Received {value.__class__.__name__}""
            )
        text = value.get(""text"", """")
        if ""files"" in value and isinstance(value[""files""], list):
            files = [
                file
                if isinstance(file, FileData)
                else FileData(
                    path=file,
                    orig_name=Path(file).name,
                    mime_type=client_utils.get_mimetype(file),
                )
                for file in value[""files""]
            ]
        else:
            files = []
        if not isinstance(text, str):
            raise TypeError(
                f""Expected 'text' to be a string, but got {type(text).__name__}""
            )
        if not isinstance(files, list):
            raise TypeError(
                f""Expected 'files' to be a list, but got {type(files).__name__}""
            )
        return MultimodalData(text=text, files=files)

    def example_inputs(self) -> Any:
        return {""text"": ""sample text"", ""files"": []}
","The code defines a `MultimodalTextbox` component that allows users to enter string input or display string output and upload multimedia files. It inherits from `FormComponent` and includes parameters for customization such as default value, file types, lines, placeholder, label, and more. The component preprocesses and postprocesses data to handle text and file inputs. Additionally, it provides an example input for demonstration purposes.","[-0.026837785, 0.06111858, 0.00047376147, 0.061595697, 0.006822761, -0.04957237, 0.051242277, 0.04484892, 0.0022692839, 0.03626083, -0.008749118, 0.01656786, 0.015744833, 0.009273945, 0.00013633222, -0.0017772578, 0.016722921, 0.0070493915, 0.0023199774, 0.0047681797, 0.008695442, 0.013144551, 0.008677551, 0.01628159, 0.008683515, -0.052291933, -0.055631746, 0.033207286, -0.0050872513, 0.044777352, -0.006190582, -0.030988695, -0.031036407, 0.0084747765, -0.048021745, 0.020313222, 0.02231711, 0.044825066, 0.011605851, -0.0038527132, -0.108687066, -0.029915184, 0.024619194, 0.028889384, 0.00472345, 0.044538796, -0.0056418986, 0.03232462, -0.017915713, 0.057969615, -0.04685281, -0.01832126, 0.0079260925, -0.02714791, 0.00905328, 0.009924017, -0.051767103, 0.0388134, -0.01269129, 0.013752874, 0.0291518, 0.0120710395, -0.0324439, -0.02981976, 0.0007406483, -0.00051178166, 0.008409172, 0.02379617, -0.0076457867, 0.018655242, 0.034710202, -0.058542155, -0.01496952, 0.017581731, 0.0068943286, 0.018822232, -0.017581731, -0.012333453, 0.00093112205, -0.025811985, 0.017355101, 0.02008659, -0.04045945, -0.0007879872, -0.026885496, 0.06107087, -0.05878071, 0.017963424, -0.06288391, -0.06169112, -0.05362786, 0.0060355198, -0.024118222, 0.09170173, 0.028102143, -0.0070732473, -0.081300594, -0.07452555, 0.023247486, 0.0018473342, 0.03490105, -0.010025403, -0.030058319, -0.009500576, 0.0107172225, -0.04119898, 0.009667566, -0.028626971, -0.018023064, -0.007120959, -0.034853335, 0.0131922625, -0.022663018, 0.030940983, 0.05801733, -0.035545155, 0.011426932, -0.0072700577, -0.006142871, -0.02981976, 0.02327134, -0.011516391, -0.0028239314, -0.030654714, 0.02026551, -0.015434708, -0.06779821, -0.0069718603, -0.027887441, -0.0039272625, -0.01985996, -0.022185903, 0.019013079, -0.028483836, -0.015053015, 0.029795906, -0.03158509, 0.008695442, -0.057063095, 0.0055136736, -0.014826385, -0.033899106, 0.016066886, 0.02981976, -0.028125998, -0.018643314, -0.040721867, 0.036690235, -0.051814817, 0.0005278098, -0.022794226, -0.033207286, -0.027076343, 0.007765066, 0.003843767, -0.030797848, 0.01912043, 0.0019770502, -0.024714617, -0.04871356, 0.0020381806, -0.08158687, 0.025478004, -0.009494612, 0.017402813, 0.0066676987, 0.009106955, -0.0031608946, -0.025430292, -0.015792545, 0.015542059, -0.027291045, -0.00035131405, -0.012428876, -0.026503803, -0.011564103, -0.035855282, -0.03971992, -0.043107446, -0.011993508, -0.004100217, 0.0084449565, 0.013693234, 0.017712938, -0.002738945, -0.039195094, 0.010228178, 0.012416949, 0.02293736, -0.007103067, -0.0100850435, 0.0084449565, -0.00058223086, 0.0034233085, 0.028650826, -0.027052486, 0.013657451, 0.005498764, -0.0016699067, -0.021637218, 0.048021745, 0.023987016, 0.0027836747, 0.014420836, -0.025263302, 0.014504332, -0.04639955, 0.03836014, -0.02271073, 0.018917656, 0.021649146, 0.014754818, 0.043966256, -0.021494083, -0.03404224, -0.005209512, -0.026456092, 0.053198453, -0.029581202, -0.008403209, -0.023486044, 0.04508748, 0.04570773, -0.06526949, 0.012619723, -0.012882137, -0.012112787, 0.0046906485, -0.022388676, -0.020349005, 0.011999472, 0.00027266445, 0.015780618, -0.05486836, 0.0003777791, -0.024452204, -0.018368972, -0.017510165, 0.0023572522, 0.03268246, -0.041509107, -0.005134963, 0.022472171, 0.00374238, 0.021124318, 0.019430555, -0.00905328, -0.05715852, 0.008468812, -0.022615306, 0.017844144, -0.0029238276, -0.019657187, 0.008343569, 0.0110929515, 0.0145759, -0.02595512, 0.06379043, 0.029915184, 0.010120827, -0.021613363, -0.07075633, -0.04962008, 0.020170087, 0.007633859, 0.047496915, 0.010824573, 0.040769577, -0.005880457, 0.00597588, -0.02100504, 0.033612836, 0.040435597, 0.038717978, -0.028436124, -0.015983392, 0.026933208, 0.04251105, -0.015518203, 0.03752519, -0.011683382, -0.017355101, 0.0022692839, 0.039409798, -0.0064291405, 0.025811985, 0.008862433, -0.016388942, -0.011534284, -0.0365471, 0.027792018, -0.009124847, -0.007884345, 0.0055613853, -0.024213646, 0.006101123, 0.007443012, -0.009679494, 0.028984807, -0.014826385, 0.0033219215, 0.0076577147, -0.018714882, -0.04184309, 0.021434445, -0.00967353, -0.01860753, -0.00067094463, 0.009601963, -0.04258262, 0.004744324, -0.036403965, -0.0133353975, -0.018750666, -0.05167168, -0.018714882, 0.06727338, 0.04566002, -0.0047532697, -0.041222837, 0.017343173, 0.0066736625, 0.032420043, -0.045278326, 0.01616231, -0.024571484, -0.06464924, 0.014528188, -0.0104727, -0.030320734, 0.0219712, -0.03268246, 0.004988846, -0.026289102, 0.035044182, -0.03096484, 0.0031638767, 0.03408995, -0.02379617, 0.035616722, -0.039648354, 0.00523635, 0.0030088138, 0.03716735, 0.050049488, 0.009858413, 0.001619213, 0.061261717, 0.0045564594, -0.038002305, 0.0017399831, -0.011051203, 0.038908824, -0.029485779, 0.028770106, -0.017450524, -0.028770106, -0.024154006, -0.028960953, -0.007699462, -0.028722394, 0.0041956403, -0.013740946, 0.021995056, 0.015231933, -0.011355365, -0.04792632, -0.016078815, -0.059782658, -0.031680513, 0.017605586, -0.02037286, 0.032825593, 0.05224422, 0.0039123525, -0.06989752, 0.01519615, 0.014862169, -0.008218326, -0.04754463, 0.045850866, -0.010514447, 0.037477475, 0.0037185242, -0.035330452, 0.0059281685, 0.039624497, 0.029724337, 0.050956007, 0.0040793433, -0.027672738, 0.021875776, 0.0034352364, 0.022472171, 0.0015461546, 0.049810927, 0.024165934, -0.009548288, 0.03084556, 0.0074191564, 0.04155682, 0.013514316, -0.020408645, 0.049667794, -0.017796433, -0.036904935, 0.017211966, 0.0007548127, 0.046089422, 0.005239332, 0.036451675, -0.03606998, 0.022376748, 0.019203926, 0.036857225, 0.052053373, -0.007490724, 0.019645259, 0.043107446, 0.02219783, -0.040865, 0.0054480704, -0.006136907, -0.019883817, 0.010979636, 0.027291045, 0.04172381, -0.06498323, 0.008600019, -0.0026882514, -0.029461924, 0.032014497, 0.031656656, 0.03898039, 0.013013343, -0.04957237, -0.0056806644, 0.03490105, 0.02361725, 0.010681438, -0.04764005, 0.03680951, 0.029104088, -0.032086063, 0.0039123525, 0.0012710673, 0.004007776, -0.007103067, -0.016305445, -0.035545155, -0.033278853, 0.04205779, -0.009029424, 0.012858281, 0.029056376, -0.022460245, 0.04542146, -0.0076457867, -0.021863848, -0.0043298295, -0.01832126, 0.0058029257, 0.021339022, 0.011987544, 0.012440804, -0.005486836, 0.021828065, -0.005233368, 0.020337077, 0.015076871, -0.03096484, 0.054200396, 0.034423932, 0.042940456, -0.028054431, 0.0034710201, 0.00036063272, 0.012381164, -0.04594629, -0.024404492, 0.021195887, 0.016078815, -0.035592865, -0.016114598, -0.016138455, 0.16326916, -0.025072455, -0.0032592998, -0.013967576, -0.02203084, -0.019728754, -0.005883439, -0.008140795, -0.011021384, 0.034996472, -0.019442484, -0.038598698, -0.054438956, -0.0026569406, -0.016937625, 0.048236445, -0.013311542, -0.029342644, -0.009977692, 0.00822429, 0.013609739, 0.04759234, 0.0024541663, 0.01685413, 0.007210418, -0.03547359, -0.032825593, 0.027577315, 0.01883416, -0.020026952, -0.0030893271, -0.017235821, 0.023927376, -0.0051796925, 0.0057045203, -0.027982865, 0.055297766, 0.0045504957, -0.038574845, -0.029247222, -0.007872417, -0.018249694, -0.021613363, -0.015076871, -0.025167879, -0.00066535344, 0.007359517, 0.019597547, 0.004505766, -0.07366674, 0.005618043, -0.030869417, -0.0013172879, 0.0067750495, -0.030726282, 0.0006892092, -0.033970673, -0.0054391245, 0.015124583, -0.011182411, 0.07314191, -0.024201717, -0.05224422, -0.007478796, 0.039982334, 0.017223895, -0.04837958, 0.042988166, -0.02566885, 0.02953349, 0.014528188, 0.009768954, 0.019025007, -0.028984807, -0.04069801, 0.0038467492, 0.008534416, 0.0055017457, 0.0029253187, -0.038145438, -0.028054431, -0.01451626, 0.0049381526, 0.007633859, 0.0042075682, -0.03950522, -0.017498236, 0.027768161, 0.042081647, -0.021863848, -0.0099598, 0.018118488, -0.038288575, -0.03129882, -0.013311542, 0.0033636692, 0.008755082, -0.004762216, -0.030988695, -0.003617137, 0.011086987, 0.029891329, -0.012894064, -0.003238426, 0.02379617, -0.003760272, -0.0023632161, 0.023175918, 0.043250583, 0.01826162, 0.005498764, 0.0034322545, -0.034233086, -0.011385185, 0.0009452864, -0.009900161, 0.0016102671, -0.017641371, -0.006357573, 0.00082824385, 0.027028631, 0.042725753, -0.006476852, -0.037310485, 0.029318789, -0.012512372, 0.020158159, -0.031346533, -0.021673001, -0.021100463, -0.01724775, -0.018201983, 0.028555403, 0.04336986, 0.031656656, -0.032086063, 0.016615571, 0.034996472, -0.009327621, 0.0009855431, 0.027982865, 0.0019233746, -0.04439566, 0.042558763, 0.0087610455, -0.03129882, -0.016269661, 0.04771162, 0.006566311, -0.03432851, -0.048331868, 0.066319145, 0.027982865, -0.013836369, -0.03938594, 0.006008682, 0.0334697, 0.02800672, 0.03750133, 0.029724337, 0.030416157, -0.029294932, 0.014349269, 0.021136247, -0.02492932, -0.015124583, -0.0023259413, 0.013705162, 0.016484363, 0.0006325517, -0.010007512, -0.004589261, 0.0025316977, -0.0235099, -0.0003861659, 0.0015476455, 0.00011191729, -0.012273814, 0.0038407852, -0.032515466, 0.0314181, -0.0036737944, -0.032515466, -0.02879396, 0.0084449565, -0.029485779, -0.0031042371, 0.00470854, 0.012166463, 0.041676097, -0.01175495, 0.04508748, -0.01906079, 0.021589506, -0.0038407852, 0.0038199113, 0.02345026, -0.032229196, -0.0023378693, -0.010061188, -0.0012255922, 0.040197037, -0.025573427, -0.0022200812, -0.045516882, 0.005275116, -0.039529074, 0.008057299, -0.00085359067, -0.02225747, 0.022364821, -0.013430821, 0.01445662, 0.02755346, 0.013800586, 0.015184223, -0.031513523, -0.023104351, -0.008808757, 0.015434708, -0.000500972, -0.023140134, 0.03692879, 0.05128999, -0.033779826, 0.01018643, 0.0026629046, 0.0015640465, -0.02640838, -0.010466736, -0.0020635275, -0.01050252, 0.01599532, -0.017736794, 0.00374238, 0.0008274984, -0.013406965, -0.04728221, 0.0017146362, 0.0030371426, -0.051576257, -0.0074251206, -0.008743154, -0.0064410684, 0.010764934, -0.010967708, 0.02260338, -0.012416949, 0.024833897, -0.016651355, 0.017295461, 0.02157758, -0.024392564, 0.014814457, -0.0076040393, -0.019335132, 0.007830669, -0.045612305, -0.029318789, 0.0044282344, 0.022507956, 0.026002832, -0.025024744, -0.0355213, 0.008719298, -0.024082439, 0.007723318, -0.014766745, 0.01223803, -0.059830368, -0.019716825, -0.022746515, -0.023533756, -0.021207813, 0.0036916863, 0.008289893, 0.027028631, -0.017891856, -0.011659526, -0.04933381, -0.016997263, 0.029485779, 0.00090279325, -0.0194067, 0.056204285, 0.010234142, -0.045779295, -0.013764801, -0.013168407, 0.024213646, -0.013228046, -0.015494348, -0.010025403, 0.03273017, 0.0018383883, 0.035616722, 0.0045206756, 0.014420836, -0.01496952, -0.00046667925, -0.004887459, -0.04463422, 0.016544003, 0.00090652076, -0.026145967, -0.024857752, -0.0027150891, -0.012858281, -0.02669465, 0.019335132, 0.020730698, 0.013872153, -0.04332215, -0.012345381, -0.020241654, -0.043870833, -0.05901927, -0.010919997, 0.02014623, 0.0025898463, 0.03752519, -0.028054431, -0.0085880915, 0.014504332, 0.0027732379, 0.023688817, -0.006190582, -0.033946816, -0.008892253, 0.012094895, -0.0035455695, 0.013740946, -0.017176183, -0.008128867, -0.037262775, 0.029104088, -0.016210021, -0.02429714, 0.02891324, 0.053580146, -0.016174238, 0.03084556, 0.017772578, 0.013693234, 0.014897953, 0.007323733, 0.007586147, -0.015339285, 0.011802661, 0.0097391335, -0.008355497, -0.028388413, -0.009256054, 0.0007268567, -0.044729643, 0.020229725, 0.0024198736, -0.014623611, 0.02008659, 0.045182902, -0.031203398, -0.0060832314, -0.025644995, -0.024201717, 0.028889384, -0.02521559, -0.03783531, 0.0031936965, -0.038050015, 0.013633595, -0.00064820703, 0.03711964, -0.01975261, -0.020158159, -0.008987676, -0.012172426, 0.008778938, -0.01883416, 0.0024168915, -0.011236086, -0.024595339, -0.014838313, -0.014408909, 0.04172381, 0.007884345, -0.0070613194, 0.0037572898, 0.009983656, 0.015971463, 0.014385053, -0.0037871096, 0.019203926, -0.012798642, 0.01172513, 0.025716562, 0.02783973, -0.018416684, 0.0015700104, -0.0018965368, -0.023998944, -0.0042612436, 0.029438067, 0.03461478, 0.00081333396, 0.0045355856, -0.01975261, 0.02106468, -0.008981712, -0.043131303, -0.010174503, 0.0472345, 0.001978541, 0.04320287, -0.015064944, -0.02845998, -0.0051528546, -0.0033755968, -0.025239445, -0.018655242, 0.0060176277, 0.026790073, -0.040841144, -0.014719034, -0.021350948, -0.020861905, -0.01975261, -0.02322363, 0.027935153, 0.019358989, -0.033111863, 0.030463867, 0.030607002, 0.0036648486, 0.011098915, -0.0068048695, -0.03723892, 0.012858281, 0.034137663, 0.00079544215, -0.005006738, 0.03096484, -0.0146593945, 0.026790073, 0.008594055, -0.006089195, -0.005999736, -0.022245541, 0.034400076, -0.019621402, 0.038670264, -0.060641468, -0.013132622, -0.0013791639, -0.0113792205, 0.012619723, -0.026623083, 0.02919951, -0.0056836465, 0.0018100595, 0.012631651, -0.0059520244, -0.029390356, 0.042033937, 0.015017232, -0.014468548, 0.0059043127, 0.005379485, 0.016520148, -0.013251902, -0.043298293, 0.00576416, 0.014408909, -0.011224158, 0.033565123, 0.049667794, -0.03289716, 0.025191734, -0.009995583, 0.032634746, -0.013347325, -0.025740419, 0.044729643, 0.013764801, -0.005128999, 0.01445662, -0.0199196, -0.019001152, 0.0024452205, 0.01320419, -0.05811275, 0.01189212, -0.0038914788, -0.006977824, 0.016353156, -0.036117695, 0.005069359, 0.02106468, -0.009613891, 0.01628159, -0.00992998, -0.030273022, 0.0069480045, 0.014098783, 0.004860621, 0.045302182, -0.01542278, -0.010550232, 0.0050097196, 0.017009191, 0.019836105, -0.00026073653, -0.031441957, -0.008975748, 0.022352893, 0.006220402, -0.019848034, -0.0026912335, 0.017271606, -0.024165934, 0.017355101, -0.017486308, 0.023820026, 0.024905464, 0.031728227, -0.027911296, -0.04492049, -0.005969916, -0.0040197037, -0.013156478, 0.013955648, -0.020313222, 0.0073118056, -0.0028984807, -0.011832481, -0.022961216, 0.001611758, -0.016544003, 0.03420923, -0.019502124, 0.0026032652, -0.008277966, 0.012333453, -0.003948136, -0.0041747666, 0.044825066, 0.0016907804, 0.033684403, -0.0068406533, -0.013395037, 0.0021052752, 0.029056376, 0.0030192507, 0.0027911295, 0.048212588, -0.0034471643, -0.007210418, -0.03239619, -0.013800586, 0.031203398, 0.0014566954, -0.038741834, -0.002108257, -0.024142079, 0.015494348, 0.026074398, 0.0078127775, 0.048188735, -0.017856073, 0.027362613, 0.012190319, -0.0224841, 0.015542059, 0.010037332, 0.0009907616, 0.04668582, -0.0073058414, 0.00090502977, -0.009244126, -0.04735378, 0.0013627631, -0.0020918562, 0.020993112, -0.03129882, 0.023414476, 0.0054212324, 4.99481e-05, 0.0028477872, 0.009083099, -0.0014686232, -0.010800717, -0.0075622913, 0.03688108, -0.007365481, 0.044085536, -0.00472345, 0.014122639, 0.012810569, 0.0029715393, 0.017844144, 0.038169295, 0.021541795, -0.0076040393, 0.02151794, 0.01490988, 0.019800322, -0.06016435, 0.023426404, -0.02340255, -0.046184845, -0.0059788623, 0.030082176, -0.0007850052, 0.03812158, 0.01844054, -0.005495782, -0.013132622, 0.021052752, -0.0068943286, 0.012715146, -0.01069933, -0.002370671, 0.015041088, -0.0022722657, -0.0046489006, -0.010627762, 0.0209454, 0.024714617, 0.030344589, -0.025644995, -0.01656786, 0.011838445, -0.012667434, -0.005731358, 0.008778938, 0.0114925355, 0.02260338, -0.020182014, 0.013072983, 0.0054271966, -0.00064522505, 0.0017787487, 0.04332215, 0.02800672, -0.04990635, -0.0001428553, -0.020921545, 0.003626083, -0.02418979, -0.019788394, -0.003614155, 0.016353156, -0.008146759, -0.022376748, 0.01166549, -0.013740946, -0.005134963, -0.013168407, -0.0044371802, 0.015601699, -0.019776465, -0.009458828, -0.031680513, 0.034018382, 0.015673267, -0.0067631216, -0.005486836, 0.036857225, -0.009136775, -0.011152591, 0.032825593, 0.0047115223, 0.027863584, 0.0012703218, 0.008373389, -0.003754308, -0.0013843824, 0.015339285, 0.008349533, -0.019848034, -0.031775936, 0.020539852, -0.0043298295, 0.018201983, -0.026479948, 0.0377876, 0.027100198, -0.012428876, 0.0069599324, -0.0019546854, 0.0010750024, 0.019514052, -0.015864113, 0.009721242, -0.0007231292, 0.020074664, -0.007723318, -0.04201008, -0.006858545, -0.024690762, -0.011373257, 0.029628914, -0.031489667, 0.006089195, 0.010359385, 0.0036350288, 0.030440012, 0.007252166, 0.015840257, -0.015446636, 0.014039144, 0.020575635, -0.033684403, 0.018225837, 0.018750666, 0.027052486, 0.02106468, 0.029271077, -0.04172381, 0.0116953105, 0.014206134, -0.0016341229, -0.0055643674, -0.01175495, 0.03688108, -0.011605851, 0.0029566293, 0.033946816, 0.0038795508, -0.017641371, -0.032062206, -0.0050276117, 0.052291933, -0.0072700577, -0.0014842786, -0.009751062, -0.015398924, -0.0028984807, 0.0076040393, 0.03864641, -0.01564941, 0.018368972, 0.0138244415, -0.034543213, -0.0024437294, -0.007120959, 0.03580757, -0.0011540247, 0.0069062565, -0.047496915, -0.03704807, 0.0014768237, 0.01616231, -0.0023989999, 0.034519356, 0.02407051, 0.03408995, -0.03564058, 0.026074398, 0.010257998, 0.0052959896, 0.01957369, 0.013991432, -0.019704899, -0.016114598, 0.03129882, -0.019621402, -0.023307126, 0.011426932, -0.03783531, -0.012273814, 0.008361461, 0.029724337, -0.028436124, -0.013061055, -0.028483836, -0.043107446, 0.020110447, -0.011719166, -0.02612211, 0.007276022, -0.013132622, -0.0053019533, 0.013251902, 0.021136247, 0.036451675, -0.002503369, -0.008910145, -0.003873587, -0.014086855, -0.00059192226, -0.0011912994, -0.01451626, 0.007848561, 0.033565123, -0.028221421, -0.010150647, -0.012309597, -0.016233878, 0.007389337, -0.051719394, 0.01542278, 0.016043032, 0.004654865, 0.0024556573, 0.0011808625, 0.0005617298, 0.023080494, 0.019907672, -0.008361461, 0.0069062565, -0.0054450883, 0.00085657265, -0.01804692, 0.01605496, 0.022531811, -0.047377635, -0.007353553, -0.0044222707, -0.039242804, 0.030773994, 0.00013912782, 0.024022799, 0.0033636692, -0.020349005, -0.019895745, -0.006500708, 0.016078815, 0.02367689, -0.018452467, 0.019728754, -0.020062735, -0.028960953, -0.016687138, -0.01718811, -0.043870833, 0.011349401, -0.0011264415, -0.0029819761, -0.003888497, 0.022400605, -0.0127032185, -0.022233615, -0.005969916, -0.032062206, 0.024833897, 0.0049262247, 0.018702954, -0.03466249, -0.033111863, -0.013585883, -0.028364556, -0.0060355198, 0.022579523, 0.00048308013, -0.00040480326, 0.003134057, 0.004389469, 0.029795906, 0.009774918, -0.009089063, 0.043846976, 0.038217004, 0.022853864, -0.021601435, 0.023307126, -0.009953836, 0.003497858, 0.00033882703, -0.040769577, 0.019716825, 0.018977296, 0.03914738, 0.040650297, -0.03914738, 0.022615306, -0.0039123525, 0.045898575, 0.024142079, 0.035592865, 0.023354838, -0.0040853075, -0.008504596, 0.009679494, 0.004377541, 0.0019218836, -0.012965632, -0.025644995, -0.0019025007, -0.0020501085, -0.019716825, -0.0014216572, -0.013180334, -0.01240502, -0.032348476, -0.022209758, 0.048856698, 0.014492404, 0.008731226, -0.011420969, -0.011743022, 0.0068048695, -0.013979504, -0.006858545, 0.01189212, -0.045731585, 0.02743418, 0.04263033, 0.040841144, 0.008081155, 0.005227404, 0.0003356587, -0.02800672, 0.012619723, 0.018571747, 0.056204285, -0.033517413, 0.040960424, -0.02311628, 0.02953349, -0.017104615, 0.022555668, 0.0029178637, -0.040602587, -0.01963333, 0.017223895, -0.026145967, 0.03618926, 0.023772314, -0.0012099368, -0.021673001, -0.032754026, 0.043131303, -0.0009840521, -0.055059206, -0.023831952, -0.0070314994, -0.010621799, 0.00728795, 0.038789544, -0.00848074, 0.022376748, -0.022865793, 0.0039391904, -0.04484892, 0.0015536095, 0.019740682, 0.043918543, -0.008671586, -0.016913768, -0.011021384, -0.004124073, -0.012762858, 0.0028209493, -0.009333585, -0.012154534, 0.0080990475, 0.026957063, 0.012679363, -0.040030047, -0.0032980656, -0.013991432, -0.0058387094, 0.007502652, 0.021494083, -0.0053198454, -0.012548155, 0.011820553, 0.0141703505, -0.040626444, -0.026026687, -0.02726719, 0.001438058, -0.006447032, -0.020396717, -0.016627498, 0.0047532697, 0.009238162, -0.030416157, 2.1153393e-05, -0.012130679, 0.019740682, -0.0009952345, -0.017295461, 0.041055847, -0.0110333115, 0.020993112, 0.04446723, -0.05878071, -0.00029521564, -0.038503274, 0.010633727, 0.01072915, 0.043465283, 0.011224158, 0.010240106, -0.026384525, 0.03387525, 0.0065543833, -0.030344589, 0.028770106, -0.0060504293, -0.02049214, -0.02640838, -0.026026687, 0.000116390256, 0.0051886383, -0.014265774, 0.021720713, -0.008236218, -0.0018324243, -0.01121223, -0.043274436, -0.025311014, 0.055918016, -0.0018652261, -0.018345118, 0.024320997, 0.03215763, 0.041986223, -0.0026957064, 0.011540247, 0.020551778, -0.01628159, -0.02139866, -0.025692707, 0.00038802964, 0.017235821, 0.034590922, 0.0046667927, 0.019490195, 0.016090743, 0.008379353, -0.031513523, 0.00876701, 0.021243598, -0.015375068, -0.025311014, -0.011200302, -0.039624497, -0.012810569, -0.006113051, -0.0049590264, 0.003232462, 0.021899633, -0.01747438, 0.024714617, -0.020515995, 0.03199064, -0.014778674, -0.011731094, -0.0049590264]"
../../../gradio,../../../gradio/gradio/components,upload_button.pyi,"""""""gr.UploadButton() component.""""""

from __future__ import annotations

import tempfile
import warnings
from pathlib import Path
from typing import Any, Callable, List, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.data_classes import FileData, GradioRootModel
from gradio.events import Events
from gradio.utils import NamedString

set_documentation_group(""component"")


class ListFiles(GradioRootModel):
    root: List[FileData]

    def __getitem__(self, index):
        return self.root[index]

    def __iter__(self):
        return iter(self.root)

from gradio.events import Dependency

@document()
class UploadButton(Component):
    """"""
    Used to create an upload button, when clicked allows a user to upload files that satisfy the specified file type or generic files (if file_type not set).

    Demos: upload_and_download, upload_button
    """"""

    EVENTS = [Events.click, Events.upload]

    def __init__(
        self,
        label: str = ""Upload a File"",
        value: str | list[str] | Callable | None = None,
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        visible: bool = True,
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        scale: int | None = None,
        min_width: int | None = None,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        type: Literal[""filepath"", ""bytes""] = ""filepath"",
        file_count: Literal[""single"", ""multiple"", ""directory""] = ""single"",
        file_types: list[str] | None = None,
    ):
        """"""
        Parameters:
            label: Text to display on the button. Defaults to ""Upload a File"".
            value: File or list of files to upload by default.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            visible: If False, component will be hidden.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If False, the UploadButton will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            type: Type of value to be returned by component. ""file"" returns a temporary file object with the same base name as the uploaded file, whose full path can be retrieved by file_obj.name, ""binary"" returns an bytes object.
            file_count: if single, allows user to upload one file. If ""multiple"", user uploads multiple files. If ""directory"", user uploads all files in selected directory. Return type will be list for each file in case of ""multiple"" or ""directory"".
            file_types: List of type of files to be uploaded. ""file"" allows any file to be uploaded, ""image"" allows only image files to be uploaded, ""audio"" allows only audio files to be uploaded, ""video"" allows only video files to be uploaded, ""text"" allows only text files to be uploaded.
        """"""
        valid_types = [
            ""filepath"",
            ""binary"",
        ]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.file_count = file_count
        if file_count == ""directory"" and file_types is not None:
            warnings.warn(
                ""The `file_types` parameter is ignored when `file_count` is 'directory'.""
            )
        if file_types is not None and not isinstance(file_types, list):
            raise ValueError(
                f""Parameter file_types must be a list. Received {file_types.__class__.__name__}""
            )
        if self.file_count in [""multiple"", ""directory""]:
            self.data_model = ListFiles
        else:
            self.data_model = FileData
        self.size = size
        self.file_types = file_types
        self.label = label
        self.variant = variant
        super().__init__(
            label=label,
            every=every,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
        )
        self.icon = self.serve_static_file(icon)

    def api_info(self) -> dict[str, list[str]]:
        if self.file_count == ""single"":
            return FileData.model_json_schema()
        else:
            return ListFiles.model_json_schema()

    def example_payload(self) -> Any:
        if self.file_count == ""single"":
            return file(
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            )
        else:
            return [
                file(
                    ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
                )
            ]

    def example_value(self) -> Any:
        if self.file_count == ""single"":
            return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
        else:
            return [
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            ]

    def _process_single_file(self, f: FileData) -> bytes | NamedString:
        file_name = f.path
        if self.type == ""filepath"":
            file = tempfile.NamedTemporaryFile(delete=False, dir=self.GRADIO_CACHE)
            file.name = file_name
            return NamedString(file_name)
        elif self.type == ""binary"":
            with open(file_name, ""rb"") as file_data:
                return file_data.read()
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(type)
                + "". Please choose from: 'filepath', 'binary'.""
            )

    def preprocess(
        self, payload: ListFiles | FileData | None
    ) -> bytes | str | list[bytes] | list[str] | None:
        """"""
        Parameters:
            payload: File information as a FileData object, or a list of FileData objects.
        Returns:
            Passes the file as a `str` or `bytes` object, or a list of `str` or list of `bytes` objects, depending on `type` and `file_count`.
        """"""
        if payload is None:
            return None

        if self.file_count == ""single"":
            if isinstance(payload, ListFiles):
                return self._process_single_file(payload[0])
            return self._process_single_file(payload)

        if isinstance(payload, ListFiles):
            return [self._process_single_file(f) for f in payload]  # type: ignore
        return [self._process_single_file(payload)]  # type: ignore

    def _download_files(self, value: str | list[str]) -> str | list[str]:
        downloaded_files = []
        if isinstance(value, list):
            for file in value:
                if client_utils.is_http_url_like(file):
                    downloaded_file = processing_utils.save_url_to_cache(
                        file, self.GRADIO_CACHE
                    )
                    downloaded_files.append(downloaded_file)
                else:
                    downloaded_files.append(file)
            return downloaded_files
        if client_utils.is_http_url_like(value):
            downloaded_file = processing_utils.save_url_to_cache(
                value, self.GRADIO_CACHE
            )
            return downloaded_file
        else:
            return value

    def postprocess(self, value: str | list[str] | None) -> ListFiles | FileData | None:
        """"""
        Parameters:
            value: Expects a `str` filepath or URL, or a `list[str]` of filepaths/URLs.
        Returns:
            File information as a FileData object, or a list of FileData objects.
        """"""
        if value is None:
            return None
        value = self._download_files(value)
        if isinstance(value, list):
            return ListFiles(
                root=[
                    FileData(
                        path=file,
                        orig_name=Path(file).name,
                        size=Path(file).stat().st_size,
                    )
                    for file in value
                ]
            )
        else:
            return FileData(
                path=value,
                orig_name=Path(value).name,
                size=Path(value).stat().st_size,
            )

    @property
    def skip_api(self):
        return False

    
    def click(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `UploadButton` component in Gradio, which allows users to create an upload button that enables them to upload files. The component has various parameters such as label, value, variant, size, icon, type, file_count, file_types, etc. It also includes methods for preprocessing, postprocessing, and handling file uploads. Additionally, it provides methods for defining actions when the button is clicked or when a file is uploaded. The component can be used to interact with other components and functions in a Gradio application.","[-0.052365463, 0.032161642, -0.009490685, -0.0065567964, 0.0019920436, -0.06819068, 0.031072546, 0.01182446, -0.027538545, -0.034450963, 0.026027147, 0.021548523, -0.038874023, -0.013947084, 7.180178e-05, -0.00193231, -0.0066568153, -0.024804695, 0.026738394, 0.039785307, -0.019092502, -0.041363385, 0.013169159, 0.06067815, 0.020726144, -0.038874023, -0.022204202, 0.062500715, -0.026493903, -0.00053378154, -0.052054293, -0.026738394, 0.024160128, 0.014680556, -0.019036936, -0.02140405, 0.010902063, 0.04225244, 0.009574034, -0.021859692, -0.0816599, -0.044897385, -0.018503502, 0.041230023, -0.0045369696, 0.022759862, -0.029672282, 0.021915259, -0.0040618796, 0.015069518, -0.052721087, 0.013558121, -0.0043258187, -0.025849337, -0.0025963245, 0.03814055, -0.046097614, 0.02551594, -0.038029417, -0.05307671, -0.011935592, -0.0186702, -0.016091933, -0.016169727, 0.00864608, 0.021793013, -0.047564555, 0.039118513, 0.042385798, -0.008290458, 0.07845929, -0.03791829, 0.023004353, -0.0377627, 0.0028255347, -0.01545848, -0.028983263, -0.042652518, 0.060767055, -0.011579969, -0.023782277, -0.011857799, -0.05925566, -0.023493335, -0.041919045, 0.037295945, -0.038985156, -0.008373807, -0.028205337, -0.06214509, -0.043541573, -0.00049106515, -0.023671146, 0.07356948, -0.017647784, 0.004072993, -0.017847821, -0.02005935, 0.016058594, 0.041230023, 0.011613308, -0.03876289, -0.010346402, -0.060011357, 0.031694885, -0.054677013, -0.0059233434, 0.04449731, 0.027849715, -0.01963705, -0.012713517, 0.019114729, -0.04487516, 0.044163913, 0.007045778, -0.059122298, 0.030272394, 0.016725387, -0.032961793, -0.037718248, -0.03958527, -0.024671335, -0.0018058973, -0.047342293, 0.045519724, -0.019270314, -0.009073939, -0.017881162, -0.044097234, 0.0061178245, 0.033206284, 0.030761376, 0.011935592, -0.06472336, -0.012335667, 0.029916773, -0.024471298, -0.002654669, -0.037073683, 0.01182446, -0.013202499, -0.05956683, 0.022104183, -0.024715789, -0.024693562, -0.029961225, -0.04605316, 0.022281995, -0.052498825, -0.05916675, 0.021815239, 0.014669443, -0.029783415, 0.027671903, -0.0042396914, -0.0044897385, 0.021226238, 0.0022643174, -0.01151329, -0.009790742, -0.00019170294, -0.020426087, 0.058944486, -0.009862977, -0.0058622207, -0.00620673, -0.014124895, -0.0026713389, -0.035829004, 0.05103188, -0.005581612, 0.003670139, -0.041185573, -0.014802801, 0.012869102, -0.027405186, -0.008045967, -0.030539112, 0.0041507855, -0.016369764, 0.0142138, -0.0028352588, -0.015780764, -0.0075736553, -0.02731628, 0.0043397103, 0.015013953, -0.04898705, -0.028538734, 0.035428926, -0.011007639, -0.014336046, 0.004998168, -0.0045425263, 0.0128135355, -0.0326284, -0.0003234987, -0.006323419, -0.00081612665, 0.0015878004, 0.025582619, 0.004712003, 0.015814103, -0.03987421, -0.041852366, -0.023004353, 0.02520477, 0.015269556, 0.012580158, 0.01151329, -0.00041292535, -0.012291214, -0.0006278966, -0.007001325, -0.051165238, -0.018503502, 0.004428616, 0.059655733, -0.00969628, -0.03173934, -0.03180602, 0.019003596, 0.027205149, -0.047697917, 0.046453234, 0.03436206, 0.009635157, 0.0026518907, 0.032428358, 0.006006692, 0.054854825, 0.009640713, 0.005526046, -0.054543655, 0.037495986, -0.02050388, 0.04574199, 0.0021490178, 0.047253385, 0.019614823, -0.045297462, -0.02302658, -0.0033284076, -0.023071032, 0.012024498, 0.02464911, -0.0049203755, -0.010107468, 0.030072358, 0.05040954, -0.038562853, -0.028116431, 0.03627353, 0.0017517203, -0.00063657877, 0.008446042, 0.028227564, 0.018614633, 0.027205149, 0.005242659, 0.01151329, 0.00033183364, -0.029049942, 0.036940325, -0.011246572, 0.06290079, 0.019048048, 0.019614823, 0.010429751, 0.026560582, -0.018425709, -0.011085431, 0.02731628, 0.008707203, 0.018336803, 0.015814103, 0.03696255, 0.03260617, 0.019892653, 0.025493713, -0.019370332, 0.017336614, -0.016525349, 0.038318362, -0.023115486, -0.0028922139, 0.029939, 0.0009619876, 0.03149485, -0.027849715, 0.042363573, 0.0016461449, 0.012824649, -0.024026768, -0.021103993, 0.0121578565, 0.04400833, -0.026960658, 0.0009300371, -0.0066679283, -0.00035562285, 0.002443518, -0.008462712, -0.025049185, -0.0025782657, 0.0065401266, -0.014880594, 0.01708101, 0.0024601878, 0.017636672, 0.03509553, 0.048453614, 0.023004353, -0.013858178, -0.050187275, 0.011052092, 0.0055065975, 0.023004353, -0.009073939, -0.002087895, 0.0074625234, 0.029583376, 0.021915259, -0.019314766, -0.027227374, -0.050365087, -0.06632366, 0.003797941, -0.010290836, -0.035051078, 0.030783603, 0.0037534882, -0.012969121, 0.028894357, 0.053165615, 0.000629633, -0.042852554, 0.04125225, -0.04898705, 0.026404997, -0.05183203, -0.020626126, 0.03727372, 0.036429115, 0.0026254968, 0.03222832, -0.041363385, 0.040629912, -0.014202688, -0.028494282, 0.015969688, -0.015236217, 0.018036747, 0.0050176163, 0.025293676, -0.010218601, -0.035940133, -0.04872033, -0.07574767, -0.015136197, -0.024249034, 0.071391284, -0.0005094714, 0.032161642, -0.022248656, -0.0022268102, -0.025627071, -0.039918665, 0.0033339642, -0.027783036, 0.03318406, 0.016880972, -0.030894736, 0.0361624, -0.04480848, -0.019481465, 0.017169915, -0.02676062, -0.038651757, -0.009057269, 0.040029798, 0.038896248, -0.012869102, -0.018536841, 0.012613498, -0.0009772682, -0.0008904463, 0.047564555, 0.01829235, -0.007957062, -0.036429115, -0.015491821, 0.0015350127, -0.028494282, 0.009379553, 0.03253949, 0.028449828, -0.013735932, 0.00872943, 0.027027337, -0.032317225, -0.046808857, -0.020637238, 0.053565692, 0.009451789, -0.013391423, 0.03816278, 0.044341724, 0.010652016, -0.020615011, -0.00026758536, 0.010468648, 0.047342293, -0.010346402, 0.054410297, 0.006351202, -0.021226238, -0.014347159, -0.001821178, 0.091306165, -0.02713847, 0.0036673606, 0.008423816, -0.06614585, 0.011935592, 0.021893032, 0.020526107, -0.007718127, 0.03665138, -0.056232862, -0.029850094, -0.00018180524, -0.028894357, 0.0088794585, 0.015980802, 0.00066991843, -0.013269178, 0.008634968, 0.04380829, 0.05321007, -0.039540816, 0.020514993, 0.043297082, 0.03689587, -0.028227564, -0.0023907302, -0.016014142, -0.009840751, -0.05569943, -0.02289322, -0.042474706, -0.0028977706, -0.055032637, 0.01698099, 0.041741233, -0.033361867, -0.0031367047, -0.014224914, 0.032428358, -0.011079875, -0.010096355, 0.015947463, -0.0029950112, 0.04587535, -0.01431382, -0.010246383, -0.014702782, 0.012546819, -0.017781142, -0.039785307, -0.010301949, 0.010496431, 0.0047314507, 0.040941082, -0.055921692, 0.02143739, 0.0059900223, -0.023315523, -0.030227942, -0.010690912, -0.023560014, 0.0077681364, -0.007256929, -0.05258773, -0.014180461, 0.08628299, 0.007907052, -0.037007004, 0.031783793, -0.02638277, -0.02215975, 0.0036006814, -1.6789201e-05, -0.008657194, 0.010690912, 0.010790931, -0.038874023, 0.031205906, 0.0061289375, -0.009662939, 0.013513668, -0.006579023, 0.0024824142, 0.029027715, -0.004648102, -0.010140808, 0.053298976, 0.0010752034, 0.019114729, -0.018103426, 0.01698099, -0.029049942, 0.038029417, 0.01057978, 0.006306749, -0.018281238, -0.005098187, 0.05369905, 0.0012585715, -0.0096018175, -0.053610146, 0.067746155, -0.0130358, -0.0008640524, -0.010968742, 0.023737825, -0.013013573, -0.027049564, 0.009607374, -0.025138091, -0.029116621, -0.03025017, -0.014858367, -0.0034756577, -0.02137071, -0.018436823, -0.0057066353, 0.016803179, -0.0026213294, -0.03596236, -0.0033756387, -0.019092502, 0.017503312, 0.0069902116, -0.007884826, 0.06579023, -0.013080253, -0.070146605, 0.040941082, -0.009524024, 0.041607875, -0.042030174, 0.06112268, -0.033828624, 0.00034468327, 0.01306914, 0.009418449, 0.040163156, -0.016403103, -0.013780385, 0.0017475529, -0.0180812, -0.002280987, 0.03353968, 0.0040535447, -0.012002272, -0.015069518, -0.021904144, -0.011857799, 0.011413271, -0.037429307, 0.007195806, 0.019025823, 0.062278453, -0.023382202, 0.027805261, 0.0017864492, -0.025493713, 0.001405127, -0.0072902683, 0.028516507, -0.024560204, 0.01306914, -0.031161452, -0.042408027, 0.014791688, 0.04107444, -0.01144661, 0.030427981, 0.0136248, -0.016003028, 0.006634589, 0.031517074, 0.033517454, -0.0051565315, 0.030383527, -0.019859314, 0.021581862, -0.025293676, 0.029583376, -0.002883879, -0.028138658, -0.002105954, 0.032117188, 0.06810178, -0.026249412, 0.0046425452, -0.01400265, -0.080726385, 0.017625557, -0.029205527, 0.014224914, -0.03816278, -0.04685331, -0.008584958, -0.004842583, -0.02268207, 0.038051646, 0.0003399949, 0.01963705, -0.0010078296, 0.007834816, 0.025715977, -0.032139417, 0.008457156, 0.044452857, 0.0011842519, -0.027338507, 0.013480329, 0.028094206, 0.010029675, 0.010707581, 0.030850282, -0.01960371, 0.011646649, -0.016569803, 0.007384731, -0.030005679, -0.00357012, -0.02227088, 0.039740853, 0.0284276, -0.015980802, 0.003742375, -0.012680178, 0.014069329, -0.007256929, 0.0004837721, 0.042052403, 0.018936917, -0.01950369, 0.0053482344, 0.008612741, -0.024426844, -0.039162967, -0.0008661361, -0.032495037, 0.00558439, -0.013735932, 0.037807155, -0.011257686, -0.021804126, -0.019581484, -0.004756456, -0.02464911, 0.05085407, 0.006340089, 0.019925993, -0.029516697, 0.03951859, -0.029383339, 0.019692615, -0.014880594, 0.033050697, 0.02738296, -0.02188192, -0.0037812712, -0.03920742, -0.00030717617, 0.016969878, -0.030405754, 0.0041952385, -0.03198383, -0.014502744, -0.0056455126, -0.047564555, 0.011296582, 0.037473757, 0.0055899466, -0.049698293, -0.015047292, 0.0155585, -9.055533e-05, -0.016469784, -0.012524593, 0.025360355, -0.008212665, -0.031939376, 0.029049942, -0.03745153, 0.026249412, -0.001057839, 0.0056066164, 0.0041424506, -0.036451343, 0.018814672, -0.01586967, -0.009029486, -0.010418639, -0.017003218, 0.01760333, 0.02199305, -0.008579401, 0.0012210644, -0.009524024, 0.0071735797, 0.0050231726, 0.01649201, 0.020114917, -0.0052676634, -0.004223021, 0.023826731, -0.07254706, -0.016358651, 0.011329922, -0.051209692, -0.02787194, 0.005281555, -0.05321007, -0.007884826, -0.01590301, 0.004120224, 0.010246383, 0.035051078, -0.008951694, 0.05925566, 0.013535894, 0.0029866763, 0.01365814, -0.010201931, -0.015047292, 0.05583279, -0.012680178, -0.026982883, 0.0009390666, -0.01745886, -0.0062178434, -0.009996336, -0.01991488, -0.0028505395, 0.01372482, 0.005378796, -0.028694319, 0.00420913, -0.023182165, -0.006729051, -0.020615011, -0.017269935, -0.04038542, 0.011241016, -0.015880782, 0.056410674, 0.02147073, -0.0019600932, -0.011468837, -0.053432334, 0.0291833, 0.004181347, 0.020681692, 0.03914074, -0.008957251, -0.00407855, 0.013102479, -0.030761376, 0.07148019, -0.037407078, -0.000864747, -0.030205715, 0.016880972, -0.010640902, 0.0015850222, 0.016358651, 0.024293486, -0.008218222, 0.023737825, 0.003917408, -0.02738296, 0.01863686, -0.014958386, -0.0076736743, 0.035006624, 0.01978152, -0.025782656, 0.0027116241, 0.038007192, 0.018781332, 0.01486948, -0.048498068, -0.0060844845, 0.017381066, -0.017003218, -0.034006435, -0.037051454, 0.042274665, 0.0105297705, 0.03634021, -0.015002839, -0.03522889, -0.010852054, -0.016858745, -0.018070087, 0.018003406, -0.00037368183, 0.019036936, 0.0036812522, 0.014836141, 0.009762959, 0.03005013, -0.035517834, -0.007773693, -0.0015961354, -0.018714653, -0.018503502, 0.022559825, -0.008851675, 0.0186702, 0.036006812, 0.031228133, 0.02496028, 0.016536463, 0.03293957, 0.015747424, -0.0029922328, 0.023182165, -0.018759105, 0.023226617, 0.0076625613, 0.024026768, 0.0013606742, -0.033895303, 0.012580158, -0.009090609, 0.009501798, 0.027360734, 0.038118325, 0.00620673, 0.0008494663, -0.0016044703, -0.017169915, -0.012124517, -0.006956872, -0.0096240435, -0.014269367, -0.029227752, 0.03267285, -0.015291783, 0.0027977517, 0.05245437, -0.012891328, -0.0047175596, -0.01686986, 0.024426844, -0.02109288, 0.03049466, 0.0034645444, -0.052854445, -0.049164858, 0.017447745, 0.051698674, -0.0060289185, 0.0007668118, 0.0040563233, 0.013502555, -0.0011571634, -0.036762513, -0.015725197, 0.0015141754, 0.0072235893, 0.018459048, 0.0028255347, 0.019003596, -0.0034478747, 0.014013763, 0.012802423, -0.013235838, 0.0037673796, -0.00029120094, 0.013235838, 0.010524214, 0.027671903, -0.026249412, -0.00745141, -0.011768893, 0.00386462, -0.0050565125, 0.040318742, -0.015591839, 0.0019656497, -0.017481085, -0.009262864, 0.00039104623, 0.015958576, -0.044141687, -0.030294621, -0.034739908, -0.0071902494, -0.046719953, -0.01939256, -0.012124517, -0.0153918015, -0.025404807, -0.023093259, 0.0055927252, 0.004953715, 0.0075569856, 0.01393597, 0.011535516, 0.0044841818, 0.030694697, -0.014013763, 0.008373807, -0.014580537, 0.010068572, 0.0035951247, -0.009785185, 0.0023740605, 0.007623665, 0.030272394, 0.008901685, 0.0028672093, 0.012246762, 0.0028783225, 0.021670768, -0.005050956, 0.017125463, -0.051609766, -0.019992672, -9.229177e-05, -0.004695333, -0.0023643363, -0.007901495, -0.038673986, 0.011435498, -0.012735743, 0.011991158, -0.03796274, -0.03489549, 0.016536463, -0.031583756, -0.0076292213, 0.00961293, 0.01586967, 0.061478302, -0.02507141, -0.035184436, -0.0027255157, 0.021581862, 0.004072993, 0.0248936, 0.01365814, -0.062322903, 0.0033006247, -0.013580347, 0.000255083, -0.015158424, -0.022726523, 0.030383527, -0.023004353, 0.03142817, 0.012257875, 0.025449261, 0.022504259, 0.004414724, -0.003689587, -0.030828057, 0.0136248, -0.015091745, -0.021615202, 0.025871562, -0.0017281048, -0.0060455883, 0.035762325, 0.032383908, -0.0025504827, -0.04605316, -0.021592975, 0.0031533744, -0.016747614, 0.026938431, 0.032428358, -0.042919233, 0.006334532, -0.00018163159, 0.00016339897, 0.03253949, 0.0084015895, -0.017314387, -0.026227186, 0.025738204, -0.018514615, -0.024782468, -0.005806654, 0.009323986, -0.029538924, 0.016947651, -0.007068004, 0.01275797, -0.020481654, -0.033384096, -0.010985413, 0.0047786823, 0.013135819, 0.05712192, -0.023093259, 0.010124138, -0.028272016, -0.017003218, 0.022826541, -0.001002273, -0.009090609, -0.0377627, -0.016291972, 0.027405186, -0.0038729552, -0.022559825, 0.016069708, 0.04509742, 0.02731628, 0.049564935, 0.006095598, 0.017947841, 0.0073236083, -0.02644945, -0.02893881, 0.0076292213, 0.045075197, 0.03191715, -0.004217465, 0.0115021765, -0.0041230023, -0.035251115, -0.029538924, 0.0030644687, 0.047964633, -0.009140619, -0.018792445, -0.0010356127, -0.007095787, -0.013302517, 0.022415353, 0.010663129, 0.02644945, -0.010201931, 0.015147311, -0.022015277, -0.01365814, -0.008529392, -0.026827298, 0.0036312428, 0.017314387, -0.022359787, 0.02112622, 0.040407646, -0.025249222, -0.033050697, 0.007901495, 0.03845172, 0.025004731, 0.017503312, -0.012457913, -0.008329354, -0.0026588365, 0.0018628525, 0.0050565125, -0.029650055, -0.011329922, -0.00437305, -0.033028472, 0.038318362, -0.023915637, -0.010729808, -0.026160507, -0.0032978463, 0.02171522, 0.007879268, 0.017858936, 0.008462712, 0.0012509312, 0.04207463, -0.020626126, -0.03049466, 0.0439861, 0.0017072675, -0.008912798, -0.030427981, 0.008862788, -0.016247518, 0.03547338, 0.014547197, -0.00095226354, 0.028583188, 0.009551807, 0.0068790796, -0.01645867, -0.0008751656, 0.026249412, -0.005728862, -0.01686986, -0.0049231537, -0.021181786, -0.01739218, 0.053743504, -0.0029450017, -0.06516789, -0.014936159, -0.009935213, 0.019681502, 0.0051176352, -0.017992293, 0.0033673039, 0.01860352, -0.025093637, -0.016236406, -0.01182446, 0.03373972, -0.03340632, 0.050365087, 0.021326259, -0.013102479, 0.008873901, -0.0031561528, 0.0093073165, 0.0049231537, 0.005659404, 0.017214369, 0.0010606174, -0.0017308831, 0.010035233, 0.021392938, -0.017825596, 0.004750899, -0.010618676, 0.016336424, 0.036740284, -0.022037504, -0.021359598, 0.001331502, 0.03236168, -0.015614066, 0.027938621, -0.021592975, 0.04698667, 0.0050009466, 0.027271828, 0.01275797, -0.024315713, -0.01708101, -0.015202877, -0.0029672282, -0.015647406, -0.023982316, -0.0043508234, -0.05512154, -0.0052954466, 0.031628206, 0.020459427, -0.028538734, 0.0095795905, 0.000275573, 0.024626883, 0.007879268, 0.0041674552, -0.048053537, 0.032806206, 0.025715977, -0.0035951247, -0.051743124, -0.0037090352, 0.027894167, 0.049698293, 0.023782277, -0.03056134, -0.01028528, 0.002608827, -0.030783603, 0.0058455504, -0.01545848, 0.0029311103, -0.006434551, 0.009018374, 0.004420281, 0.0066845985, 0.0024504638, -0.004131337, -0.0050148377, -0.020437201, -0.039985344, 0.01431382, 0.013313631, 0.010668686, 0.0047814604, 0.007184693, -0.033272963, -0.01490282, 0.0038868466, -0.0014933381, -0.021181786, -0.019103615, 0.034317605, 0.038874023, 0.008846118, 0.003889625, 0.0284276, -0.001711435, -0.014936159, 0.0010842329, -0.0012391234, 0.013802612, 0.02230422, 0.034473192, -0.00835158, -0.003550672, -0.008534948, 0.029472243, -0.015936349, 0.02389341, 0.023137711, -0.018692426, -0.02924998, 0.0014155457, 0.0034062, -0.04854252, 0.035317793, 0.023560014, 0.009507354, -0.01960371, 0.011213233, 0.009496242, 0.018214557, -0.0112299025, 0.045919802, 0.0049842764, -0.008818336, 0.011352148, 0.0044536204, 0.024626883, 0.02551594, -0.0010224157, -0.012913555, 0.0023421098, -0.003211719, -0.0078014764, 0.005031508, -0.004136894, -0.02527145, -0.03545115, 0.019270314, -0.0034923276, 0.022137523, -0.029650055, 0.010918733, 0.006912419, -0.023471108, -0.009840751, 0.03516221, -0.009490685, -0.028338697, 0.011413271, 0.01085761, 0.017503312, 0.0070791175, 0.029161073, 0.03489549, -0.010479761, -0.018625747, 0.057477545, -0.012313441, 0.0030728036, 0.009051713, -0.0054510315, -0.01639199, -0.035073303, -0.023182165, 0.013835952, -0.044408403, 0.018247897, 0.011291025, -0.0505429, 0.0018711875, 0.035895683, -0.0017781142, 0.040918853, -0.013535894, 0.0059733526, 0.0075014196, 0.011646649, -0.0015252887, -0.018092312, 0.005562164, -0.022726523, -0.005620508, 0.015425141, -0.023804504, 0.013913744, 0.011724441, -0.016636482, -0.012068951, 0.027205149, -0.004231356, 0.009168401, -0.01922586, 0.0007737575, -0.006195617, -0.0045175217, 0.0004122308, 0.001811454, -0.009190628, -0.02893881, -0.013335857, -0.019414784, 0.0115466295, -0.0012801033, 0.00124468, -0.006251183, 0.017870048, 0.012146743, -0.012869102, -0.024849147, -0.0029061055, 0.02887213, -0.008457156, 0.006562353, 0.016414218, 9.1684014e-05, -0.020681692, -0.011363261, 0.021459617, -0.018136766, 0.010879837, 0.043852743, -0.008240448, 0.038185004, -0.009674053, 0.044652894, -0.0052593285, 0.024626883, -0.002572709, 0.013647027, 0.042719197, 0.017169915, -0.02302658, 0.019859314, -0.026160507, 0.007923721, 0.028494282, -0.01372482, 0.012146743, 0.0036729174, -0.006245626, 0.022626504, 0.020214936, 0.032272775, 0.007979288, 0.054721467, -0.02676062, 0.037229266, 0.012080064, 0.040629912, 0.022982126, 0.012569046, -0.0373404, -0.0031422614, 0.01756999, -0.001052977, 0.045008518, 0.018959144, -0.00015732144, 0.024115674, -0.045075197, -0.033895303, -0.002526867, -1.5302376e-05, 0.0056399563, -0.023471108, -0.008757213, -0.04007425, -0.04038542, -0.012591272, -0.009512912, -0.019303653, 0.002635221, 0.049476027, 0.011557743, -0.011846687, -0.042830326, 0.0034173133, -0.014136008, 0.032383908, 0.015225103, 0.012524593, -0.010585336, -0.029850094, -0.012080064, 0.0059233434, 0.0043952763, 0.039474137, -0.032561716, -0.044097234, -0.02731628, 0.013391423, -0.029783415, 0.03869621, 0.0057622017, 0.010340846, 0.007195806, 0.007301382, 0.015591839, -0.009796298, 0.009618487, -0.055477165, -0.0072902683, -0.028071979, 0.013213611, 0.03489549, -0.012124517, 0.0011099323, -0.011957819, -0.008601627, 0.014636103, -0.029272206, 0.024782468, 0.012124517, 0.027538545, -0.0062011736, -0.021181786, -0.03427315, 0.039496362, 0.017647784, 0.009574034, 0.010963186, 0.008184882, 0.008257118, 0.028716546, -0.03378417, 0.020070465, 0.0008501609, -0.024560204, 0.0016767061, 0.018158993, -0.031205906, -0.01121879, -0.010707581, 0.026227186, -0.027582997, -0.023826731, -0.0025407586, -0.026782846, 0.026960658, -0.030227942, -0.012502366, -0.022915447, -0.0019211969, -0.008951694, -0.014391612, -0.027649676, 0.0045064082, -0.010451978, -0.013580347, -0.0153918015, -0.024693562, -0.0014141565, 0.039851986, 0.012891328, -0.01835903, -0.010046345, 0.01210229, -0.009257307, 0.015158424, 0.052543275, 0.04605316, -0.0140804425, 0.01365814, 0.009868534, -0.041607875, 0.016203066, -0.009568477, -0.01372482, -0.02278209, -0.002471301, -0.020326069, -0.0028394263, -0.015091745, 0.034317605, -0.0017739468, -0.016080821, 0.003522889, -0.0013738711, -0.031094773, 0.007012438, 0.024738014, 0.004561974, 0.018581294, 0.022759862, 0.004661993, -0.0058733337, -0.028472055, -0.0099852225, -0.004375828, -0.0015238995, -0.00278386, -0.025604846, -0.019125842, 0.017058784, -0.004403611, -0.0027199592, 0.046942215, 0.025604846, -0.009073939, -0.029783415, 0.010151921, -0.02420458, 0.014547197, -0.009457345, -0.053965766, 0.010001893, -0.002864431, 0.027671903, 0.020437201, -0.0008640524, -0.010335289, -0.0004664077, 0.003120035, 0.017781142, -0.0022462583, 0.0034423182, -0.016669821]"
../../../gradio,../../../gradio/gradio/components,radio.py,"""""""gr.Radio() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import FormComponent
from gradio.events import Events


@document()
class Radio(FormComponent):
    """"""
    Creates a set of (string or numeric type) radio buttons of which only one can be selected.

    Demos: sentence_builder, blocks_essay
    """"""

    EVENTS = [Events.select, Events.change, Events.input]

    def __init__(
        self,
        choices: list[str | int | float | tuple[str, str | int | float]] | None = None,
        *,
        value: str | int | float | Callable | None = None,
        type: str = ""value"",
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            choices: A list of string or numeric options to select from. An option can also be a tuple of the form (name, value), where name is the displayed name of the radio button and value is the value to be passed to the function, or returned by the function.
            value: The option selected by default. If None, no option is selected by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            type: Type of value to be returned by component. ""value"" returns the string of the choice selected, ""index"" returns the index of the choice selected.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: Additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If True, choices in this radio group will be selectable; if False, selection will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.choices = (
            # Although we expect choices to be a list of tuples, it can be a list of tuples if the Gradio app
            # is loaded with gr.load() since Python tuples are converted to lists in JSON.
            [tuple(c) if isinstance(c, (tuple, list)) else (str(c), c) for c in choices]
            if choices
            else []
        )
        valid_types = [""value"", ""index""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return self.choices[0][1] if self.choices else None

    def example_value(self) -> Any:
        return self.choices[0][1] if self.choices else None

    def preprocess(self, payload: str | int | float | None) -> str | int | float | None:
        """"""
        Parameters:
            payload: Selected choice in the radio group
        Returns:
            Passes the value of the selected radio button as a `str | int | float`, or its index as an `int` into the function, depending on `type`.
        """"""
        if self.type == ""value"":
            return payload
        elif self.type == ""index"":
            if payload is None:
                return None
            else:
                choice_values = [value for _, value in self.choices]
                return (
                    choice_values.index(payload) if payload in choice_values else None
                )
        else:
            raise ValueError(
                f""Unknown type: {self.type}. Please choose from: 'value', 'index'.""
            )

    def postprocess(self, value: str | int | float | None) -> str | int | float | None:
        """"""
        Parameters:
            value: Expects a `str | int | float` corresponding to the value of the radio button to be selected
        Returns:
            The same value
        """"""
        return value

    def api_info(self) -> dict[str, Any]:
        return {
            ""enum"": [c[1] for c in self.choices],
            ""title"": ""Radio"",
            ""type"": ""string"",
        }
","The code defines a `Radio` component that creates a set of radio buttons where only one option can be selected. It takes parameters such as choices (a list of options), value (default selected option), type (return type), label (component label), info (additional description), and others. The component preprocesses the selected choice and postprocesses the value. It also provides methods for generating example payload and value, as well as API information.","[-0.031453785, 0.011214277, -0.0006435674, 0.007863446, 0.00912918, -0.057331003, -0.022563076, 0.0035250986, 0.00849937, 0.0007169433, -0.009514403, -0.025583716, -0.019151099, 0.0009821664, 0.02673327, -0.02054524, 0.00016433134, -0.006359241, 0.0024076453, 0.026977858, -0.03864462, -0.03490245, 0.021890463, -0.009740645, -0.014736318, -0.0010540136, -0.04764539, 0.08027319, -0.0074109617, -0.004295545, -0.024226261, -0.0319185, -0.00168153, 0.00637147, -0.046080038, -0.052683864, 0.02673327, 0.009233128, 0.016130459, -0.018380651, -0.03881583, -0.0010914658, -0.02054524, 0.014283833, -0.00371771, 0.06765254, -0.032505505, 0.012504469, -0.0086644655, 0.009942428, -0.059630115, 0.018478487, 0.011538354, -0.024886645, 0.008487141, 0.015531223, -0.102041356, 0.03592971, -0.008713383, -0.005295291, 0.026439767, -0.0421422, -0.0124922395, 0.027833909, 0.017426766, 0.00894574, -0.026072888, -0.009037459, 0.020422947, 0.032212, 0.068826556, -0.04287596, -0.0090558035, 0.013611222, 0.022905497, 0.0074782227, -0.040112134, -0.0032193656, 0.05014017, 0.015249949, -0.015653515, -0.019187786, -0.015249949, -0.09313842, -0.016399505, 0.03419315, -0.009349307, -0.012265997, -0.02939926, -0.07479446, -0.081055865, -0.033043593, 0.0009806377, 0.07978401, 0.0008377077, -0.004194653, -0.033899646, 0.01576358, 0.009954658, 0.0435608, 0.054787308, -0.027491488, -0.03805761, 0.024018364, 0.011495551, -0.030157477, 0.0036626782, 0.055472147, -0.022196196, -0.022232885, -0.0048030615, 0.004922297, -0.044832647, 0.023675943, -0.050433673, -0.033899646, -0.0028417858, -0.010663958, 0.0100280335, -0.0051210234, -0.013342177, -0.062222727, 0.037641816, -0.04463698, 0.022514159, -0.0010280263, 0.000845351, -0.024006134, 0.005191342, 0.023419127, 0.03064665, 0.025926135, 0.0066710883, -0.026464226, -0.062809736, 0.059385527, -0.034095313, -0.0025987283, -0.04373201, 0.00071082864, 0.023651484, 0.0053961826, 0.02017836, -0.03578296, -0.027736073, -0.040454555, -0.036541175, 0.03133149, -0.06285865, -0.0020667533, -0.0013085362, -0.0032682829, -0.03490245, 0.04316946, 0.0056621702, -0.020863201, 0.053026285, 0.003113888, -0.012437208, -0.0125595005, -0.005986247, -0.013562304, -0.03206525, -0.021034412, 0.009850709, -0.047889978, 0.029839516, 0.014919758, -0.030915694, 0.05150985, 0.03649226, -0.024299638, -0.033630602, 0.021083329, -0.029032381, -0.021645878, 0.03734831, -0.03507366, -0.013170966, 0.0025238236, 0.019004347, -0.0048611504, -0.028274164, 0.018331734, -0.004604335, -0.015983708, 0.014296063, -0.0871216, -0.023125624, -0.048501443, 0.017879251, -0.0036840795, 0.0012168163, -0.0050935075, -0.018490717, -0.0246176, -0.012351602, 0.0012909565, -0.014552878, -0.026244098, 0.030230854, -0.019273391, 0.04126169, -0.0046838257, -0.03260334, -0.0020652246, -0.061146546, -0.014234916, 0.030744484, -0.019432373, 0.019884856, -0.009930199, 0.05630374, 0.0050109597, -0.015347783, -0.013158737, 0.025754925, 0.023712631, 0.0011258608, 0.003632105, -0.016582943, 0.00717249, 0.02991289, -0.043829843, 0.016974282, -0.0037727419, 0.011984724, -0.020679763, 0.00771058, -0.019248933, 0.020227278, 0.018478487, 0.05209686, -0.0041763093, 0.0033997481, -0.015139885, 0.00522803, -0.0091842115, -0.0049070106, -0.03578296, -0.04798781, -0.03651672, 0.029130215, 0.008267013, 0.022012757, 0.023174541, 0.008798989, -0.0246176, -0.025877219, 0.00077197514, 0.06589152, -0.013843578, 0.026977858, -0.0007903191, 0.02247747, 0.010076951, 0.06598935, 0.022746516, 0.02000715, -0.014614025, -0.014589566, -0.0076616625, -0.030548815, 0.016790843, -0.024250722, 0.061880305, 0.03862016, 0.039035957, -0.004631851, -0.06393483, -0.05972795, 0.018343965, 0.04603112, 0.020789826, -0.03130703, 0.012816316, 0.056059156, 0.028910087, -0.0017564346, -0.019395685, -0.06163572, -0.012975297, 0.026293015, 0.008328159, 0.014259375, -0.0046654814, 0.02091212, 0.008010197, -0.002713378, -0.01452842, 0.0570375, -0.0037115954, 0.02088766, -0.03084232, -0.031209197, -0.0056621702, 0.07508796, -0.038204364, 0.0371771, 0.01169122, 0.018710844, 0.005310578, 0.0002612104, -0.040454555, -0.0024030593, -0.035660665, 0.029130215, -0.017206639, 0.02125454, -0.013916954, 0.04708284, 0.047572013, -0.002418346, -0.057771258, -0.0652556, 0.0068300692, 0.018918741, -0.014075935, 0.012449437, 0.012162048, -0.024458619, -0.0019521036, 0.0077533824, -0.0024259894, -0.011257079, -0.032823466, -0.051999025, -0.037470605, 0.019811481, -0.030255312, 0.011587271, -0.00930039, 0.008028542, 0.06946248, 0.02354142, -0.030573273, -0.05615699, 0.0069156745, -0.07298452, 0.038913663, -0.0068606427, -0.00011302557, -0.0014713388, 0.029105756, -0.0022624223, 0.046324626, -0.010584467, 0.014173769, -0.017634664, -0.0007012745, 0.0075454838, 0.010908544, 0.011208162, -0.024837727, 0.025510339, -0.045615323, 0.0148952985, -0.04253354, -0.046544753, -0.005313635, -0.00928816, 0.044392392, -0.022942185, 0.02357811, -0.017023198, 0.00024363077, -0.03240767, -0.036321048, -0.04179978, -0.029692763, 0.016081542, -0.00831593, -0.01932231, 0.051020678, -0.049528703, -0.036174297, 0.01715772, 0.023296835, -0.007759497, -0.02357811, 0.09617129, -0.02942372, -0.03754398, -0.017402308, -0.008083574, 0.034119774, 0.039256085, 0.02354142, -0.009202556, -0.026366392, -0.020263966, -0.012987527, -8.503192e-05, -0.032872383, -0.01169122, 0.04534628, -0.049626537, 0.037299395, 0.0032927415, 0.031551618, 0.0027347794, -0.019200016, -0.01611823, 0.051999025, 0.00031222956, -0.026782189, 0.03116028, -0.011416061, 0.022942185, 0.016411733, 0.06598935, 0.016656319, 0.050017875, 0.01647288, 0.04373201, -0.0068667573, 0.013965871, -0.0042282837, -0.0119113475, 0.01595925, 0.028714418, -0.013232113, 0.00708077, -0.024690976, 0.01204587, 0.022269573, 0.019138869, 0.0041335067, -0.0035984744, -0.027589323, 0.0022807661, 0.040601306, 0.0139903305, 0.011299882, 0.012608418, 0.00083923637, -0.0010028033, 0.045077235, 0.021291228, 0.01682753, -0.0293748, 0.035440538, 0.035293788, 0.025730466, -0.014650713, 0.00087439566, -0.017047657, -0.01628944, -0.045248445, -0.033557225, -0.04585991, -0.0036749076, -0.038106527, 0.013586763, 0.042973794, 0.003390576, 0.040845893, 0.034070857, 0.0039439523, 0.019163327, -0.019236704, 0.013024215, -0.0006321024, 0.0058670114, -0.015213261, -0.0016066255, 0.0019796195, -0.004417838, 0.0066710883, 0.015543452, -0.02959493, -0.02868996, 0.025559258, 0.017622435, -0.041017104, -0.0034303213, 0.028665502, 0.02851875, -0.009667269, -0.011623959, -0.0146874, 0.035024744, 0.0022303204, -0.03879137, 0.013733515, 0.112216145, 0.00788179, -0.000529682, 0.0008484083, 0.003323315, 0.0026583462, -0.0018191098, -0.03773965, -0.011464978, 0.04940641, -0.024813268, -0.05757559, 0.019921545, 0.0082731275, 0.0004723571, 0.0542003, -0.013036444, 0.0055673933, 0.053906795, 0.008597204, 0.011361028, 0.038717993, 0.032163084, 0.018197212, -0.005108794, -0.018698614, -0.019383455, 0.019505749, -0.03343493, -0.018649697, -0.051314183, -0.032089707, -0.0022929956, -0.036761303, -0.0055276477, -0.058407184, 0.042900417, 0.025754925, 0.031600535, 0.019041035, 0.010749563, 0.0017717212, -0.06510884, 0.007924592, 0.0005659877, -0.036639012, -0.015971478, -0.020606387, 0.026366392, -0.041286148, -0.017610205, -0.0060382215, 0.012412749, 0.046715964, 0.0007200006, -0.032505505, -0.027687157, -0.014112623, -0.007906249, 0.00717249, 0.05380896, -0.016044853, -0.023272377, 0.012706253, 0.013256571, 0.025901677, -0.05786909, 0.02338244, -0.0315027, -0.011880774, 0.01258396, 0.008004083, -0.009661155, -0.0015531223, -0.08198529, -0.0067872666, 0.0037482833, 0.011611729, 0.045272905, 0.0024030593, -0.0052800043, -0.040479016, 0.02548588, -0.028983463, -0.00045401312, -0.03164945, -0.02195161, -0.00037089203, 0.019811481, 0.016350586, 0.008242555, 0.046446916, -0.018723072, 0.028274164, 0.004864208, 0.0112631945, -0.016521797, 0.008163064, 0.0034914678, -0.019175557, -0.011709563, 0.019065494, -0.0428515, -0.02017836, 0.031282574, -0.0069340183, 0.0005774527, 0.0036076463, 0.040234428, -0.060510624, 0.007105229, -0.032089707, 0.027418112, -0.021340145, -0.013770202, 0.0138558075, 0.011208162, -0.0048183477, 0.0012214023, 0.025754925, -0.03629659, 0.0060901963, -0.0028112126, -0.03998984, -0.0018084091, -0.0038583472, 0.02656206, -0.015812498, -0.0008996186, 0.0010670073, -0.010639499, -0.02020282, -0.00017149695, 0.013073131, 0.012816316, -0.020704221, 0.00885402, -0.008640007, -0.008004083, -0.014552878, 0.03174729, 0.022954414, 0.0070563117, 0.0485259, 0.012865233, 0.007735038, 0.018270588, 0.028127411, 0.016607402, -0.02321123, 0.015127656, 0.010884086, 0.0038736337, -0.035440538, -0.04422118, 0.04480819, 0.019713648, 0.0146384835, 0.002314397, 0.014332751, 0.008670581, -0.01221708, 0.025290212, 0.03419315, 0.008976313, 0.019016577, 0.007154146, -0.023822695, 0.009196441, 0.0015775809, 0.0036565636, 0.0078206435, 0.01806269, 0.021658108, 0.018392881, -0.036932513, -0.025339128, -0.00272255, -0.0027301933, 0.023651484, 0.04974883, 0.0132688, -0.009930199, -0.01593479, 0.02568155, -0.07171267, -0.029668305, -0.022734286, 0.0017121034, 0.0027852252, -0.022135051, 0.032676715, -0.01258396, -0.007117458, 0.007490452, -0.039622962, -0.0006321024, -0.05317304, -0.016203836, 0.010266505, -0.044196725, -0.000845351, 0.029325884, 0.03451111, -0.0010540136, -0.01715772, 0.017769186, 0.015445618, 0.022061674, -0.024825498, 0.02163365, -0.01229657, 0.004971214, 0.015604598, -0.0037115954, 0.0004918475, 0.047889978, -0.030744484, 0.020936579, -0.009422683, -0.02993735, -0.042582456, 0.024470849, 0.028812254, 0.014271604, 0.016546255, 0.00055108324, 0.0058792406, -0.0030298114, -0.008719497, 0.00593733, 0.011269309, 0.0077533824, 0.0024198745, -0.015078738, -0.035171494, 0.025045626, -0.04818348, -0.008725612, 0.0315027, -0.030402062, -0.035122577, 0.017854791, -0.052194692, 0.016717466, -0.0076372037, -0.025339128, -0.0073437, 0.032529965, 0.011935806, 0.034926906, -0.016913135, 0.0057019154, 0.020753138, -0.03382627, 0.0038400032, 0.011697334, 0.012718482, -0.01177071, 0.005310578, -0.0030145247, 0.015335554, -0.003650449, -0.034266524, -0.00011417207, -0.0050017876, 0.008756186, 0.027760532, -0.015824726, 0.011758481, -0.004454526, -0.016399505, -0.021303456, -0.0062736357, 0.0026384734, -0.0099668875, 0.035122577, -0.034413278, -0.023944989, -0.004955928, -0.01575135, 0.042949334, -0.023847153, 0.0039378377, 0.036614552, 0.0061207693, -0.022722056, -0.02074091, -0.0068300692, 0.046960548, -0.0070073945, -0.038571242, -0.034780156, -0.022746516, -0.010015804, -0.0006439496, -0.014846382, -0.0065793684, -0.0072580953, 0.04016105, 0.026610978, -0.0020300653, 0.01630167, -0.007631089, -0.037935317, -0.008444338, 0.006414273, 0.0013574534, -0.046862714, 0.06471751, 0.03223646, 0.011416061, -0.07420745, -0.007912363, 0.030720025, -0.03580742, -0.011672876, -0.040845893, 0.028763335, 0.017940396, 0.0036626782, -0.010969691, -0.025021167, 0.00095465046, -0.021804858, 0.0019352882, 0.0067566936, -0.01648511, 0.01878422, -0.010168671, -0.010902429, 0.010388798, 0.015604598, 0.011208162, -0.037299395, 0.012914151, -0.01133657, 0.005952616, -0.0068912157, 0.026757728, 0.015384471, -0.008572746, 0.0031337605, 0.020129444, -0.0038766912, 0.034095313, 0.004995673, 0.0013887909, 0.03147824, -0.041701946, 0.021107787, -0.033483848, 0.05918986, -0.008425994, -0.028665502, 0.00090802624, 0.015311096, -0.026097346, 0.014149311, 0.031233657, 0.016619632, -0.023761548, 0.031209197, -0.0050659915, 0.02621964, -0.008780644, -0.01967696, 0.0084076505, -0.04603112, 0.05689075, -0.007961281, -0.003418092, -0.0032621683, 0.027075691, 0.03360614, -0.0045707044, 0.013868037, -0.023663715, 0.028812254, -0.0015898102, -0.07591955, -0.009410454, 0.033899646, 0.023125624, -0.014846382, 0.0139903305, -0.016876448, -0.00043758, 0.016717466, -0.026831105, -0.019860398, -0.016069314, 0.0010188543, -0.05224361, 0.008095803, 0.01857632, -0.005035418, 0.011672876, -0.004454526, 0.008554402, -0.0062216613, -0.017438995, -0.01469963, 0.0014873898, 0.022881038, -0.030768942, 0.004864208, 0.0050659915, -0.0153967, 0.038130987, 0.010969691, -0.02991289, 0.018270588, 0.02021505, -0.008358733, -0.023321293, 0.008187523, 0.006126884, -0.01142829, -0.008713383, 0.012975297, -0.01573912, -0.020789826, -0.033801813, -0.03328818, -0.017059887, -0.034144234, 0.023468046, 0.042582456, 0.015115427, 0.018136065, 0.0054573296, 0.010119754, 0.015898103, 0.015029822, -0.002996181, -0.0066282856, 0.006285865, -0.0047205132, -0.01911441, 0.005466501, 0.016546255, 0.031967416, 0.0055521065, -0.008108032, 0.028836712, 0.039622962, 0.036565635, -0.025828302, 0.002130957, -0.05737992, -0.042460162, 0.008065229, 0.01452842, -0.0036810222, 0.0045065004, -0.03896258, -0.0015913389, -0.042068824, 0.03399748, -0.025290212, -0.012070329, -0.027149066, -0.012003067, 0.02195161, 0.018723072, -0.0050965645, 0.072299674, 0.004362806, -0.018307276, 0.017414536, 0.0026705754, -0.0123026855, 0.05737992, 0.025436964, -0.033337098, 0.025216836, 0.009869053, 0.022220654, -0.031453785, -0.007906249, 0.06809279, -0.013097591, -0.011685105, 0.01328103, 0.00056025526, -0.021107787, 0.0456887, 0.016008167, 0.0057752915, 0.0011533768, 0.0061666295, -0.026366392, 0.03240767, -0.010199244, 0.024837727, -0.0021064985, 0.025339128, 0.00054458645, -0.044001054, -0.0011938864, -0.005270832, -0.0043200036, 0.02019059, -0.018282818, -0.021242311, 0.015518994, 0.0022394923, -0.019591354, 0.032847926, 0.023272377, -0.022991102, -2.486467e-05, 0.03771519, 0.012669564, -0.021095559, -0.01195415, -0.023150083, -0.013770202, 0.018759761, -0.007576057, 0.04798781, -0.0347557, 0.0016677721, 0.001188536, -0.0072030635, 0.031282574, 0.007838988, 0.023150083, -0.009196441, -0.042435706, 0.022966644, 0.011177589, -0.010706761, -0.030255312, 0.00022605114, 0.009728416, 0.015103198, 0.015103198, 0.018894283, -0.015775809, 0.020826515, -0.00061414065, 0.011501665, 0.0007857331, -0.02886117, 0.024813268, -0.040503472, -0.022012757, 0.0029426776, 0.012064214, -0.0054236986, 0.02053301, 0.009477715, 0.009355422, 0.010859627, -0.010407142, -0.006689432, 0.019762564, -0.0064448463, -0.01735339, 0.013036444, -0.010498862, -0.028298622, 0.013880266, 0.0015294281, 0.028543208, 0.03130703, 0.018295048, -0.020973265, 0.01257173, 0.017512372, -0.032481045, -0.020104986, 0.04250908, -0.02373709, 0.004258857, 0.022563076, -0.02125454, 0.0008086631, -0.0033324868, 0.011532239, 0.0027332506, 0.0108718565, -0.017218867, 0.0040448443, 0.014173769, 0.03169837, -0.027833909, -0.05150985, -0.008279243, 0.014210458, -0.021315686, 0.016264983, -0.011452748, -0.004362806, -0.012975297, 0.0017656066, 0.057673424, -0.008291472, 0.012865233, -0.01682753, 0.010633385, 0.014063706, 0.013806891, -0.043316215, 0.026195182, -0.0123026855, -0.002381658, -0.019163327, 0.029766139, 0.0026598747, 0.0530752, 0.0009256059, -0.024287408, 0.030573273, 0.018478487, -0.005286119, 0.011917462, -0.001709046, -0.007912363, -0.0010807653, 0.0036229328, 0.0008644593, 0.0065487954, 0.00085299433, 0.06466859, -0.014381668, -0.013378864, -0.02305225, -0.015922561, 0.005335036, -9.014339e-05, 0.0040693027, -0.037226018, 0.00067528716, -0.03522041, -0.01381912, -0.008260898, 0.006658859, -0.02212282, 0.030133018, -0.016521797, -0.0026430595, 0.018099379, -0.005194399, 0.027833909, 0.0063775848, -0.0069340183, 0.013513387, -0.008982427, -0.010327652, -0.008909052, -0.016130459, -0.024201803, 0.02480104, 0.018319506, -0.0036076463, 0.056352656, -0.023639256, -0.029032381, -0.035147034, 0.03490245, 0.017133262, 0.014467273, 0.011214277, 0.06559802, -0.0004417838, 0.004521787, 0.0044881566, -0.02656206, -0.010994149, -0.00857886, 0.00991797, 0.028445374, -0.026244098, -0.016350586, -0.03257888, -0.008890708, -0.009031345, 0.030768942, -0.005114909, 0.01576358, 0.02496002, 0.050238002, 0.008768415, -0.030524356, 0.0012978355, 0.008370962, 0.00055566925, -0.006004591, 0.0043077744, -0.0031704486, -0.0023923586, 0.016497338, 0.01010141, -0.033581685, 0.00063707057, -0.004500386, 0.014846382, 0.039231624, -0.013721285, -0.0038889204, 0.0121681625, -0.0028815311, -0.01044383, 0.01036434, 0.011104213, 0.003567901, -0.0053289216, 0.00074293057, -0.010498862, 0.031991873, 0.00504459, 0.0017594919, 0.014063706, 0.021535814, -0.028983463, -0.0009240772, 0.0058303233, -0.028885629, -0.0068789865, -0.013806891, 0.0015668803, 0.036956973, 0.019248933, -0.0013352877, 0.019872628, 0.007239751, -0.009667269, 0.0086033195, -0.0072580953, -0.0010058607, -0.0100280335, 0.019530207, -0.011305996, 0.018478487, 0.014479502, 0.027026774, -0.02372486, 0.017121034, 0.016766382, 0.010774022, -0.013843578, -0.019884856, 0.015604598, -0.04585991, 0.013513387, 0.0061696866, 0.0065059927, -0.021156706, 0.0037605127, -0.0061849733, 0.039305, -0.008456567, 0.01805046, -0.022954414, 0.0004994909, 0.03668793, 0.009489944, 0.037984237, 0.006230833, 0.022196196, -0.013562304, 0.024250722, -0.0012099373, -0.020435177, -0.0293748, 0.008823447, -0.018197212, 0.027418112, 0.029668305, -0.036027547, -0.0073070126, -0.007802299, -0.016228294, -0.011104213, 0.0088601345, -0.026610978, -0.0067566936, -0.023492504, -0.012003067, 0.0066710883, 0.0034058627, 0.019212246, -0.017597977, -0.014479502, 0.0050568194, -0.015042051, -0.0062247184, 0.04659367, -0.038326655, 0.030402062, 0.0045707044, -0.014968675, -0.017573517, -0.00885402, -0.035831876, 0.0023663715, -0.018515175, 0.016729696, 0.018172754, 0.0057661193, -0.010235932, 0.047669847, 0.00815695, 0.04943087, -0.013782431, 0.014662942, 0.013158737, 0.014332751, -0.0015584726, -0.021609189, -0.010951347, -0.023272377, -0.034682322, -0.00629198, 0.006658859, -0.023932759, -0.016448421, -0.022269573, -0.002740894, 0.0039653536, -0.0066038272, -0.00035044615, -0.0011380902, -0.038008694, 0.0014858611, 0.016741924, -0.012669564, 0.0044025513, 0.0028280278, -0.0038797485, 0.002027008, 0.022868808, 0.020263966, 0.043071628, -0.0032377096, 0.02337021, 0.0029258623, 0.010639499, 0.0015668803, -0.015518994, -0.00920867, 0.0024626772, 0.015152114, 0.040650226, 0.029546011, -0.025436964, -0.018979888, 0.009661155, 0.005769177, 0.026806647, 0.036712386, 0.060461707, 0.012547271, 0.036981434, 0.041408442, 0.019151099, -0.023113394, -0.009263702, -0.0025482823, -0.0056468835, 0.04925966, 0.019762564, -0.0014323578, -0.02017836, -0.058358263, 0.004968157, 0.02268537, 0.014724089, 0.014210458, 0.01573912, 0.006481534, 0.0057110875, -0.0034486654, 0.036027547, 0.04319392, 0.049871124, -0.035318244, -0.0064203874, 0.022917725, 0.039035957, 0.037299395, 0.011458863, -0.023309063, -0.04989558, 0.011147016, -0.018478487, 0.016815301, 0.0072458657, -0.0031368178, 0.01932231, 0.003907264, -0.017830333, 0.041506276, -0.008297587, -0.02497225, -0.023761548, -0.0136601385, 0.0022028044, -0.018111607, -0.023810465, -0.0070746555, -0.054640554, -0.0033172, 0.015433389, 0.039965384, -0.005203571, -0.010486633, 0.014834153, -0.009214785, 0.011935806, 0.0064937635, 0.0062430627, -0.00629198, -0.006768923, -0.01257173, 0.0012236952, 0.012620647, 0.04449023, -0.0014361795, 0.023345752, -0.031967416, 0.0063103237, 0.013378864, 0.03507366, -0.004512615, 0.011562812, -0.016656319, 0.029766139, 0.04268029, -0.023309063, 0.03279901, -0.040968187, -0.0040876465, 0.000304013, 0.0075332546, -0.0034853532, -0.017952627, -0.015861414, 0.0070746555, -0.027002316, 0.03130703, -0.019787023, 0.035440538, -0.0067016617, 0.05664616, 0.010309308, -0.021670336, -0.017659122, 0.042802583, 0.0013093004, -0.00034719773, -0.0033752895, 0.01116536, 0.010590582, 0.021829318, -0.012486125, 0.01627721, 0.004558475, -0.01542116, 0.0031704486, -0.009061919, -0.016032625, -0.0055643357, 0.019933775, -0.013672368, -0.03064665, -0.05380896, 0.024238491, -0.030353146, 0.016546255, -0.011672876, 0.003577073, -0.026415309, 0.013831349, -0.0020850974, -0.010498862, -0.0047388575, -0.04407443, -0.0023526135, -0.012816316, 0.0015622943, -0.002158473, 0.010504977, 0.044759274, -0.030157477, 0.0009179625, -0.034608945, 0.024116198, 0.0010417843, 0.0044667553, 0.024483077, 0.053955715, -0.010407142, 0.024385244, 0.0074537643, -0.03360614, -0.017867021, 0.02991289, -0.00522803, -0.017487913, 0.026146263, -0.021645878, 0.032260917, 0.0046991124, 0.04145736, 0.020765368, -0.015213261, 0.0026583462, -0.02658652, -0.0037482833, 0.03343493, 0.03950067, 9.898097e-05, 0.012082558, -0.018184984, -0.003003824, 0.019248933, -0.023761548, 0.020618616, -0.0048703225, -0.02480104, -0.003081786, 0.021853777, -0.021755941, -5.3168835e-05, -0.011477207, -0.01258396, 0.025754925, 0.008401535, 0.013060902, 0.0069156745, 0.006044336, -0.028102953, -0.0029717223, -0.003558729, -0.048110105, -0.017842563, 0.014883069, 0.03580742, 0.03578296, 0.0033997481, 0.0057386034, -0.01984817, 0.017597977, 0.02568155, -0.028592126, -0.024360785, -0.008028542]"
../../../gradio,../../../gradio/gradio/components,slider.pyi,"""""""gr.Slider() component.""""""

from __future__ import annotations

import math
import random
from typing import Any, Callable

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import FormComponent
from gradio.events import Events

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class Slider(FormComponent):
    """"""
    Creates a slider that ranges from {minimum} to {maximum} with a step size of {step}.

    Demos: sentence_builder, slider_release, interface_random_slider, blocks_random_slider
    Guides: create-your-own-friends-with-a-gan
    """"""

    EVENTS = [Events.change, Events.input, Events.release]

    def __init__(
        self,
        minimum: float = 0,
        maximum: float = 100,
        value: float | Callable | None = None,
        *,
        step: float | None = None,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        randomize: bool = False,
    ):
        """"""
        Parameters:
            minimum: minimum value for slider.
            maximum: maximum value for slider.
            value: default value. If callable, the function will be called whenever the app loads to set the initial value of the component. Ignored if randomized=True.
            step: increment between slider values.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, slider will be adjustable; if False, adjusting will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            randomize: If True, the value of the slider when the app loads is taken uniformly at random from the range given by the minimum and maximum.
        """"""
        self.minimum = minimum
        self.maximum = maximum
        if step is None:
            difference = maximum - minimum
            power = math.floor(math.log10(difference) - 2)
            self.step = 10**power
        else:
            self.step = step
        if randomize:
            value = self.get_random_value
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def api_info(self) -> dict[str, Any]:
        return {
            ""type"": ""number"",
            ""description"": f""numeric value between {self.minimum} and {self.maximum}"",
        }

    def example_payload(self) -> Any:
        return self.minimum

    def example_value(self) -> Any:
        return self.minimum

    def get_random_value(self):
        n_steps = int((self.maximum - self.minimum) / self.step)
        step = random.randint(0, n_steps)
        value = self.minimum + step * self.step
        # Round to number of decimals in step so that UI doesn't display long decimals
        n_decimals = max(str(self.step)[::-1].find("".""), 0)
        if n_decimals:
            value = round(value, n_decimals)
        return value

    def postprocess(self, value: float | None) -> float:
        """"""
        Parameters:
            value: Expects an {int} or {float} returned from function and sets slider value to it as long as it is within range (otherwise, sets to minimum value).
        Returns:
            The value of the slider within the range.
        """"""
        return self.minimum if value is None else value

    def preprocess(self, payload: float) -> float:
        """"""
        Parameters:
            payload: slider value
        Returns:
            Passes slider value as a {float} into the function.
        """"""
        return payload

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def input(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def release(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Slider` component for Gradio, which creates a slider that ranges from a specified minimum to maximum value with a specified step size. The component can be customized with various parameters such as label, info, container, scale, interactive, and more. It also includes methods for preprocessing, postprocessing, and generating random values for the slider. Additionally, it provides methods for handling events like change, input, and release, allowing users to define functions to be called when these events are triggered.","[-0.048514437, 0.029434929, -0.013275271, -0.011738508, -0.02926943, -0.0156158805, 0.017129, -0.0014562311, -0.0012995994, -0.014634715, 0.012471425, -0.021420117, -0.048892718, 0.014693822, 0.020923624, 0.009965319, -0.008357628, 0.003490226, -0.01834659, 0.03818266, -0.020746306, -0.05532348, -0.0069922735, 0.015119388, -0.02134919, -0.047095887, -0.009965319, 0.015202136, 0.006188428, 0.023748904, -0.033335943, -0.030451557, -0.010379063, -0.0015530176, -0.011750329, -0.047119528, -0.021018194, 0.04392779, -0.012565996, -0.031231761, -0.020143421, -0.021952074, -0.045346342, 0.032863095, 0.030333344, 0.03205925, 0.0069272565, 0.0014414545, -5.8228925e-05, 0.04747417, -0.04428243, -0.011643938, 0.0010173669, -0.02144376, 0.037284244, 0.068516, -0.03754431, 0.010314046, 0.025415702, -0.04563005, 0.0005711145, -0.02303963, -0.011513904, 0.0019120882, 0.009557486, 0.018086523, -0.02671604, 0.02718889, 0.027354388, -0.009929855, 0.036196686, -0.031680968, 0.009563397, -0.041539896, -0.021526508, -0.0089605125, -0.013972726, -0.01598234, 0.06047755, 0.021609258, -0.0363149, -0.008393092, -0.0382063, 0.0038212212, -0.042343743, 0.0151075665, -0.01702261, 0.01816927, -0.026101334, -0.056411035, -0.049223714, -0.046883103, 0.0133698415, 0.10639131, 0.025888553, -0.00014988983, -0.01147844, 0.02003703, 0.016514296, 0.015131208, 0.026172262, -0.0039010148, -0.0053195655, -0.041729037, 0.008966424, -0.04409329, -0.016975325, 0.039955847, -0.026124977, -0.030593412, 0.027614456, 0.0075892466, -0.040097702, -0.00070484244, 0.013759943, -0.044377, 0.018263841, -0.029884137, -0.030215133, -0.014090938, -0.0355347, -0.019174078, 0.019221364, -0.021479223, 0.04411693, -0.037591595, -0.019977923, -0.045038987, -0.025817625, 0.040097702, -0.009545665, -0.010775075, 0.008050276, -0.055843618, -0.019788783, 0.014398291, -0.037591595, -0.009285597, -0.015379455, 0.010018515, -0.006158875, -0.020072494, 0.038821008, -0.005952003, -0.038986504, -0.042083673, -0.041941818, 0.049271, -0.050594978, 0.020899981, 0.013381663, 0.030049635, -0.03406886, 0.020450775, -0.009391989, 0.027141605, 0.03901015, -0.025983123, 0.009616592, 0.0012035517, -0.0106154885, 0.020639915, 0.01816927, -0.021301905, -0.008629518, 0.00648987, -0.00040487805, 0.011064696, -0.021975717, 0.056174614, 0.017329963, -0.052344523, -0.01636062, -0.012152252, -0.0040044505, -0.008511305, 0.016053267, -0.015958697, 0.004598469, 0.017814634, -0.034210715, 0.014232793, -0.014942069, 0.0176846, 0.007920242, -0.022176677, 0.012778779, -0.04418786, -0.0028902972, -0.013913619, -0.020840876, 0.00057259214, 0.010420438, 0.03941207, 0.0074178386, -0.02324059, 0.028158233, 0.014599252, -0.008854121, 0.014232793, 0.013287093, -0.01599416, 0.016336977, -0.03302859, -0.06775945, -0.024209933, -0.019918818, -0.016195122, 0.022708634, -0.009752537, 0.014232793, -0.035061847, 0.03217746, -0.039270215, -0.030025993, 0.045275412, 0.026574185, 0.020273454, 0.0022179633, 0.014693822, -0.027732668, 0.0087063555, 0.0052043083, -0.027047036, 0.02614862, -0.01796831, 0.034588996, -0.00602293, 0.059484564, 0.003939434, 0.047734234, 0.003004077, -8.741265e-05, -0.003602528, 0.0019135659, -0.019410504, -0.013275271, -0.027236175, 0.0216329, -0.015485846, -0.047947016, -0.023949865, 0.012565996, -0.055654477, 0.011773972, 0.03562927, -0.016667971, -0.018854905, 0.05362122, 0.040570553, -0.047450524, -0.007205056, 0.0058662985, 0.024800997, 0.002952359, 0.015225778, 0.02116005, 0.039648496, 0.009858928, -0.02106548, 0.003838953, -0.083221644, -0.06161239, 0.033501443, -0.00988257, 0.04797066, 0.009256044, -0.0070100054, 0.00017150058, -0.007666085, -0.011117892, -0.03789895, 0.030877123, 0.0020022253, 0.029931422, 0.0046457537, 0.04749781, 0.051115114, -0.0006523856, 0.014516504, -0.041161615, -0.02220032, -0.0028371017, 0.024351789, -0.022815024, 0.016703436, 0.022791384, 0.0070100054, 0.024895567, -0.050358552, 0.0068917926, -0.012459605, 0.02220032, -0.035321914, -0.025344774, 0.04636297, -0.00771337, 0.014516504, -0.0088363895, -0.03198832, 0.020332562, -0.011052875, -0.0061470536, -0.015958697, 4.4329714e-05, 0.0081152925, 0.010166281, 0.004373865, -0.003924657, -0.010077622, -0.005195442, 0.027992737, 0.033194087, -0.046528466, -0.052628234, 0.019694213, 0.03499092, -0.00038640734, 0.008978245, -0.052013528, 0.011259747, 0.011431155, 0.0431003, -0.033430513, -0.0023376534, -0.02314602, -0.028749296, -0.021987537, 0.0025445255, -0.05007484, 0.039955847, -0.01025494, -0.012991562, 0.060761258, 0.027992737, -0.0126487445, -0.022519493, 0.031349972, -0.047237743, 0.04016863, -0.018961295, -0.022129392, -0.0176846, 0.024115363, 0.036787752, 0.035345558, -0.042958446, 0.011070607, 0.021621078, -0.025368417, -0.01899676, -0.026857896, -0.017660957, 0.010331779, 0.07504134, -0.013653551, -0.020663558, -0.053006515, -0.083978206, -0.025604842, -0.049932986, 0.05007484, 0.006312551, 0.007364643, 0.008375361, -0.00089915434, -0.018925833, -0.051304255, 0.007867047, -0.0059135836, 0.042083673, -0.004568916, -0.0039157914, -0.008469931, -0.051587965, 0.015119388, 0.016206942, -0.008469931, -0.002900641, -0.062463522, 0.022767741, 0.014965711, -0.020178884, -0.020178884, 0.00987666, -0.03392701, -0.005529393, 0.072960794, 0.011519815, 0.004669396, -0.017152643, -0.027590813, -0.0041876803, -0.0016224675, 0.02586491, 0.0014148566, 0.001969717, 0.01598234, 0.027212532, 0.0021485134, 0.0045600496, -0.050405838, -0.0423201, 0.028063664, -0.04998027, -0.030806195, 0.019245006, 0.043242157, -0.014067295, 0.0013816094, 0.03366694, -0.023417909, 0.02164472, -0.035156418, 0.0075183194, -0.0020716751, -0.016892577, -0.02990778, -0.0029833897, 0.066388175, 0.009421541, -0.008718177, -0.0005315871, -0.03385608, 0.022625886, 0.051209684, 0.031728253, 0.026503257, 0.033596013, -0.0126487445, 0.0044270605, 0.02220032, 0.014847498, 0.013771764, -0.016195122, -0.0072641624, 0.0091319205, -0.005916539, 0.04591376, -0.0062534446, -0.025604842, 0.048017945, 0.01617148, 0.008925049, -0.0600047, 0.023004165, 0.0042379205, -0.017578209, -0.036835037, -0.015414919, -0.06998184, 0.018583015, -0.046410255, -0.0049324194, 0.034210715, 0.024493644, 0.04016863, -0.02295688, 0.006696742, -0.0042674737, -0.023642514, 0.0462684, -0.055654477, 0.043313086, -0.037473384, -0.033477798, 0.0017731885, 0.007075022, -0.02220032, -0.015722271, -0.003537511, -0.016715256, 0.026645113, -0.006123411, -0.025108349, 0.051966246, -0.013523518, -0.035345558, -0.009545665, -0.04127983, -0.027307102, 0.041823607, 0.012376856, -0.013227986, 0.03413979, 0.08506576, 0.021822039, -0.049318284, -0.021077301, -0.00087107887, 0.0014466263, -0.016065087, 0.0010742567, -0.0101071745, 0.017329963, 0.016644329, -0.046906747, 0.047024958, -0.038868293, -0.015663166, 0.044542495, -0.021171872, -0.013251629, 0.059579134, 0.016774364, 0.0038241765, 0.03234296, -0.0045068543, 0.013996368, -0.0054052696, -0.040499624, -0.016384263, -0.009273776, -0.022377638, 0.010662774, -0.009616592, 0.0009937244, 0.021597436, 0.0024322236, 0.00526637, -0.018429339, 0.024659142, -0.001098638, -0.04142168, 0.004533452, 0.01965875, 0.031680968, -0.03555834, -0.0058633434, -0.027070677, -0.011691223, -0.0034931814, -0.026668755, 0.04373865, -0.052155383, -0.013428948, 0.010314046, 0.009918034, -0.02303963, -0.048609007, -0.00855859, -0.0068740607, 0.011898095, 0.015225778, -0.008523126, 0.020379847, -0.015213957, -0.042367384, 0.0046723518, 0.018594837, 0.036102116, -0.06293637, 0.044826206, -0.038868293, 0.013996368, -0.020675378, 0.037284244, 0.015166672, 0.001753979, -0.0026509168, -0.029033007, 0.010201745, 0.03406886, 0.042178243, 0.0056387396, -0.066671886, -0.0081980415, -0.0372606, -0.014268257, 0.022034822, -0.0066730995, 0.0039926292, 0.011620295, 0.035203703, -0.027117962, -0.007311447, 0.0024470002, -0.02737803, 0.02567577, -0.028394658, 0.038064446, -0.035960265, 0.018051058, -0.03981399, -0.06161239, -0.02049806, -0.0026730816, 0.038371798, 0.014043653, -0.008700445, -0.040854264, -0.012731493, -0.012601459, 0.027165247, -0.00987666, 0.024162648, 0.0017229482, 0.033430513, -0.014256435, -0.022448566, 0.014551967, -0.018027417, 0.0040783337, 0.045228127, 0.007258252, 0.0059283604, -0.014031832, 0.00977618, -0.027070677, -0.0024795085, -0.019682392, 0.03624397, -0.028181875, -0.04139804, -0.01617148, -0.014741107, -0.008399003, 0.017282678, 0.037000533, -0.021975717, -0.023488836, 0.00573922, -0.006359836, -0.022980522, 0.020368025, 0.032957662, -0.013121595, -0.023819832, -0.004329535, 0.020119779, 0.027803596, 0.010899198, 0.02191661, -0.0010129339, 0.013204344, -0.01636062, -0.014906605, -0.008795015, 0.008511305, -0.05007484, 0.01457561, 0.037189674, 0.0068326863, 0.0015397187, 0.017424533, 0.034919992, 0.00855859, 0.028063664, 0.01740089, 0.011892185, -0.04600833, 0.016608866, -0.011283389, -0.021751113, -0.016005982, 0.049412854, -0.023441551, -0.01203995, 0.020923624, -0.004503899, -0.011791703, 0.017436353, 0.013062488, 0.013771764, 0.013192522, 0.031302687, 0.013748121, -0.026574185, -0.014516504, 0.028772939, -0.021219157, 0.041918177, 0.0035877514, 0.04328944, 0.04946014, -0.029576784, -0.013606266, 0.0017392024, 0.0038891935, -0.0030823927, -0.039246574, 0.0033897453, -0.027236175, -0.0042201886, -0.038821008, -0.022980522, -0.009019619, 0.040475983, 0.01900858, -0.055749048, -0.020249812, 0.041043404, 0.020781768, -0.009196938, -0.010899198, 0.060761258, 0.0063834786, 0.0050535873, 0.0115907425, -0.04974385, 0.020249812, 0.015722271, 0.006744027, -0.007175503, -0.0010328823, 0.0038921488, -0.012554174, -0.017164465, -0.012625102, -0.022684991, 0.007648353, -0.012270465, -0.0005378672, -0.019646928, 0.0016741855, 0.004252697, 0.019422324, -0.029529499, -0.010030337, 0.0027691294, -0.0479943, -0.019540537, -0.05068955, -0.002197276, -0.013937262, -0.0028385792, -0.019327754, 0.027732668, -0.0151075665, -0.0034665836, -0.014670179, 0.035676554, 0.035416484, 0.020947266, -0.0035729748, 0.048703577, 0.011307032, -0.019528717, 0.008741819, -0.022885952, 0.0101485485, 0.014729286, -0.02671604, -0.014587431, 0.03234296, -0.0017598895, 0.0216329, -0.027803596, -0.007565604, 0.014256435, -0.0035995727, 0.007760655, -0.018334769, -0.016786184, 0.009722983, 0.002916895, -0.018299306, -0.042036388, -0.0036734554, -0.013488054, 0.0024824638, 0.016892577, -0.012967919, -0.0022696813, -0.0056091864, -0.059058998, 0.011490261, 0.021573793, -0.021940252, 0.055465337, -0.0039187465, -0.021502865, -0.01448104, -0.012495068, 0.051020544, -0.016407905, -0.022673171, -0.012755136, 0.010455902, -0.003912836, 0.0035050027, -0.009155563, 0.025793983, -0.03782802, 0.026361402, -0.0006342843, 0.0022977567, 0.0240799, 0.014445576, -0.021656543, 0.00040635568, -0.018748512, -0.007169592, -0.033004947, -0.0043915967, 0.021715648, 0.0046516643, -0.057498593, 0.020769948, 0.029482214, -0.013937262, 0.013925441, -0.047616024, 0.0038507744, 0.01636062, 0.043809578, 0.017755527, -0.045464553, -0.02153833, -0.02548663, 0.023027807, -0.0041049314, -0.017578209, 0.011324764, 0.0070513794, -0.026928823, 0.015828663, 0.02494285, -0.03196468, -0.009646146, -0.026668755, -0.00232731, -0.0066199037, 0.013499876, 0.008079829, 0.022129392, 0.016206942, 0.051493395, 0.031680968, 0.0019534626, -0.0032419797, -0.025510272, 0.00049353746, 0.02418629, -0.013086131, 0.041468967, 0.0069568097, 0.041043404, 0.011265658, 0.006028841, 0.010863735, 0.019434147, -0.0041433503, -0.011614385, 0.04489713, 0.014244614, -0.004028093, 0.050122127, 0.03302859, 0.0126487445, -0.033146802, -0.01035542, 0.005003347, 0.0056771585, 0.0032597114, -0.019114971, 0.016727079, 0.03546377, 0.021242797, 0.050405838, -0.007601068, -0.020450775, -0.01015446, 0.0023982374, -0.04430607, -0.034872707, 0.002284458, -0.00035352947, 0.040475983, -0.024800997, -0.007045469, -0.009734805, 0.0072937156, -0.004063557, -0.05418864, 0.003611394, 0.0025016735, -0.003004077, -0.0075892466, -0.013192522, 0.016005982, 0.01495389, 0.026006764, -0.014812035, -0.026597828, -0.02153833, 0.0049471958, 0.014421933, 0.027850881, 0.012849706, -0.0026405733, -0.008215774, -0.008481752, 0.031562757, 0.025155634, 0.027614456, 3.6849073e-05, -0.0008762507, 0.020084316, -0.01110016, -0.0076424424, 0.014043653, -0.03113719, 0.00555008, 0.020155244, -0.022129392, -0.02503742, 0.0024854192, -0.026692398, -0.02539206, -0.023713442, -0.027448958, 0.023926223, 0.032390244, 0.036054835, 0.029482214, -0.005396404, -0.004648709, -0.011259747, -0.034967277, -0.0049797045, -0.012589638, 0.026101334, 0.019788783, -0.011602564, -0.014918426, 0.012778779, 0.059389994, 0.014197329, 0.00423201, 0.031775538, 0.008605875, 0.038608223, 0.0073173577, 0.01834659, -0.04496806, -0.01683347, 0.010053979, 0.0040871995, 0.010124906, -0.013594445, -0.043336727, -0.004205412, -0.02832373, 0.035676554, -0.021242797, 0.019126793, 0.00010408247, -0.03770981, -0.014823856, 0.00536094, 0.020982731, 0.08681531, 0.0052161296, -0.005089051, -0.006217981, -0.01656158, 0.024422716, 0.03763888, -0.0029449705, -0.010331779, -0.015946874, -0.010550472, 0.0036734554, 0.008670892, 0.0044536586, 0.05154068, 0.008339897, -0.017341783, 0.03132633, -0.010166281, -0.004598469, 0.010981947, 0.011188819, -0.0078020296, 0.0051718, -0.031302687, -0.03546377, 0.033785153, 0.026503257, 0.032981306, 0.05163525, 0.02145558, -0.0068917926, -0.055749048, -0.028891152, 0.035794765, -0.03019149, 0.03151547, 0.018334769, -0.04035777, 0.03104262, 0.015864126, -0.0016076909, 0.029340358, 0.02378437, -0.015899591, 0.010467723, 0.02896208, -0.011159266, 0.0032685774, -0.024966493, 0.021810219, -0.03413979, 0.005680114, 0.0033335944, 0.02417447, -0.026952466, -0.048561722, -0.007104575, 0.003188784, 0.015438561, 0.0123532135, 0.008854121, -0.010863735, -0.036574967, -0.036456756, 0.024103543, -0.02125462, -0.004713726, -0.05135154, 0.002197276, 0.043951433, -0.018701227, -0.00940381, -0.014445576, 0.025652127, 0.00950429, 0.0022682035, 0.0014355439, -0.018500267, 0.02962407, -0.03600755, 0.01110016, 0.008062097, 0.05437778, 0.016136015, -0.032130174, -0.027117962, -0.013393484, -0.040783335, -0.025510272, 0.03435257, 0.057451308, 0.005990422, -0.01955236, -0.019635107, -0.018547552, -0.002275592, 0.03151547, 0.0072641624, 0.003584796, 0.015391276, -0.003395656, -0.009569307, 0.03205925, -0.0016815738, -0.019386861, 0.01204586, 0.020084316, -0.017365426, 0.03435257, 0.033430513, -0.018405696, -0.010928752, -0.018937653, 0.016750721, -0.006105679, 0.0022800248, 0.0055766776, 0.0033365497, -0.011141534, 0.021372832, 0.01852391, -0.0074473917, -0.007488766, -0.024422716, -0.008416735, -0.0114193335, -0.0010653908, -0.01119473, 0.00084448105, -0.043596793, 0.040475983, 0.018973118, 0.05981556, 0.010922841, 0.028158233, 0.027519885, -0.021703828, 0.0004983398, 0.008263058, 0.0022859355, -0.015462204, -0.010314046, 0.009906213, 0.018594837, 0.04142168, -0.011318853, -0.017069895, 0.037851665, 0.027307102, 0.0006220936, -0.023287876, 0.01984789, -0.0046782624, 0.00019819076, -0.007937974, 0.020013388, -0.003265622, 0.018559374, 0.06572619, -0.0066553676, -0.03953028, -0.0047964747, 0.009468826, 0.011206551, 0.0080739185, 0.01364173, 0.003519779, 0.016147837, -0.012672387, -0.008298522, 0.007890689, 0.029009365, -0.013783585, 0.032579385, -0.02801638, -0.010916931, 0.016703436, -0.001081645, -0.0011599609, 0.0005785028, -0.019528717, -0.009055083, 0.0079852585, -0.011904006, -0.014646537, -0.0061293216, -0.0047639664, 0.0068977033, -0.04288752, -0.016904397, 0.029671354, -0.006820865, -0.0041995016, 0.00031621862, 0.03943571, 0.031373616, 0.002464732, 0.018937653, 0.046835817, 0.038584583, 0.008907317, 0.01400819, 0.0024071033, -0.019493252, -0.010113085, 0.0031592308, -0.027732668, -0.0014296332, -0.021230977, -0.024233576, -0.012400499, -0.008008901, 0.002223874, -0.05371579, 0.015273063, 0.030829838, 0.021952074, 0.016868934, -0.0018426384, -0.02539206, -0.0024543884, 0.0059490474, 0.0154030975, 0.0061352323, -0.016041445, 0.013866334, 0.035203703, 0.022803204, -0.044542495, 0.012589638, -0.017826455, -0.014658358, 0.024446359, -0.0074473917, 0.00042852055, -0.015320349, 0.016478831, 0.011076517, 0.0047255475, -0.027945451, -0.002464732, -0.014611073, 0.00988257, -0.043525867, 0.035392843, 0.046339326, 0.061659675, 0.0045748265, 0.038537297, -0.025699412, 0.0083694495, 0.005736265, -0.03094805, -0.01872487, -0.033997934, 0.026479615, -0.006744027, 0.005532348, 0.02003703, 0.0010144116, -0.0018027417, -0.02624319, 0.010396795, -0.01383087, -0.007967527, 0.0053106993, 0.012577817, 0.016455188, 0.03754431, -0.00045179366, 0.038821008, 0.0033247285, 0.00667901, -0.0070218267, 0.004687128, -0.005830835, -0.012731493, 0.015391276, -0.049318284, 0.038773723, 0.015497668, -0.015119388, -0.012028129, 0.008534947, -0.003555243, 0.014918426, 0.021987537, 0.005748086, -0.0156158805, -0.0034458963, 0.052013528, 0.049034573, 0.0581133, 0.007612889, 0.016136015, -0.014067295, -0.029316716, -0.013558981, 0.0057244436, 0.02482464, -0.011188819, -0.018476624, -0.0076247104, 0.009474738, 0.023110557, 0.018110165, -0.011442976, -0.019327754, 0.031917393, -0.010786897, -0.040263202, 0.029789567, -0.00044181946, -0.024493644, 0.02145558, -0.02248403, 0.017412711, -0.004347267, -0.01288517, -0.008913227, 0.011703044, -0.0027218442, 0.044849847, 6.6125154e-05, -0.0017953534, 0.035700195, 0.0020243903, -0.00086812355, -0.04759238, -0.03562927, 0.04338401, -0.034778137, 0.010970126, 0.035511054, -0.022744099, -0.006460317, 0.05258095, -0.0017465907, 0.060619403, 0.022649528, 0.003697098, 0.006028841, 0.015154851, 0.00073808973, -0.013795407, 0.022519493, -0.022023002, -0.023015987, 0.023677977, -0.015083924, -0.020356204, 0.0070100054, 0.0061766068, -0.012731493, -0.033690583, -0.034470785, -0.0060170195, -0.009900303, 0.0043797754, -0.025439344, 0.0016401993, 0.02360705, -0.024032615, -0.00903735, -0.015935054, 0.020616272, -0.0043324907, -0.0060820365, 0.006265266, -0.028560156, 0.0028193698, 0.027141605, 0.023914402, 0.007494677, -0.02905665, -0.006915435, 0.04392779, 0.00950429, 0.008635428, 0.00022441917, -0.0126487445, -0.025415702, -0.014421933, 0.009474738, 0.027047036, 0.0037562044, 0.035392843, 0.0020568985, 0.019221364, -0.023004165, 0.083599925, -0.0073232683, 0.0014252003, -0.0037325618, 0.03591298, 0.011898095, 0.012908813, 0.03009692, 0.008830478, -0.059058998, -0.012956098, -0.010095353, -0.026101334, 0.010178102, 4.1004983e-05, -0.0008311821, 0.01241232, 0.030593412, 0.049507424, 0.014138223, -0.0038241765, -0.036196686, 0.0066730995, 0.02295688, 0.04383322, 0.011992665, -0.0048408047, -0.051682536, -0.024351789, -0.0043531777, 0.0027646965, 0.003374969, 0.033075877, -0.030286059, 0.022117572, -0.013015203, -0.032130174, -0.014197329, 0.017199928, -0.016679794, -0.0016564536, -0.0004658314, 0.0005179188, -0.02494285, -0.031231761, 0.025793983, -0.024032615, -0.01364173, 0.048561722, 0.0058633434, 0.005934271, -0.006915435, 0.026408687, -0.006513512, 0.03875008, 0.0008053231, 0.040972475, -0.03234296, -0.01166167, -0.0040665125, 0.0057805944, -0.00063132896, 0.035416484, 0.04591376, -0.060051985, -0.050311267, -0.0074533024, -0.029789567, -0.0077074594, 0.00057887216, 0.0043590884, 0.027732668, 0.00903735, 0.00076690404, -0.020084316, 0.034872707, -0.060051985, -0.020107958, -0.006856329, 0.026739683, 0.020450775, -0.016691614, 0.007932063, -0.008664981, 0.012235001, 0.024611857, -0.038253587, 0.0344235, -0.018393876, 0.022365818, -0.0076188, -0.003762115, 0.0073055364, 0.029505856, 0.011898095, 0.024020793, 0.024162648, -0.024233576, 0.029364001, 0.014611073, -0.01024903, 0.009965319, 0.017601851, -0.017081715, 0.015391276, 0.020805411, -0.011555279, -0.009492469, 0.022531316, 0.02718889, -0.031089906, -0.010189923, -0.015734093, -0.0013683104, 0.027236175, 0.015414919, -0.0024898523, -0.034494426, -0.0255812, 0.013783585, -0.017850097, -0.03624397, -0.029694997, -0.009864839, -0.029505856, 0.006105679, -0.02360705, 0.0065253335, 0.019930638, -0.013428948, -0.019185899, -0.028087307, -0.007329179, -0.021124586, 0.032011963, 0.0009338793, 0.04747417, 0.0020716751, 0.00968752, 0.0074060173, 0.0143864695, 0.014717464, 0.0064662276, -0.010337689, 0.004161082, -0.005227951, -0.011401602, -0.023417909, -0.0059608687, 0.019221364, 0.0032892646, -0.03669318, 0.020261634, -0.037189674, -0.026219547, 0.009929855, 0.041539896, 0.006019975, 0.029836852, 0.014611073, 0.003004077, 0.01062731, -0.033217732, 0.013298914, 0.017720064, -0.029364001, 0.0083694495, 0.0068799714, 0.008789104, 0.024198113, 0.014965711, -0.03281581, 0.017365426, -0.006850418, 0.014599252, -0.008741819, 0.01909133, -0.04262745, 0.010863735, -0.000585891, -0.07877685, -0.034825422, 0.032673955, 0.03941207, 0.015001175, -0.02454093, 0.02418629, 0.013653551, -0.0005097917, -0.011986754, -0.017897382, -0.0021041837, -0.011578921]"
../../../gradio,../../../gradio/gradio/components,chatbot.py,"""""""gr.Chatbot() component.""""""

from __future__ import annotations

import inspect
from pathlib import Path
from typing import Any, Callable, List, Literal, Optional, Tuple, Union

from gradio_client import utils as client_utils
from gradio_client.documentation import document

from gradio import utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel, GradioRootModel
from gradio.events import Events


class FileMessage(GradioModel):
    file: FileData
    alt_text: Optional[str] = None


class ChatbotData(GradioRootModel):
    root: List[Tuple[Union[str, FileMessage, None], Union[str, FileMessage, None]]]


@document()
class Chatbot(Component):
    """"""
    Creates a chatbot that displays user-submitted messages and responses. Supports a subset of Markdown including bold, italics, code, tables.
    Also supports audio/video/image files, which are displayed in the Chatbot, and other kinds of files which are displayed as links. This
    component is usually used as an output component.

    Demos: chatbot_simple, chatbot_multimodal
    Guides: creating-a-chatbot
    """"""

    EVENTS = [Events.change, Events.select, Events.like]
    data_model = ChatbotData

    def __init__(
        self,
        value: list[list[str | tuple[str] | tuple[str | Path, str] | None]]
        | Callable
        | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        height: int | str | None = None,
        latex_delimiters: list[dict[str, str | bool]] | None = None,
        rtl: bool = False,
        show_share_button: bool | None = None,
        show_copy_button: bool = False,
        avatar_images: tuple[str | Path | None, str | Path | None] | None = None,
        sanitize_html: bool = True,
        render_markdown: bool = True,
        bubble_full_width: bool = True,
        line_breaks: bool = True,
        likeable: bool = False,
        layout: Literal[""panel"", ""bubble""] | None = None,
        placeholder: str | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show in chatbot. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            height: The height of the component, specified in pixels if a number is passed, or in CSS units if a string is passed.
            latex_delimiters: A list of dicts of the form {""left"": open delimiter (str), ""right"": close delimiter (str), ""display"": whether to display in newline (bool)} that will be used to render LaTeX expressions. If not provided, `latex_delimiters` is set to `[{ ""left"": ""$$"", ""right"": ""$$"", ""display"": True }]`, so only expressions enclosed in $$ delimiters will be rendered as LaTeX, and in a new line. Pass in an empty list to disable LaTeX rendering. For more information, see the [KaTeX documentation](https://katex.org/docs/autorender.html).
            rtl: If True, sets the direction of the rendered text to right-to-left. Default is False, which renders text left-to-right.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            show_copy_button: If True, will show a copy button for each chatbot message.
            avatar_images: Tuple of two avatar image paths or URLs for user and bot (in that order). Pass None for either the user or bot image to skip. Must be within the working directory of the Gradio app or an external URL.
            sanitize_html: If False, will disable HTML sanitization for chatbot messages. This is not recommended, as it can lead to security vulnerabilities.
            render_markdown: If False, will disable Markdown rendering for chatbot messages.
            bubble_full_width: If False, the chat bubble will fit to the content of the message. If True (default), the chat bubble will be the full width of the component.
            line_breaks: If True (default), will enable Github-flavored Markdown line breaks in chatbot messages. If False, single new lines will be ignored. Only applies if `render_markdown` is True.
            likeable: Whether the chat messages display a like or dislike button. Set automatically by the .like method but has to be present in the signature for it to show up in the config.
            layout: If ""panel"", will display the chatbot in a llm style layout. If ""bubble"", will display the chatbot with message bubbles, with the user and bot messages on alterating sides. Will default to ""bubble"".
            placeholder: a placeholder message to display in the chatbot when it is empty. Centered vertically and horizontally in the Chatbot. Supports Markdown and HTML. If None, no placeholder is displayed.
        """"""
        self.likeable = likeable
        self.height = height
        self.rtl = rtl
        if latex_delimiters is None:
            latex_delimiters = [{""left"": ""$$"", ""right"": ""$$"", ""display"": True}]
        self.latex_delimiters = latex_delimiters
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        self.render_markdown = render_markdown
        self.show_copy_button = show_copy_button
        self.sanitize_html = sanitize_html
        self.bubble_full_width = bubble_full_width
        self.line_breaks = line_breaks
        self.layout = layout
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.avatar_images: list[dict | None] = [None, None]
        if avatar_images is None:
            pass
        else:
            self.avatar_images = [
                self.serve_static_file(avatar_images[0]),
                self.serve_static_file(avatar_images[1]),
            ]
        self.placeholder = placeholder

    def _preprocess_chat_messages(
        self, chat_message: str | FileMessage | None
    ) -> str | tuple[str | None] | tuple[str | None, str] | None:
        if chat_message is None:
            return None
        elif isinstance(chat_message, FileMessage):
            if chat_message.alt_text is not None:
                return (chat_message.file.path, chat_message.alt_text)
            else:
                return (chat_message.file.path,)
        elif isinstance(chat_message, str):
            return chat_message
        else:
            raise ValueError(f""Invalid message for Chatbot component: {chat_message}"")

    def preprocess(
        self,
        payload: ChatbotData | None,
    ) -> list[list[str | tuple[str] | tuple[str, str] | None]] | None:
        """"""
        Parameters:
            payload: data as a ChatbotData object
        Returns:
            Passes the messages in the chatbot as a `list[list[str | None | tuple]]`, i.e. a list of lists. The inner list has 2 elements: the user message and the response message. Each message can be (1) a string in valid Markdown, (2) a tuple if there are displayed files: (a filepath or URL to a file, [optional string alt text]), or (3) None, if there is no message displayed.
        """"""
        if payload is None:
            return payload
        processed_messages = []
        for message_pair in payload.root:
            if not isinstance(message_pair, (tuple, list)):
                raise TypeError(
                    f""Expected a list of lists or list of tuples. Received: {message_pair}""
                )
            if len(message_pair) != 2:
                raise TypeError(
                    f""Expected a list of lists of length 2 or list of tuples of length 2. Received: {message_pair}""
                )
            processed_messages.append(
                [
                    self._preprocess_chat_messages(message_pair[0]),
                    self._preprocess_chat_messages(message_pair[1]),
                ]
            )
        return processed_messages

    def _postprocess_chat_messages(
        self, chat_message: str | tuple | list | None
    ) -> str | FileMessage | None:
        if chat_message is None:
            return None
        elif isinstance(chat_message, (tuple, list)):
            filepath = str(chat_message[0])

            mime_type = client_utils.get_mimetype(filepath)
            return FileMessage(
                file=FileData(path=filepath, mime_type=mime_type),
                alt_text=chat_message[1] if len(chat_message) > 1 else None,
            )
        elif isinstance(chat_message, str):
            chat_message = inspect.cleandoc(chat_message)
            return chat_message
        else:
            raise ValueError(f""Invalid message for Chatbot component: {chat_message}"")

    def postprocess(
        self,
        value: list[list[str | tuple[str] | tuple[str, str] | None] | tuple] | None,
    ) -> ChatbotData:
        """"""
        Parameters:
            value: expects a `list[list[str | None | tuple]]`, i.e. a list of lists. The inner list should have 2 elements: the user message and the response message. The individual messages can be (1) strings in valid Markdown, (2) tuples if sending files: (a filepath or URL to a file, [optional string alt text]) -- if the file is image/video/audio, it is displayed in the Chatbot, or (3) None, in which case the message is not displayed.
        Returns:
            an object of type ChatbotData
        """"""
        if value is None:
            return ChatbotData(root=[])
        processed_messages = []
        for message_pair in value:
            if not isinstance(message_pair, (tuple, list)):
                raise TypeError(
                    f""Expected a list of lists or list of tuples. Received: {message_pair}""
                )
            if len(message_pair) != 2:
                raise TypeError(
                    f""Expected a list of lists of length 2 or list of tuples of length 2. Received: {message_pair}""
                )
            processed_messages.append(
                [
                    self._postprocess_chat_messages(message_pair[0]),
                    self._postprocess_chat_messages(message_pair[1]),
                ]
            )
        return ChatbotData(root=processed_messages)

    def example_payload(self) -> Any:
        return [[""Hello!"", None]]

    def example_value(self) -> Any:
        return [[""Hello!"", None]]
","This code defines a `Chatbot` component for Gradio, which is used to create a chatbot that displays user-submitted messages and responses. The component supports a subset of Markdown formatting, as well as audio, video, and image files. It also allows for the display of other file types as links. The component can be used as an output component.

The `Chatbot` class inherits from the `Component` class and includes various parameters for customization, such as label, container, scale, min_width, visibility, and more. It also includes methods for preprocessing and postprocessing chat messages, as well as generating example payloads and values.

The component can handle messages in the form of strings, tuples with file paths or URLs, or None for no message. It preprocesses the messages for display in the chatbot and postprocesses them for output. The component also supports features like like/dislike buttons, avatar images, LaTeX rendering, and Markdown rendering.

Overall, the `Chatbot` component provides a flexible and customizable way to create chatbot interfaces in Gradio.","[-0.04300632, 0.003910463, 0.020485327, 0.00925408, 0.010266062, -0.052412488, -0.016074723, 0.008049061, -0.036946125, -0.008119256, -0.015747145, 0.007932069, -0.02866308, 0.006340975, -0.010511746, -0.014904802, -0.039753936, 0.0019698555, 0.006686102, 0.005928578, 0.009529011, -0.023445228, 9.405073e-05, 0.04639909, -0.017958296, -0.027539955, -0.042374562, 0.032921594, -0.0034073966, -0.00013134198, -0.05119577, -0.033038586, -0.006142088, -0.024006791, 0.0054840078, -0.04670327, 0.0109680155, 0.009458817, 0.0012993442, -0.015618454, -0.04862194, -0.050493818, -0.00053012074, 0.04134503, -0.06921256, 0.00171686, -0.0372971, 0.02403019, 0.01508029, 0.03479347, -0.07253514, 0.01835607, -0.007276912, -0.007341258, -0.014717614, 0.003310878, -0.047358427, 0.02326974, 0.0062941783, -0.011108406, 0.0046182657, -0.0101900175, 0.01387527, 0.027282571, -0.026674213, -0.014588922, -0.052412488, -0.042608544, -0.014717614, -0.012646853, 0.046352293, -0.017045759, -0.024427963, -0.04415284, -0.028709875, 0.0017110104, -0.038303234, 0.0017256343, 0.00940617, -0.032477025, -0.023468627, -0.0048113028, -0.076325685, -0.020473627, -0.01522068, 0.018742144, -0.017396735, 0.011371638, -0.030558353, -0.064860456, -0.04211718, -0.01596943, -0.031400695, 0.04431663, 0.04403585, -0.0005860576, -0.01730314, -0.018016793, 0.035472024, -0.0037525236, 0.039496552, -0.024685346, -0.046469286, -0.01447193, 0.040362295, -0.05479913, 0.015981128, 0.019280309, -0.016905367, -0.01298613, -0.022134917, 0.015033493, -0.034699876, 0.010552693, -0.022661382, -0.05400358, 0.062286627, -0.01581734, -0.028920462, -0.01223738, -0.0066978014, -0.0042497404, -0.012951032, -0.027680345, 0.040689874, -0.046609677, 0.0011728464, -0.03268761, -0.053816393, 0.013840172, -0.023550522, 0.020988394, -0.0051535047, -0.06921256, -0.048013583, 0.019537691, -0.04525257, -0.020333238, -0.02791433, -0.0089265015, 0.014120954, -0.05447155, 0.0022608736, 0.012798943, -0.026206244, -0.037741672, -0.058449283, 0.022930464, -0.08273686, -0.041579016, -0.019666383, 0.048107177, -0.07122483, -0.015115387, -0.018788941, 0.05283366, 0.035004053, 0.0130446255, -0.012447966, -0.03205585, 0.015712047, 0.018625151, 0.028031321, -0.03748429, -0.0343021, -0.01835607, 0.02730597, 0.05119577, -0.03631437, 0.01805189, 0.030956125, 0.016624587, -0.026089251, -0.0050950088, -0.0003537185, -0.008189451, -0.015091989, -0.037180107, 0.017045759, -0.0050482117, 0.025153315, -0.008587224, -0.016378902, 0.01312652, -0.018157184, -0.038396828, -0.012939333, -0.041836396, -0.0432637, 0.0017066231, 0.031166712, -0.03416171, 0.01134239, 0.05044702, 0.029131047, 0.0046328898, 0.04565034, -0.028546087, 0.025340501, -0.01895273, 0.028007923, 0.027961126, 0.0062766294, -0.000436527, -0.02135107, -0.011693367, 0.007253514, 0.0116173215, -0.022591187, -0.013723181, 0.0006774577, -0.037507687, 0.017186148, -0.014214547, -0.057794128, -0.03687593, -0.043778468, 0.061210297, -0.046913855, -0.015992828, -0.07543655, 0.027820736, 0.040058117, -0.04148542, 0.014156052, -0.0039894325, 0.057981316, -0.044971786, 0.0030242472, 0.014015661, 0.02805472, -0.0054196618, -0.007493348, -0.037063118, 0.06238022, -0.06626436, 0.021117086, 0.0025621282, 0.067387484, 0.02477894, -0.04134503, 0.007686385, 0.062661, -0.017876402, 0.029224642, 0.01610982, -0.030254172, -0.054658737, 0.045790732, 0.08938201, 0.0006752641, -0.019362202, 0.028101517, -0.0141794495, -0.016683083, 0.023187846, -0.01149448, 0.02700179, 0.012915934, -0.005323143, 0.006223983, -0.0020561372, -0.04225757, 0.02952882, 0.01552486, 0.00866327, -0.0008072459, 0.00024221033, -0.0051418054, 0.010020379, -0.013161618, -0.022883667, 0.042187374, 0.010488347, -0.0060075475, 0.00806076, 0.016671384, 0.037507687, 0.01999396, 0.03374054, -0.043895457, 0.016975563, -0.00088329084, 0.040221903, -0.01926861, 0.020344937, 0.058589675, -0.0064228694, 0.03416171, -0.029201243, 0.028429095, 0.039239172, 0.023714311, -0.035425227, -0.008727615, 0.00865157, 0.07089725, 0.048294365, 0.03788206, 0.0035624113, -0.035472024, 0.021573354, 0.018239077, -0.04431663, -0.013208415, 0.020333238, -0.00027840477, 0.00999698, 0.005568827, -0.024989525, 0.0028633832, 0.058776863, -0.023679214, -0.023222944, -0.070195295, -0.006428719, 0.026650814, 0.018999526, 0.0141794495, -0.010611189, -0.011833757, 0.018824039, 0.06443928, -0.046141706, -0.056624208, -0.0054225866, -0.03163468, 0.0063760728, -0.013489196, -0.048715536, 0.04700745, -0.022193413, 0.009043494, 0.009160486, 0.023843002, 0.020906499, -0.03835003, 0.04132163, -0.037577882, 0.02896726, -0.016835172, -0.010254363, 0.007224266, 0.02672101, 0.002858996, 0.015630152, -0.051850926, 0.036173977, -0.048294365, -0.018671948, -0.048013583, -0.020169448, 0.005679969, -0.06766827, 0.047522217, -0.021573354, -0.05910444, -0.044784598, -0.0432871, -0.02477894, -0.065047644, 0.037928857, -0.014074157, 0.023375034, 0.016788375, -0.0067504477, -0.041812997, -0.049885456, 0.010728181, -0.05283366, 0.025340501, 0.006247381, -0.03388093, -0.02150316, -0.06443928, -0.036080383, 0.02149146, -0.016226813, -0.052927252, 0.0018981978, 0.0049926406, -0.040128313, -0.003132465, 0.021924332, 0.0032611564, -0.004808378, 0.0023471552, 0.03540183, 0.00026304956, 0.043380693, -0.029645814, -0.007803377, -0.009376922, -0.016624587, 0.054845925, 0.066872716, 0.027422963, -0.009488064, 0.0019069723, 0.028569486, 0.015501461, -0.0037495987, -0.005940277, 0.05011944, 0.0024071138, -0.021421265, 0.022017924, 0.019058023, -0.017724313, 0.0049750917, 0.056062642, 0.004451552, -0.008125106, -0.030230774, 0.02477894, -0.016963864, -0.019935464, -0.013114821, 0.040081516, 0.070663266, 0.024989525, -0.057138972, 0.0054840078, -0.027422963, 0.0090551935, 0.046282098, 0.05161694, -0.012588357, -0.03165808, -0.04431663, -0.05086819, -0.013547692, 0.023456927, -0.01925691, 0.0082128495, -0.04001132, 0.0075869416, 0.03673554, -0.00909614, 0.024685346, -0.04148542, -0.01089782, 0.0141794495, 0.012155485, -0.03313218, 0.0025241058, 0.022287007, 0.00731201, -0.006446268, -0.039332766, -0.024825737, -0.0106287375, 0.0023924897, -0.01759562, -0.013091423, -0.037203506, 0.016998962, 0.04595452, 0.014062458, -0.03703972, 0.010657986, 0.0038461173, -0.016952164, 0.057840925, -0.014612321, -0.010821775, 0.029154446, 0.018578354, 0.015396168, -0.016800074, 0.018554958, 0.036220774, 0.015010094, 0.03149429, -0.041555617, -0.0073939045, 0.012623454, 0.001596943, -0.02924804, 0.027539955, -0.0046416637, 0.018964428, -0.0016291159, -0.0009571421, -0.011008962, 0.08166053, 0.0007268138, -0.04134503, 0.021936031, -0.023035757, 0.005612699, -0.0056536463, -0.0094120195, -0.010026229, 0.030792337, -0.013699782, -0.027680345, -0.023035757, 0.03507425, -0.040830266, -0.0067679966, -0.009610906, 0.0007875035, 0.04448042, -0.008300594, -0.00235008, 0.011219548, 0.034231905, 0.024802338, 0.011248796, -0.02849929, -0.043801866, 0.013360505, 0.016881969, 0.026744409, -0.019467495, -0.04581413, 0.022520991, -0.040385693, 0.011295593, -0.0013768515, 0.013021228, -0.012717048, -0.030324368, -0.011026511, 0.010318709, -0.013360505, -0.04583753, -0.020485327, 0.00022557551, 0.01656609, 0.004732333, -0.01148863, 0.044784598, -0.062333424, -0.012424568, -0.02821851, 0.0038461173, -0.011161052, -0.02644023, 0.008224549, -0.016039625, 0.00880366, 0.016753277, -0.008563826, 0.03820964, -0.0010638975, -0.02941183, 0.016180016, 0.030932728, 0.03193886, -0.031728275, 0.032851398, -0.025434095, 0.014413434, -0.0051535047, -0.00500434, 0.02254439, -0.007382205, 0.0056009996, 0.009417869, -0.005328993, 0.0053494666, 0.042608544, -0.02730597, -0.03502745, -0.0013827011, -0.005396263, -0.05479913, 0.036361165, -0.0058671567, 0.013383904, -0.014436833, 0.034676477, 0.035448626, -0.036641944, -0.018297574, -0.015045192, -0.0208831, -0.024661947, -0.0017724312, -0.04192999, 0.002037126, -0.014881403, -0.0313071, -0.01909312, 0.001440466, 0.017104253, 0.00062992965, 0.003568261, -0.0056331726, 0.0056156237, -0.0089499, 0.014799508, -0.030324368, 0.0073646563, -0.02431097, 0.028709875, -0.027282571, -0.004238041, 0.008593074, -0.026299838, -0.0313305, -0.003000849, 0.023386734, -0.032009054, 0.024100386, -0.009061043, -0.036244173, -0.0042146426, -0.00851118, 0.016776675, -0.025855267, -0.065702796, -0.021175582, -0.010880271, 0.005536654, 0.0072301156, 0.022719877, 0.002186291, -0.00021058589, -0.000582036, 0.012003396, -0.02356222, -0.016191715, 0.069352955, 0.016718179, -0.04791999, 0.008095858, 0.023667514, 0.021713745, 0.029388431, 0.029294837, -0.0016583638, -0.0058262097, -0.036501553, 0.026323237, -0.0029145672, 0.0141794495, -0.040643077, 0.012494762, 0.015899235, -0.010043777, -0.021585053, 0.019970562, 0.0027961126, -0.0013673459, 0.013056325, 0.041719403, -0.0055278796, -0.010687234, 0.008435135, 0.0053787148, 0.00024476953, -0.007803377, -0.0020239644, -0.014050758, -0.013419, 0.020461928, 0.0417896, -0.02104689, 0.01089782, 0.0039865077, 0.015782243, -0.017466929, 0.021152183, -0.024591751, -0.007078026, -0.019432398, 0.032500423, -0.027095385, -0.0021921406, 0.025597885, 0.004688461, 0.03818624, -0.008914802, -0.0046913857, -0.035472024, 0.02761015, 0.017525425, -0.04611831, -0.016343804, -0.030488158, -0.004164921, 0.022673082, -0.04300632, 0.023761109, 0.031681478, 0.0037320498, -0.037554484, -0.007154071, -0.017853003, -0.03612718, 0.009605057, -0.010798376, 0.04192999, 0.011734313, 0.016098121, 0.050914988, -0.02297726, 0.002841447, 0.00030600763, -0.0057589393, 0.0043901308, -0.004074252, -0.0019084347, 0.0036881778, 0.00910199, -0.009751297, -0.0119098015, -0.027680345, 0.019947164, 0.008031512, 0.015735446, 0.0050218883, 0.01761902, -0.008107557, 0.008370789, 0.017502027, -0.008329842, -0.0050101895, -0.00387829, -0.043872062, -0.021117086, 0.012506462, -0.07618529, -0.017560523, 0.014261344, -0.062193032, 0.022696478, 0.0049019717, 0.0068615903, 0.03221964, -0.0013731954, 0.010856872, 0.04550995, -0.014518728, -0.0019362202, -0.0020429755, -0.015630152, -0.0040918007, 0.022415698, 0.010412302, -0.038584016, -0.00037035331, -0.020263042, 0.019958863, 0.0056302478, -0.010780828, 0.015419567, -0.0032319084, 0.007417303, -0.023679214, 0.009090291, -0.046352293, 0.005612699, 0.009827342, -0.020789508, -0.03746089, 0.0062181335, -0.037694875, 0.028405696, -0.0065223128, -0.00085111795, -0.010570242, -0.022556089, 0.020461928, -0.0223806, -0.010166619, 0.0387946, 0.022123218, -0.00017146663, -0.004404755, -0.0063058776, 0.03760128, -0.01806359, -0.01416775, -0.01313822, 0.016297009, -0.0007381474, -0.00626493, 0.01627361, 0.036992922, -0.010090574, 0.030254172, 0.008242098, -0.010938767, 0.017279742, -0.027142182, -0.003565336, -0.025714876, -0.0017885177, 0.0029160297, -0.0045597693, 0.022953862, 0.020660816, 0.055033114, -0.054518346, -0.023620717, 0.017268043, -0.02821851, -0.005855458, -0.019947164, -0.022953862, 0.034559485, 0.04115784, -0.045931123, -0.022520991, -0.002325219, 0.002790263, 0.013266911, 0.019408999, -0.016355503, 0.01283404, 0.010219266, 0.024732143, 0.0022901215, -0.00045626942, -0.018964428, -0.044457022, -0.018894235, 0.0119098015, -0.013629586, 0.02641683, -0.009529011, 0.010663835, 0.033178978, 0.041298233, 0.013910368, 0.004115199, 0.02522351, -0.023620717, 0.03016058, 0.025434095, 0.0050482117, 0.02300066, -0.037718274, 0.04492499, -0.022485893, -0.018110387, 0.016846871, 0.022041323, 0.007282762, -0.007235965, 0.024685346, -0.016367203, -0.0068264925, 0.0026425605, 0.005671195, 0.0019669307, 0.012728747, 0.024123784, -0.016203415, -0.04747542, 0.02447476, 0.011161052, 0.028639682, 0.024568353, -0.0024319745, 0.037928857, -0.016226813, -0.0037583732, -0.025036322, -0.015712047, -0.009569959, -0.057794128, 0.001233536, -0.030722141, 0.033108782, -0.0016993112, -0.005644872, -0.0054693837, 0.0208714, 0.018566655, -0.008552127, 0.00865157, 0.011886404, 0.006317577, -0.032874797, -0.010108123, 0.008429285, -0.013337106, 0.02225191, 0.007698084, 0.0010309934, -0.013337106, -0.0043170108, 0.0005769176, -0.009300876, 0.013266911, -0.045275968, 0.0030681195, -0.029809603, -0.00010840055, 2.6963036e-05, 0.07258194, -0.046609677, 0.009575808, -0.004431078, -0.014588922, -0.012190583, 0.016823472, -0.03746089, -0.024872534, -0.017560523, 0.012225681, -0.03746089, 0.02403019, -0.025457494, -0.0025548164, -0.0070897248, -0.028007923, 0.010277761, 0.04787319, -0.0066276058, -0.012623454, -0.013629586, 0.008160203, -0.0030681195, 0.029575618, -0.022661382, -0.01806359, 0.0109855635, -0.006820643, -0.014998395, 0.032196242, 0.001495306, 0.026206244, 0.002157043, -0.010365506, 0.022403998, -0.01104406, 0.030113783, -0.0127521455, -0.008160203, -0.0283355, -0.010698933, -0.0048376257, -0.0004376238, -0.026042456, 0.03629097, -0.06303538, -0.030979523, -0.02178394, 0.016530992, -0.04104085, -0.008756863, 0.028686479, -0.00048661427, 0.021702046, 0.004132748, 0.045533348, 0.06972733, 0.03491046, -0.039917726, -0.015618454, -0.018870836, 0.0026849702, 0.013781677, 0.008768562, -0.06135069, -0.017958296, 0.0059519764, -0.0040186807, 0.003073969, -0.017490327, 0.05119577, -0.024451362, 0.008897254, 0.03090933, 0.026767807, 0.008207, 0.040502686, 0.037577882, -0.022263609, 0.008552127, 0.00046833424, -0.024942728, 0.026136048, 0.008183601, 0.0039601848, 0.013173318, 0.028756673, 0.0017344088, -0.027984524, -0.029014057, -0.00055205676, 0.013337106, 0.0024348993, 0.017139351, -0.029365033, -0.012635154, 0.0045568445, 0.0283355, 0.029762806, 0.009640154, 0.005981224, -0.0033986224, 0.04969827, 0.007154071, -0.028405696, -0.00089352764, 0.028148314, -0.0328046, 0.017466929, -0.0028151239, 0.019958863, -0.014284743, -0.045182373, -0.032126047, -0.036478154, -0.006972733, 0.05255288, -0.024521558, 0.0049282946, -0.030605149, -0.014694216, 0.0034863665, -0.012155485, -0.0031851116, -0.006253231, -0.0023690911, 0.024942728, 0.0025679779, -0.002076611, -0.025597885, 0.008604773, 0.024802338, -0.02580847, -0.007083875, 0.007341258, 0.022298707, -0.037531085, -0.008019812, -0.0052324743, 0.053676, 0.007885272, 0.00761619, 0.001604255, 0.015267477, -0.043848664, -0.01864855, 0.0068908385, 0.039309368, 0.008786111, -0.050821394, -0.014822907, -0.009575808, 0.030558353, 0.028101517, 0.0025036323, 0.01759562, 0.022298707, 0.031377297, 0.010266062, 0.0101900175, -0.03016058, 0.0065223128, 0.0036150578, 0.025995659, -0.021140484, 0.003176337, 0.003995282, -0.025948862, -0.022790072, -0.010710632, 0.04398905, -0.005133031, 0.039566748, 0.016893668, 0.014542125, -0.009066893, -0.031260304, 0.014939899, -0.024685346, -0.033646945, 0.032874797, -0.030979523, 0.012974431, -0.03448929, -0.0101256715, 0.015910935, -0.0013037313, 0.0025255682, -4.474036e-05, 0.028733274, 0.010014529, 0.0063292757, 0.022029623, -0.0059899986, -0.05213171, 0.03058175, 0.006106991, -0.036431357, -0.0035126896, -0.012576657, -0.01701066, 0.008329842, -0.008973299, 0.0164023, -0.015747145, 0.02298896, -0.009920935, -0.023328237, -0.0034424944, 0.020836303, 0.00032282525, -0.01595773, 0.040549483, -0.001760732, -0.0132552115, 0.06284819, -0.013348806, -0.04228097, -0.020052457, 0.028873665, -0.014846305, 0.009324275, 0.0041590715, -0.023924896, 0.020614019, 0.001953769, -0.00925993, 0.014296442, 0.040058117, 0.009634305, 0.013512595, 0.016987262, -0.02597226, -0.007978865, -0.0011011887, -0.021678647, -0.017244644, -0.028195111, -0.0106930835, 0.007651287, -0.009675251, -0.014202848, -0.009353523, -0.038817998, 0.018145485, -0.01880064, -0.012319274, 0.026089251, -0.027633548, -0.0066100573, -0.008920652, 0.03299179, 0.027656946, -0.022918765, 0.029435229, 0.036805734, 0.029341634, 0.018683648, 0.016484195, -0.010780828, 0.0068557407, 0.0017036983, 0.0034044718, 0.021865835, -0.026533822, -0.0041385978, -0.021549957, -0.018005094, 0.028382298, 0.00925408, -0.020918198, -0.004384281, 0.0049955654, 0.036244173, 0.014156052, -0.014273044, -0.0057794126, 0.01819228, -0.008043211, 0.02207642, 0.019186715, 0.013571091, -0.005519105, 0.021140484, 0.014413434, -0.013196716, 6.228918e-05, -0.019958863, -0.010055476, 0.015314274, -0.032734405, 0.008253797, 0.010622888, 0.025761673, 0.010213416, -0.004787904, -0.001335173, -0.00894405, -0.02358562, -0.02000566, -0.037507687, 0.030511556, 0.0045919423, 0.053535614, 0.002430512, -0.004653363, -0.017677516, 0.001462402, 0.023035757, -0.0025182562, 0.022193413, -0.025902065, 0.049136706, -0.009803943, -0.0003677941, 0.0033225773, 0.0003528045, 0.0032289836, 0.0046211905, -0.01984187, -0.009967732, 0.00019285426, -0.007627889, 0.019210113, -0.0074640997, 0.008575525, -0.009476365, -0.0003522561, -0.03313218, 0.008528729, 0.03851382, -0.04118124, -0.007973015, -0.0104474, 0.018110387, -0.042304367, 0.052927252, 0.0047498816, -0.010500046, -0.0089908475, 0.0143900355, 0.054892723, 0.021198979, -0.0075284457, 0.03654835, 0.014694216, 0.010312859, 0.007867723, 0.0057589393, 0.025831869, 0.027376166, -0.0048551746, -0.007861873, -0.035706006, -0.044784598, -0.023386734, 0.027961126, -0.0023530049, 0.0038431925, -0.0074407016, 0.028709875, 0.008142655, -0.007329559, -0.03565921, 0.032196242, 0.018964428, -0.017197847, -0.039449755, 0.014893102, -0.029060854, -0.025270307, 0.026370034, 0.025948862, 0.009821492, 0.00537579, -0.0066334554, 0.0042321915, 0.018765543, -0.009534861, 0.037999053, -0.008932351, -0.022462495, 0.014822907, -0.015454665, -0.010570242, -0.028873665, -0.019292008, 0.008891405, -0.0111142555, -0.03341296, -0.004653363, -0.009581658, 0.018847438, 0.05030663, -0.019736577, 0.05297405, -0.012096989, -0.0026659588, 0.012880837, 0.0052646473, 0.024100386, -0.03046476, 0.0016525143, -0.0055980748, 0.012483063, -0.0018470137, -0.013933767, 0.028031321, -0.0040567033, -0.025995659, -0.016893668, 0.002553354, -0.029973391, -0.0052646473, -0.029037455, 0.03046476, -0.0008781724, 0.010108123, 0.0025548164, -0.0193973, -0.017993394, -0.00544891, 0.015033493, -0.0010653599, -0.0046387394, 0.036829133, -0.0038899893, 0.011254646, 0.017969996, 0.0043374845, -0.02718898, -0.00470016, 0.0008189451, 0.02522351, -0.018929332, -0.008546277, -0.0063351253, 0.0066978014, -0.021374468, -0.022801772, 0.022474194, 0.002892631, 0.016998962, 0.008090008, 0.0020254268, -0.001895273, 0.007627889, 0.050025847, 0.010663835, 0.0447612, -0.006674403, 0.016940465, -0.010453249, 0.016729878, 0.018730445, 0.0013227427, -0.017174449, -0.00940617, 0.0035273137, -0.011746013, 0.030815735, -0.008312293, -0.021128785, 0.016917067, 0.018964428, 0.02163185, 0.009874138, 0.034372296, -0.028429095, 0.01984187, 0.0016876119, -0.004629965, 0.017197847, 0.020695914, -0.035167843, -0.015127086, 0.004311161, 0.011237097, -0.025714876, -0.00040435416, -0.033061985, 0.013220115, -0.0080022635, -0.03776507, 0.036337767, -0.007253514, -0.0024495234, -0.044831395, -0.048107177, -0.014530427, 0.0036764788, -0.02821851, 0.018882535, -0.035823, -0.0238781, 0.06130389, 0.038677607, -0.028265307, -0.025738275, 0.018414566, -0.021070288, 0.040900458, 0.027633548, 0.03465308, -0.011219548, -0.0067679966, -0.020625718, 0.004828851, 0.0092657795, 0.020614019, 0.0012167185, -0.05718577, -0.0432637, 0.008370789, -0.012167185, 0.0029803752, 0.020918198, 0.0051359558, -0.009429568, -0.021748843, 0.022439096, 0.0060075475, -0.00096372294, -0.009722048, -0.0005268303, 0.0020312765, 0.026978392, 0.03481687, -0.009920935, 0.022731576, -0.0023325311, 0.0063058776, 0.011201999, -0.012026794, 0.0032904046, 0.010821775, 0.011172751, 0.012061892, -0.013793375, -0.008499481, 0.02163185, 0.0050131143, 0.0056331726, 0.006686102, 0.0024714593, 0.04115784, 0.025995659, 0.005024813, 0.025270307, 1.0225389e-05, 0.0032874797, -0.005969525, -0.01312652, -0.016998962, -0.03210265, 0.001924521, 0.046820264, -0.008125106, -0.0046767616, -0.012798943, -0.008049061, 0.020391734, -0.006996131, -0.00343372, -0.02029814, 0.008312293, 0.0028326728, 0.00025025354, -0.030979523, -0.006925936, -0.012553259, -0.026650814, 0.019128218, -0.0015457589, 0.009148787, 0.014986696, 0.011903953, -0.026299838, 0.006744598, 0.012974431, 0.012611755, 0.03254722, 0.015618454, 0.045416355, 0.0034892913, 0.012319274, 0.001633503, -0.020099252, 0.020204546, 0.0044954238, -0.0074991975, -0.03837343, -0.03610378, -0.007399754, -0.01298613, 0.012342673, 0.03701632, -0.018086988, -0.010927068, 0.004150297, -0.028124915, -0.010640437, 0.012670251, 0.009605057, -0.020508725, -0.004252665, 0.0053845644, -0.013922067, 0.0067504477, -0.02880347, -0.00031459922, 0.0009849278, -0.01416775, -0.012810642, 0.01835607, -0.007733182, 0.04115784, 0.0046475134, -0.004612416, 0.024287572, 0.025714876, -0.015571657, -0.031073118, 0.033178978, -0.052786864, 0.01715105, -0.008973299, -0.06537522, 0.007651287, 0.019303707, -0.012611755, 0.031587884, -0.0083415415, -0.0034571183, 0.013220115, 0.009628455, 0.015419567, -0.022134917, 0.015489762, -0.0038314932]"
../../../gradio,../../../gradio/gradio/components,audio.py,"""""""gr.Audio() component.""""""

from __future__ import annotations

import dataclasses
from pathlib import Path
from typing import Any, Callable, Literal

import httpx
import numpy as np
from gradio_client import file
from gradio_client import utils as client_utils
from gradio_client.documentation import document

from gradio import processing_utils, utils
from gradio.components.base import Component, StreamingInput, StreamingOutput
from gradio.data_classes import FileData
from gradio.events import Events
from gradio.exceptions import Error


@dataclasses.dataclass
class WaveformOptions:
    """"""
    A dataclass for specifying options for the waveform display in the Audio component. An instance of this class can be passed into the `waveform_options` parameter of `gr.Audio`.
    Parameters:
        waveform_color: The color (as a hex string or valid CSS color) of the full waveform representing the amplitude of the audio. Defaults to a light gray color.
        waveform_progress_color: The color (as a hex string or valid CSS color) that the waveform fills with to as the audio plays. Defaults to the accent color.
        trim_region_color: The color (as a hex string or valid CSS color) of the trim region. Defaults to the accent color.
        show_recording_waveform: Whether to show the waveform when recording audio. Defaults to True.
        show_controls: Whether to show the standard HTML audio player below the waveform when recording audio or playing recorded audio. Defaults to False.
        skip_length: The percentage (between 0 and 100) of the audio to skip when clicking on the skip forward / skip backward buttons. Defaults to 5.
        sample_rate: The output sample rate (in Hz) of the audio after editing. Defaults to 44100.
    """"""

    waveform_color: str | None = None
    waveform_progress_color: str | None = None
    trim_region_color: str | None = None
    show_recording_waveform: bool = True
    show_controls: bool = False
    skip_length: int | float = 5
    sample_rate: int = 44100


@document()
class Audio(
    StreamingInput,
    StreamingOutput,
    Component,
):
    """"""
    Creates an audio component that can be used to upload/record audio (as an input) or display audio (as an output).
    Demos: generate_tone, reverse_audio
    Guides: real-time-speech-recognition
    """"""

    EVENTS = [
        Events.stream,
        Events.change,
        Events.clear,
        Events.play,
        Events.pause,
        Events.stop,
        Events.pause,
        Events.start_recording,
        Events.pause_recording,
        Events.stop_recording,
        Events.upload,
    ]

    data_model = FileData

    def __init__(
        self,
        value: str | Path | tuple[int, np.ndarray] | Callable | None = None,
        *,
        sources: list[Literal[""upload"", ""microphone""]] | None = None,
        type: Literal[""numpy"", ""filepath""] = ""numpy"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        streaming: bool = False,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        format: Literal[""wav"", ""mp3""] = ""wav"",
        autoplay: bool = False,
        show_download_button: bool | None = None,
        show_share_button: bool | None = None,
        editable: bool = True,
        min_length: int | None = None,
        max_length: int | None = None,
        waveform_options: WaveformOptions | dict | None = None,
    ):
        """"""
        Parameters:
            value: A path, URL, or [sample_rate, numpy array] tuple (sample rate in Hz, audio data as a float or int numpy array) for the default value that Audio component is going to take. If callable, the function will be called whenever the app loads to set the initial value of the component.
            sources: A list of sources permitted for audio. ""upload"" creates a box where user can drop an audio file, ""microphone"" creates a microphone input. The first element in the list will be used as the default source. If None, defaults to [""upload"", ""microphone""], or [""microphone""] if `streaming` is True.
            type: The format the audio file is converted to before being passed into the prediction function. ""numpy"" converts the audio to a tuple consisting of: (int sample rate, numpy.array for the data), ""filepath"" passes a str path to a temporary file containing the audio.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If True, will allow users to upload and edit an audio file. If False, can only be used to play audio. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            streaming: If set to True when used in a `live` interface as an input, will automatically stream webcam feed. When used set as an output, takes audio chunks yield from the backend and combines them into one streaming audio output.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            format: The file format to save audio files. Either 'wav' or 'mp3'. wav files are lossless but will tend to be larger files. mp3 files tend to be smaller. Default is wav. Applies both when this component is used as an input (when `type` is ""format"") and when this component is used as an output.
            autoplay: Whether to automatically play the audio when the component is used as an output. Note: browsers will not autoplay audio files if the user has not interacted with the page yet.
            show_download_button: If True, will show a download button in the corner of the component for saving audio. If False, icon does not appear. By default, it will be True for output components and False for input components.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            editable: If True, allows users to manipulate the audio file if the component is interactive. Defaults to True.
            min_length: The minimum length of audio (in seconds) that the user can pass into the prediction function. If None, there is no minimum length.
            max_length: The maximum length of audio (in seconds) that the user can pass into the prediction function. If None, there is no maximum length.
            waveform_options: A dictionary of options for the waveform display. Options include: waveform_color (str), waveform_progress_color (str), show_controls (bool), skip_length (int), trim_region_color (str). Default is None, which uses the default values for these options.
        """"""
        valid_sources: list[Literal[""upload"", ""microphone""]] = [""upload"", ""microphone""]
        if sources is None:
            self.sources = [""microphone""] if streaming else valid_sources
        elif isinstance(sources, str) and sources in valid_sources:
            self.sources = [sources]
        elif isinstance(sources, list):
            self.sources = sources
        else:
            raise ValueError(
                f""`sources` must be a list consisting of elements in {valid_sources}""
            )
        for source in self.sources:
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must a list consisting of elements in {valid_sources}""
                )
        valid_types = [""numpy"", ""filepath""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.streaming = streaming
        if self.streaming and ""microphone"" not in self.sources:
            raise ValueError(
                ""Audio streaming only available if sources includes 'microphone'.""
            )
        self.format = format
        self.autoplay = autoplay
        self.show_download_button = show_download_button
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        self.editable = editable
        if waveform_options is None:
            self.waveform_options = WaveformOptions()
        elif isinstance(waveform_options, dict):
            self.waveform_options = WaveformOptions(**waveform_options)
        else:
            self.waveform_options = waveform_options
        self.min_length = min_length
        self.max_length = max_length
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def example_payload(self) -> Any:
        return file(
            ""https://github.com/gradio-app/gradio/raw/main/test/test_files/audio_sample.wav""
        )

    def example_value(self) -> Any:
        return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/audio_sample.wav""

    def preprocess(
        self, payload: FileData | None
    ) -> str | tuple[int, np.ndarray] | None:
        """"""
        Parameters:
            payload: audio data as a FileData object, or None.
        Returns:
            passes audio as one of these formats (depending on `type`): a `str` filepath, or `tuple` of (sample rate in Hz, audio data as numpy array). If the latter, the audio data is a 16-bit `int` array whose values range from -32768 to 32767 and shape of the audio data array is (samples,) for mono audio or (samples, channels) for multi-channel audio.
        """"""
        if payload is None:
            return payload

        if not payload.path:
            raise ValueError(""payload path missing"")

        # Need a unique name for the file to avoid re-using the same audio file if
        # a user submits the same audio file twice
        temp_file_path = Path(payload.path)
        output_file_name = str(
            temp_file_path.with_name(f""{temp_file_path.stem}{temp_file_path.suffix}"")
        )

        sample_rate, data = processing_utils.audio_from_file(temp_file_path)

        duration = len(data) / sample_rate
        if self.min_length is not None and duration < self.min_length:
            raise Error(
                f""Audio is too short, and must be at least {self.min_length} seconds""
            )
        if self.max_length is not None and duration > self.max_length:
            raise Error(
                f""Audio is too long, and must be at most {self.max_length} seconds""
            )

        if self.type == ""numpy"":
            return sample_rate, data
        elif self.type == ""filepath"":
            output_file = str(Path(output_file_name).with_suffix(f"".{self.format}""))
            processing_utils.audio_to_file(
                sample_rate, data, output_file, format=self.format
            )
            return output_file
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(self.type)
                + "". Please choose from: 'numpy', 'filepath'.""
            )

    def postprocess(
        self, value: str | Path | bytes | tuple[int, np.ndarray] | None
    ) -> FileData | bytes | None:
        """"""
        Parameters:
            value: expects audio data in any of these formats: a `str` or `pathlib.Path` filepath or URL to an audio file, or a `bytes` object (recommended for streaming), or a `tuple` of (sample rate in Hz, audio data as numpy array). Note: if audio is supplied as a numpy array, the audio will be normalized by its peak value to avoid distortion or clipping in the resulting audio.
        Returns:
            FileData object, bytes, or None.
        """"""
        orig_name = None
        if value is None:
            return None
        if isinstance(value, bytes):
            if self.streaming:
                return value
            file_path = processing_utils.save_bytes_to_cache(
                value, ""audio"", cache_dir=self.GRADIO_CACHE
            )
            orig_name = Path(file_path).name
        elif isinstance(value, tuple):
            sample_rate, data = value
            file_path = processing_utils.save_audio_to_cache(
                data, sample_rate, format=self.format, cache_dir=self.GRADIO_CACHE
            )
            orig_name = Path(file_path).name
        else:
            if not isinstance(value, (str, Path)):
                raise ValueError(f""Cannot process {value} as Audio"")
            file_path = str(value)
            orig_name = Path(file_path).name if Path(file_path).exists() else None
        return FileData(path=file_path, orig_name=orig_name)

    def stream_output(
        self, value, output_id: str, first_chunk: bool
    ) -> tuple[bytes | None, Any]:
        output_file = {
            ""path"": output_id,
            ""is_stream"": True,
        }
        if value is None:
            return None, output_file
        if isinstance(value, bytes):
            return value, output_file
        if client_utils.is_http_url_like(value[""path""]):
            response = httpx.get(value[""path""])
            binary_data = response.content
        else:
            output_file[""orig_name""] = value[""orig_name""]
            file_path = value[""path""]
            is_wav = file_path.endswith("".wav"")
            with open(file_path, ""rb"") as f:
                binary_data = f.read()
            if is_wav:
                # strip length information from first chunk header, remove headers entirely from subsequent chunks
                if first_chunk:
                    binary_data = (
                        binary_data[:4] + b""\xFF\xFF\xFF\xFF"" + binary_data[8:]
                    )
                    binary_data = (
                        binary_data[:40] + b""\xFF\xFF\xFF\xFF"" + binary_data[44:]
                    )
                else:
                    binary_data = binary_data[44:]
        return binary_data, output_file

    def process_example(
        self, value: tuple[int, np.ndarray] | str | Path | bytes | None
    ) -> str:
        if value is None:
            return """"
        elif isinstance(value, (str, Path)):
            return Path(value).name
        return ""(audio)""

    def check_streamable(self):
        if (
            self.sources is not None
            and ""microphone"" not in self.sources
            and self.streaming
        ):
            raise ValueError(
                ""Audio streaming only available if source includes 'microphone'.""
            )
","The code defines a `gr.Audio` component that can be used to upload/record audio as an input or display audio as an output. It includes options for customizing the appearance and behavior of the audio component, such as setting the source (upload or microphone), type (numpy or filepath), label, format, autoplay, waveform display options, and more. The component supports streaming audio and provides methods for preprocessing, postprocessing, and streaming output of audio data.","[-0.04623642, 0.013665588, 0.02151327, -0.011523701, 0.0048502213, -0.04040671, 0.030234227, -0.03259443, -0.021230046, 0.0036435665, 0.01738291, -0.022339342, -0.041964445, 0.013948812, -0.0160966, -0.0184096, -0.045315936, 0.021820096, 0.020085346, 0.0016373923, 0.013795399, -0.039391823, -0.030116217, 0.032830454, 0.031839166, -0.084023304, -0.046779264, 0.064244784, -0.036913607, 0.019070458, -0.075290546, -0.03830613, -0.014326445, 0.012969327, -0.00782408, -0.06433919, 0.01897605, -0.020344967, 0.015294129, -0.040099885, -0.00989516, -0.021879101, -0.022657968, 0.019837525, -0.018669222, 0.0011557629, -0.03696081, 0.0152705265, 0.008803565, 0.03672479, -0.08765802, 0.0073284367, -0.020616392, -0.030895084, -0.033113677, 0.06957885, -0.05272698, 0.019695912, 0.0010687304, -0.057211373, 0.026599512, 0.022457352, -0.022362944, 0.0135711795, 0.0035698102, -0.057730615, -0.023495842, 0.0115119, -0.03431738, 0.0036435665, 0.034789424, -0.033562116, -0.023755465, -0.04165762, -0.025749838, -0.011075262, -0.03346771, -0.016202807, 0.03242922, -0.0080483, -0.031791963, 0.006272245, -0.0748185, -0.008821267, 0.005192451, 0.02393248, -0.048997857, 0.018881641, -0.011169671, -0.046755664, -0.0403123, 0.0016816461, -0.001541509, 0.06009082, -0.024262909, 0.038825374, -0.023236219, -0.017536324, 0.027992032, 0.041161977, 0.022303939, -0.015388537, -0.036323555, -0.06660499, 0.040807948, -0.063159086, 0.0059683686, 0.01830339, -0.023554847, 0.002461989, 0.028558481, -0.015069909, -0.007316636, 0.03542668, -0.012780511, -0.036087535, 0.013087337, -0.0062427423, -0.031791963, -0.055512022, -0.06009082, 0.032264005, -0.021961708, -0.05499278, 0.06500005, -0.020451177, -0.00896878, -0.035072647, -0.049658716, -0.014173032, 0.008095504, 0.0015238074, 0.025490215, -0.059429966, -0.0218555, 0.021725688, -0.04109117, -0.01392521, -0.022941194, 0.004118558, 0.05065, -0.04477309, -0.0071632224, -0.018928844, -0.016474232, 0.011063461, -0.036771994, 0.005685144, -0.033963352, -0.020970423, 0.03165035, 0.03325529, -0.057116963, 0.010190185, -0.01000727, 0.022469152, 0.005280959, 0.0042601703, -0.024050489, -0.039887466, 0.03835333, 0.044702284, 0.049894735, 0.022988398, 0.010083976, -2.9617808e-05, 0.007700169, 0.0039031892, -0.028369665, 0.05442633, -0.024640542, 0.00025833183, -0.06042125, 0.00598017, 0.019070458, -0.06032684, 0.030257829, -0.053859882, -0.043286163, -0.028888911, 0.002600651, -0.009901061, -0.021985311, 0.00031106765, -0.03061186, 0.009788951, -0.02013255, -0.03415217, -0.03639436, 0.011417492, 0.01897605, 0.00736384, -0.014432654, 0.035308667, 0.04800657, -0.005570084, 0.033892546, -0.028251655, 0.00066712673, -0.04533954, 0.040784344, 0.019601503, -0.0052750586, 0.004121508, -0.020392172, -0.007493651, 0.03443539, 0.006608574, 0.00875046, 0.009470323, 0.026882736, -0.05088602, 0.029714983, -0.011470597, -0.08647791, -0.012874919, -0.038943384, 0.041917242, -0.012019345, -0.015364936, -0.042058855, 0.0056320396, -0.015907783, -0.011983941, 0.009027785, -0.012579893, 0.01934188, -0.0024841158, 0.06415038, -0.04106757, 0.032948464, -0.008803565, -0.007499552, -0.004741062, 0.04281412, -0.059949208, 0.013476771, -0.023495842, 0.03934462, 0.011559105, -0.039840262, -0.029030522, 0.030234227, 0.031791963, 0.03016342, 0.053529453, -0.011246378, -0.032382015, 0.017087884, 0.055370413, -0.014668675, 0.0059919707, 0.013913409, 0.01185413, -0.0032659338, -0.028346064, 0.002771766, 0.03441179, -0.0013696565, -0.013736393, 0.019389085, -0.07373281, -0.036205545, 0.02244555, 0.015069909, 0.0052839094, 0.0014308743, 0.023897076, 0.020923218, -0.009877458, -0.053199023, -0.0071986257, 0.05626729, 0.024380919, 0.031555943, 0.028251655, 0.05824986, 0.03292486, 0.027803216, 0.03866016, -0.022115123, 0.0011579756, -0.008956978, 0.037904892, -0.010668127, -0.016143803, 0.022823183, -0.021678483, 0.011747921, -0.059193943, 0.021985311, 0.019766718, 0.018940646, -0.02912493, 0.008307922, -0.01334696, 0.065283276, -0.01990833, 0.026599512, -0.01702888, 0.003900239, 0.038636558, -0.031390727, -0.019082258, -0.024310112, 0.031367127, -0.0097594485, 0.0230238, 0.015825175, -0.0046732062, 0.06254543, 0.022657968, -0.0038618855, -0.002234819, -0.045599163, 0.03639436, 0.05065, -0.020580988, -0.02232754, -0.00851444, -0.023838071, 0.0010731558, 0.030588258, -0.056361698, -0.0011904284, -0.003198078, -0.046566848, -0.01404322, -0.031909972, -0.071372606, 0.020049943, -0.0031597246, -0.03429378, 0.007865383, 0.036087535, 0.026410695, 0.0019250422, 0.023649255, -0.075809784, -0.005732348, -0.035025444, -0.027142359, -0.018610217, 0.031390727, 0.008543942, 0.041256387, -0.022292137, 0.017984763, -0.028039237, -0.038376935, 0.01462147, -0.037078824, 0.001497255, -0.031886373, 0.037126027, -0.05329343, -0.03946263, -0.05650331, -0.07278872, -0.02370826, -0.050555594, 0.048384205, -0.002314476, -0.004962331, -0.018090973, -0.025938654, -0.034506198, -0.024192102, -0.03431738, -0.013889807, 0.037480056, 0.011382089, 0.006077528, -0.039415427, -0.03271244, 0.016521435, 0.023153612, -0.03639436, -0.049564306, -0.021831898, 0.011860031, -0.0063902554, 0.0074169445, -0.021017626, -0.011376188, 0.003602263, 0.0047823656, 0.04937549, 0.014055021, 0.002656706, -0.00293403, -0.02657591, 0.0014153855, 0.008361027, 0.03405776, 0.006166036, 0.03521426, 0.02359025, 0.049894735, 0.0038471343, -0.024758551, -7.873496e-05, -0.027992032, 0.041445203, -0.0005863634, -0.03464781, 0.048620224, 0.057447392, 0.013016531, -0.017406512, 0.011128367, -0.0038736865, 0.03431738, -0.03325529, 0.031390727, -0.011535502, 0.01738291, -0.038046505, 0.023967883, 0.041279987, 0.02669392, -0.0034813024, 0.0044371854, -0.021654882, 0.025867848, 0.037763283, 0.00885667, -0.03360932, 0.065991335, -0.015825175, -0.04236568, -0.006431559, 0.0099128615, -0.0049534803, -0.001334991, -0.040477518, -0.046094805, -0.0022598964, 0.036984414, 0.024156699, -0.05065, 0.02841687, -0.008378728, 0.01254449, -0.031461533, 0.021489667, -0.01819718, 0.019990938, -0.021761091, -0.014196633, -0.009989568, -0.027095154, -0.037904892, 0.0120252445, 0.077084295, -0.03280685, 0.013382363, 0.008915675, -0.009181198, -0.01541214, 0.011506, 0.0016182156, -0.009057287, 0.051971715, -0.03037584, -0.00448734, 0.019601503, 0.010408505, -0.03476582, 0.0018616117, 0.021619478, 0.023495842, 0.036630385, 0.018031968, -0.029951002, 0.002115334, 0.015683563, -0.005502228, -0.03094229, -0.029738585, -0.024262909, 0.029101329, -0.032523625, -0.008343325, -0.013866205, 0.0656137, -0.023330627, -0.039179403, 0.012509087, -0.04673206, -0.028936114, -0.013394164, 0.0024133096, -0.010184285, 0.01772514, 0.027472787, -0.07500732, 0.058533087, -0.019058656, -0.03247642, 0.0025254195, -0.0052278545, 0.018740028, 0.04052472, 0.014597869, -0.0036730692, 0.034695014, -0.020179754, 0.025702633, 0.019743117, -0.0030195874, -0.0024649391, 0.0009816978, 0.013287955, -0.009074989, -0.028322462, -0.0060480256, 0.03497824, -0.016981676, -0.0027319374, -0.031272717, 0.019282876, -0.02624548, -0.0149637, -0.023224419, 0.011092964, -0.0144444555, -0.039651446, 0.00793619, -0.037338443, -0.0063489517, -0.020038141, -0.01449166, -0.021619478, -0.055653635, -0.01771334, -0.0019117661, -0.02118284, 0.0060244235, -0.0034783522, 0.007818179, 0.009151695, -0.025372205, -0.031721156, 0.0014979927, 0.037810486, -0.0028573233, -0.061365332, -0.007269432, 6.338442e-05, 0.013205348, -0.03991107, 0.043002937, -0.019259274, -0.008077802, 0.017194094, 0.0053311135, 0.027543593, -0.039061394, -0.004652554, 0.027756011, -0.006986207, 0.002223018, 0.009269706, -0.0053340634, -0.012827715, -0.01944809, -0.030541053, 0.008886172, 0.02440452, 0.009777149, -0.0020519034, -0.028157247, 0.011688916, -0.038140915, 0.012037046, 0.02325982, -0.013287955, -0.005764801, 0.0160966, 0.01772514, -0.02209152, 0.01968411, -0.01934188, -0.017076084, -0.0050921426, 0.0026552307, 0.017925758, 0.004038901, -0.00021389358, 0.014763083, 0.006502365, 0.004431285, 0.027260369, -0.0005019124, 0.026434297, -0.009269706, 0.004764664, -0.007682468, 0.014739481, 0.020392172, 0.008307922, 0.005593686, 0.046212815, 0.0072104265, 0.0009123668, 0.012992929, 0.009334611, -0.012054748, 0.014881093, -0.021430662, 0.0344826, -0.059052333, -0.035591893, 0.005534681, -0.011441094, -0.022681572, 0.048714634, 0.04175203, -0.0051275454, 0.004404733, 0.0096060345, 0.044489864, -0.015176118, -0.033750933, 0.03061186, 0.005673343, 0.016769256, 0.007517253, 0.04118558, 0.0077355723, 0.026646715, 0.060374048, 0.0021595876, -0.0030446646, -0.041138373, -0.005696945, -0.024664143, 0.008543942, -0.024522532, 0.0048384205, 0.03622915, 0.01658044, 0.03818812, 0.022457352, -0.011895434, -0.026599512, 0.0026950592, 0.050838817, -0.009429019, -0.033208087, 0.0003715479, 0.0065731714, -0.0040448015, -0.012042946, -0.040170692, -0.021843698, 0.0076352633, -0.0019397936, 0.0056556417, -0.015636358, -0.011240477, 0.0051363963, 0.003693721, -0.007658866, 0.012780511, -0.009464422, -0.020097146, -0.020179754, 0.028015634, -0.05579525, -0.014326445, 0.020191554, 0.028369665, 0.021678483, -0.039155804, 0.020970423, -0.032004382, 0.031508736, 0.04203525, -0.013146343, -0.018020166, -0.026269082, -0.023224419, -0.0026862083, -0.038258925, 0.005558283, 0.0059536174, 0.0035019543, -0.049045064, -0.010432106, -0.0058503584, -0.013169944, 0.011122466, 0.014019619, 0.03738565, -0.0077178706, -0.010833342, 0.04980033, -0.024711348, 0.022150524, -0.0022849736, 0.027944827, -0.013453169, -0.021253647, 0.018787233, 0.0061424337, 0.011482398, 0.001991423, -0.011429293, 0.016722053, 0.013653787, -0.008361027, 0.0058326568, -0.0032305308, -0.009576532, 0.030305034, -0.004649604, -0.0007025298, -0.00782408, -0.015730767, 0.022056116, -0.040005475, -0.017630732, 0.007275332, -0.04035951, 0.0055730343, 0.0020887814, -0.015459344, -0.006042125, -0.029030522, 0.003726174, 0.02702435, -0.001202967, -0.013913409, 0.04349858, -0.0054048696, -0.008101404, 0.030116217, -0.015176118, -0.0062899464, 0.05858029, 0.005605487, 0.0026729323, -0.0018055569, -0.016403425, -0.009045486, 0.010054474, -0.020651795, 0.0036435665, -0.0036317655, 0.007452348, -0.020769805, -0.006626276, -0.011913136, 0.0022643218, -0.030257829, -0.0038972886, -0.03372733, -0.0070157098, -0.0064374595, 0.04316815, -0.009906961, 0.0033072373, -0.021194642, -0.04694448, 0.029195737, -0.021843698, 0.02232754, 0.02865289, -0.018940646, -0.013984215, -0.007228128, -0.021772891, 0.033278894, -0.033066474, -0.008951078, -0.010485211, 0.025112582, -0.023625653, 0.008732758, 0.001169039, 0.033750933, -0.024074093, 0.026717521, 0.028440472, -0.024923766, 0.011175571, -0.026292685, -0.03835333, -0.002898627, -0.0050154356, 0.017111488, -0.02173749, 0.034671415, 0.022917591, 0.004342777, -0.028676491, 0.021324454, -0.004446036, -0.017040681, -0.008083702, -0.021359855, 0.020852411, 0.0070688142, 0.010402604, -0.016710252, -0.040878754, -0.02048658, 0.0121786585, -0.021442464, 0.029408155, -0.025513817, 0.028346064, 0.02209152, 0.02163128, 0.022268536, 0.047699746, 0.0066380766, -0.002727512, 0.021218244, 0.028747298, -0.014432654, 0.009511626, 0.01863382, 0.030777074, 0.021230046, 0.02773241, 0.048714634, 0.030210625, 0.025490215, -0.003625865, -0.020427575, 0.0402651, 0.003590462, 0.0020445276, -0.020864213, -0.0016595192, -0.013110939, -0.03832973, 0.013759996, 0.027874023, 0.003968095, 0.008555744, 0.06396156, 0.005543532, 0.0054579745, -0.024333715, -0.010054474, -0.0041333092, 0.025301399, 0.012414679, -0.02898332, -0.04694448, 0.023189016, -0.008260718, 0.017807748, 0.038376935, -0.00161084, 0.06179017, -0.023684658, 0.00184096, -0.026434297, 0.03242922, 0.015211522, -0.047227703, -0.019306477, -0.011653513, 0.010455709, -0.016072996, -0.004006448, 0.023802668, -0.011700717, 0.014314644, 0.028487675, 0.01554195, 0.00333674, -0.00034204536, -0.041114774, -0.006053926, -0.009375915, 0.0070039085, 0.032830454, 0.012355674, -0.0071219187, -0.014538864, 0.0144444555, 0.012296668, -0.016604044, 0.025277797, -0.040477518, -0.013488572, 0.012402878, 0.013394164, 0.029313747, 0.061459742, -0.01656864, 0.04913947, 0.013441368, 0.00033854193, -0.0014596393, -0.0036081634, -0.029195737, -0.0015813374, -0.01518792, 0.010101678, -0.017925758, 0.036630385, -0.01658044, -0.017961161, -0.00178343, -0.014763083, 0.0017096736, 0.032877658, 0.013665588, -0.008679654, 0.013193547, 0.008815366, 0.0028233954, -0.022964796, -0.032004382, 0.009387716, 0.0005096568, -0.008921576, -0.018622018, 0.018586615, -0.004755813, 0.028582083, 0.0043309764, -0.024156699, 0.023224419, 0.006396156, 0.03693721, -0.056880943, 0.015589154, -0.044301048, -0.02243375, -0.009440821, -0.029974604, -0.004097906, -0.025820645, -0.028322462, 0.006248643, -0.0105855195, 0.040217895, -0.011210974, 0.029785788, -0.0050065853, -0.025820645, 0.010880546, -0.019601503, -0.009989568, 0.059288353, -0.0061188317, 0.0016875466, -0.014220236, 0.015707165, -0.014090424, 0.021678483, 0.02209152, -0.02841687, -0.025797041, -0.0071219187, -0.014527062, 0.0055494322, -0.0035963624, 0.0101724835, -0.027236767, 0.045079917, 0.009263805, 0.02256356, 0.02440452, 0.01070353, 0.016072996, -0.032783248, -0.020722602, -0.00195602, -0.03500184, 0.027519992, 0.016037595, 0.01793756, 0.046897274, 0.027472787, -0.010803839, -0.037881292, -0.027071552, 0.016722053, -0.013382363, 0.0437346, 0.02278778, -0.05858029, -0.0402415, -0.011753822, 0.011293582, 0.0055081286, -0.010945451, -0.0028115944, 0.0049416795, 0.027519992, 0.022244932, -0.006260444, -0.0029532067, 0.005885761, -0.03578071, -0.011476497, -0.0061129313, 0.03634716, -0.0012892621, -0.02600946, -0.0032895359, -0.006939003, -0.010461609, 0.036984414, -0.012568092, 0.009511626, -0.030305034, -0.014527062, 0.0017096736, 0.014019619, -0.044489864, -0.0019029153, 0.0008858145, 0.016934471, -0.0063253497, -0.012922123, -0.0015503598, 0.02370826, 0.027260369, 0.013512175, -0.00094629475, -0.007546756, 0.028841706, -0.023991484, -0.019436289, -0.041728426, 0.0448911, 0.030706268, 0.0025785242, 0.021123836, -0.02473495, -0.027071552, 0.020982223, 0.013335159, 0.04014709, 0.0030446646, 0.011523701, -0.012945725, -0.008998282, -0.012402878, 0.0598076, -0.006018523, 0.01771334, 0.003015162, 0.005862159, -0.00437523, -0.03082428, -0.014916496, -0.037550863, 0.014279241, 0.022646168, -0.02311821, 0.044230245, 0.028346064, -0.063583925, -0.020026341, -0.034600608, 0.023684658, 0.0004373755, -0.005130496, 0.0054697753, -0.0030564656, 0.0134649705, -0.013960613, -0.0021654882, -0.05891072, -0.013736393, 0.0004189364, -0.019625105, 0.041917242, -0.03726764, -0.03889618, -0.0075762584, -0.04566997, -0.009187099, 0.010910048, 0.029644176, 0.01450346, 0.004136259, 0.077273116, -0.022716975, -0.018149978, 0.034671415, 0.015754368, -0.015235124, 0.010833342, 0.026292685, 0.0026994846, 0.019188467, -0.009175297, -0.007900787, 0.043805405, 0.012615296, -0.018102773, -0.04441906, -0.010455709, -0.010237389, 0.026410695, -0.029478962, 0.008661953, -0.014774884, -1.2803652e-05, 0.038376935, -0.027779615, -0.02933735, -0.010980854, 0.007517253, 0.014940098, 0.019967334, 0.0043693297, 0.0070983167, 0.038022906, 0.015152517, -0.03443539, -0.010550117, -0.013405965, -0.011594508, 0.012721505, 0.0050803414, 0.004248369, 0.03599313, 0.0050862418, 0.003003361, -0.0113053825, -0.015176118, -0.008260718, 0.009617836, 0.02681193, -0.03785769, 0.0013195021, 0.0096060345, 0.016167404, -0.04052472, 0.008225314, 0.0003990222, -0.04002908, 0.009635537, -0.01426744, 0.033444107, 0.027708808, 0.032547228, -0.0172767, 0.042884927, 0.016946273, 0.005732348, 0.05513439, 0.0057293978, 0.017925758, 0.0025386957, 0.019294677, 0.0068209926, -0.026788328, -0.017843151, -0.028015634, -0.01783135, -0.00051850756, 0.003074167, -0.024144897, -0.00027382068, 0.008874371, 0.024640542, 0.010125279, -0.011222775, -0.02173749, 0.0009167922, 0.01680466, 0.010561918, -0.020321365, -0.0021241845, 0.0161084, 0.042979334, -0.00178343, -0.05796664, 0.025348602, 0.011842329, -0.008077802, 0.018822636, -0.0049062762, -0.0030564656, 0.00724583, 0.0391322, -0.010107579, 0.0009285932, -0.009452621, 0.027756011, 0.002644905, -0.0017524523, -0.038211722, 0.036087535, 0.008425932, 0.0014743906, -0.0028927263, 0.007753274, -0.0043693297, 0.017477319, -0.0030918687, -0.041799232, -0.00863835, -0.0060480256, 0.01934188, 0.023637455, 0.02220953, -0.00955883, -0.011989842, -0.012485485, -0.008520341, 0.015589154, -0.0029414056, 0.020781606, 0.027519992, 0.016899068, -0.0127451075, -0.016875466, 0.0103554, 0.009765348, -0.032051586, 0.028440472, 0.050461184, -0.04812458, -0.01541214, -0.0015046308, 0.00793619, -0.043522183, 0.043215357, -0.0053340634, 0.016379824, -0.030588258, 0.0020165003, 0.0051599983, 0.013759996, 0.029549768, 0.028062839, 0.012603495, 0.024074093, 0.009381815, 0.016132003, 0.04269611, 0.014715879, 0.011565005, -0.020061743, -0.004463738, 0.026316287, 0.01220226, 0.0020504282, 0.002338078, 0.0066911816, 0.015718967, 0.0065908725, -0.020179754, -0.0030771175, -0.050791614, -0.026646715, 0.033302493, -0.01622641, -0.03891978, 0.023200816, -0.02841687, -0.03627635, 0.036417965, -0.021666683, 0.014420853, -0.02577344, -0.0030181122, 0.029478962, 0.04165762, -0.022764178, 0.04269611, -0.011895434, 0.01462147, 0.025584623, -0.0097063435, -0.032901257, -0.028747298, 0.02636349, 0.014102225, -0.033845343, -0.024097694, 0.007493651, -0.014149429, 0.00621324, 0.015034506, 0.008597047, 0.026977144, 0.018881641, -0.009824353, 0.014751282, 0.009493925, -0.012131454, -0.008998282, -0.008378728, -0.007411044, 0.0033544416, -0.005502228, 0.01634442, 0.011641712, -0.012933924, -0.022728775, 0.0058031543, 0.030352237, -0.025112582, -0.012674301, -0.005773652, -0.0088330675, 0.0097594485, -0.016143803, -0.0066911816, 0.008089603, -0.005074441, -0.02336603, -0.01541214, -0.025348602, 0.013417766, 0.031815566, -0.021890903, 0.0028351964, 0.030187024, -0.0100190705, -0.006171936, -0.01898785, -0.0069095003, 0.02060459, -0.0017524523, 0.015742568, -0.00043626915, 0.0068622963, -0.006189638, -0.0062899464, 0.008107305, 0.014302843, -0.0051836004, 0.016556839, -0.018031968, 0.015364936, 0.003313138, 0.03809371, 0.010969053, 0.006083429, 0.00839643, -0.009216601, 0.003416397, 0.014420853, -0.0056998953, 0.03922661, -0.034246575, 0.008201713, 0.015341333, -0.019141264, 0.02207972, 0.027874023, -0.036771994, 0.027000746, -0.01242648, 0.0047351616, 0.028865308, 0.016722053, -0.0046555046, -0.004109707, 0.0051629487, 0.030588258, 0.027425583, 0.0072812326, -0.027378378, -0.0028720745, 0.011334885, -0.004741062, -0.00018577396, 0.006490564, -0.024711348, -0.0050065853, -0.018256186, -0.012391076, 0.012922123, 0.0027525893, 0.024192102, -0.023354229, -0.030139819, 0.003348541, -0.022280335, 0.004749913, -0.009576532, -0.013771797, -0.028629288, 0.04246009, 0.02370826, 0.027590798, -0.008667854, 0.02266977, 0.0011041334, 0.023389632, 0.005419621, 0.02038037, -0.0067737885, -0.005927065, -0.015683563, 0.029644176, 0.0012014919, 0.050838817, -0.020840611, -0.02381447, -0.005387168, -0.01254449, -0.0066675795, 0.0022023665, 0.023436837, -0.0012796737, 0.0001254781, 0.007293034, 0.01288672, 0.0172413, 0.0028396219, -0.04411223, -0.0010628299, -0.0069213016, 0.028393267, 0.030116217, -0.018928844, -0.007977493, -0.013594781, 0.02716596, -0.021820096, -0.026434297, 0.029195737, -0.003773378, 0.00989516, 0.039533436, 0.018102773, -0.006431559, 0.022716975, -0.0011904284, -0.0068032914, 0.007794577, -0.004089055, 0.013712792, 0.009033685, -0.037904892, 0.028747298, 0.02600946, -0.0230238, 0.017052481, 0.0036996214, -0.020108948, -0.012450082, 0.02600946, 0.02900692, -0.041374397, 0.0003322726, -0.021772891, -0.006649878, 0.028275257, -0.010296395, -0.018928844, -0.016285416, 0.0046437033, -0.00086221244, -0.028794503, -0.02681193, 0.0073343376, -0.008231215, -0.01680466, 0.006083429, -0.027543593, -0.002103533, 0.019743117, -0.032759648, -0.0230238, -0.016285416, 0.030116217, -0.009458522, 0.0218555, 0.026457898, 0.032830454, -0.017312104, 0.006466962, 0.021666683, -0.047581736, -0.0034252477, 0.0074051437, 0.010078075, 0.013075536, -0.012509087, -0.009694543, 0.015742568, 0.02336603, 0.026481502, -0.0011417492, -6.3891486e-05, -0.0071750237, -0.017182292, -0.04019429, 0.024262909, -0.011594508, 0.010514714, 0.013783597, 0.009010083, -0.010550117, -0.010125279, -0.04187004, -0.01208425, -0.013240751, -0.0010429156, -0.0041067568, 0.031839166, -0.031272717, -0.008207614, -0.008827167, -0.0063902554, 0.022457352, -0.009771249, -0.020628193, 0.009493925, 0.04210606, -0.01806737, 0.0070511126, -0.04208246, -0.07066454, 0.010361301, -0.008644251, 0.012261266, -0.024593337, 0.021017626, -0.028228054, 0.010502913, 0.010107579, 0.0062427423, -0.0184096, -0.007641164, -0.0007700169]"
../../../gradio,../../../gradio/gradio/components,download_button.pyi,"""""""gr.UploadButton() component.""""""

from __future__ import annotations

import tempfile
from pathlib import Path
from typing import Callable, Literal

from gradio_client import file
from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.data_classes import FileData
from gradio.events import Events

from gradio.events import Dependency

@document()
class DownloadButton(Component):
    """"""
    Creates a button, that when clicked, allows a user to download a single file of arbitrary type.

    Demos: upload_and_download
    """"""

    EVENTS = [Events.click]

    def __init__(
        self,
        label: str = ""Download"",
        value: str | Path | Callable | None = None,
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        visible: bool = True,
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        scale: int | None = None,
        min_width: int | None = None,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            label: Text to display on the button. Defaults to ""Download"".
            value: A str or pathlib.Path filepath or URL to download, or a Callable that returns a str or pathlib.Path filepath or URL to download.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            visible: If False, component will be hidden.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If False, the UploadButton will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.data_model = FileData
        self.size = size
        self.label = label
        self.variant = variant
        super().__init__(
            label=label,
            every=every,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
        )
        self.icon = self.serve_static_file(icon)

    def preprocess(self, payload: FileData | None) -> str | None:
        """"""
        Parameters:
            payload: File information as a FileData object,
        Returns:
            (Rarely used) passes the file as a `str` into the function.
        """"""
        if payload is None:
            return None
        file_name = payload.path
        file = tempfile.NamedTemporaryFile(delete=False, dir=self.GRADIO_CACHE)
        file.name = file_name
        return file_name

    def postprocess(self, value: str | Path | None) -> FileData | None:
        """"""
        Parameters:
            value: Expects a `str` or `pathlib.Path` filepath
        Returns:
            File information as a FileData object
        """"""
        if value is None:
            return None
        return FileData(path=str(value))

    def example_payload(self) -> dict:
        return file(
            ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
        )

    def example_value(self) -> str:
        return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""

    @property
    def skip_api(self):
        return False

    
    def click(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `DownloadButton` component that creates a button allowing users to download a single file of any type. The button can have customizable properties such as label, size, icon, visibility, and interactivity. The component can be rendered with different styles and can be linked to a file or URL for download. It includes methods for preprocessing and postprocessing file data, as well as defining example payload and value. Additionally, it provides a method for handling click events with various parameters for customization.","[-0.014018292, -0.0069819577, -0.010940575, 0.04304453, 0.018890437, -0.0641209, 0.02420847, 0.02204428, -0.001358056, 0.01967346, 0.027123056, -0.0029200243, -0.011886728, -0.014040043, 0.006666573, 0.030820666, 0.030146396, -0.0027868017, 0.042805273, 0.01667187, -0.021772398, -0.029167617, 0.028123586, 0.02618778, -0.0033006605, 0.00706896, -0.003243565, 0.021902902, 0.00023891726, 0.042239755, -0.041674238, -0.033865757, 0.0016747998, 0.03423552, -0.016835, 0.003616045, -0.010108613, 0.017183011, 0.0036377956, -0.036780342, -0.053071577, -0.027840829, -0.021772398, 0.054333117, -0.025687514, 0.021130754, -0.010978639, 0.007726917, 0.014388053, 0.03025515, -0.07099411, 0.034453023, -0.0043936307, -0.00865132, -0.019923592, 0.0134419, -0.05102702, 0.03236496, -0.010886199, -0.07112461, 0.004760673, 0.004015713, -0.054420117, 0.026709795, -0.009874794, 0.025970273, -0.047329407, 0.015236328, 0.009733414, 0.016128104, 0.08996067, 0.005399598, 0.012104235, -0.0021492357, 0.024121467, 0.008901452, -0.06190234, 0.009341903, 0.028341092, -0.019575583, 0.025470007, -0.008977579, -0.0023123657, -0.032756474, -0.026775045, -0.00823262, -0.015236328, 0.014855691, -0.029276371, -0.012223863, -0.045458853, 0.021054626, -0.018792558, 0.06903655, 0.025687514, 0.05411561, -0.040195197, 0.021587517, 0.01060344, 0.018944813, 0.04745991, -0.027514568, -0.0051820916, -0.0337135, 0.018977439, -0.041500233, 0.0302769, -0.010124926, 0.0114190895, -0.014224923, -0.039259918, 0.04069546, -0.0052255928, 0.06986307, 0.016835, -0.068166524, 0.05807423, -0.007949862, -0.0060521173, -0.040825963, -0.017857281, -0.026383534, 0.020108473, -0.018292293, 0.009689913, -0.026448786, -0.030081144, -0.025034994, -0.03297398, 0.0075311614, 0.016399987, 0.059640273, 0.020728366, -0.08508853, 0.0023748986, 0.034518275, -0.0019099787, 0.025970273, -0.033822257, 0.042892274, -0.026100775, -0.06868854, -0.0030287777, 0.0035807001, -0.0077704187, 0.008047739, -0.029559128, 4.8726546e-05, -0.100052975, -0.0068568913, 0.0025407474, -0.002565217, 0.02457823, 0.020282477, 0.0023150844, -0.050243992, 0.013257019, -0.009978109, -0.022707675, -0.019466829, -0.0060847434, -0.03266947, 0.020358605, 0.0058944253, -0.011658346, 0.007085273, 0.019064441, -0.004453445, -0.024382476, 0.022881681, 0.08665457, 0.02457823, -0.014910068, -0.030690163, -0.0037519867, -0.0014015572, -0.03895541, -0.030407405, 0.048503943, -0.0036867347, 0.029428625, -0.009271213, -0.008167367, -0.0605538, -0.013180892, -0.030146396, -0.013083014, -0.009222275, -0.027775576, 0.04439307, -0.033952758, 0.016497865, -0.030407405, -0.054724626, -0.01985834, 0.037454613, 0.011886728, 0.0113973385, 0.011658346, -0.0074441587, -0.058596242, 0.03266947, -0.0028248653, 0.007471347, -0.038041882, -0.0032734724, -0.014594684, -0.0074169706, -0.00091080833, 0.013061264, 0.002218566, 0.025731016, 0.022337914, 0.013202642, -0.025491757, -0.040804215, 0.027645072, 0.07029809, 0.011614845, 0.016617494, 0.020075846, 0.043892805, 0.031081675, -0.014616434, 0.025752766, -0.007101586, -0.042979278, -0.022033405, -0.010402246, 0.0019494017, -0.015714843, 0.0030668413, 0.008004238, -0.041500233, 0.025339503, -0.036388833, 0.027144806, -0.0039123977, -0.013452775, -0.0184663, -0.03192995, -0.041826494, -0.014594684, -0.01885781, 0.058030725, 0.010723068, -0.010249992, -0.018009536, 0.00655782, 0.0059270514, 0.0123652425, -0.00723209, 0.019260198, -0.028493347, -0.0013227112, -0.03836814, 0.027318813, 0.014681687, 0.050069988, 0.012506622, 0.01820529, -0.011941105, -0.038563896, 0.0808254, 0.0045730732, 0.049634974, 0.035388302, 0.045980867, -0.0060194912, 0.030233398, 0.01632386, 0.027014304, 0.051244523, 0.01713951, -0.015888847, 0.02555701, -0.0015769219, 0.024295472, 0.02390396, 0.018172665, -0.014453305, -0.012898133, -0.034257267, 0.043697048, -0.011516968, 0.004820487, 0.008471877, 0.0033577562, 0.001799866, -0.048590943, 0.04537185, -0.026492288, -0.028536849, -0.046894394, -0.00934734, 0.024643483, 0.034540027, -0.03936867, 0.018063912, -0.005290845, -0.018292293, -0.00054580526, -0.025731016, -0.018498925, 0.049634974, -0.03393101, -0.017868156, 0.015823595, 0.0136485305, -0.032451965, 0.031668942, 0.0037737372, 0.0008353608, 0.027884329, -0.035562307, -0.009564847, 0.03401801, 0.021772398, -0.021022, 0.011179833, 0.0069656447, 0.035605807, -0.0033876633, 0.015366832, -0.010886199, -8.018427e-07, -0.027427565, 0.023664704, -0.026144277, -0.019977968, -0.0059542395, 0.010793759, 0.03129918, 0.005203842, 0.018357545, -0.015801845, -0.0032190958, 0.023142688, -0.07612726, 0.047372907, -0.06085831, -0.018118288, 0.0117344735, 0.016911129, 0.021250382, 0.010315244, -0.023033936, 0.04480633, -0.020467358, 0.009505033, -0.001920854, -0.034888037, 0.009521346, 0.03486629, 0.043588296, -0.022381416, -0.03430077, -0.07869384, -0.044240814, -0.01616073, -0.015366832, 0.051331528, 0.0031565626, 0.0071070236, -0.08204344, -0.0054240674, -0.06459942, -0.032604218, 0.029037114, 0.017596273, 0.020586988, 0.072125144, -0.011690972, 0.05080951, -0.011147207, -0.021794148, 0.0063892524, -0.0014994352, 0.01048925, -0.024077965, 0.03625833, 0.063424885, -0.012495747, 0.003667703, -0.009205962, -0.00890689, 0.019956218, 0.001453215, -0.004015713, -0.0037411111, 0.022598922, -0.0006786882, 0.029515628, -0.03134268, -0.0001095179, 0.07090711, -0.021446137, -0.024752235, 0.0028819607, 1.8957473e-05, -0.022174785, -0.034431275, 0.0050189616, 0.0074006575, 0.013061264, -0.019216696, 0.030146396, 0.037519865, 0.045545854, -0.043501295, 0.0034284457, 0.0030885919, 0.04134798, -0.024752235, 0.084262006, 0.03330024, -0.015725717, -0.012887258, 0.011690972, 0.05755221, -0.039607927, -0.01069588, -0.016900253, -0.009102645, 0.017694151, 0.057943724, 0.03321324, -0.00036840158, 0.02137001, -0.09657287, 0.014594684, -0.02690555, -0.0039341482, 0.02792783, -0.0081836805, -0.00013543176, -0.03708485, 0.012430495, 0.041478485, 0.05211455, -0.0505485, 0.027340563, 0.032712974, 0.039477423, -0.022946931, -0.02120688, 0.00197659, -0.0014504963, -0.042196255, -0.011288586, -0.06472992, 0.033408992, -0.06690499, 0.016900253, 0.016584868, -0.014986196, -0.0113973385, -0.039085913, 0.02251192, -0.049547974, 0.0021016563, -0.0057476084, 0.011147207, 0.0437188, -0.022207411, -0.019194946, -0.008096678, 0.012919884, -0.0019589176, -0.043827552, 0.0050379937, -0.011897604, -0.00039796886, 0.054289613, -0.035605807, 0.014877442, 0.0067590135, 0.03060316, -0.027014304, -0.0066556977, 0.0036133262, 0.019042691, -0.028689103, -0.024621733, -0.0021492357, 0.07538774, 0.020097598, -0.017879032, -0.016769748, -0.035605807, -0.038237635, -0.027797326, 0.03058141, -0.00648713, 0.00010620433, 0.003648671, -0.037150104, -0.010712193, -0.0040129945, -0.0094887195, 0.015508211, 0.014496806, -0.028319342, 0.035845067, -0.0043936307, -0.014366302, 0.0369326, -0.01665012, -0.012735004, 0.01309389, 0.0005475046, -0.021565767, 0.022946931, 0.0117344735, -0.009646412, -0.006079306, 0.014692562, 0.02486099, -0.012104235, 0.009450656, -0.05550765, 0.033583, -0.020423857, 0.014181422, -0.0020173725, 0.0420005, -0.01816179, -0.04480633, 0.016573993, 0.00059984205, 0.000783703, -0.047938425, -0.012658876, 0.007204902, -0.012125986, 0.005959677, -0.013322271, 0.0088253245, -0.007792169, -0.010494687, -0.010184741, -0.01936895, -0.002653579, -0.039455675, 0.0029009925, 0.018553302, -0.026144277, -0.07764981, 0.020228101, -0.0127023775, 0.025644012, 0.0025026838, 0.014833941, -0.017465768, -0.0091678975, 0.012648001, -0.018531552, 0.0021451574, -0.023816958, -0.033757005, 0.0035399178, -0.012539248, 0.012832882, 0.03867265, 0.029124117, -0.0025570604, 0.010516438, 0.009428905, 0.00048191278, 0.0008727447, -0.043653548, 0.0038389892, 0.010657817, 0.02137001, -0.00015327409, 0.016291235, 0.008412062, -0.033474244, -0.0387379, 0.014061793, 0.018172665, -0.0064490666, -0.011788851, -0.016149854, -0.014877442, 0.03321324, 0.055681657, -0.04339254, -0.0026780483, 0.049634974, -0.037411112, -0.011364713, 0.010054236, 0.030429155, -0.007955299, 0.015986726, -0.009461531, -0.010587127, -0.036802094, -0.01162572, -0.02962438, -0.0066556977, 0.012256489, 0.005274532, 0.035301298, -0.014605559, 0.008009676, -0.012637125, -0.063685894, 0.023490699, -0.020597862, 0.027971331, 0.0049265213, -0.03708485, 0.017052507, 0.01002161, -0.016889377, 0.0066991993, 0.0021152503, 0.02318619, -0.010538189, 0.006285937, 0.015573463, -0.029015362, 0.034061514, 0.024230221, 0.0016353767, -0.037215356, 0.010249992, 0.034801036, 0.01569309, 0.025056746, 0.03604082, -0.019053567, -0.014823066, -0.026035525, 0.028645601, -0.013485401, -0.0009611067, -0.037150104, -0.0033196926, 0.031407934, -0.01867293, 0.0070363344, 0.009282089, 0.035823315, -0.018607678, -0.023686454, 0.012071609, 0.011429965, 0.014388053, 0.020499984, 0.03293048, -0.0369326, -0.0044344133, 0.018357545, 0.016639244, 0.0060140537, -0.015181951, 0.04906946, -0.008450126, 0.05281057, -0.037215356, 0.017422268, -0.021989904, 0.05350659, 0.0005407075, 0.016965505, -0.015334206, 0.039542675, -0.044936836, 0.01967346, -0.004630169, 0.0404127, 0.004880301, -0.014409804, 0.022903431, -0.04967848, -0.009113521, 0.012071609, -0.030842418, 0.0061826212, -0.023468947, -0.016965505, 0.04443657, -0.05585566, 0.0054866006, 0.046285376, 0.0059053004, -0.034627028, 0.0033060983, -0.011549593, -6.5315663e-07, -0.016824124, -0.0046682325, 0.02960263, -0.012180362, 0.00085915055, 0.032560717, 0.00025081215, 0.0021519547, -0.0026087181, -0.012941635, 3.1797576e-05, 0.003085873, 0.0018297732, -0.021326508, -0.0019942624, 0.0025380286, -0.010075987, 0.038781404, -0.0057802345, -0.041260976, -0.012941635, -0.01750927, -0.011011265, -0.006508881, 0.041826494, 0.050026488, 0.006079306, 0.026535789, 0.004159811, -0.04806893, -0.02825409, 0.009352778, 0.0021030155, 0.007851983, 0.0053397836, -0.044893336, -0.021718021, -0.021761522, 0.0107774455, -0.0046056993, 0.0071287747, 0.010810072, 0.044980336, 0.023099186, 0.03997769, 0.017694151, -0.0009352778, -0.0046546385, 0.037737373, -0.01579097, 0.0038770528, 0.020249853, -0.045937367, 0.0012941635, -0.023120938, -0.0117671, -0.019260198, 0.0051032454, 0.0044289753, -0.04345779, 0.033017483, -0.017030757, -0.0077214795, -0.036475834, -0.042305008, -0.036171325, 0.003485541, 0.0053560967, 0.055377148, 0.010027048, 0.0024714172, 0.004290315, -0.04274002, 0.009923733, 0.023360195, -0.0011956058, 0.032560717, 0.0011262756, 0.015236328, -0.016258609, -0.041978747, 0.030820666, -0.01611723, -0.021217756, -0.014094419, 0.027993083, 0.008140179, -0.0047362032, 0.029820137, 0.027993083, -0.0058237356, 0.023773456, 0.0024591824, -0.030472657, 0.006106494, -0.046546385, -0.033169735, 0.018759932, 0.03334374, -0.010826385, 0.0032680347, 0.018825185, 0.014692562, 0.02827584, -0.0639904, -0.0319952, -0.0017849124, -0.0117453495, -0.026470536, -0.022772927, 0.025121996, 0.003295223, 0.017824655, -0.026318282, 0.0060358043, -0.020032346, 0.00581286, -0.030711913, 0.029972391, 0.009097208, 0.027036054, -0.015073198, -0.01713951, 0.003936867, 0.0061336826, -0.04911296, -0.05185354, 0.036019072, -0.0030342152, -0.027210059, 0.025665764, 0.022990433, -0.0029934328, 0.0034121326, 0.02165277, 0.004159811, 0.025470007, 0.038302887, 0.0016095479, 0.025731016, -0.0042875963, -0.023164438, 0.010326119, 0.0052473433, 0.018270543, 0.00088497944, -0.018248793, -0.0037166418, -0.034409523, -0.02318619, 0.004159811, 0.01869468, 0.020467358, -0.02453473, 0.043436043, -0.028341092, -0.009717101, -0.0026141559, -0.007938986, -0.022424916, -0.011027578, 0.041304477, -0.027993083, -0.00034631108, 0.00499993, -0.022316163, -0.013409274, -0.004129904, 0.02318619, -0.03767212, 0.035410054, 0.013387523, -0.060988814, -0.025448257, 0.024338974, 0.027014304, -0.013170017, 0.02116338, 0.015780095, 0.008384874, 0.0176724, 0.005638855, -0.022946931, 0.01562784, 0.028645601, 2.9800934e-05, 0.025622262, 0.030059393, -0.018401047, -0.0052772504, 0.016943755, 0.030407405, 0.010956888, 0.009787791, 0.0035181672, 0.0077106045, 0.007329968, -0.013420149, -0.009592035, 0.003036934, -0.023642953, -0.0012153174, 0.03264772, -0.013420149, 0.011680097, -0.036519337, -0.0126045, 0.014920943, -0.025818018, -0.0023966494, -0.016269485, -0.041543733, 0.0005019641, -0.0032897852, -0.031429686, -0.01665012, -0.037824374, 0.00012710535, 0.00086866645, 0.0123652425, 0.06185884, -0.005337065, 0.027036054, -0.027144806, 0.015910598, 0.020902371, -0.016432613, 0.021022, -0.030690163, -0.009608348, 0.014877442, 0.007982488, -0.003504573, 0.022337914, 0.0024455884, 0.030015893, -0.0029988703, -0.0049455534, 0.04263127, 0.04772092, -0.008781823, 0.0063892524, -0.07247315, -0.025644012, 0.0018256949, -0.036541086, 0.010608878, -0.009553972, -0.00015947642, 0.0031755944, -0.022261787, 0.039281666, -0.01660662, -0.0017115041, 0.018335795, -0.012854632, -0.03321324, 0.023947462, 0.0005478444, 0.037367612, -0.03828114, 7.969573e-05, 0.038455144, 0.037824374, -0.010815509, 0.0107556945, 0.025339503, -0.036562838, 0.016900253, -0.019901842, 0.0036622651, -0.0056823567, -0.045937367, 0.050505, -0.009586598, 0.04402331, 0.013311395, -0.019118818, 0.024752235, -0.014279299, 0.010668692, -0.019564707, 0.0020364043, 0.009853043, -0.00013967993, 0.015540837, -0.014105295, 0.00051317934, 0.062380854, 0.0048476756, 0.0074604717, 0.016225982, 0.0045377286, 0.014094419, -0.0035426365, -0.00031419488, 0.022881681, -0.0268838, 0.0047470788, 0.015867097, -0.02753632, 0.016008476, 0.0065958835, 0.004515978, -0.035040293, -0.0034909789, 0.009189649, -0.004339254, -0.0019276511, 0.00888514, -0.033800505, 0.031734195, -0.0018039442, 0.047981925, 0.00620981, 0.0049564284, -0.03699785, 0.02590502, 0.040847715, 0.04132623, -0.035301298, -0.009853043, -0.051636036, -0.045850363, 0.017433144, -0.025056746, -0.0024170405, -0.0076236017, -0.04606787, -0.0027011584, 0.022620672, 0.008145617, 0.03221271, 0.035388302, -0.020369481, 0.03197345, -0.005829173, 0.016911129, 0.01278938, -0.03258247, -0.039825436, 0.011114581, 0.021500515, 0.012539248, 0.012169487, 0.012484871, 0.02553526, -0.031429686, -0.020499984, 0.0012261927, 0.023773456, -0.034714032, -0.027710324, -0.00025641973, -0.009189649, -0.007938986, 0.009787791, 0.0051222774, 0.016943755, 0.005888988, 0.0053696907, -0.019890966, 0.0009835371, 0.002313725, -0.011593095, 0.01411617, 0.017889908, -0.05085301, 0.004643763, 0.04811243, -0.011756225, -0.005244625, -0.018846935, 0.021326508, -0.015214577, 0.02620953, 0.017955158, -0.0017291764, -0.0018433674, 0.024621733, 0.027014304, -0.041565485, -0.014018292, 0.016704496, -0.014833941, 0.05324558, -0.0022770208, -0.006166308, -0.022664174, 0.0047824234, 0.013518027, -0.006960207, 0.0036622651, -0.017726777, 0.01058169, 0.03662809, -0.0066991993, -0.022642422, 0.010315244, -0.009108083, 0.03573631, -0.02655754, 0.0023545076, 0.0027868017, -0.0031891887, 0.0159976, -0.01914057, 0.011854103, 0.014551182, -0.02620953, -0.0038988034, -0.012180362, 0.0031239367, -0.008760073, 0.01967346, -0.01660662, -0.038846657, -0.01330052, 0.034779284, 0.024251971, -0.029145867, -0.009113521, 0.0069058305, 0.01618248, -0.021772398, -0.013681157, -0.0023042092, -0.001979309, -0.03558406, -0.032408465, 0.0034202891, 0.039607927, -0.0069656447, 0.035866816, -0.011669222, 0.0081999935, -0.019042691, 0.016378237, 0.008123866, 0.007281029, 0.0046084183, -0.008798136, -0.017737653, -0.02625303, -0.005467569, -0.0022389572, -0.009755165, 0.002199534, 0.0038688963, 0.0068405783, 0.03060316, 0.0017618024, 0.009450656, -0.02322969, 0.00976604, 0.010907949, 0.027884329, -0.011310336, 0.029711382, 0.0123652425, 0.010358745, 0.019466829, -0.037258856, 0.009276651, -0.0114190895, 0.011005827, -0.0091461465, 0.0017509271, 0.025970273, -0.047938425, -0.0094887195, -0.0005271133, -0.01632386, -0.00648713, 0.02594852, 0.044545323, 0.025774516, -0.0026005616, -0.0005978029, -0.02623128, 0.030146396, 0.04480633, -0.013257019, -0.018237917, 0.008422938, 0.046024367, 0.032799974, 0.0060412423, 0.0066285096, -0.029667882, 0.010967763, -0.039760184, -0.0016041102, 0.004032026, -0.016389113, -0.015529961, 0.017204762, 0.020380355, 0.02551351, 0.02137001, -0.003374069, 0.005850924, -0.012473996, -0.029689632, 0.035758063, 0.017389642, -0.007982488, 0.012854632, 0.0048259245, -0.011636596, -0.003485541, 0.03158194, -0.0058400487, -0.0016734403, -0.009548534, 0.03162544, 0.021022, 0.011473466, 0.006927581, 0.029754885, 0.014203172, -0.017357016, 0.0066828863, 0.03978193, 0.0005852283, 0.024034465, 0.016280359, -0.01048925, 0.0066121966, 0.0126045, 0.024817487, -0.013898663, 0.016867626, 0.06290287, 0.010978639, 0.04065196, 0.0016285797, 0.034453023, -0.010483812, 0.0110982675, -0.020260727, 0.010380496, -0.034714032, -0.013822536, 0.0019385264, 0.050374497, 0.0053452216, 0.024360724, -0.015388583, 0.008798136, 0.036106072, -0.00855888, 0.010973201, -0.012484871, -0.009135271, -0.034126766, 0.0572042, -0.0049428344, -0.02320794, 0.006601321, 0.007297342, -0.0055029136, -2.4150864e-05, -0.010288056, -0.018129164, -0.00369761, -0.008123866, -0.022468418, 0.0077976068, -0.007471347, -0.015834471, 0.008368561, -0.019336324, -0.02004322, -0.012463121, 0.0023735394, 0.026296532, -0.018259669, 0.042870525, 0.026340034, 0.013180892, -0.001518467, 0.029428625, 0.013267894, -0.0046981396, 0.02390396, -0.013909538, -0.011941105, -0.050940014, -0.00327891, -0.014899193, -0.053071577, 0.012822006, -0.011201583, -0.04480633, -0.01209336, -0.0029037113, -0.0302769, 0.05189704, -0.003265316, -0.023990963, 0.0039450238, 0.017259138, -0.007058085, 0.006220685, 0.010423997, 0.011429965, -0.013757284, 0.00027358235, -0.0003762182, 0.002520356, -0.026405284, -0.013866037, -0.02392571, 0.036236577, -0.020054096, -0.024317224, -0.033191487, 0.0133440215, -0.014692562, -0.008700259, 0.010679567, 0.016584868, 0.03356125, -0.058813747, -0.017933408, -0.016508741, 0.0076399148, 0.013605029, -0.009706226, 0.0062261224, -0.0070798355, -0.014681687, -0.02655754, -0.047590416, -0.00027443198, 0.002879242, 0.0037655807, 0.008270684, 0.0269273, -0.040564954, -0.026296532, -0.020543486, -0.005258219, 0.033691753, 0.0011446278, 0.013811661, -0.011527843, 0.020847995, 0.023055686, 0.0111037055, -0.00016508401, 0.050156992, 0.0030913106, 0.011941105, 0.0029526502, 0.010712193, -0.027775576, 0.04278352, -0.009640974, 0.00597599, 0.03423552, -0.0012316303, 0.013507152, 0.020750117, 0.0009597473, 0.027144806, 0.0015388583, 0.058987755, 0.025100246, 0.019684335, -0.00053357054, 0.019477705, -0.0028710854, 0.02420847, 0.028515099, 0.035410054, -0.010706756, -0.036780342, 0.018683806, 0.016367361, 0.011234209, 0.0143119255, 0.0130286375, 0.004804174, -0.035845067, -0.0142901745, 0.0019126975, 0.01681325, -0.0044942275, 0.0155952135, 0.03523605, -0.0043501295, -0.029102365, -0.029950641, -0.025861518, -0.025600512, -0.007716042, 0.028710853, 0.021109002, 0.015388583, -0.018270543, -0.041804742, -0.007819357, 0.041565485, 0.009727976, -0.0009080895, 0.0076344768, -0.01885781, 0.003265316, 0.008912328, 0.021489639, 0.0078084823, -0.024817487, -0.016660996, -0.032799974, -0.0046709515, -0.020760993, 0.019890966, -0.014920943, 0.009961796, 0.003958618, -0.004564917, 0.009744289, -0.003151125, -0.0010249992, -0.027819077, -0.007058085, -0.03401801, 0.008047739, 0.0167915, -0.041978747, -0.005274532, 0.0012690143, -0.029341623, -0.005100527, 0.0028574911, 0.036236577, -0.020782743, 0.023425447, -0.025491757, -0.0076888534, -0.043914557, 0.024143217, 0.009140709, 0.017150385, 0.005644293, 9.677339e-05, 0.011440841, -0.017150385, -0.021794148, 0.011212458, -0.03197345, 0.0069765197, -0.006236998, -0.011658346, -0.039390422, -0.0005050228, -0.027405815, 0.03095117, -0.009749727, -0.025317753, 0.023599451, -0.016922003, 0.023033936, -0.044175565, 0.006862329, 0.009967234, 0.012202113, -0.018237917, -0.020793619, -0.022131283, 0.008618694, -0.008373999, -0.050635505, -0.013692033, 0.010723068, -0.0047797044, 0.056334175, -0.0037139228, -0.026057275, -0.019738711, 0.0071070236, -0.0024646202, -0.006601321, 0.060640804, 0.03134268, -0.02821059, 0.0538111, 0.016312985, -0.05507264, 0.025665764, -0.015823595, -0.013539777, -0.012876383, -0.012115111, 0.0074169706, -0.043914557, 0.01278938, 0.026296532, -0.005059744, -0.007150525, 0.008591506, -0.006633947, -0.0035616683, -0.011690972, 0.010228242, -0.007585538, 0.02527425, 0.012245614, -0.0010263587, -0.021217756, 0.0053560967, 0.0056769187, -0.01276763, 0.0050679008, -0.040238697, 0.009532221, -0.0019670741, 0.00655782, -0.0123652425, 0.016976379, 0.051592533, 0.016280359, -0.008058615, -0.02523075, 0.00083332165, -0.036388833, -0.02483924, -0.0073843445, -0.01660662, 0.0043501295, 0.0067916396, -0.012822006, 0.017726777, 0.00026780483, -0.0021805023, 0.0048313625, 0.006731825, 0.008461001, -0.012528373, -0.027819077, -0.015073198]"
../../../gradio,../../../gradio/gradio/components,duplicate_button.py,""""""" Predefined buttons with bound events that can be included in a gr.Blocks for convenience. """"""

from __future__ import annotations

from typing import Literal

from gradio_client.documentation import document

from gradio.components import Button
from gradio.context import Context
from gradio.utils import get_space


@document()
class DuplicateButton(Button):
    """"""
    Button that triggers a Spaces Duplication, when the demo is on Hugging Face Spaces. Does nothing locally.
    """"""

    is_template = True

    def __init__(
        self,
        value: str = ""Duplicate Space"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = ""sm"",
        icon: str | None = None,
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = 0,
        min_width: int | None = None,
        _activate: bool = True,
    ):
        """"""
        Parameters:
            value: Default text for the button to display. If callable, the function will be called whenever the app loads to set the initial value of the component.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            link: URL to open when the button is clicked. If None, no link will be used.
            visible: If False, component will be hidden.
            interactive: If False, the Button will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
        """"""
        super().__init__(
            value=value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )
        if _activate and Context.root_block:
            self.activate()

    def activate(self):
        space_name = get_space()
        if space_name is not None:
            self.click(
                fn=None,
                js=f""() => {{ window.open(`https://huggingface.co/spaces/{space_name}?duplicate=true`, '_blank') }}"",
            )
","This code defines a custom button component called `DuplicateButton` that inherits from the `Button` class. The button is designed to trigger a Spaces Duplication action when used in a Hugging Face Spaces demo. The button has various parameters such as text, size, icon, link, visibility, interactivity, etc. The `activate` method of the button opens a new window to duplicate the current space on Hugging Face Spaces when the button is clicked.","[0.003933027, -0.006715659, 0.05174972, 0.069096, 0.01551528, -0.033825237, 0.025055733, 0.032162886, 0.03490938, -0.023586117, -0.0012460107, -0.015153899, -0.0074203513, -0.020357782, -0.044353463, 0.035439406, 0.029464576, -0.0029572991, 0.04136605, 0.005215929, -0.072468884, -0.03336749, 0.039125487, 0.048208192, 0.033752963, -0.024417292, 0.0004001539, -0.031199204, 0.02351384, 0.035559867, -0.005062342, -0.037993163, 0.008980311, 0.048882768, -0.033921607, 0.040860116, -0.013298811, 0.07155339, -0.018755661, 0.026862636, -0.06562674, -0.028500894, 0.033680685, 0.05700179, -0.02857317, 0.014021573, -0.024489569, 0.009088726, -0.011793058, 0.04524487, -0.036595825, -0.015214129, -0.008582792, -0.0022661583, -0.027489029, -0.03457209, -0.058447313, 0.022489928, -0.029416393, -0.04033009, 0.00034481747, -0.008667115, -0.054351665, 0.026260335, 0.020008447, 0.052665222, -0.049436886, 0.033174753, 0.00020929969, 0.026573531, 0.06967421, 0.0587846, -0.020743255, 0.007191477, 0.058110025, -0.0037463137, -0.026549438, 0.03960733, -0.00038547278, 0.012027956, 0.009401922, -0.0014131493, 0.009401922, -0.00875746, -0.0721316, 0.008263573, 0.006354278, -0.023923405, -0.025995322, -0.053339798, 0.029681405, 0.029898234, 0.0021577443, 0.017876301, 0.016683744, 0.0097512575, 0.002354998, -0.024381155, 0.021297371, 0.054929875, 0.06403667, -0.034548, -0.028284065, 0.034114342, 0.023875222, -0.022465836, 0.0064988304, -0.008805644, -0.021369647, 0.01693671, -0.06581948, 0.03327112, -0.015985075, 0.038258176, -0.022526067, -0.03888457, 0.054737136, 0.013744514, 0.019683205, -0.030018695, -0.03254836, -0.057628185, 0.04982236, -0.04093239, 0.05382164, -0.07820279, 0.023610208, -0.023610208, -0.03281337, -0.011925564, 0.012551958, 0.077720955, -0.004140821, -0.005965794, 0.041317865, -0.00054432976, -0.052376118, 0.0031891852, -0.016948758, 0.027344476, -0.0117448745, -0.042522468, 0.015021393, -0.018900214, -0.0017948577, 0.022345375, -0.016551238, -0.009678981, -0.09289894, 0.021116681, 0.0027434821, -0.012985615, -0.0074866046, 0.014178171, -0.041775614, -0.031632863, 0.03129557, 0.012503774, -0.016442824, 0.012280922, -0.018430417, -0.019743435, 0.00056126947, 0.006288025, -0.025344836, 0.0114617925, -0.004981031, -0.024441384, -0.06755411, 0.03341567, 0.03866774, -0.008233458, -0.04360661, 0.008492447, -0.003342772, -0.00861893, -0.03796907, -0.047870904, -0.028043145, -0.020309597, 0.02587486, 0.0014937071, 0.019586837, -0.0399928, -0.045991722, -0.03763178, -0.025778493, -0.05136425, 0.022345375, 0.01645487, 0.0026215161, 0.010353559, -0.018827938, -0.0037101756, -0.01189545, -0.0002960687, 0.029271841, -0.027826317, -0.0124796815, -0.051894274, -0.02051438, 0.0021366638, 0.0059176097, 0.007962422, -0.0023038022, 0.051219698, 0.0135397315, -0.010124684, 0.0041438327, 0.026573531, 0.04420891, -0.006824073, 0.008191297, -0.024296831, -0.051316068, -0.057387263, 0.03960733, 0.034764826, 0.017984714, 0.064807616, -0.02105645, 0.023525886, 0.018526787, -0.01921341, -0.002561286, -0.0066192904, -0.0065711066, 0.0035084048, -0.04750952, 0.071890675, 0.010365604, 0.040811934, 0.015467096, -0.048208192, -0.03782452, -0.008052767, 0.03148831, -0.036234442, -0.0084081255, -0.011467815, -0.049388703, 0.014069757, 0.019803666, -0.01387702, 0.046256736, 0.001567489, -0.026525347, -0.005607425, 0.0008786069, 0.0073360293, 0.025947137, 0.019538652, 0.04206472, 0.0068903263, -0.023959544, -0.007619111, -0.009666935, 0.085430406, 0.04490758, -0.031464215, -0.0005567522, -0.032114703, -0.022477882, 0.017587196, -0.047172233, 0.0044871443, 0.048810493, -0.017924486, 0.01621395, 0.01293743, -0.0069445334, 0.028741816, 0.04216109, -0.0074564894, -0.0012678441, -0.008926105, 0.007402282, 0.014214309, 0.03548759, -0.0224297, -0.01723786, -0.0029106208, 0.0011488897, 0.028597264, -0.011666575, 0.022008087, 0.020237321, 0.03951096, -0.0051436527, -0.032283347, -0.023887267, -0.04806364, 0.019827757, 0.0008695724, -0.03936641, 0.043100677, 0.060278308, -0.02161057, 0.0037824519, -0.014310678, 0.009823534, -0.012467636, 0.002025238, 0.014250447, 0.025176192, -0.043919805, -0.0048696054, 0.053628903, 0.030813731, 0.03187378, 0.0040022917, 0.01551528, 0.009498291, -0.013491548, 0.011431677, -0.015406866, 0.0421129, 0.052954324, -0.008353918, -0.019538652, 0.013033799, -0.004628685, -0.015852569, 0.009419992, 0.039703697, -0.028693631, 0.0010209006, -0.0021020314, -0.0186352, -0.013166306, 0.014129987, -0.009353738, 0.011425654, -0.010546295, 0.05068967, -0.060133755, 0.008775529, -0.015093669, -0.046112183, 0.017828116, -0.054351665, 0.009209186, 0.005812207, 0.022405606, -0.018659292, 0.046955407, 0.009058611, 0.024405247, -0.022851309, 0.008841782, -0.019165225, -0.049870543, 0.013419271, -0.0409083, 0.025103915, -0.063265726, -0.030717364, -0.037655875, 0.0025838723, 0.013033799, 0.010287305, 0.026163965, 0.025248468, 0.005086434, 0.0007479829, 0.028428618, -0.0060109664, -0.044979855, 0.037920885, -0.0065951985, -0.0026154933, 0.051075146, -0.021080544, 0.03396979, -0.061627463, -0.00046565416, 0.012961523, -0.028934551, -0.024260694, -0.036957204, 0.04481121, 0.003342772, -0.027416753, -0.035897154, 0.050496936, -0.014226356, 0.085623145, -0.0012904304, -0.029416393, -0.02479072, 0.009925924, -0.0024604006, 0.019044766, -0.025706217, 0.012660372, 0.033921607, 0.0065771295, -0.023188598, 0.004128775, 0.019370008, 0.0022420664, -0.02327292, -0.00066817796, 0.0067517967, 0.009853648, 0.002842862, 0.027874501, 0.025128007, 0.048352744, 0.013804745, 0.02293563, -0.02109259, 0.033825237, 0.013021753, 0.020960083, 0.030861916, -0.037679967, -0.04690722, -0.010329466, 0.0237909, 0.003104863, -0.058110025, 0.029175472, -0.047822718, -0.0056556086, 0.05280977, -0.008293688, 0.008143113, 0.031223297, -0.034523908, -0.04430528, 0.03712585, 0.04842502, 0.042811573, 0.011497931, -0.02245379, -0.059507363, -0.008847806, 0.012407405, 0.0115039535, -0.034379356, -0.0017542024, 0.0243932, 0.029753681, -0.036836743, 0.017418552, -0.014912979, -0.053628903, -0.02333315, -0.014274539, -0.06374756, -0.0038697855, -0.052617036, 0.041679244, 0.030259615, -0.02003254, -0.029247748, 0.006251887, 0.024862995, -0.026718084, -0.0076853638, 0.0032193002, -0.023068137, 0.023887267, -0.005399631, 0.02751312, 0.029705497, 0.01851474, 0.015985075, -0.036282625, 0.0004987807, -0.02163466, 0.05618266, 0.035439406, -0.0071613616, 0.008468355, 0.022610389, 0.04900323, 0.0013581893, -0.01973139, -0.0022766986, -0.0024016763, 0.0022541124, -0.0013325915, 0.030428259, 0.087357774, -0.019430239, -0.034523908, 0.0040956484, -0.023200644, -0.013587916, 0.0029407358, 0.025682125, -0.012064094, 0.025368929, 0.007950377, -0.011690667, -0.0112570105, 0.025176192, -0.0018084095, 0.019129088, -0.033801146, -0.0054568495, 0.03611398, 0.010570386, -0.014647966, 0.041462418, -0.0053574694, -0.015021393, 0.00987774, -0.042016536, -0.023923405, 0.045220777, 0.010058431, -0.026115783, -0.010522203, 0.001073602, 0.02055052, 0.033825237, -0.008637, -0.04430528, 0.059507363, -0.030428259, 0.021478062, 0.015924845, 0.006312117, -0.012118301, -0.03512621, 0.0031440125, -0.022008087, -0.043317504, -0.022417651, 0.028862275, -0.014382954, -0.006450646, 0.0070830625, -0.006974648, 0.008823713, -0.012756741, -0.035921246, 0.0051255836, 0.039125487, 0.006110346, 6.24417e-05, 0.014431138, 0.03341567, 0.010546295, -0.008227435, 0.056953605, 0.0013009707, 0.02369453, -0.021670798, 0.054496218, -0.009359761, 0.008251527, -0.0043937876, -0.011329287, -0.0013739998, -0.0057068043, -0.004309465, 0.013154259, 0.023068137, -0.01997231, 0.0243932, 0.0024001705, -0.0045774896, 0.029464576, -0.021803305, 0.0071071545, -0.02679036, -0.0318256, 0.018141313, 0.030018695, 0.032765187, -0.03548759, -0.0069023725, 0.03714994, -0.024887087, -0.026067598, -0.022357423, -0.011208826, -0.051508803, 0.024176372, -0.0086129075, -0.04690722, 0.04066738, 0.01557551, -0.044353463, -0.005830276, 0.04384753, -0.05608629, 0.014057711, 0.013780653, 0.050930593, 0.001360448, -0.004291396, -0.0014831668, 0.004981031, -0.0052129175, 0.022586297, -0.023357242, -0.01757515, 0.003128955, -0.03409025, 0.0070107863, -0.024862995, -0.024405247, 0.020418013, -0.017165584, 0.011943634, -0.010449926, 0.043486148, -0.021261234, -0.013852929, -0.012768786, 0.036138076, -0.056953605, 0.024585936, -0.0067517967, -0.010209006, -0.012226716, 0.024501614, -0.016623514, -0.027392661, 0.03009097, 0.048690032, -0.00839608, -0.023104277, 0.022610389, 0.015033439, -0.02045415, -0.02669399, 0.03315066, -0.00861893, -0.023814991, 0.032741096, 0.020225275, 0.018743614, 0.036933113, -0.0065108766, -0.017346276, 0.012100232, -0.003701141, 0.023562025, -0.021935811, 0.056038108, 0.02703128, 0.010907675, 0.015527326, 0.01745469, 0.0045835124, 0.0045232824, 0.014660012, 0.012732648, 0.026573531, -0.0032795302, -0.0006538733, -0.00080181356, 0.010913699, 0.02669399, -0.019960264, 0.05068967, -0.040884208, -0.04114922, -0.0014643449, 0.019900033, 0.0042281547, 0.02539302, 0.002103537, -0.0051014917, -0.014611828, -0.008335849, 0.029440485, 0.048834585, 0.0026606657, 0.02451366, -0.0033367488, -0.026621714, -0.023923405, -0.035535775, -0.020779394, 0.0076130875, -0.024224555, -0.008685184, 0.046232644, -0.035897154, -0.0026802404, 0.01745469, 0.017502874, -0.024838904, -0.044522107, -0.022779033, 0.018683385, -0.018406326, 0.0075106965, -0.003890866, 0.03148831, -0.04534124, -0.003366864, -0.021562384, 0.01833405, -0.005788115, -0.00015076353, 0.007926284, 0.0019379043, 0.0019409157, -0.018683385, -0.019478422, 0.008793598, 0.010877561, 0.013852929, -0.012913339, -0.03184969, 0.00026614187, -0.015539372, -0.002427274, -0.028284065, -0.0039721765, -0.010010246, -0.0064928075, -0.007733548, 0.01869543, -0.022718802, -0.024140233, -0.0033337374, 0.006001932, -0.012130347, 0.024248648, -0.029874142, -0.008908035, -0.033825237, 0.037005387, -0.0001131197, 0.035945337, -0.005947725, -0.0049930774, 0.00593869, -0.005294228, -0.022526067, -0.010708916, -0.013274719, 0.06586766, 0.011558161, 0.011220872, 0.028067239, -0.0013032294, 0.025802584, -0.025706217, -0.0014327241, -0.00075588806, -0.011178711, 0.007823893, -0.02833225, 0.0073721674, -0.012708556, 0.0027344476, -0.02133351, -0.037920885, 0.0023504805, 0.049388703, 0.0019875942, 0.00763718, -0.0006260169, 0.0037854633, 0.0010156304, -0.04112513, 0.003969165, -0.013166306, -0.0093838535, 0.047220416, -0.00022906269, -0.016189858, 0.0029798853, -0.040113263, 0.037294492, -0.05733908, -0.0010675789, -0.034234803, 0.039149582, -0.022887448, -0.02809133, 0.020863716, 0.011684644, 0.004682892, 0.008462332, -0.046569932, 0.011353378, -0.004800341, -0.0071794307, -0.011112458, 0.023369288, -0.0053454237, 0.0199964, 0.0055050333, 0.02585077, -0.009745234, 0.015900753, -0.058013655, -0.043943897, 0.03399388, -0.010172868, -0.019032719, 0.0040022917, 0.014587736, -0.010425835, 0.0075528575, 0.008528586, 0.01145577, -0.005122572, -0.02539302, 0.01973139, 0.0016442824, -0.01973139, -0.016491009, 0.0037312561, -0.021670798, -0.03505393, 1.4434055e-05, -0.006914418, -0.03994462, -0.02481481, -0.027007187, 0.012112278, 0.014804564, -0.008630977, -0.018418372, -0.03563214, -0.0008274113, 0.0077275247, -0.014623874, -0.005336389, 0.0062037027, 0.021887626, 0.01593689, -0.020020492, 0.006781912, 0.00046866565, 0.004896709, 0.006001932, 0.012419452, -0.040836025, -0.003342772, -0.030596903, -0.041414235, 0.003981211, 0.014587736, 0.04008917, 0.008432217, -0.022236962, 0.01387702, 0.05174972, 0.005044273, 0.019887988, -0.008679161, 0.007227615, 0.013322904, 0.032596543, 0.042932034, 0.008119021, -0.0047732373, -0.018309958, 0.01039572, -0.016105535, -0.01597303, 0.018550878, 0.0055532176, 0.0066012214, 0.008564724, 0.059748285, 0.012684464, -0.008402103, 0.01213637, -0.0069445334, 0.00038434347, -0.02369453, 0.03763178, 0.027874501, 0.036595825, 0.000114249015, 0.00051496754, 0.05806184, -0.048497297, -0.018165406, -0.015864614, 0.007673318, 0.013238581, 0.018478602, -0.015455049, -0.009986155, 0.043100677, -0.023899313, -0.023260875, 0.008799621, -0.07044515, -0.015141853, 0.020863716, -0.015888706, 0.0028338274, 0.0041438327, -0.015021393, -0.017599242, -0.0122748995, 0.016900573, -0.0019544675, 0.0065409914, 0.020357782, -0.02751312, 0.0037101756, 0.0037975092, -0.040836025, 0.025826678, -0.04375116, 0.011588276, 0.060711965, -0.005962782, -0.01617781, 0.0165151, 0.030163247, 0.00058347936, 0.006056139, -0.0014364885, -0.021128727, -0.051508803, -0.020128908, 0.026669899, 0.009871718, 0.031223297, -0.0046316967, 0.04844911, 0.039221857, -0.0100765, 0.009546475, 0.02948867, -0.011624414, 0.033247028, -0.038571373, -0.030596903, 0.019044766, -0.015683925, 0.02345361, 0.008992357, 0.0021517212, 0.04548579, 0.023863176, 0.008004583, -0.029006828, -0.030861916, -0.010588456, 0.020935992, 0.0017331218, -0.003610796, 0.02587486, 0.03230744, -0.04230564, -0.0050292155, 0.0052972394, 0.060278308, -0.025947137, 0.015768247, 0.029295933, -0.040595103, 0.036860835, 0.025513481, 0.0013348501, 0.030886007, -0.036378995, 0.008305734, 0.017659472, 0.03399388, 0.013949296, -0.014985255, 0.019478422, 0.026404886, 0.0075889956, 0.00825755, -0.009167025, -0.0075649037, -0.010106615, 0.014491368, 0.0199964, -0.017021034, 0.022742895, 0.045702618, 0.01909295, -0.017791979, 0.025658034, 0.02085167, -0.0035445427, 0.0075950185, 0.010919722, -0.03184969, 7.5228836e-06, 0.0060892655, -0.01527436, -0.012419452, -0.01257605, -0.0065048533, -0.041462418, 0.0013137696, -0.0045172595, 0.00068135327, 0.045774896, -0.00625791, -0.016780112, 0.055459898, -0.006342232, 0.028717723, -0.042835664, -0.02427274, -0.035800785, 0.023537932, 0.025296653, 0.00669759, 0.0019047777, -0.03288565, -0.0015283395, 0.015057531, 0.05068967, -0.0054809414, 0.005962782, -0.023345197, -0.029055012, 0.014491368, -0.021008268, 0.02809133, -0.020261414, 0.043100677, -0.0091007715, 0.009865695, 0.034282986, -0.0016819262, 0.017900392, -0.013708376, -0.020237321, -0.009395899, -0.01539482, 0.024152279, -0.017563105, 0.026525347, 0.0072396607, -0.012172508, -0.012588096, 0.0048334673, 0.03184969, -0.017478783, -0.0029045977, 0.0029979544, 0.021249188, -0.019574791, 0.01833405, -0.03888457, -0.011413609, -0.006793958, 0.011190757, -0.009678981, -0.0051587103, -0.009727165, 0.006643383, -0.009528406, 0.0044118566, -0.021417832, 0.0006519911, 0.0075528575, -0.010413788, -0.008070837, -0.024308879, 0.021706937, 0.021586476, 0.024694351, 0.007661272, -0.013202443, 0.0016006156, 0.02327292, -0.00813709, -0.008094929, -0.0075046737, 0.0028534022, 0.032500174, 0.01951456, -0.02891046, 0.00471903, 0.0009614234, 0.012419452, 0.021429878, 0.017081263, 0.04524487, -0.009130887, 0.033752963, -0.026645808, 0.013190397, -0.0108113075, 0.032379717, -0.024381155, 0.035367128, -0.0010118661, 0.004502202, -0.0073962593, 0.022718802, 0.022646526, -0.013672238, -0.009329646, 0.044594385, -0.0023188598, 0.021309419, -0.017370367, 0.017984714, 0.01627418, 0.0067096357, -0.03358432, 0.00092001515, 0.0065711066, 0.055411715, 0.01617781, -0.005956759, -0.024284786, -0.011395539, 0.0069023725, -0.012280922, 0.020875761, 0.030018695, 0.0066734976, -0.0066915667, -0.003936039, 0.031801507, 0.010263213, -0.01163646, 0.029560944, -0.032837465, -0.002982897, 0.031584676, -0.0031319666, -0.020285506, 0.011365425, -0.012311038, 0.0060290354, 0.006860211, -0.04105285, -0.014467276, 0.016852388, -0.027922686, 0.013021753, -0.005514068, -0.010209006, -0.008546655, 0.024983456, -0.0019168237, -0.026260335, 0.047798626, -0.0042100856, 0.005354458, -0.05006328, 0.014949117, 0.009154979, -0.0038216014, 0.051171515, -0.049436886, -0.00443896, -0.013081983, -0.021899674, -0.04148651, 0.0114377, 0.028187698, -0.010714939, -0.008594839, -0.031247389, 0.023911359, -0.012588096, 0.020707117, 0.011244964, 0.0058152187, -0.0053454237, -0.008715299, -0.010437881, 0.04379935, 0.041775614, 0.0066734976, -0.019767527, -0.004890686, 0.033198845, 0.009962062, 0.012027956, -0.020381873, -0.023574071, 0.0034813012, -0.004396799, 0.005336389, -0.02333315, -0.032042425, -0.014732288, 0.016466916, -0.0070589706, 0.024838904, -0.0007088333, -0.024634121, -0.024694351, 0.0026862635, -0.032114703, 0.014178171, -0.0019604906, 0.00861893, 0.017779933, -0.004535328, -0.01697285, 0.008269596, 0.031705137, 0.0025703206, 0.023044046, -0.022851309, 0.027898593, 0.019948218, -0.0075106965, -0.026573531, 0.0031500354, -0.014093849, -0.048690032, -0.014178171, 0.047919087, -0.02433297, 0.030910099, 0.025802584, 0.008094929, -0.012323083, -0.02375476, 0.009871718, 0.009191117, 0.034837104, 0.04418482, -0.00249955, 0.008456309, 0.0049238126, 0.022020133, 0.026236242, -0.007968445, 0.0055170795, 0.013961343, -0.020357782, 0.013696331, 0.015334589, 0.0013499077, -0.00051383825, 0.011419632, 0.01733423, -0.013419271, -0.0012633268, -0.0056556086, 0.019900033, 0.015081624, 0.0028880346, 0.00901645, 0.0025748378, 0.03129557, -0.0006478503, 0.011973749, 0.01107632, -0.027802225, -0.033897515, 0.003128955, -0.009793418, 0.0015102704, -0.01375656, 0.0056646434, 0.022020133, -0.020586656, -0.021309419, 0.009082703, -0.0151659455, -0.026645808, -0.015310498, -0.0014553104, 0.00875746, 0.00525809, 0.028115422, 0.012961523, 0.012961523, -0.013744514, 0.02809133, 0.0006007955, -0.0020538473, 0.024838904, 0.035993524, -4.194934e-05, -0.059989203, 0.02527256, -0.025176192, -0.03103056, 0.009907856, -0.002103537, -0.021453971, -0.00086881954, 0.030380074, 0.004457029, 0.03678856, -0.011275079, 0.0027976893, -0.0020764335, 0.035463497, 0.0013920687, 0.018189497, -0.012889246, 0.0124796815, -0.04440165, 0.019562744, -0.029175472, -0.018791799, 0.033560224, -0.0074564894, -0.013443364, 0.019984355, 0.00039789526, 0.012148416, -0.026356703, -0.0041137175, -0.019574791, -0.015780292, -0.00881769, -0.013672238, 0.02997051, -0.010160822, -0.029512761, -0.010329466, -0.0070951087, 0.036957204, 0.010449926, 0.024646167, 0.0021667788, -0.0042853733, -0.029801866, -0.038354542, 0.008504493, 0.023128368, -0.0016322364, -0.008414148, -0.00943806, -0.03994462, -0.0065229223, -0.015141853, -0.0032494152, 0.009173048, 0.00963682, 0.021441923, 0.009130887, -0.0066554286, 0.005592367, -0.014792519, 0.008046744, 0.0020899854, 0.011028136, 0.0094681755, -0.057772737, 0.010859491, -0.017189678, -0.010287305, -0.00955852, -0.011425654, 0.03445163, 0.0018701453, 0.03396979, 0.010630617, 0.011172688, -0.023598162, -0.04066738, 0.038258176, 0.017984714, 0.051508803, 0.0125640035, 0.032861557, 0.0136601925, -0.003225323, 0.026284426, 0.034234803, -0.004300431, -0.024718443, -0.013298811, 0.0033638524, 0.0008424689, 0.008438241, 0.0030627018, -0.012208646, 0.009931947, -0.007679341, -0.0018671339, -0.00687828, 0.013021753, -0.011847265, 0.0025748378, -0.016298272, -0.0043456033, -0.021116681, 0.007293868, -0.019863894, 0.02403182, -0.028982736, 0.023489749, -0.01551528, 0.010269236, -0.030355982, 0.003396979, -0.008239481, 0.041341957, 0.0025959183, 0.03842682, 0.010311398, -0.008353918, 0.037655875, 0.0034361286, 0.0032735073, -0.006408485, -0.010745054, -0.022345375, -0.007275799, -0.047750443, 0.0048816516, -0.019129088, 0.014250447, -0.010166845, -0.008221412, 0.010684824, 0.0092633935, -0.0016487996, -0.004782272, -0.006104323, -0.0013506606, -0.028235883, 0.016719883, -0.03290974, -0.011648506, -0.023863176, -0.010323443, -0.020984175, -0.03739086, 0.022742895, 0.013551778, -0.0024905156, 0.012913339, -0.016045306, -0.0075287656, 0.010871537, -0.027416753, -0.023104277, 0.020586656, 0.020068677, 0.0153707275, 0.033801146, -0.043100677, 0.015491188, -0.035174392, 0.03433117, 0.010528225, 0.0012226715, -0.023525886, 0.023405427, -0.009859671, 0.04799136, -0.038571373, 0.034740735, 0.0033518064, 0.0028865286, 0.030404167, -0.014142033, -0.049774174, 0.0026636773, -0.005640551, 0.0010811307, 0.022188777, -0.0059447135, -0.0141902175, -0.0031108859, -0.021261234, -0.016310317, 0.020116862, 0.00861893, 0.011323263, 0.0029196553, 0.0048033525, -0.02245379, 0.022357423, 0.027802225, 0.015418911, 0.02181535, 0.034403447, -0.010678801, 0.038017254, 0.00837801, -0.024887087, -0.010413788, 0.03129557, -0.018599063, 0.01451546, -0.0038517164, -0.0040354184, 0.019225456, -0.018791799, 0.034282986, 0.027440844, -0.056327213, 0.019610928, -0.002171296, -0.00011161395, -0.012600142, 0.014202263, 0.0037252333, 0.024055911, -0.00839608, -0.008245504, -0.036403086, 0.04114922, -0.012889246, -0.021996042, -0.02760949, -0.0055351485, -0.016719883, -0.03618626, 0.048690032, -0.024694351, -0.005956759, 0.052279748, -0.012009887, 0.011311217, -0.0123592215, -0.0021095602, -0.028524987, 0.02109259, -0.028934551, 0.0064325775, -0.003963142, 0.0027224016, -0.033752963, 0.009088726, -0.03339158, 0.018924305, -0.019297732, -0.013106075, 0.039751884, -0.038282268, -0.024537753, -0.047919087]"
../../../gradio,../../../gradio/gradio/components,json_component.py,"""""""gr.JSON() component.""""""

from __future__ import annotations

import json
from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import Component
from gradio.events import Events


@document()
class JSON(Component):
    """"""
    Used to display arbitrary JSON output prettily. As this component does not accept user input, it is rarely used as an input component.

    Demos: zip_to_json, blocks_xray
    """"""

    EVENTS = [Events.change]

    def __init__(
        self,
        value: str | dict | list | Callable | None = None,
        *,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default value. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: dict | list | None) -> dict | list | None:
        """"""
        Parameters:
            payload: JSON value as a `dict` or `list`
        Returns:
            Passes the JSON value as a `dict` or `list` depending on the value.
        """"""
        return payload

    def postprocess(self, value: dict | list | str | None) -> dict | list | None:
        """"""
        Parameters:
            value: Expects a `str` filepath to a file containing valid JSON -- or a `list` or `dict` that is valid JSON
        Returns:
            Returns the JSON as a `list` or `dict`.
        """"""
        if value is None:
            return None
        if isinstance(value, str):
            return json.loads(value)
        else:
            return value

    def example_payload(self) -> Any:
        return {""foo"": ""bar""}

    def example_value(self) -> Any:
        return {""foo"": ""bar""}

    def read_from_flag(self, payload: Any):
        return json.loads(payload)

    def api_info(self) -> dict[str, Any]:
        return {""type"": {}, ""description"": ""any valid json""}
","The code defines a `JSON` component that is used to display arbitrary JSON output in a pretty format. This component does not accept user input and is rarely used as an input component. It includes methods for preprocessing and postprocessing JSON data, as well as providing example payloads and values. The component can read JSON data from a file or a string, and it provides API information specifying that it can handle any valid JSON data.","[-0.030875072, -0.007689397, -0.029606232, 0.012570901, 0.037289757, -0.016800363, -0.05573491, -0.0013187698, 0.029183287, -0.0052163363, 0.050659556, -0.0036390994, -0.016295176, -0.026269658, 0.0101742055, -0.021570256, 0.0064558038, 0.011537032, 0.009093343, 0.007906744, 0.007278199, -0.03710178, -0.0056157857, 0.028830832, 0.019995956, -0.017552268, -0.042012654, 0.076412275, 0.027702976, 0.017939968, -0.05470104, -0.03757172, 0.014979344, 0.020289669, 0.032425873, -0.02507131, 0.018045705, -0.0033688839, 0.02099458, -0.0036185395, -0.015566769, 0.01352253, -0.012453415, 0.025987694, -0.002470123, 0.027068555, -0.034564104, 0.016600639, -0.036913805, 0.039639458, -0.06066928, -0.0073663127, -0.0049901777, -0.012841117, -0.036655337, -0.015789991, -0.05676878, 0.029723719, 0.004746396, -0.003976869, 0.041307744, -0.020477645, -0.034117658, 0.07002109, -0.015707752, 0.015836986, -0.006955115, -0.021793477, -0.010491415, 0.010409175, 0.04849783, -0.017834231, 0.0007078474, 0.0127471285, 0.021182556, -0.0004886644, 0.016071955, -0.0005463055, 0.02200495, -0.0094164265, -0.02962973, 0.022110688, -0.051129494, -0.05925946, -0.0046171625, -0.010215325, -0.044221375, 0.004796327, -0.0330133, 0.0019355662, -0.027256532, -0.005298576, -0.059541423, 0.053808153, -0.012805871, 0.00057384104, -0.05925946, -0.019490771, 0.02051289, 0.0032954558, 0.0025905455, -0.0377127, -0.03049912, -0.008247451, 0.055311963, -0.0024480948, -0.0025934826, -0.031110043, 0.0088877445, -0.031885445, -0.015660757, 0.04494978, -0.04659457, 0.029747216, 0.0030428628, -0.0055247345, 0.017822482, 0.00781863, -0.015578518, -0.042623576, 0.0149558475, -0.03841761, 0.010744008, -0.020736111, -0.032895815, -0.022803849, -0.043422475, -0.029488748, -0.012112709, 0.04370444, -0.019514266, 0.012312434, 0.01799871, -0.043164007, -0.04015639, 0.021311788, -0.05155244, -0.010785128, -0.0008128497, 0.009986229, 0.036420368, -0.020089945, 0.04920274, -0.0060798516, -0.021229548, -0.050518572, -0.0200312, -0.026152173, -0.058695532, -0.016377416, -0.030781085, 0.038958043, -0.043187506, -0.027256532, 0.007178337, 0.0029018808, 0.050330598, -0.024930328, 0.0040326742, -0.004949058, 0.004928498, -0.009575032, 0.021793477, 0.011378427, 0.0007441944, 0.006256079, 0.005113537, -0.011495912, -0.03181495, 0.02899531, 0.018374663, -0.037853684, -0.034916557, -0.0058478187, -0.01241817, -0.009110966, 0.006925744, -0.055405952, -0.010209451, -0.011789625, 0.011895361, 0.017564015, -0.031720962, -0.024577873, 0.0040473603, -0.028078927, -0.019843226, 0.0020721427, 0.0037125277, 0.014180446, -0.027327023, -0.016612386, -0.00029738405, -0.020630375, 0.0058801267, -0.045490213, 0.0353865, -0.017822482, -0.049625687, 0.027937945, 0.024530878, 0.049061757, -4.433225e-05, 0.027515, 0.010638271, 0.0282904, -0.026363647, -0.030311143, 0.028666353, -0.05352619, 0.006261953, 0.029277274, 0.0589305, 0.026457634, 0.0059770523, -0.04675905, -0.028125921, 0.05643982, -0.02176998, -0.015883978, -0.031086545, 0.07481448, 0.0034599348, -0.031392004, -0.00785975, -0.03270784, 0.007178337, -0.050283603, 0.01642441, -0.026598616, 0.012982098, 0.0042705815, -0.0044438723, 0.015308302, 0.0025655797, -0.015860481, -0.013170075, -0.029700221, 0.038088653, 0.050189614, -0.042976033, -0.016248183, 0.030992556, 0.0023614496, 0.06372389, 0.04588966, -0.017951716, -0.05235134, 0.02215768, 0.040696822, 0.040532343, -0.0012284531, 0.04156621, -0.04433886, -0.01846865, -0.012241943, -0.0019781545, 0.04659457, 0.03254336, 0.0067553907, -0.021652495, -0.047839914, -0.023767225, 0.036490858, -0.023931704, 0.05634583, 0.022357406, 0.01856264, -0.020548135, -0.021135561, 0.034987047, 0.022145933, 0.040461853, 0.027561992, -0.04786341, 0.0951159, 0.041918665, 0.07100797, -0.008364935, 0.038112152, -0.022392651, -0.0040326742, -0.024742352, 0.027397513, -0.0048286356, 0.020442398, -0.039968416, -0.028313898, -0.016788615, -0.021664243, 0.042036153, 0.026598616, 0.057050742, 0.023520507, -0.008975858, 0.0005095914, 0.061515175, 0.014203943, 0.031532988, -0.032989804, -0.014215691, -0.010044972, 0.0016726934, -0.036561348, -0.032190904, -0.032590352, 0.013158326, -0.0029797147, 0.039733443, -0.023156304, 0.03042863, 0.03999191, 0.017258555, 0.00203396, -0.05728571, 0.004264707, 0.04849783, 0.027632484, 0.01422744, 0.020078195, -0.0037888929, -0.015284806, 0.001149885, -0.031439, -0.056204848, -0.058037616, -0.07575436, 0.004188342, 0.016624134, 0.029277274, 0.0057156477, 0.0031016055, 0.032402378, 0.041072775, 0.025729226, -0.039803937, -0.03136851, 0.033671215, -0.06663752, 0.017082326, -0.027961442, -0.018539142, 0.00939293, -0.015061583, -0.019948961, 0.016635884, -0.029065803, 0.059306454, -0.020301417, -0.037595216, 0.0069139954, 0.026927574, 0.01650665, -0.06743642, 0.06090425, -0.005991738, -0.01682386, 0.009827625, -0.015801739, -0.01147829, -0.014391919, 0.027679479, -0.009398804, 0.02554125, 0.008235702, 0.0040268004, -0.0259407, -0.021135561, 0.0141452, -0.046030644, 0.008094721, 0.034987047, -0.0047610817, 0.0034922431, -0.00939293, -0.04285855, 0.02178173, -0.0077128937, -0.00011005045, -0.006949241, 0.02200495, 0.0042441473, -0.017070578, -0.004508489, -0.031157035, -0.01151941, 0.022204675, 0.006696648, 0.0019150063, 0.011783751, 0.01665938, -0.02460137, -0.04353996, -0.03080458, 0.024507383, 0.032590352, -0.020665621, 0.0118248705, -0.0010911424, -0.010479666, 0.0017931156, -0.014403667, 0.012899859, 0.017411284, -0.010638271, -0.050424583, 0.016024962, 0.0038270755, 0.006115097, -0.02490683, 0.053009257, 0.004185405, 0.02577622, -0.021734735, 0.018797608, -0.046712056, 0.030005682, -0.018421656, -0.032825325, 0.02161725, -0.016600639, -0.03860559, -0.014850111, -0.015343548, -0.006673151, 0.044761807, 0.08336739, -0.047675434, -0.0027755843, -0.018421656, 0.0056010997, 0.021523261, 0.03999191, 0.016236434, 0.004910875, -0.06884624, 0.019009082, 0.015895728, 0.01069114, 0.008024229, -0.039639458, 0.038699575, -0.019432027, -0.0137575, -0.041166764, -0.047510955, 0.0031926562, -0.031697467, 0.010215325, 0.009851121, -0.0031809078, -0.0011190451, -0.03033464, -0.0393105, 0.0007864156, -0.015425787, 0.007489672, -0.03073409, 0.024624867, 0.018515645, -0.005251582, 0.012817619, -0.053150237, 0.04579567, 0.029817706, 0.0008730608, 0.032966305, 0.0068023847, -0.0058625042, 0.008705642, -0.035715457, 0.015472782, 0.025635239, -0.0014604861, 0.0002201009, 0.0068258815, 0.00039834777, -0.006261953, -0.018762363, -0.005298576, 0.008664522, 0.0125826495, -0.0045907283, -0.04896777, 0.02554125, 0.0935181, -0.0077775107, -0.0074720494, -0.010003853, -0.020348411, -0.002083891, -0.01902083, 0.036443863, -0.009874619, 0.022909585, 0.0069316183, -0.07025606, -0.024413394, 0.0151555715, -0.04450334, 0.029700221, 0.0012761814, 0.008511792, 0.020289669, 0.021499764, -0.024812844, 0.054372083, -0.008629277, 0.0014898573, 0.007701145, -0.0025068372, 0.007278199, 0.018668374, -0.04645359, -0.021910962, -0.024812844, -0.05728571, -0.0006134923, -0.030687096, 0.023438267, 0.021323537, 0.02011344, 0.0132758105, -0.021123812, -0.0157195, 0.044714812, -0.0007441944, -0.066402555, 0.0022718671, 0.012641392, -0.011307936, -0.00040679198, -0.007642403, 0.05225735, -0.04511426, -0.02507131, -0.04645359, -0.0037125277, -0.018268926, -0.030640101, 0.008359062, -0.011008349, 0.004179531, -0.023555754, -0.015789991, 0.049155746, -0.01241817, -0.044691313, -0.03395318, 0.031603478, 0.018503895, -0.01265314, 0.01650665, -0.03214391, -0.0051781535, 0.016835608, 0.010855619, -0.043962907, -0.01627168, -0.035151526, 0.029817706, 0.036608342, 0.014532901, 0.055687916, 0.013393296, -0.011689763, 0.022510136, -0.024248915, -0.006579163, 0.0044614947, 0.0067201452, -0.005747956, -0.0015625512, -0.023379525, 0.0068023847, -0.011683889, 0.044103887, -0.034940053, -0.001196879, -0.00066562626, -0.0039151893, 0.005527672, -0.045161255, -0.013017343, -0.0377362, 0.0028725096, 0.023590999, -0.010403302, 0.016177692, 0.008952361, -0.017493524, -0.0037301504, -0.0023129869, 0.010215325, -0.00502836, 0.01595447, 0.002686002, -0.010796877, -0.04826286, 0.019396782, 0.016154194, -0.011431295, -0.015825236, 0.055405952, -0.038300127, -0.0029356577, 0.02946525, -0.013475535, 0.013240566, -0.009345936, -0.023203298, 0.044056896, -0.036890306, -0.037054785, -0.03432913, 0.010526661, -0.038629085, 0.014121703, -0.0041237255, -0.0077716364, 0.009016978, 0.003882881, 0.018280674, 0.0034775576, 0.039709948, 0.05517098, 0.009210828, -0.0022131247, -0.0121832, -0.028407887, -0.0027285903, -0.028337395, 0.024953825, -0.0008011012, -0.0021220737, 0.008999355, 0.010285816, 0.006626157, -0.025494257, -0.039005037, 0.0049255607, 0.029230282, 0.04929673, 0.00587719, 0.040767312, 0.02798494, -0.018574387, -0.0035039918, 0.01681211, 0.0040297373, 0.0027344646, 0.025494257, 0.017939968, 0.005692151, -0.0035979797, -0.01013896, -0.00432345, -0.005979989, -0.0054748035, 0.036608342, -0.033436246, -0.023273788, -0.013487284, 0.036584847, -0.007918493, 0.050659556, 0.0028108298, -0.015543273, -0.0049872403, 0.03860559, -0.052210357, 0.005025423, -0.015378794, 0.0035333629, 0.017622758, -0.019244052, 0.016882602, -0.010385679, -0.019126566, 0.009974481, -0.017740242, -0.0074133067, -0.055358957, -0.028901324, 0.013428542, -0.01737604, 0.01672987, -0.0048286356, 0.044221375, -0.00738981, -0.007166588, -0.021722985, 0.012641392, 0.009751259, -0.02476585, 0.032519862, -0.010315187, 0.028078927, 0.012535655, 0.0023144556, 0.008317942, -0.002026617, 0.007507295, -0.03214391, -0.0008987606, 0.008905367, -0.003257273, 0.0050782915, 0.022533633, -0.0071959593, -0.025964197, 0.02350876, -0.019044327, -0.019702243, 0.0016609449, -0.0025450198, 0.004784579, 0.01642441, 0.0015449284, -0.023403022, -0.0076071573, 0.007701145, -0.04041486, -0.021018077, 0.024695357, -0.053808153, 0.006890498, 0.031697467, -0.028102424, 0.014803116, -0.00075631, -0.013886733, -0.018515645, 0.0040826057, -0.016130697, 0.043117013, -0.00660266, -0.014579895, -0.018351166, -0.00031115182, 0.0127471285, -0.006814133, 0.025799718, -0.03529251, 0.014286183, -0.03961596, 0.001536117, 0.0011961447, 0.02845488, -0.042482596, 0.00039541064, 0.0076600253, 0.013745751, 0.003136851, -0.017834231, -0.028501874, 0.0338122, 0.0027168419, -0.0089229895, 0.0102740675, -0.041683696, 0.02507131, -3.6346937e-05, 0.01422744, -0.018962087, -0.003882881, 0.015261308, 0.012206697, 0.032049924, 0.020019453, -0.00432345, 0.024812844, 0.0045231744, -0.025658736, 0.005695088, -0.023649741, -0.04039136, -0.017235057, 0.013734003, 0.015508027, 0.025400268, 0.0018459839, 0.021335285, -0.025846712, 0.02130004, 0.008793756, -0.015766494, 0.027914448, 0.00037338218, -0.047957398, -0.020101693, -0.005510049, 0.049249735, 0.005762642, 0.020865345, 0.016447907, -0.016400913, -0.077963084, -0.012523906, -0.0058507556, -0.027749969, -0.03089857, -0.027538497, -0.012700134, 0.029700221, 0.0074779238, -0.02263937, -0.053479195, -0.04929673, 0.0068082586, 0.039028533, 0.017152818, -0.022756854, 0.017881226, -0.0400859, -0.039944917, 0.017423034, 0.056016874, -0.0046582823, 0.002498026, -0.027515, 0.006773013, 0.0032543358, -0.0011843962, 0.03190894, 0.043351986, 0.019702243, -0.0008686551, -0.0065439176, -0.0061973366, 0.00079522695, 0.0047023394, 0.0024892145, 0.014156949, -0.013322805, 0.023520507, -0.050424583, -0.010050846, -0.021358782, -0.0067965104, 0.008576409, 0.003700779, -3.446534e-05, -0.021652495, 0.03717227, 0.007372187, 0.0029811831, 0.025118304, -0.024930328, 0.02838439, -0.048779793, -0.0055335457, 0.01878586, -0.030123167, 0.008300319, -0.028102424, 0.0054983003, -0.0042705815, -0.05446607, 0.030358138, -0.017857729, 0.03468159, -0.03754822, 0.018809358, -0.004699402, -0.011736757, 0.0119541045, -0.013710505, 0.047299482, 0.013416793, 0.014485907, -0.0071548396, -0.021499764, 0.005372004, -0.018997332, -0.0013650295, -0.030146664, 0.023203298, -0.041613206, 0.033271767, 0.04361045, 0.0038446984, -0.0015669569, -0.004860944, 0.00015447449, -0.0063735642, -0.0020956397, 0.0023585125, 0.007448552, -0.0019252863, -0.003671408, 0.023367777, 0.0044497466, -0.007695271, 0.012324182, 0.028196413, -0.03787718, 0.03451711, 0.023097562, -0.014485907, -0.0050342344, -0.026504628, 0.007460301, -0.052116368, -0.020712614, 0.009463421, -0.010744008, 0.015660757, -0.009704266, -0.037947673, -0.041307744, -0.02225167, 0.024413394, 0.03254336, -0.024507383, -0.0073663127, 0.052022383, -0.023861215, 0.011490039, 0.0006241393, 0.021100316, -0.02357925, 0.04943771, 0.011014224, 0.02074786, -0.014180446, 0.0510825, 0.004902064, 0.011719134, -0.030217156, 0.04269407, 0.011642769, 0.029606232, 0.0019502519, 0.031697467, -0.04180118, -0.019009082, -0.008082972, -0.026081681, 0.008523541, -0.04093179, -0.004555483, -0.010626523, -0.020172184, 0.028337395, -0.021746483, 0.012171451, -0.0050048633, -0.0029826518, 0.0049343724, -0.027655981, -0.00982175, 0.036279384, -0.0018753551, -0.005122348, 0.017939968, 0.0134402905, -0.0024113806, 0.051505446, 0.035879936, -0.041871674, -0.0002498393, 0.0016462593, 0.04330499, -0.0040268004, -0.027162544, 0.0432345, -0.056956753, 0.025588244, 0.047299482, -0.042905543, -0.0029253778, -0.0009141806, -0.01627168, 0.038488105, 0.0023188612, 0.013780996, -0.011372553, 0.02098283, -0.017329045, 0.051740415, 0.020266172, 0.009369433, 0.0086586485, -0.06588562, -0.033271767, 0.006185588, 0.0019047264, 0.032378882, 0.041613206, -0.03200293, -0.0058008246, -0.012324182, -0.0148266135, 0.01798696, 0.023473514, 0.017834231, 0.0013966035, 0.02955924, 0.026081681, -0.048826788, 0.06898722, 0.04708801, -0.038558595, 0.013134829, 0.011930607, 0.027303526, 0.0044938033, -0.0047992645, -0.015672507, 0.01856264, -0.030193659, 0.0018445153, -0.030193659, 0.01712932, -0.0009296005, -0.037078284, -0.00086057803, 0.008082972, -0.008317942, -0.018586135, -0.020395406, 0.04189517, 0.01674162, 0.017058829, -0.014885356, 0.01288811, -0.01603671, 0.033201277, 0.0050048633, 0.0101095885, 0.044362355, -0.017023584, 0.0053308844, 0.012570901, 0.026128676, -0.0046847165, -0.0025978882, 0.024718855, 0.03597392, -0.018668374, -0.02939476, -0.009322439, 0.035550978, 0.035269015, -0.0061209714, 0.017787237, -0.0067201452, -0.008088846, 0.021170806, -0.015860481, 0.0014450662, -0.01769325, 0.015496278, 0.004696465, -0.02216943, 0.010315187, 0.015555021, 0.022686364, 0.043492965, -0.02537677, 0.010133086, 0.04111977, -0.032660846, -0.0025039, 0.00076732424, -0.022627622, -0.0196435, 0.029277274, 0.00915796, -0.0077305166, 0.003392381, 0.03592693, -0.021006327, -0.045302235, 0.015002841, 0.0153200505, -0.05164643, 0.035574473, -0.0042177136, 0.022980077, -0.0051458455, -0.002605231, -0.000936209, 0.008793756, -0.015578518, 0.011636894, 0.00023423582, -0.010567781, -0.025118304, -0.02130004, 0.0038946294, -0.024389897, -0.03287232, -0.011619272, 0.018997332, 0.013099584, 0.023403022, 0.030710593, -0.00038990352, 0.01761101, -0.0137692485, -0.013851488, 0.0036890307, -0.008194583, 0.015519775, -0.008488295, 0.012876362, -0.019032579, -0.005066543, 0.021887464, 0.04356346, 0.04675905, -0.035738952, -0.02664561, 0.044902787, -0.01878586, -0.0153200505, 0.010567781, 0.0041765934, 0.0021940335, -0.013640014, -0.014262686, 0.013628266, 0.039122522, 0.00061899936, 0.004408627, -0.017387787, 0.00028122985, 0.011002475, -0.010238823, 0.014814865, -0.0020721427, -0.040673327, -0.005971178, -0.014074709, -0.019608255, -0.025658736, -0.014591644, -0.009451672, -0.017634507, -0.009516289, 0.004573106, 0.048074882, -0.0060739773, -0.010332811, -0.048544824, 0.039568964, -0.006972738, -0.009915738, -0.009069846, 0.040109396, 0.013416793, -0.006949241, 0.024084436, -0.0044761803, 0.0017358416, 0.015789991, 0.0054777404, 0.009357684, -0.02185222, 0.018621381, -0.03646736, -0.011777877, 0.022510136, 0.006784762, -0.014015967, -0.020700866, 0.02004295, 0.039592464, 0.021546759, -0.0038270755, 0.030170161, 0.011155206, 0.021135561, -0.03254336, 0.011584026, 0.004226525, 0.0076365285, 0.013663512, 0.024554376, -0.026034687, 0.008969984, 0.011912985, -0.0014274433, -0.018292423, -0.044221375, 0.0057802647, -0.008905367, 0.0077070193, 0.01516732, 0.0057832017, 0.007848001, -0.024342902, -0.00821808, -0.000352088, -0.050471578, 0.010168332, 0.026316652, 0.02624616, 0.009657271, 0.048051387, -0.02711555, -0.041401733, 0.046430092, 0.005548232, 0.0100743435, 0.0096279, 0.003627351, 0.036749326, 0.02232216, 0.015461033, 0.011014224, -0.020301417, 0.007119594, 0.005750893, 0.019690495, 0.019854974, 0.010949607, -0.02019568, 0.00074786576, 0.011548781, 0.011495912, 0.03684331, -0.0188681, 0.015308302, 0.0014883887, -0.025400268, -0.0069903606, 0.014603392, 0.039803937, -0.0075425403, 0.0077540134, -0.027374018, 0.026316652, 0.0077246423, 0.02413143, 0.013851488, -0.011278565, -0.02349701, -0.0020824226, -0.014356674, 0.040908296, 0.01501459, -0.046970524, 0.028055431, 0.002282147, -0.0008701237, -0.036890306, -0.0025494257, 0.0043645697, -4.2519492e-05, 0.0003056447, -0.005480678, 0.0035656714, 0.021793477, 0.0031427252, -0.02350876, -0.0017710872, -0.02429591, -0.021922711, -0.008288571, 0.0065967855, -0.04001541, -0.0004600274, -0.009469295, -0.04487929, 0.019819729, 0.027538497, 0.028008437, 0.004784579, 0.013886733, 0.030381635, 0.0016124824, -0.029371263, 0.032096915, -0.05319723, -0.017904721, 0.015226062, 0.037383743, -0.009298942, 0.008676271, 0.0065439176, 0.0048873783, -0.013311056, 0.0054278094, 0.0040297373, -0.007613031, 0.013181823, -0.00066195487, 0.028971814, 0.05752068, 0.034446616, -0.016882602, -0.014215691, -0.009110966, 0.013957224, -0.047604945, -0.016107202, 0.026880581, -0.012711883, -0.029747216, -0.017751992, -0.02915979, 0.024107933, -0.0048668184, -0.030123167, 0.019984208, -0.025212292, -0.013945476, -0.011601649, -0.0079654865, 0.014156949, -0.0040326742, -0.008488295, -0.005251582, 0.006426432, -0.0037595218, 0.021323537, 0.035668463, 0.013839739, 0.0067553907, -0.010791002, 0.0137575, 0.055123985, 0.010890865, -0.012876362, 0.0072664507, -0.011912985, -0.0035627342, -0.02334428, 0.029018808, 0.006338319, 0.0026228537, -0.01103772, -0.047181997, 0.026857084, 0.063441925, 0.036890306, 0.001919412, -0.0068728756, -0.039756943, 0.02955924, 0.023872962, -0.06771839, -0.00459954, -0.009645523, -0.0044291867, 0.018292423, 0.027256532, -0.0023467639, 0.013311056, -0.005066543, -0.013334554, -0.003213216, 0.014814865, 0.052445326, 0.022521885, -0.020642124, 0.03345974, 0.021675993, 0.06269003, 0.016541895, 0.016013213, 0.007830379, 0.008223954, -0.018832853, 0.016624134, 0.010879116, -0.016377416, -0.0139689725, -0.0188681, 0.009322439, -0.014638637, 0.0047346475, 0.026692605, -0.0006480035, 0.0040855426, -0.004158971, 0.0021896276, 0.020313166, -0.006068103, -0.0029195035, -0.02476585, -0.012782373, 0.035316005, -0.006491049, -0.024037441, 0.015085081, -0.015132075, 0.0068670013, 0.039827432, 0.02939476, -0.021405777, 0.010943732, 0.010156583, -0.01477962, 0.016330423, 0.03214391, -0.002083891, 0.0062443307, -0.0026301965, 0.002542083, 0.0004644331, 0.028807335, -0.003956309, 0.0015992653, 0.044291865, -0.016588889, -0.0018122069, -0.0003645708, -0.015778242, 0.0044526835, 0.038934547, -0.02547076, 0.022627622, 0.015789991, 0.015801739, -0.0034129408, -0.061985113, -0.004816887, 0.023003573, 0.016024962, 0.02617567, -0.021628998, -0.0059124352, -0.012218446, -0.011572278, -0.01752877, -0.018456902, 0.038088653, 0.03703129, 0.003603854, 0.0013606237, 0.0267161, -0.027679479, 0.04285855, -0.0012218446, 0.0052838903, 0.023919957, -0.010185954, 0.037289757, 0.035503983, -0.026692605, 0.031110043, 0.009727762, 0.008082972, 0.014051212, -0.045842666, -0.035409994, 0.00046480025, 0.0068846243, 0.0026434136, -0.03844111, -0.03961596, 0.008682146, 0.007278199, -0.022545382, -0.005348507, -0.003392381, -0.019878471, -0.006414684, -0.031932436, 0.014074709, 0.001149885, 0.029418258, 0.027796963, -0.01297035, 0.024577873, 0.0016829734, -0.0057538305, 0.001353281, -0.021711238, -0.020806603, -0.010156583, -0.005134097, 0.013546026, 0.0032866444, 0.007648277, 0.029582737, -0.010908487, 0.040602833, -0.007795133, -0.03080458, 0.0051458455, -0.015778242, 0.00041083054, -0.03710178, 0.0051105996, 0.0044614947, 0.013651763, -0.0027579616, 0.015237811, -0.025564747, -0.022897836, -0.009140337, -0.0021631934, -0.0014017435, -0.024859836, -0.0026066997, -0.039639458, 0.009757133, 0.0032102792, -0.011302062, 0.016917847, -0.035269015, -0.055452947, -0.0011954104, -0.013334554, -0.040673327, -0.011578152, -0.0057303333, -0.0091520855, -0.037430737, -0.039287, 0.023767225, 0.0192558, -0.011108212, 0.018221932, 0.015190817, -0.008024229, -0.027515, -0.004161908, -0.07002109, -0.007237079, 0.0074309297, -0.011149332, 0.015825236, -0.007025606, -0.017892973, -0.003947498, 0.009334187, 0.018691871, -0.029911695, 0.0004493803, -0.008617529]"
../../../gradio,../../../gradio/gradio/components,annotated_image.pyi,"""""""gr.AnnotatedImage() component.""""""

from __future__ import annotations

from typing import Any, List

import numpy as np
from gradio_client.documentation import document, set_documentation_group
from PIL import Image as _Image  # using _ to minimize namespace pollution

from gradio import processing_utils, utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events

set_documentation_group(""component"")

_Image.init()  # fixes https://github.com/gradio-app/gradio/issues/2843


class Annotation(GradioModel):
    image: FileData
    label: str


class AnnotatedImageData(GradioModel):
    image: FileData
    annotations: List[Annotation]

from gradio.events import Dependency

@document()
class AnnotatedImage(Component):
    """"""
    Creates a component to displays a base image and colored annotations on top of that image. Annotations can take the from of rectangles (e.g. object detection) or masks (e.g. image segmentation).
    As this component does not accept user input, it is rarely used as an input component.

    Demos: image_segmentation
    """"""

    EVENTS = [Events.select]

    data_model = AnnotatedImageData

    def __init__(
        self,
        value: tuple[
            np.ndarray | PIL.Image.Image | str,
            list[tuple[np.ndarray | tuple[int, int, int, int], str]],
        ]
        | None = None,
        *,
        format: str = ""png"",
        show_legend: bool = True,
        height: int | str | None = None,
        width: int | str | None = None,
        color_map: dict[str, str] | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Tuple of base image and list of (annotation, label) pairs.
            format: Format used to save images before it is returned to the front end, such as 'jpeg' or 'png'. This parameter only takes effect when the base image is returned from the prediction function as a numpy array or a PIL Image. The format should be supported by the PIL library.
            show_legend: If True, will show a legend of the annotations.
            height: The height of the image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            color_map: A dictionary mapping labels to colors. The colors must be specified as hex codes.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: Relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.
            min_width: Minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.format = format
        self.show_legend = show_legend
        self.height = height
        self.width = width
        self.color_map = color_map
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: AnnotatedImageData | None
    ) -> tuple[str, list[tuple[str, str]]] | None:
        """"""
        Parameters:
            payload: Dict of base image and list of annotations.
        Returns:
            Passes its value as a `tuple` consisting of a `str` filepath to a base image and `list` of annotations. Each annotation itself is `tuple` of a mask (as a `str` filepath to image) and a `str` label.
        """"""
        if payload is None:
            return None
        base_img = payload.image.path
        annotations = [(a.image.path, a.label) for a in payload.annotations]
        return (base_img, annotations)

    def postprocess(
        self,
        value: tuple[
            np.ndarray | PIL.Image.Image | str,
            list[tuple[np.ndarray | tuple[int, int, int, int], str]],
        ]
        | None,
    ) -> AnnotatedImageData | None:
        """"""
        Parameters:
            value: Expects a a tuple of a base image and list of annotations: a `tuple[Image, list[Annotation]]`. The `Image` itself can be `str` filepath, `numpy.ndarray`, or `PIL.Image`. Each `Annotation` is a `tuple[Mask, str]`. The `Mask` can be either a `tuple` of 4 `int`'s representing the bounding box coordinates (x1, y1, x2, y2), or 0-1 confidence mask in the form of a `numpy.ndarray` of the same shape as the image, while the second element of the `Annotation` tuple is a `str` label.
        Returns:
            Tuple of base image file and list of annotations, with each annotation a two-part tuple where the first element image path of the mask, and the second element is the label.
        """"""
        if value is None:
            return None
        base_img = value[0]
        if isinstance(base_img, str):
            if client_utils.is_http_url_like(base_img):
                base_img = processing_utils.save_url_to_cache(
                    base_img, cache_dir=self.GRADIO_CACHE
                )
            base_img_path = base_img
            base_img = np.array(PIL.Image.open(base_img))
        elif isinstance(base_img, np.ndarray):
            base_file = processing_utils.save_img_array_to_cache(
                base_img, cache_dir=self.GRADIO_CACHE, format=self.format
            )
            base_img_path = str(utils.abspath(base_file))
        elif isinstance(base_img, PIL.Image.Image):
            base_file = processing_utils.save_pil_to_cache(
                base_img, cache_dir=self.GRADIO_CACHE, format=self.format
            )
            base_img_path = str(utils.abspath(base_file))
            base_img = np.array(base_img)
        else:
            raise ValueError(
                ""AnnotatedImage only accepts filepaths, PIL images or numpy arrays for the base image.""
            )

        sections = []
        color_map = self.color_map or {}

        def hex_to_rgb(value):
            value = value.lstrip(""#"")
            lv = len(value)
            return [int(value[i : i + lv // 3], 16) for i in range(0, lv, lv // 3)]

        for mask, label in value[1]:
            mask_array = np.zeros((base_img.shape[0], base_img.shape[1]))
            if isinstance(mask, np.ndarray):
                mask_array = mask
            else:
                x1, y1, x2, y2 = mask
                border_width = 3
                mask_array[y1:y2, x1:x2] = 0.5
                mask_array[y1:y2, x1 : x1 + border_width] = 1
                mask_array[y1:y2, x2 - border_width : x2] = 1
                mask_array[y1 : y1 + border_width, x1:x2] = 1
                mask_array[y2 - border_width : y2, x1:x2] = 1

            if label in color_map:
                rgb_color = hex_to_rgb(color_map[label])
            else:
                rgb_color = [255, 0, 0]
            colored_mask = np.zeros((base_img.shape[0], base_img.shape[1], 4))
            solid_mask = np.copy(mask_array)
            solid_mask[solid_mask > 0] = 1

            colored_mask[:, :, 0] = rgb_color[0] * solid_mask
            colored_mask[:, :, 1] = rgb_color[1] * solid_mask
            colored_mask[:, :, 2] = rgb_color[2] * solid_mask
            colored_mask[:, :, 3] = mask_array * 255

            colored_mask_img = PIL.Image.fromarray((colored_mask).astype(np.uint8))

            # RGBA does not support transparency
            mask_file = processing_utils.save_pil_to_cache(
                colored_mask_img, cache_dir=self.GRADIO_CACHE, format=""png""
            )
            mask_file_path = str(utils.abspath(mask_file))
            sections.append(
                Annotation(image=FileData(path=mask_file_path), label=label)
            )

        return AnnotatedImageData(
            image=FileData(path=base_img_path),
            annotations=sections,
        )

    def example_payload(self) -> Any:
        return {
            ""image"": file(
                ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
            ),
            ""annotations"": [],
        }

    def example_value(self) -> Any:
        return (
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png"",
            [([0, 0, 100, 100], ""bus"")],
        )

    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a Gradio component called `AnnotatedImage` that displays a base image with colored annotations on top of it. The annotations can be in the form of rectangles (e.g. object detection) or masks (e.g. image segmentation). This component does not accept user input and is rarely used as an input component. It preprocesses the input data (base image and annotations) and postprocesses the output data to display the base image with annotations. The component also provides methods for generating example payloads and values, as well as a method for selecting events.","[-0.03245506, 0.04748104, 0.015567338, -0.008998423, -0.033854667, -0.025721097, 0.0040370766, -0.0037531941, -0.023516055, -0.03992844, 0.0037895048, 0.0067009535, -0.009011627, -0.040562224, -0.0017098985, -0.014537438, -0.024862848, -0.019105969, -0.033247292, 0.043097362, 0.03174205, -0.040799893, 0.006641536, 0.035043016, 0.024295082, -0.052498505, -0.03937388, 0.028282644, 0.015158019, 0.029787883, -0.04600221, -0.026262455, -0.009473762, -0.041143194, 0.024611974, -0.018485388, 0.0024757218, 0.029682253, -0.038053494, 0.012939772, -0.0075459997, -0.042938918, -0.027331967, 0.039637953, -0.009018228, 0.011302494, -0.013012393, 0.018458981, -0.0066712447, 0.05783286, -0.019911405, 0.010166964, -0.014550641, -0.016834907, -0.008958812, 0.003419797, -0.051653456, 0.019105969, 0.015448503, -0.004297853, 0.017297043, -0.03176846, 0.004195523, 0.03131953, -0.021971205, -0.0013831032, -0.024981683, -0.0008970365, 0.012464433, -0.0030880503, 0.051706273, -0.020096257, -0.009863275, -0.023964986, -0.016425587, -0.0035386316, -0.009803858, -0.0073083304, 0.013665983, -0.012206959, 0.0026803813, 0.03543913, -0.04795638, -0.012312589, -0.0106357, -0.01605588, -0.012372007, -0.0037696988, -0.05379248, -0.024123432, -0.03615214, 0.01485433, -0.038000677, 0.051230934, -0.0059120236, 0.011414727, -0.06100178, -0.013533945, 0.017297043, 0.038713686, -0.0040568826, -0.033220883, -0.022552174, -0.06892409, 0.04954084, -0.038000677, 0.016597237, 0.043678332, -0.010721525, 0.010180168, 0.009440752, -0.03050089, -0.03530709, 0.026407698, -0.011474145, -0.04655677, -0.033458553, 0.01601627, 0.0064830896, -0.0192116, -0.02380654, 0.036891554, -0.027516821, -0.008925802, 0.032983214, -0.034118745, 0.013157636, -0.022525767, -0.034541268, -0.022314506, -0.017983641, -0.014577049, 0.015672969, -0.062110905, -0.01835335, 0.032877583, -0.035518352, 0.014643068, -0.07388874, -0.0018485389, 0.052577727, -0.017376265, 0.017785585, 0.020017035, -0.02339722, -0.04428571, -0.049250357, 0.04439134, -0.02099412, 0.007691242, -0.005981344, 0.028256238, -0.056723736, -0.03269273, -0.011929678, 0.018260922, 0.04027174, -0.045447648, -0.026302068, 0.0045652306, 0.016372772, 0.026592553, 0.03176846, 0.0023040716, -0.042384356, 0.021244993, -0.033960298, 0.0002824386, -0.036759514, 0.044523377, -0.0360201, 0.004096494, -0.051759087, -0.0006643187, -0.011447737, -0.0155013185, -0.040694263, -0.0018254322, -0.021733535, 0.001512666, -0.0013368897, 0.040826302, -0.038211938, 0.029497398, -0.012735113, -0.005717267, -0.01801005, -0.013903653, -0.028520314, 0.0070112436, -0.011520358, 0.01760073, 0.027833713, 0.0037168835, 0.012807733, -0.045447648, 0.03646903, -0.023410425, 0.008285415, -0.04658318, 0.0727268, 0.020518782, 0.054980826, -0.016003065, -0.01903995, 0.0049514435, 0.00435727, -0.047692303, 0.012959578, -0.029338952, 0.034462046, -0.027754491, 0.011942881, -0.029127691, -0.041512903, 0.0008041969, -0.03232302, 0.02352926, 6.797919e-05, 0.0020284413, -0.03657466, 0.018987134, 0.042727657, -0.026526533, -0.00057931885, 0.013316082, 0.0091040535, 0.002967565, -0.005581927, -0.019396454, 0.032164577, 0.007070661, 0.004347367, -0.0017825196, 0.031398755, -0.033326514, 0.009150268, -0.07019166, 0.046266288, 0.005413578, -0.012583268, -0.0030236815, 0.037314076, -0.03203254, -0.0106951175, 0.0418562, 0.005090084, -0.033696223, 0.044021633, 0.0634841, -0.012550258, 0.012338997, -0.012325793, -0.013732003, -0.014946757, 0.03874009, -0.013599965, 0.037815824, -0.05321151, -0.010028323, 0.011124243, -0.014048895, -0.025721097, -0.021997612, 0.016240735, 0.010642302, 0.0154617075, -0.0008970365, 0.013837634, 0.0018072769, -0.020386742, -0.010761137, 0.027094299, 0.008925802, 0.0077308537, 0.01985859, 0.024466733, 0.036336992, -0.0028355266, -0.0145638455, -0.0305273, 0.029893514, -0.0020713538, 0.03337933, -0.05057074, 0.020901693, 0.03615214, -0.042384356, -0.0062718284, -0.040218923, 0.071036704, -0.023621686, 0.05342277, 0.0074073593, 0.011322301, -0.007176292, 0.01653122, -0.004608143, 0.051917534, -0.02339722, -0.0030764968, -0.022354117, 0.004462901, -0.012233366, -0.030342445, 0.021033732, -0.010041527, 0.026354883, -0.008338231, -0.0031821276, 0.04645114, 0.010431041, -0.003858825, -0.026513329, -0.034250785, 0.0068329917, 0.07457534, 0.022512563, 0.0034296997, -0.008298619, 0.034514863, -0.005651247, 0.0634841, -0.048669387, -0.032296613, -0.04645114, -0.054452673, -0.022446543, 0.038951356, -0.049936958, 0.015184427, 0.052181613, -0.024229063, 0.014431807, 0.062903136, -0.0015852872, -0.055139273, 0.017085781, -0.04737541, 0.008866385, -0.030659337, -0.05276258, 0.011982493, -0.020518782, 0.03694437, 0.011784435, -0.05714626, 0.026262455, 0.002178635, -0.05400374, 0.01104502, -0.013771614, -0.02168072, -0.041592125, 0.059470136, 0.016782092, -0.03625777, -0.026764201, -0.03097623, 0.013718799, -0.045738135, 0.0019772763, 0.0174951, 0.019145582, -0.017363062, -0.01592384, -0.05403015, -0.0013327635, 0.031504385, -0.019251212, -0.008556094, 0.04967288, -0.02994633, -0.03295681, -0.064593226, 0.004743483, 0.028969245, -0.036680292, -0.041433677, 0.013560353, 0.011071428, -0.01639918, 0.03638981, -0.008450463, -0.012834141, -2.7052418e-05, 0.013890449, 0.006327945, -0.0007876921, 0.037155632, 0.015527726, -0.040113293, -0.03921543, 0.0020053345, 0.004895327, 0.038053494, 0.018841892, -0.0010579583, 0.03142516, 0.053977333, -0.032507878, -0.019026747, -0.011863658, 0.025404206, -0.03966436, -0.013916857, 0.025087314, 0.040192515, 0.0168085, -0.004796298, 0.023608482, 0.008252406, 0.047216963, -0.025430612, 0.0018666942, -0.015699377, -0.012206959, -0.017798789, -0.020518782, 0.05709344, 0.005070278, -0.016069084, -0.012642685, -0.055508982, -0.009500169, 0.02168072, 0.018432572, -0.010391429, 0.014392195, -0.03934747, -0.010226381, 0.047428224, -0.00771765, -0.009071045, 0.03314166, -0.029154098, 0.019436065, 0.005931829, 0.029550213, 0.035729617, -0.021905186, 0.016504811, 0.005004259, -0.013217052, -0.06295595, 0.009196481, -0.022208873, -0.001159463, -0.051204525, -0.04647755, -0.017481895, 0.006050664, -0.021152565, 0.03580884, 0.027701676, -0.027516821, 0.017930826, 0.005185812, -0.0018452379, -0.015395688, -0.0052848407, 0.008582502, -0.024519548, 0.05793849, -0.03522787, -0.007004642, -0.030078368, -0.00043613964, 0.011777833, -0.029180506, 0.012299385, 0.024981683, 0.012906763, 0.0039743586, -0.018089274, -0.04679444, 0.005499403, -0.055350535, -0.010912981, 0.0057931887, -0.021997612, 0.009526577, 0.029603029, -0.048801426, 0.028837206, 0.13795382, -0.0397964, -0.037736602, 0.029840698, -0.041724164, -0.0013327635, -0.025298575, 0.0083316285, -0.014669476, 0.01399608, 0.0063246437, -0.041935425, -0.004106397, -0.013732003, -0.044417746, 0.043783963, -0.014788311, 0.016782092, -0.0027199928, 0.044945903, 0.0022215475, 0.025655078, 0.03728767, 0.008153377, 0.019000338, -0.0055720243, 0.0002826449, 0.0064269733, -0.00045140658, 0.0053145494, -0.029233322, -0.01639918, 0.029418176, -0.03657466, 0.009381334, -0.017310247, 0.0034660103, -0.019356843, -0.02219567, 0.008826773, -0.011573174, -0.018762669, -0.016544422, 0.0017445586, -0.023384016, -0.018987134, -0.006047363, -0.030025553, 0.024242267, -0.075473204, -0.020848878, -0.014616661, -0.00092261896, 0.0068593994, -0.020980917, -0.0013608217, 0.0026259155, 0.023265181, -0.021839166, -0.015765395, 0.028493905, -0.011210068, -0.048669387, 0.018723058, 0.045209978, 0.029418176, -0.049857732, 0.06855439, -0.04164494, 0.022512563, 0.026368087, 0.0043011536, 0.0050471714, -0.019739754, -0.027860122, 0.0009267451, -0.0042417366, -0.013758411, 0.013151034, -0.020056646, 0.020386742, 0.003673971, -0.03269273, -0.02140344, 0.024057413, -0.020782858, 0.011857056, 0.014154526, 0.041961834, -0.0073611457, 0.008133571, 0.0140356915, -0.019990627, 0.0009688324, -0.012919966, -0.005945033, -0.006143091, -0.024031006, -0.025998378, -0.023278385, -0.015765395, 0.01327647, 0.012873753, 0.0036871748, -0.025034498, 0.00874755, 0.0064335754, -0.018894708, 0.0025598963, -0.0044364934, 0.020650819, 0.0064269733, 0.010728127, -0.019092765, 0.02545702, 0.039189022, -0.026434105, -0.03908339, 0.017006557, 0.017257432, -0.0174951, 0.012497443, -0.007876096, -0.03657466, -0.0035386316, -0.029286137, 0.02352926, -0.047322594, -0.04267484, -0.031266715, 0.020505577, -0.016861316, 0.031715646, 0.028942836, -0.0056413445, 0.0009861625, -0.018617427, 0.01293317, -0.011401524, 0.015039184, 0.048431717, 0.018775873, -0.019752959, -0.022010816, 0.020017035, -0.0012139289, -0.0072423113, 0.041618533, 0.0055456166, 0.009902887, -0.02799216, -0.027173521, -0.029048467, 0.014194137, -0.05814975, 0.012180551, 0.08107163, 0.019541696, -0.015514523, 0.05405656, 0.025483428, 0.014537438, 0.014907146, 0.018762669, -0.02706789, -0.031108268, -0.008192988, -0.0020531984, 0.0036508644, -0.009592596, -0.01629355, -0.025932359, -0.008311823, 0.0011248029, -0.003918242, -0.0332737, -0.015567338, -0.014550641, -0.008384444, -0.021667516, 0.027252745, -0.00631144, -0.008694734, -0.022367321, 0.014590253, -0.011276087, -0.020386742, 0.004182319, 0.025324982, 0.040007662, -0.003193681, -0.016544422, -0.0329304, 0.0027860121, 0.017930826, -0.0047698906, 0.005799791, -0.023040716, -0.023714112, -0.012173949, -0.024215858, 0.02764886, 0.022010816, 0.0014697534, -0.022921883, -0.018670242, 0.034013115, 6.194462e-05, 0.008721142, 0.012266376, 0.055878688, -0.0051296954, -0.002668828, 0.0032613508, -0.027860122, 0.0018468883, -0.009361529, -0.008549492, -0.006730662, 0.007182894, -0.011883464, 0.018815484, 0.021773146, 0.0322438, -0.012781326, 0.01571258, 0.028942836, 0.0006511148, 0.016702868, 0.007869494, -0.011315699, 0.034065932, 0.028467499, 0.024374304, -0.0063477503, -0.012266376, 0.016557626, -0.057304703, -0.01049706, 0.0070244474, -0.04737541, -0.019977424, -4.9256545e-05, -0.01588423, 0.0053442577, -0.021773146, -0.03546554, 0.02620964, -0.020598004, -0.03937388, 0.0401397, -0.014827922, -0.011956085, 0.002980769, -0.017587528, 0.0013187344, 0.03863446, -0.002010286, -0.03197972, -0.0011338806, -0.00579649, 0.02531178, -0.015382484, -0.026104009, -0.007711048, -0.013784818, 0.010747933, -0.02878439, -0.00819959, -0.009368131, 0.013467926, 0.009632207, -0.0037729999, -0.0012535404, -0.015725784, 0.014299768, 0.019145582, 0.0007728378, -0.0209281, -0.037763007, -0.017587528, 0.024057413, 0.015831415, 0.042067464, 0.012583268, 0.016478404, -0.008806967, 0.017798789, -0.007935513, 0.033247292, 0.004545425, 0.02144305, -0.04439134, -0.009902887, 0.01938325, -0.016412385, 0.006730662, 0.024757218, -0.008813569, 0.042041056, 0.015514523, -0.032402247, 0.019541696, -0.0051230933, -0.037868638, -0.0133424895, -0.001701646, 0.009955702, -0.030183999, 0.028599536, 0.029154098, 0.001025774, -0.06353692, -0.021522274, 0.021931592, -0.033749036, -0.02994633, -0.03348496, 0.036099322, 0.03303603, 0.049488027, -0.0069782343, -0.073571846, -0.005354161, -0.0030451377, 0.001310482, 0.013131227, -0.025219351, 0.013408509, 0.035016607, -0.026236048, 0.017811993, 0.0082326, -0.02277664, -0.0007035176, -0.029074876, 0.0045949393, -0.0023618385, -0.001787471, -0.00046502307, 0.053501997, 0.019079562, -0.01629355, 0.0018914514, -0.017046168, 0.038608056, 0.021891981, -0.004967948, 0.022367321, -0.004208727, 0.016716072, 0.0021423246, 0.026777405, -0.023384016, -0.015184427, 0.014075303, 0.0010744632, 0.014907146, 0.032402247, 0.051600643, -0.026909444, -0.0040898924, 0.00682639, -0.029840698, -0.006308139, -0.0068527977, -0.010563079, -0.0009052889, -0.04003407, 0.019594511, -0.054452673, 0.02329159, -0.01927762, 0.001159463, 0.07304369, -0.0150127765, -0.005403675, -0.022869067, 0.02309353, 0.007255515, -0.044232894, -0.024968479, -0.034330007, 0.018749466, -0.0133424895, -0.0044232896, 0.007981727, -0.0075459997, 0.029682253, -0.0026968862, 0.011738222, 0.0055258106, 0.00984347, -0.006661342, -0.026460513, 0.016914131, 0.010219779, 0.028414683, -0.014788311, -0.017587528, -0.025853137, 0.0075261937, 0.012787928, -0.03131953, 0.029233322, -0.016425587, -0.00840425, -0.024572363, 0.0015044136, 0.03073856, 0.059522953, -0.018538203, 0.03166283, -0.004710473, -0.027490413, -0.013395305, -0.027965752, -0.035967283, -0.053634036, -0.016755685, 0.007433767, -0.043863185, 0.045817357, -0.011718416, -0.024229063, -0.03575602, -0.04394241, 0.022156058, 0.011956085, 0.031134676, 0.0073149325, 0.0097972555, -0.007103671, -0.010424439, -0.010596089, 0.029655844, -0.004030475, 0.02689624, 0.0021142664, -0.015408892, -0.004208727, 0.025364595, 0.017283838, -0.026539735, -0.026117213, 0.016874518, 0.013864041, -0.00057849364, 0.0056083347, 0.03211176, -0.05371326, -0.0033587292, -0.006743866, -0.01605588, 0.017363062, -0.00017825195, -0.07515631, -0.0005182511, -0.028599536, 0.01224657, -0.021839166, 0.010411235, 0.024849644, -0.0011990746, 0.035069425, -0.02168072, 0.011949483, 0.058572274, 0.016267141, -0.04919754, -0.024097024, 0.045474056, 0.0019970823, -0.009203083, -0.01595025, -0.045474056, -0.01931723, 0.0029972738, 0.017653545, -0.007163088, -0.04006048, 0.021971205, -0.013520741, -0.02833546, 0.037763007, 0.018643836, -0.0005706538, 0.020267908, 0.021020528, 0.004202125, 0.024427122, 0.022829454, -0.04027174, 0.04874861, -0.0049316376, 0.046873663, 0.04407445, 0.0029378564, -0.0018501893, -0.056459658, -0.011606183, 0.03015759, -0.03554476, 0.00015101902, -0.0012428123, -0.03921543, -0.019779366, 0.006126586, -0.006308139, 0.027490413, 0.0015704328, 0.004730279, -0.0072291074, 0.007427165, -0.0054498888, -0.044919495, 0.027384782, 0.041090377, -0.036680292, 0.0071168747, 0.0060902755, 0.017112188, -0.0052023167, -0.016900927, -0.013533945, -0.0069320207, 0.05403015, 0.017191412, -0.03213817, 0.036970776, -0.011025214, -0.007704446, 0.0144054, -0.018194905, -0.028388275, 0.014537438, -0.003832417, 0.044655416, 0.011962688, 0.008998423, -0.00088135694, 0.02994633, 0.03153079, 0.00991609, 0.013705595, -0.029999144, 0.017719565, 0.008344833, -0.030210406, 0.0044596, 0.045289204, 0.005605034, 0.02397819, 0.017165003, -0.017930826, -0.041829795, -0.02082247, -0.010081138, 0.041961834, 0.012154143, -0.018802281, 0.03628418, -0.016201124, 0.01258987, 0.059153244, -0.016663257, -0.015448503, -0.006674546, 0.009453956, -0.012167347, 0.0048821233, -0.0074799806, 0.002404751, 0.0128143355, 0.022340912, -0.034039523, 0.0154617075, 0.0145242335, -0.018749466, -0.014075303, -0.004509114, 0.031583607, 0.021601496, 0.016346365, 0.014656273, -0.022855863, -0.009922693, 0.0076384265, -0.009896285, -0.018498592, 0.020611208, -0.013599965, -0.041196007, 0.021297809, -0.038819317, -0.014695884, 0.008806967, 0.0014895592, -0.0059120236, 0.021192178, 0.020228297, 0.023832947, -0.029603029, 0.01276152, -0.013837634, -0.021878777, 0.020848878, 0.010952593, -0.028467499, -0.03266632, 0.034277193, -0.009572791, 0.010939389, -0.0043011536, -0.0033389232, 0.01811568, 0.0038786307, 0.0078893, -0.0073809517, -0.031372346, -0.0017742672, 0.014445011, -0.013012393, 0.037815824, -0.008067552, 0.032402247, 0.022420136, 0.0023238775, -0.021073343, -0.003139215, 0.014880738, -0.013850838, 0.01468268, 0.015224038, 0.0250477, 0.052921027, -0.010556477, -0.033009622, -0.013467926, 0.01972655, -0.032639913, 0.032428652, 0.012220162, -0.010239585, 0.011038418, 0.008080755, 0.0033092147, 0.015580541, -0.0108997775, -0.015395688, -0.0140356915, 0.0049184337, -0.022842659, 0.007783669, -0.02528537, -0.0048425114, -0.03612573, -0.003310865, 0.0044695027, -0.025140129, -0.0050933845, -0.020505577, 0.041776977, -0.016306754, 0.0150127765, 0.0055489177, 0.027490413, 0.0109790005, 0.0021274702, 0.026249252, 0.033881076, -0.0059780427, 0.0038819315, -0.019515289, -0.016980149, -0.01814209, -0.021971205, -0.018617427, -0.012530453, 0.011962688, 0.022235282, 0.009005025, -0.00507688, 0.024955275, 0.017125392, -0.01732345, -0.004380377, -0.020598004, 0.030342445, -0.021931592, 0.04637192, -0.025404206, -0.010959195, 0.007413961, 0.026817018, 0.028705169, -0.013223655, 0.017125392, -0.01080735, -0.004020572, 0.004624648, -0.037630968, 0.0070376517, 0.02936536, 0.020796062, -0.0020152375, 0.010853563, -0.0052947435, 0.0058195964, 0.01616151, -0.024057413, -0.03628418, 0.016821703, 0.048141234, 0.018340146, 0.02168072, 0.00080708525, -0.027701676, 0.0046180463, 0.011124243, 0.018128885, -0.011645795, -0.0072621168, 0.05450549, 0.009203083, 0.021350624, 0.006245421, 0.01276152, -0.024862848, -0.027596043, 0.04608143, 0.027173521, 0.013375499, -0.01814209, 0.039268248, -0.022222077, -0.00086732785, 0.020611208, 0.035122238, -0.0009217937, 0.03306244, 0.011038418, -0.030606521, -0.040430184, -0.027358375, 0.016900927, -0.059575766, 0.02490246, 0.044549786, -0.014999572, -0.032270208, 0.023621686, 0.022393728, 0.010345216, 0.019053154, 0.040430184, 0.023582075, -0.0022793144, -0.0036904758, -0.011150651, -0.0023667898, 0.015316465, 0.012847345, 0.0096058, -0.039268248, -0.0012461132, -0.008305221, 0.025324982, -0.00507688, 0.0022298, -0.0005310423, 0.014788311, 0.006050664, 0.022578582, -0.040984746, 0.014062099, -0.017561119, 0.01485433, -0.0023040716, 0.03174205, -0.041354455, -0.037710194, 0.03166283, 0.042252317, -0.0054465877, 0.00044686775, 0.033405736, 0.0059912466, 0.011269485, -0.02764886, 0.022037225, -0.020584801, -0.026645368, 0.017864808, 0.022446543, 0.0036145537, -0.018155292, -0.012477637, 0.021152565, -0.021126159, -0.038845725, 0.011566572, -0.011817445, -0.0027876627, 0.021601496, 0.0037763007, 0.07304369, -0.00049349386, 0.0033224185, 0.009909488, -0.027252745, 0.011804241, -0.02311994, -0.013943264, -0.018551407, -0.021178974, -0.032983214, -0.03266632, -0.00240145, -0.0048788222, -0.03200613, -0.029787883, 0.0057304706, -0.002700187, -0.008939005, -0.01272851, 0.023133144, 0.0057733827, -0.0168085, 0.0038687277, -0.017785585, -0.036997184, -0.019251212, -0.016148306, 0.040641446, 0.009883081, -0.012853947, -0.04874861, 0.007077263, 0.011573174, 0.011421329, 0.0024262073, -0.010338614, -0.02209004, 0.034356415, -0.014722291, 0.015633358, -0.0107743405, 0.01433938, -0.0035386316, -0.030791376, -0.007928912, 0.019779366, -0.022261688, 0.0076384265, 0.004660959, 0.0041361055, 0.056512475, 0.06596643, 0.0034429035, -0.0037135824, 0.009315316, -0.017745974, 0.0067999824, 0.037155632, -0.008773957, 0.0164652, -0.027041482, -0.03129312, -0.0002459217, -0.017349858, 0.033801854, 0.009975508, -0.007440369, -0.0010133954, 0.022208873, -0.016993353, 0.0039842613, 0.025140129, -0.008067552, 0.022182466, 0.010780943, 0.008972015, -0.01241822, 0.040113293, -0.024479937, -0.0062850323, 0.033643406, 0.008978617, -0.012906763, 0.026236048, -0.00067215844, -0.016029473, -0.021720331, -0.013718799, 0.012768122, 0.0012436375, -0.00442659, -0.00991609, -0.01327647, -0.018049661, 0.0042879498, -0.024532752, 0.010444244, 0.0020763052, -0.025641875, 0.018168496, 0.027120706, -0.00771765, -0.021046935, 0.026354883, 0.0016933937, 0.009546382, 0.05841383, -0.008674929, -0.015039184, 0.0076714363, -0.017640343, 0.021284604, 0.031134676, 0.035861652, -0.0044893087, -0.028414683, 0.011091233, 0.019515289, -0.006710856, 0.00042046007, 0.023872558, 0.05276258, 0.030025553, 0.014616661, 0.0145242335, -0.023991393, 0.034673307, -0.06939943, -0.023687705, 0.0019673735, 0.038581647, 0.026592553, 0.0039248443, 0.002850381, -0.020914897, 0.020492373, -0.0105300695, -0.015276853, 0.0016900926, 0.05313229, -0.0011281038, 0.013837634, -0.017046168, -0.017653545, -0.017191412, 0.00202349, 0.013599965, -0.0039578537, -0.018894708, 0.0050504724, -0.011381717, -0.033801854, -0.01060269, 0.004542124, -0.012253172, 0.03316807, 0.021073343, -0.005535714, -0.00267543, 0.034277193, 0.048326086, -0.010675312, -0.021720331, -0.02185237, -0.03005196, 0.02309353, 0.026817018, -0.006245421, -0.048035603, -0.016940538, -0.0028190217, -0.0346469, -0.01962092, -0.0075526014, 0.007816679, -0.0071168747, 0.013217052, -0.013151034, -0.008991821, 0.020637617, -0.035148647, -0.031715646, -0.030342445, 0.03546554, 0.022486154, 0.022552174, -0.014286565, 0.008707939, 0.010959195, 0.008839977, -0.011718416, -0.03488457, 0.019290823, 0.008008135, -0.0007938814, -0.037736602, 0.00040457418, -0.0074601746, -4.9488644e-05, -0.0052155205, 0.012345599, -0.031213898, -0.012088124, -0.009658615, -0.010213177, -0.007955319, 0.015039184, 0.0233312, -0.022869067, 0.03541272, -0.0049448414, -0.0216147, 0.016584035, -0.032877583, 0.0072291074, 0.005951635, -0.012985986, -0.009038035, -0.0045520267, -0.01564656, 0.015118407, 0.022604989, -0.011091233, 0.012338997, 0.013362295, -0.027464006, -0.0011281038, 0.033009622, -0.018432572, 0.0070178458, -0.029180506, -0.08894113, -0.01794403, 0.012721908, -0.0014309671, 0.039268248, -0.022327708, -0.011837251, -0.007420563, -0.0039776596, -0.0007608718, -0.008490074, 0.0072885244, -0.00319038]"
../../../gradio,../../../gradio/gradio/components,line_plot.py,"""""""gr.LinePlot() component""""""

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.plot import AltairPlot, AltairPlotData, Plot

if TYPE_CHECKING:
    import pandas as pd


@document()
class LinePlot(Plot):
    """"""
    Creates a line plot component to display data from a pandas DataFrame (as output). As this component does
    not accept user input, it is rarely used as an input component.

    Demos: live_dashboard
    """"""

    data_model = AltairPlotData

    def __init__(
        self,
        value: pd.DataFrame | Callable | None = None,
        x: str | None = None,
        y: str | None = None,
        *,
        color: str | None = None,
        stroke_dash: str | None = None,
        overlay_point: bool | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        stroke_dash_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        stroke_dash_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        x_lim: list[int] | None = None,
        y_lim: list[int] | None = None,
        caption: str | None = None,
        interactive: bool | None = True,
        label: str | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        every: float | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        show_actions_button: bool = False,
    ):
        """"""
        Parameters:
            value: The pandas dataframe containing the data to display in a scatter plot.
            x: Column corresponding to the x axis.
            y: Column corresponding to the y axis.
            color: The column to determine the point color. If the column contains numeric data, gradio will interpolate the column data so that small values correspond to light colors and large values correspond to dark values.
            stroke_dash: The column to determine the symbol used to draw the line, e.g. dashed lines, dashed lines with points.
            overlay_point: Whether to draw a point on the line for each (x, y) coordinate pair.
            title: The title to display on top of the chart.
            tooltip: The column (or list of columns) to display on the tooltip when a user hovers a point on the plot.
            x_title: The title given to the x axis. By default, uses the value of the x parameter.
            y_title: The title given to the y axis. By default, uses the value of the y parameter.
            x_label_angle: The angle for the x axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            y_label_angle: The angle for the y axis labels. Positive values are clockwise, and negative values are counter-clockwise.
            color_legend_title: The title given to the color legend. By default, uses the value of color parameter.
            stroke_dash_legend_title: The title given to the stroke_dash legend. By default, uses the value of the stroke_dash parameter.
            color_legend_position: The position of the color legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            stroke_dash_legend_position: The position of the stoke_dash legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            height: The height of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            x_lim: A tuple or list containing the limits for the x-axis, specified as [x_min, x_max].
            y_lim: A tuple of list containing the limits for the y-axis, specified as [y_min, y_max].
            caption: The (optional) caption to display below the plot.
            interactive: Whether users should be able to interact with the plot by panning or zooming with their mouse or trackpad.
            label: The (optional) label to display on the top left corner of the plot.
            show_label: Whether the label should be displayed.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            visible: Whether the plot should be visible.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            show_actions_button: Whether to show the actions button on the top right corner of the plot.
        """"""
        self.x = x
        self.y = y
        self.color = color
        self.stroke_dash = stroke_dash
        self.tooltip = tooltip
        self.title = title
        self.x_title = x_title
        self.y_title = y_title
        self.x_label_angle = x_label_angle
        self.y_label_angle = y_label_angle
        self.color_legend_title = color_legend_title
        self.stroke_dash_legend_title = stroke_dash_legend_title
        self.color_legend_position = color_legend_position
        self.stroke_dash_legend_position = stroke_dash_legend_position
        self.overlay_point = overlay_point
        self.x_lim = x_lim
        self.y_lim = y_lim
        self.caption = caption
        self.interactive_chart = interactive
        self.width = width
        self.height = height
        self.show_actions_button = show_actions_button
        super().__init__(
            value=value,
            label=label,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            every=every,
        )

    def get_block_name(self) -> str:
        return ""plot""

    @staticmethod
    def create_plot(
        value: pd.DataFrame,
        x: str,
        y: str,
        color: str | None = None,
        stroke_dash: str | None = None,
        overlay_point: bool | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        stroke_dash_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        stroke_dash_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | None = None,
        width: int | None = None,
        x_lim: list[int] | None = None,
        y_lim: list[int] | None = None,
        interactive: bool | None = None,
    ):
        """"""Helper for creating the scatter plot.""""""
        import altair as alt

        interactive = True if interactive is None else interactive
        encodings = {
            ""x"": alt.X(
                x,  # type: ignore
                title=x_title or x,  # type: ignore
                scale=AltairPlot.create_scale(x_lim),  # type: ignore
                axis=alt.Axis(labelAngle=x_label_angle)
                if x_label_angle is not None
                else alt.Axis(),
            ),
            ""y"": alt.Y(
                y,  # type: ignore
                title=y_title or y,  # type: ignore
                scale=AltairPlot.create_scale(y_lim),  # type: ignore
                axis=alt.Axis(labelAngle=y_label_angle)
                if y_label_angle is not None
                else alt.Axis(),
            ),
        }
        properties = {}
        if title:
            properties[""title""] = title
        if height:
            properties[""height""] = height
        if width:
            properties[""width""] = width

        if color:
            domain = value[color].unique().tolist()
            range_ = list(range(len(domain)))
            encodings[""color""] = {
                ""field"": color,
                ""type"": ""nominal"",
                ""scale"": {""domain"": domain, ""range"": range_},
                ""legend"": AltairPlot.create_legend(
                    position=color_legend_position, title=color_legend_title or color
                ),
            }

        highlight = None
        if interactive and any([color, stroke_dash]):
            highlight = alt.selection(
                type=""single"",  # type: ignore
                on=""mouseover"",
                fields=[c for c in [color, stroke_dash] if c],
                nearest=True,
            )

        if stroke_dash:
            stroke_dash = {
                ""field"": stroke_dash,  # type: ignore
                ""legend"": AltairPlot.create_legend(  # type: ignore
                    position=stroke_dash_legend_position,  # type: ignore
                    title=stroke_dash_legend_title or stroke_dash,  # type: ignore
                ),  # type: ignore
            }  # type: ignore
        else:
            stroke_dash = alt.value(alt.Undefined)  # type: ignore

        if tooltip:
            encodings[""tooltip""] = tooltip

        chart = alt.Chart(value).encode(**encodings)  # type: ignore

        points = chart.mark_point(clip=True).encode(
            opacity=alt.value(alt.Undefined) if overlay_point else alt.value(0),
        )
        lines = chart.mark_line(clip=True).encode(strokeDash=stroke_dash)

        if highlight:
            points = points.add_selection(highlight)

            lines = lines.encode(
                size=alt.condition(highlight, alt.value(4), alt.value(1)),
            )

        chart = (lines + points).properties(background=""transparent"", **properties)
        if interactive:
            chart = chart.interactive()

        return chart

    def preprocess(self, payload: AltairPlotData | None) -> AltairPlotData | None:
        """"""
        Parameters:
            payload: The data to display in a line plot.
        Returns:
            (Rarely used) passes the data displayed in the line plot as an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""line"").
        """"""
        return payload

    def postprocess(
        self, value: pd.DataFrame | dict | None
    ) -> AltairPlotData | dict | None:
        """"""
        Parameters:
            value: Expects a pandas DataFrame containing the data to display in the line plot. The DataFrame should contain at least two columns, one for the x-axis (corresponding to this component's `x` argument) and one for the y-axis (corresponding to `y`).
        Returns:
            The data to display in a line plot, in the form of an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""line"").
        """"""
        # if None or update
        if value is None or isinstance(value, dict):
            return value
        if self.x is None or self.y is None:
            raise ValueError(""No value provided for required parameters `x` and `y`."")
        chart = self.create_plot(
            value=value,
            x=self.x,
            y=self.y,
            color=self.color,
            overlay_point=self.overlay_point,
            title=self.title,
            tooltip=self.tooltip,
            x_title=self.x_title,
            y_title=self.y_title,
            x_label_angle=self.x_label_angle,
            y_label_angle=self.y_label_angle,
            color_legend_title=self.color_legend_title,  # type: ignore
            color_legend_position=self.color_legend_position,  # type: ignore
            stroke_dash_legend_title=self.stroke_dash_legend_title,
            stroke_dash_legend_position=self.stroke_dash_legend_position,  # type: ignore
            x_lim=self.x_lim,
            y_lim=self.y_lim,
            stroke_dash=self.stroke_dash,
            interactive=self.interactive_chart,
            height=self.height,
            width=self.width,
        )

        return AltairPlotData(type=""altair"", plot=chart.to_json(), chart=""line"")

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        import pandas as pd

        return pd.DataFrame({self.x: [1, 2, 3], self.y: [4, 5, 6]})
","The code defines a `LinePlot` component that creates a line plot to display data from a pandas DataFrame. The component does not accept user input and is used to visualize data. It includes various parameters such as x-axis, y-axis, color, title, tooltip, legends, labels, and interactive options. The `create_plot` method generates the line plot using Altair library based on the provided parameters. The `preprocess` and `postprocess` methods handle the data processing before and after displaying the plot. The `example_payload` and `example_value` methods provide examples of input data and output data for the component.","[-0.06022933, -0.0015713872, 0.020675581, -0.009541334, 0.021213727, -0.022236204, -0.0303084, 0.00013293895, -0.0098696025, 0.02423811, 0.042126093, -0.029189054, -0.018017137, -0.04031792, -0.004087221, -0.03159995, 0.005053194, 0.017909508, -0.020320404, 0.01416401, 0.0071896343, -0.005871176, -0.0075501925, 0.0043428405, -0.0258956, -0.009708159, 0.004999379, 0.024690151, -0.011053525, 0.03652937, -0.013744256, -0.035366975, 0.0118069295, 0.013916463, 0.03652937, -0.023183342, 0.016973134, -0.023420127, -0.013399842, -0.037325826, 0.0018444963, 0.016015233, -0.00060575095, 0.023872169, -0.012452705, 0.028887693, -0.043955788, 0.026218487, -0.00073658774, 0.045161236, -0.025185246, 0.020008279, -0.0150142815, -0.03159995, -0.052307818, 0.05209256, -0.05028439, 0.07292958, 0.016198203, -0.00989651, 0.041695576, 0.013238398, -0.024367264, 0.05058575, -0.052135613, -0.012721778, -0.04072691, -0.0064093224, -0.015907604, 0.03144927, 0.060315438, 0.012861696, -0.0073887487, 0.012980089, -0.024474893, -0.039887402, -0.042728815, 0.0011987209, 0.0018418056, 0.00015068096, -0.018092478, 0.029856356, -0.019147245, -0.0069851386, -0.013819597, -0.08808378, -0.010816741, -0.006963613, 0.02145051, 0.0010695658, -0.0017193774, -0.029189054, -0.02667053, 0.043266963, 0.028112762, 0.09023637, -0.04042555, 0.025551185, 0.033666432, 0.031686053, 0.043460693, -0.015283355, -0.03336507, 0.0116993, 0.0068290764, -0.022472989, -0.01982531, -0.016564142, 0.04083454, 0.029770253, -0.03523782, 0.02122449, -0.041028272, 0.033171337, -0.067289814, -0.0020503374, 0.016176678, -0.013281451, 0.045075133, 0.008674918, -0.037433457, 0.019932939, 0.027014943, -0.04572091, 0.002634226, -0.0147129195, -0.011979137, -0.0771917, -0.0036217244, 0.037132096, 0.000514266, 0.0029113714, -0.036615472, -0.03928468, -0.045677856, 0.050112184, -0.021353645, 0.0057474026, -0.029899407, 0.0052549983, 0.019502422, 0.047959596, 0.009589767, -0.034333732, -0.009864221, -0.0278114, -0.0032073518, -0.022645196, -0.028414125, 0.01906114, 0.00989651, 0.10599329, -0.007544811, -0.018060189, -0.025831021, 0.01732831, 0.050628804, -0.017059237, -0.003836983, -0.025809497, 0.02806971, 0.0015740779, -0.021730347, -0.005381463, -0.025013039, -0.009514427, -0.01629507, -0.013270687, -0.02729478, -0.024969988, 0.002295194, -0.018383076, -0.024173532, -0.028758537, 0.04752908, -0.009309931, -0.01206524, 0.0047572134, 0.049251147, -0.054288197, -0.027101047, -0.0189858, -0.04572091, -0.024410315, -0.03564681, 0.023570808, -0.0072595933, 0.029727202, -0.0009330111, 0.047227718, -0.00020029132, -0.01769425, -0.029684149, 0.001548516, -0.019803783, -0.020718632, 0.042169143, 0.014465372, -0.0139057, 0.027897503, 0.018361552, 0.021181438, -0.022494515, 0.012807881, 0.028500227, 0.0360558, -0.03917705, -0.020428034, -0.008631866, -0.03943536, 0.026110858, -0.030502131, 0.028672434, -0.0029194437, -0.03450594, -0.0077062547, -0.01728526, -0.0121082915, 0.025400504, 0.0114409905, -0.007302645, 0.0018229706, -0.005871176, -0.03949994, 0.014551476, -0.0023032662, 0.06358737, -0.051662043, -0.0105961, -0.012549572, 0.0021552758, -0.004097984, 0.013120007, -0.0033553422, 0.0025925199, -0.0328915, -0.025960177, -0.07038953, 0.007717018, 0.009519808, 0.00029934387, 0.013722731, 0.013755019, 0.019233348, 0.059497453, 0.028263442, -0.01626278, -0.050241336, 0.026562901, 0.056053318, 0.015552428, -0.0035087138, 0.005618247, -0.012215921, -0.04016724, -0.02137517, -0.013356791, -0.0077439253, -0.02563729, -0.055192284, -0.011580908, -0.00043825287, -0.04186778, 0.008050668, 0.00279567, -0.016983896, 0.027832925, 0.06354431, -0.06974376, -0.03549613, -0.0012632984, 0.0080345245, 0.03601275, -0.021321356, -0.041674048, -0.0053760814, 0.03949994, 0.05075796, 0.014540712, 0.018931987, -0.029124478, 0.004014571, -0.024001325, 0.036593948, -0.042276774, 0.012937036, 0.013959515, -0.02729478, -0.01842613, -0.04124353, 0.05209256, -0.035366975, 0.0041813967, 0.000774258, 0.0031858261, 0.03418305, 0.032762345, 0.032138098, 0.023979798, -0.024453368, 0.0022642505, -0.029016849, -0.014142484, -0.061994452, 0.010014903, -0.017812641, 0.012883222, 0.018081715, -0.0037401167, 0.000580189, 0.027832925, 0.026153909, 0.010440038, -0.026326116, -0.020492611, 0.050370492, 0.04520429, 0.021202965, -0.038854163, -0.037089042, -0.05665604, -0.015498613, 0.031234011, -0.016047522, -0.02994246, -0.0047760485, -0.008082957, 0.0042056134, 0.0030190006, 0.036916837, 0.009105436, -0.037067518, -0.049165044, 0.02931821, 0.014120959, 0.008421989, -0.066342674, -0.03601275, -0.061951403, 0.056182474, -0.046065323, -0.014250114, -0.0016857432, 0.021579666, -0.009057002, 0.018092478, 0.012893985, -0.003707828, 0.025357453, 0.0060272384, -0.05510618, -0.009229209, -0.008787929, -0.011946848, -0.0028279587, -0.026003229, -0.044773772, -0.04959556, -0.016671771, -0.0054837107, -0.034850355, -0.01754357, -0.042621188, -1.1845525e-05, 0.024324212, 0.030738916, -0.050112184, -0.042190667, -0.005392226, 0.0032181148, 0.025013039, -0.009568241, -0.019265637, 0.02563729, -0.01986836, -0.032676242, 0.039521463, -0.050327443, -0.07133667, -0.018522995, 0.0069420873, -0.0057474026, -0.0022494516, -0.007458708, -0.028198866, 0.025852548, 0.015606242, 0.011462516, 0.02093389, 0.027962081, 0.034118474, -0.06289854, -0.032869976, 0.029447366, 0.056742147, -0.013335265, 0.02766072, 0.055235334, 0.039779775, -0.012258972, -0.033343542, -0.008357412, 0.005951898, 0.023420127, -0.029275158, -0.009057002, 0.029146003, 0.022128575, 0.02423811, 0.038057707, -0.007372604, -0.023484703, 0.011118102, -0.050499648, 0.065610796, -0.014228588, 0.010983566, -0.0057527837, 0.010736018, 0.020535663, 0.013432131, -0.046452787, -0.019653102, -0.01408867, -0.047873493, 0.030265348, 0.058205903, -0.027144099, -0.022429937, -0.02298961, 0.0581198, 0.027057996, 0.0417171, 0.01710229, -0.03228878, -0.056182474, -0.019610051, 0.012032951, 0.038574327, 0.018167818, 0.028284969, 0.0039419215, -0.00091013993, 3.7460028e-05, -0.051446784, -0.0372182, 0.03637869, -0.030243821, -0.023032662, 0.0040603136, 0.008664155, 0.033601854, 0.0058065983, 0.00191311, 0.031535372, -0.03205199, -0.03799313, -0.025701867, -0.00010418176, 0.040511653, 0.00024855632, 0.055278387, -0.022838928, 0.053427164, -0.009094672, 0.0060272384, 0.04830401, -0.012560334, 0.0167794, -0.0047760485, -0.014573001, 0.030825019, 0.049380302, 0.011516331, -0.03616343, -0.0009081219, 0.015950656, -0.02552966, -0.019567, -0.007264975, 0.033020657, 0.02994246, -0.024625573, 0.016155152, 0.045376495, 0.09066689, -0.004972472, -0.033386596, -0.004590388, -0.017554332, -0.025206773, -0.030760443, -0.0054137516, -0.007426419, 0.013787308, -0.016607195, -0.07172414, 0.004568862, 0.017898746, -0.017016185, 0.049165044, 0.01618744, 0.030523658, 0.03844517, 0.03020077, 0.0038907977, 0.02111686, 0.0016157842, -0.026885789, 0.025142195, -0.057560127, 0.044084944, 0.03777787, -0.008126009, -0.02428116, 0.015606242, -0.021009231, 0.016305832, -0.011075051, -0.026907314, 0.011849982, -0.00529805, -0.0055159996, -0.012172869, -0.005300741, 0.02314029, 0.006592292, -0.054933973, -0.029641097, -0.03108333, -0.016639484, -0.011914559, -0.014766734, 0.009761973, -0.067935586, 0.02192408, 0.011785404, 0.016198203, -0.03579749, -0.009422941, 0.02552966, 0.030803494, -0.0008455624, -0.019233348, 0.0140779065, -0.00691518, -0.004703399, -0.012484994, 0.0076793474, 0.05338411, 0.0669454, -0.040533178, -0.01331374, -0.000731879, 0.017640436, 0.028693961, -0.024517944, 0.01052076, -0.010687585, -0.026326116, 0.012969325, 0.0543743, 0.0036136524, 0.01268949, 0.021913316, 0.00069151795, 0.007221923, -0.030997226, -0.017489754, 0.014895889, -0.03949994, -0.005941135, -0.01699466, -0.03119096, 0.004619986, -0.006920561, 0.046754148, -0.038014654, -0.0047948835, -0.0035114046, -0.026821211, 0.031879786, -0.031556897, -0.030265348, -0.03362338, 0.014486898, -0.015541665, 0.030631287, 0.011150391, -0.022946557, -0.018856646, -0.0008711243, -0.058722522, -0.0016211657, -0.024324212, -0.01875978, 0.006151012, 0.0068290764, -0.00676988, -0.009288405, 0.015412509, -0.0054325867, -0.022580618, 0.00503974, -0.02662748, -0.03457052, 0.022300782, 0.056914352, -0.027983608, -0.022429937, 0.0074694706, 0.023635386, 0.0036459411, -0.04572091, 0.00095184625, 0.029511942, 0.0024310758, 0.03829449, 0.009132342, -0.05842116, -0.0013453658, -0.008895558, -0.036206484, -0.0048944405, -0.017274495, 0.0111073395, -0.025185246, 0.00437782, -0.017005423, 0.038488224, -0.006619199, 0.0017503208, 0.068882726, 0.02093389, 0.0328915, 0.0021202965, 0.0045123566, -0.023463178, -0.0010022975, -0.03631411, -0.03342965, 0.019201059, 0.035194766, 0.026089333, 0.0036593948, 0.0069420873, -0.016402699, 0.02298961, 0.037347354, -0.016843978, 0.0127433045, -0.00400919, 0.026649004, 0.015993707, -0.015347932, -0.015832264, 0.0033338163, 0.012797119, 0.030437553, 0.010859792, -0.02262367, -0.0151542, -0.011085814, -0.016208965, -0.007991472, 0.045548704, 0.031126382, -0.0062963115, 0.046926357, 0.029382788, -0.01460529, 0.041889306, 0.0047060894, 0.00088995945, -0.033322018, -0.022688247, -0.002435112, -0.022020945, -7.037944e-05, 0.020449558, -0.022903506, -0.009180776, -0.04369748, -0.0036593948, 0.004921348, -0.00015648286, 0.028134288, 0.017500518, 0.007867699, -0.015713872, -0.006129486, 0.01784493, 0.0045500267, 0.009998758, 0.008217494, 0.034785777, -0.0048836777, -0.0007224614, 0.025615763, -0.011365649, -0.028823115, -0.0056882063, 0.038832635, -0.03693836, -0.0023476633, 0.018049426, 0.015132674, 0.00027764984, 0.0385528, -0.018490706, -0.014895889, 0.010208635, -0.035668336, 0.008895558, -0.03207352, 0.023441652, 0.0328915, 0.000746678, -0.043611374, 0.037239723, -0.033343542, -0.011613197, -0.056699093, -0.015326406, 0.018705966, 0.024345739, 0.008120627, 0.03129859, 0.013173821, 0.005411061, 0.021719584, -0.030997226, 0.031987414, -0.00251987, 0.0044827587, -0.018673677, -0.0101709645, 0.012506519, -0.01868444, 0.0151542, -0.01383036, 0.0017341764, 0.011559382, -0.00835203, 0.012280499, -0.046840254, -0.01637041, -0.016090574, -0.0101709645, -0.005650536, 0.02210705, 0.0044423975, 0.017382124, 0.003175063, -0.060487643, 0.013346028, -0.008728732, -0.008384319, 0.000583216, 0.00235439, -0.012700252, 0.011559382, 0.022774352, -0.025120668, -0.03388169, -0.035474602, 0.04520429, 0.0033391977, -0.011042762, -0.029232107, -0.027380884, -0.030997226, 0.01776959, -0.031406216, 0.024410315, -0.009024713, 0.017005423, 0.023786066, -0.0040038084, -0.02376454, 0.012517283, 0.0049132756, -0.025766443, 0.009600529, 0.03508714, 0.024582522, -0.025013039, 0.012517283, -0.012484994, -0.022731299, -0.052738335, 0.007889224, 0.019125719, -0.013066192, 0.058464214, -0.015950656, 0.017984848, -0.0568713, -0.04473072, -0.029985512, 0.015498613, -0.0052630706, -0.038165335, 0.013561286, 0.045419548, 0.0042675002, -0.035775967, -0.0233986, -0.01125802, -0.022903506, 0.014540712, 0.03969367, -0.02718715, 0.0143792685, -0.025142195, -0.01997599, 0.0156170055, -0.023183342, -0.03891874, -0.005459494, -0.005650536, 0.00047188703, -0.015358695, -0.00985884, 0.021009231, 0.005693588, 0.028973795, 0.016833216, -0.012506519, -0.030975701, -0.010935132, 0.0011845945, 0.016865505, 0.01007948, 0.03896179, 0.022010183, 0.019007327, -0.01383036, 0.009611293, 0.0028790827, 0.024969988, 0.03928468, -0.0017826096, -0.03325744, 0.04602227, -0.022472989, -0.006274786, -0.013787308, -0.016973134, 0.026692055, 0.02578797, -0.004369748, 0.016241254, -0.04040402, -0.029748727, 0.009476756, -0.0012505174, -0.006118723, 0.006576148, 0.06518028, -0.010111769, -0.025292875, 0.0035813635, -0.0039849733, -0.02096618, -0.07073395, -0.001964234, -0.018275447, 0.0007197707, -0.0050047603, 0.013324502, 0.01670406, -0.003697065, 0.020589476, -0.020115908, 0.0029113714, -0.0039526843, 0.041803204, -0.00695285, 0.00041639069, 0.0029032992, 0.0020530282, 0.02677816, 0.011451753, -0.012667963, -0.04701246, -0.0033553422, -0.009831932, 0.016908556, -0.011925322, -0.032654718, 0.013819597, 0.003928468, 0.022020945, 0.0059034647, 0.02755309, -0.009132342, -0.027251728, -0.014228588, 0.015337169, 0.02604628, -0.005416442, 0.016230492, -0.011796167, -0.0012807882, -0.012377365, -0.008771785, -0.053298008, -0.04981082, -0.047141615, -0.017758828, -0.015455562, 0.001177195, 0.01563853, 0.013475183, 0.028650908, -0.020546425, -0.010714493, 0.005058575, 0.0029894027, 0.0335588, -0.0010964731, 0.0015337169, 0.0032208054, -0.034678146, 0.024431841, -0.008814836, 0.00323695, 0.0051635136, -0.0072595933, 0.043568324, 0.052480027, -0.0030593616, 0.0059465165, -0.0038531274, -0.02707952, -0.014282403, -4.141204e-05, 0.016661009, -0.00042648092, 0.014669868, 0.024948463, -0.00044935214, 0.0146806305, 0.014637579, -0.0064362297, 0.032826923, 0.023226393, 0.028414125, 0.015509376, 0.02251604, -0.032762345, 0.08364946, 0.013970277, -0.050628804, -0.015261829, 2.5603991e-05, 0.0045742434, 0.030695865, 0.0032181148, -0.014820549, -0.018189345, 0.023204869, -0.0036297967, 0.017974086, -0.03127706, -0.0030835783, -0.02085855, 0.01949166, 0.01857681, -0.004151799, -0.0027189841, 0.0020436104, 0.030372977, -0.0073295524, -0.021859502, 0.018296974, -0.00515006, 0.044300202, 0.012861696, 0.026864262, 0.02376454, -0.0034737343, 0.014239351, -0.03398932, -0.029727202, -0.010585338, -0.019394793, 0.00047592312, -0.0046334397, 0.0044450886, 0.042879496, 0.028887693, 0.028048184, 0.017931035, -0.00048264995, 0.0065277144, 0.019007327, 0.040683858, 0.00068378216, -0.022128575, 0.035366975, 0.0010897462, -0.015778448, -0.03035145, -0.0072488305, 0.019846834, -0.0053195762, -0.023183342, -0.01353976, 0.022666723, -0.016639484, -0.0005512636, 0.027832925, -0.0029382787, -0.02729478, -0.02916753, -0.014723683, -0.02537898, -0.019470133, -0.0161121, -0.010956658, 0.017145341, -0.009740448, -0.0068667466, 0.0046630376, 0.01077907, -0.012000662, 0.016208965, 0.04253508, -0.001117999, 0.012086766, 0.01026245, 0.004959018, 0.0067160656, 0.041114375, -0.018899698, 0.04907894, 0.0080345245, 0.003748189, -0.028844642, -0.02060024, 0.017705012, 0.04253508, 0.019082667, -0.0065223332, 0.003947303, -0.0023382457, 0.0278114, 0.015358695, 0.017468229, 0.0004049551, -0.020772446, 0.037713293, -0.00045641532, 0.00038342923, -0.012581861, -0.042126093, 0.056785196, 0.020847788, -0.008088339, -0.047227718, 0.010057954, -0.02806971, -0.01986836, 0.0014260877, 0.028005132, -0.028521754, -0.0056451545, 0.007324171, -0.024022851, 0.027122572, 0.02184874, -0.029189054, -0.016693298, 0.00064073043, -0.0026073188, -0.027101047, 0.01974997, -0.019932939, -0.0060971975, 0.0014287784, 0.013884175, 0.0018027901, 0.018157056, -0.0062155896, 0.007878462, 0.015111147, 0.013001614, 0.0033957032, -0.021073809, 0.011430227, -0.00023073022, -0.051188476, 0.011602434, 0.026455272, 0.008459659, 0.06294159, -0.004566171, -0.02707952, 0.011301072, -0.001743594, -0.01769425, -0.026024755, -0.010746782, 0.013690442, 0.0073564597, -0.008454278, -0.018619861, -0.0019305998, 0.029189054, 0.047615185, 0.008804074, 0.0031239393, -0.010865173, 0.012388128, 0.016865505, 0.0014045618, 0.054417353, -0.0054756384, 0.008206731, -0.017823406, 0.00985884, -0.0121082915, 0.027531564, 0.0012525355, 0.007324171, -0.003446827, -0.010434656, 0.0020718633, -0.0303084, -0.0077869766, -0.025249824, -0.004811028, 0.003729354, -0.011397938, 0.012797119, -0.017834168, -0.00765244, 0.0045042844, 0.023613859, -0.024582522, 0.009293786, 0.005322267, -0.02096618, -0.008265927, 0.020094382, 0.0347212, 0.026304591, 0.0057204952, 0.018781306, 0.045893114, 0.007910751, -0.0076416773, 0.061994452, -0.002203709, 0.004509666, 0.013378317, 0.008502712, -0.014390032, -0.003064743, 0.01743594, -0.015294118, -0.005704351, -0.017457465, 0.021762636, -0.011742352, -0.0014395413, 0.014217825, 0.012904748, -0.011688537, -0.007819265, -0.008927847, -0.012754067, 0.015347932, -0.011860744, 0.017500518, 0.013776545, -0.019244112, 0.026562901, -0.017382124, 0.0042540464, 0.006350126, 0.015950656, -0.002394751, -0.0040603136, -0.012022188, -0.02126754, 0.028737012, -0.011634722, -0.015692346, 0.0020960798, -0.0074694706, -0.037907023, 0.022010183, -0.0031454652, -0.018146293, 0.0008677609, 0.04550565, -0.0027849071, 0.014928178, 0.013066192, -0.0015808047, -0.015939893, 0.0006208863, -0.011053525, 0.01835079, 0.018931987, -0.005860413, -0.0016965062, -0.0040441696, 0.03373101, -0.0140456185, -0.019706918, -0.017317548, 0.021934843, -0.00032591485, 0.008669537, 0.015251066, 0.017608147, -0.0033903215, 0.009977233, 0.0015821501, 0.034850355, -0.010666059, 0.0055536698, -0.013442894, -0.0061456305, -0.039521463, 0.03631411, 0.0025952104, -0.04628058, -0.03185826, -0.035474602, 0.020062095, -0.02563729, 0.02880159, 0.03327897, 0.0038450554, -0.010283976, -0.008578052, -0.013292213, 0.027682245, -0.023377074, 0.020611003, 0.049853873, 0.016843978, 0.028995322, -0.0017933726, -0.0058281245, -0.007571718, -0.02350623, -0.0061402493, -0.009562859, -0.03304218, -0.019265637, -0.04701246, -0.0127755925, -0.011925322, -0.012678727, -0.020245064, 0.016467277, 0.033128284, 0.024926936, 0.007324171, -0.023829117, -0.041996937, 0.04223372, 0.005217328, 0.011236494, 0.0063877963, 0.03487188, 0.008615722, 0.009767355, -0.043331537, 0.01497123, -0.007878462, -0.026907314, 0.00049206754, 0.018555284, -0.0063877963, -0.017941797, 0.01776959, 0.0045231194, -0.043180857, 0.0039984267, 0.0077008735, -0.030975701, 0.029425839, 0.023032662, -0.013141532, 0.03523782, 0.02210705, -0.014239351, -0.006043383, 0.016069049, 0.018017137, -0.020212775, -0.012657201, 0.023011135, -0.007862317, -0.02537898, -0.063070744, -0.020363456, 0.019814547, 0.022214679, -0.0011375067, 0.005672062, -0.020987704, 0.004579625, -0.004014571, 0.0024189677, 0.005279215, -0.008621103, -0.025422031, -0.023011135, -0.019782258, -0.016822454, -0.01835079, 0.0335588, 9.4680116e-05, 0.04031792, -0.01338908, 0.015810737, 0.038638905, -0.006543859, -0.021063047, -0.0008307633, -0.021655006, 0.06018628, -0.013658153, 0.04468767, 0.026390694, -0.022602145, -0.0146806305, -0.014400795, -0.0042809537, 0.05183425, 0.009864221, -0.0030620524, 0.021385934, 0.006382415, 0.054115992, 0.03134164, 9.560505e-05, 0.014443846, 0.0058065983, 0.023958273, 0.026218487, 0.014433083, 0.016004471, 0.009885747, -0.0353885, -0.007948421, -0.030738916, -0.001662872, 0.009907274, -0.01585379, -0.0065546217, -0.02527135, -0.0054756384, 0.031427745, -0.0038316015, 0.015573953, 0.027983608, 0.018479943, -0.03321439, 0.034462888, 0.004097984, 0.0036997558, -0.02729478, -0.010730637, 0.012452705, 0.017554332, -0.011268783, -0.004038788, -0.028823115, -0.032826923, -0.010219398, -0.007862317, 0.019201059, -0.020148197, -0.021095334, 0.028715486, 0.002509107, 0.059497453, 0.012086766, 0.011527093, -0.00037771143, -0.015799975, -0.047916546, 0.01026245, 0.0012706979, -0.0005795163, 0.040856067, 0.02641222, -0.0028306495, 0.002806433, 0.008346649, 0.0029571138, -0.004391274, 0.012205157, 0.006124105, -0.0015216087, 0.027854452, 0.007727781, 0.030136192, 0.009966469, -0.020492611, -0.011656249, -0.012980089, -0.012000662, 0.018081715, -0.011085814, -0.0070497165, -0.015563191, 0.047141615, 0.006091816, 0.031104855, -0.024302686, 0.026218487, 0.0055751954, -0.0021566213, -0.0085350005, 0.036507845, -0.0059895683, -0.012388128, 0.03237488, 0.06281243, -0.032547086, 0.02423811, 0.02438879, -0.012495757, 0.016714824, 0.03045908, 0.003667467, 0.007082005, -0.0042836443, 0.009126961, 0.02126754, 0.02895227, 0.05816285, -0.02568034, -0.02563729, 0.03835907, 0.031492323, 0.025228297, 0.01681169, 0.018447654, -0.01052076, 0.0037966222, 0.011075051, 0.014282403, -0.006570766, -0.00805605, -0.06806474, -0.021784162, 0.03056671, 0.019351741, 0.024819307, -0.019082667, 0.0303084, -0.017554332, -0.011333361, -0.01268949, -0.0059788055, -0.01284017, 0.00695285, -0.017339073, 0.01162396, -0.010553049, 0.021708822, 0.006323219, -0.000115953706, 0.028672434, 0.0050854823, -0.0033149812, 0.0010083516, 0.026218487, 0.034376785, -0.0034844973, -0.013227636, -0.0021902553, -0.008545763, 0.014433083, 0.015477087, -0.006011094, -0.037325826, 0.026821211, -0.034161527, 0.0150142815, 0.014024092, -0.0021620027, -0.0258956, -0.0046845633, -0.0050316676, -0.022752825, 0.022236204, 0.026993418, 0.008777166, -0.03579749, 0.032826923, 0.0018471872, -0.006925943, 0.031621475, -0.033020657, -0.014906652, 0.0015794594, 0.027574616, -0.06457756, 0.014755971, -0.01125802, -0.012302024, 0.002975949, -0.019588524, 0.0014691394, -0.03237488, 0.0062209712, -0.0033122904, 0.024604049, 0.0014920105, -0.027746823, -0.041652523, -0.07064784, -0.025701867, -0.0005495819, -0.022946557, 0.012786356, 0.01383036, -0.020471085, -0.002089353, 0.026950367, -0.026024755, -0.023290971, 0.0045177382, -0.012807881]"
../../../gradio,../../../gradio/gradio/components,upload_button.py,"""""""gr.UploadButton() component.""""""

from __future__ import annotations

import tempfile
import warnings
from pathlib import Path
from typing import Any, Callable, Literal

import gradio_client.utils as client_utils
from gradio_client import file
from gradio_client.documentation import document

from gradio import processing_utils
from gradio.components.base import Component
from gradio.data_classes import FileData, ListFiles
from gradio.events import Events
from gradio.utils import NamedString


@document()
class UploadButton(Component):
    """"""
    Used to create an upload button, when clicked allows a user to upload files that satisfy the specified file type or generic files (if file_type not set).

    Demos: upload_and_download, upload_button
    """"""

    EVENTS = [Events.click, Events.upload]

    def __init__(
        self,
        label: str = ""Upload a File"",
        value: str | list[str] | Callable | None = None,
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        visible: bool = True,
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str | None = None,
        scale: int | None = None,
        min_width: int | None = None,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        type: Literal[""filepath"", ""bytes""] = ""filepath"",
        file_count: Literal[""single"", ""multiple"", ""directory""] = ""single"",
        file_types: list[str] | None = None,
    ):
        """"""
        Parameters:
            label: Text to display on the button. Defaults to ""Upload a File"".
            value: File or list of files to upload by default.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            visible: If False, component will be hidden.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: If False, the UploadButton will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            type: Type of value to be returned by component. ""file"" returns a temporary file object with the same base name as the uploaded file, whose full path can be retrieved by file_obj.name, ""binary"" returns an bytes object.
            file_count: if single, allows user to upload one file. If ""multiple"", user uploads multiple files. If ""directory"", user uploads all files in selected directory. Return type will be list for each file in case of ""multiple"" or ""directory"".
            file_types: List of type of files to be uploaded. ""file"" allows any file to be uploaded, ""image"" allows only image files to be uploaded, ""audio"" allows only audio files to be uploaded, ""video"" allows only video files to be uploaded, ""text"" allows only text files to be uploaded.
        """"""
        valid_types = [
            ""filepath"",
            ""binary"",
        ]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.file_count = file_count
        if file_count == ""directory"" and file_types is not None:
            warnings.warn(
                ""The `file_types` parameter is ignored when `file_count` is 'directory'.""
            )
        if file_types is not None and not isinstance(file_types, list):
            raise ValueError(
                f""Parameter file_types must be a list. Received {file_types.__class__.__name__}""
            )
        if self.file_count in [""multiple"", ""directory""]:
            self.data_model = ListFiles
        else:
            self.data_model = FileData
        self.size = size
        self.file_types = file_types
        self.label = label
        self.variant = variant
        super().__init__(
            label=label,
            every=every,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
        )
        self.icon = self.serve_static_file(icon)

    def api_info(self) -> dict[str, list[str]]:
        if self.file_count == ""single"":
            return FileData.model_json_schema()
        else:
            return ListFiles.model_json_schema()

    def example_payload(self) -> Any:
        if self.file_count == ""single"":
            return file(
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            )
        else:
            return [
                file(
                    ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
                )
            ]

    def example_value(self) -> Any:
        if self.file_count == ""single"":
            return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
        else:
            return [
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            ]

    def _process_single_file(self, f: FileData) -> bytes | NamedString:
        file_name = f.path
        if self.type == ""filepath"":
            file = tempfile.NamedTemporaryFile(delete=False, dir=self.GRADIO_CACHE)
            file.name = file_name
            return NamedString(file_name)
        elif self.type == ""binary"":
            with open(file_name, ""rb"") as file_data:
                return file_data.read()
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(type)
                + "". Please choose from: 'filepath', 'binary'.""
            )

    def preprocess(
        self, payload: ListFiles | FileData | None
    ) -> bytes | str | list[bytes] | list[str] | None:
        """"""
        Parameters:
            payload: File information as a FileData object, or a list of FileData objects.
        Returns:
            Passes the file as a `str` or `bytes` object, or a list of `str` or list of `bytes` objects, depending on `type` and `file_count`.
        """"""
        if payload is None:
            return None

        if self.file_count == ""single"":
            if isinstance(payload, ListFiles):
                return self._process_single_file(payload[0])
            return self._process_single_file(payload)

        if isinstance(payload, ListFiles):
            return [self._process_single_file(f) for f in payload]  # type: ignore
        return [self._process_single_file(payload)]  # type: ignore

    def _download_files(self, value: str | list[str]) -> str | list[str]:
        downloaded_files = []
        if isinstance(value, list):
            for file in value:
                if client_utils.is_http_url_like(file):
                    downloaded_file = processing_utils.save_url_to_cache(
                        file, self.GRADIO_CACHE
                    )
                    downloaded_files.append(downloaded_file)
                else:
                    downloaded_files.append(file)
            return downloaded_files
        if client_utils.is_http_url_like(value):
            downloaded_file = processing_utils.save_url_to_cache(
                value, self.GRADIO_CACHE
            )
            return downloaded_file
        else:
            return value

    def postprocess(self, value: str | list[str] | None) -> ListFiles | FileData | None:
        """"""
        Parameters:
            value: Expects a `str` filepath or URL, or a `list[str]` of filepaths/URLs.
        Returns:
            File information as a FileData object, or a list of FileData objects.
        """"""
        if value is None:
            return None
        value = self._download_files(value)
        if isinstance(value, list):
            return ListFiles(
                root=[
                    FileData(
                        path=file,
                        orig_name=Path(file).name,
                        size=Path(file).stat().st_size,
                    )
                    for file in value
                ]
            )
        else:
            return FileData(
                path=value,
                orig_name=Path(value).name,
                size=Path(value).stat().st_size,
            )

    @property
    def skip_api(self):
        return False
","The code defines a `UploadButton` component that allows users to upload files by clicking a button. The component has various parameters such as label, file type, file count, size, icon, and more. It supports uploading single or multiple files, as well as entire directories. The component can return file paths or binary data based on the specified type. It also provides methods for preprocessing and postprocessing the uploaded files.","[-0.039727956, 0.025875445, 0.00095290464, 0.022695467, 0.00040906837, -0.074489914, 0.040860552, 0.01894919, -0.020778766, 0.030275142, 0.023544913, -0.0064035193, -0.028794056, -0.024895314, -0.030667193, 0.00835289, 0.032235403, 0.0019398415, 0.042254515, 0.004347968, -0.026768453, -0.042907935, 0.036395513, 0.036744002, 0.018535357, -0.030427607, -0.016749341, 0.024960656, -0.014048537, 0.0019439255, -0.06373026, -0.030993905, 0.02700804, 0.03861714, -0.042189173, 0.00981764, 0.015660306, 0.04600079, 0.020669863, -0.020125346, -0.08455259, -0.024350798, -0.0056466404, 0.022564782, -0.027051602, 0.006997043, -0.05214294, 0.009752299, -0.031886913, 0.020550068, -0.04600079, 0.022455879, 0.013950524, -0.040555622, 0.0068663587, 0.044955317, -0.04216739, 0.050574735, -0.02888118, -0.051271714, 0.025178464, -0.030710755, -0.049964875, -0.008913742, 0.00010048039, 0.014680177, -0.042951494, 0.03630839, 0.026180375, -0.008396451, 0.06934968, -0.030100897, 0.006550539, -0.0067030033, 0.02796639, -0.013874291, -0.04203671, -0.00061700575, 0.033150192, -0.025940787, -0.01157643, 0.00996466, -0.027204067, -0.03378183, -0.033542242, 0.030667193, -0.048570912, -0.00514024, -0.040337816, -0.03696181, -0.051576644, 0.012513, -0.016618658, 0.09435389, 0.00090049487, 0.007585121, -0.035524286, -0.025352709, 0.0025047779, 0.031059247, 0.017892826, -0.025788322, -0.004018535, -0.03957549, 0.013090188, -0.046349283, -0.0016498864, 0.013460459, 0.033215534, -0.017751252, -0.006681223, 0.030885002, -0.029621722, 0.060985897, 0.015311817, -0.055714972, 0.058764268, 0.04791749, -0.005387995, -0.043583136, -0.035502505, -0.049224332, 0.014342576, -0.03504511, 0.02406765, -0.01543161, -0.028554467, -0.016509753, -0.03757167, 0.019569939, 0.020136237, 0.039227, 0.008576142, -0.032322526, -0.017108722, 0.0237845, 0.015017777, 0.010100789, -0.057239622, 0.01733742, 0.0012367341, -0.039052755, 0.009621615, -0.020430276, -0.055976342, 0.007013378, -0.043539576, 0.009795859, -0.041034795, -0.04428012, 0.013830731, -0.014636615, -0.0063762935, 0.047133386, -0.008842955, -0.022869712, 0.0029213333, 0.016172154, -0.004846201, -0.012044715, -0.003106469, -0.04018535, 0.038094405, 0.0052872594, 0.016313728, 0.024307236, -0.0054370016, -0.022782588, -0.02857625, 0.016629547, -0.0064851968, 0.005717428, -0.0067084488, -0.043038618, 0.0119358115, -0.03665688, -0.015518732, -0.047394756, 0.008663264, -0.01996199, 0.02698626, 0.009224117, -0.024372578, -0.020604521, -0.03637373, 0.008538025, 0.026746672, -0.004614781, -0.019319462, 0.054756623, -0.033803612, 0.0013932827, -0.027204067, -0.036591537, -0.003376005, -0.0041791676, 0.00899542, 0.0023046678, -0.0025115844, -0.01963528, -0.01574743, 0.028140636, 0.021181708, -0.0060659186, -0.040381376, -0.020125346, -0.00063980743, 0.021998484, -0.0068010166, 0.033259094, -0.007356424, 0.0138634015, 0.01866604, 0.001792822, -0.045826547, -0.04691558, 0.0069208103, 0.061203703, -0.010171576, -0.024459701, 0.006588655, 0.032671016, 0.043212865, -0.05018268, 0.028489126, 0.011837798, -0.018372001, 0.009676066, 0.004726407, -0.0051511303, 0.018208647, 0.0061530415, 0.0071222815, -0.06934968, 0.024307236, -0.011108145, 0.032235403, -0.002891385, 0.010656197, 0.0054397243, -0.05458238, -0.013754498, -0.0052137496, -0.017326528, 0.01707605, 0.022455879, -0.00020368336, -0.004367026, -0.0056194146, 0.03920522, -0.011380404, -0.03190869, 0.04469395, -0.030688975, 0.008124193, -0.022651905, 0.014538602, 0.030993905, 0.06956749, 0.0314513, 0.01762057, -0.0068336874, -0.035938118, 0.016422631, -0.014734629, 0.040294252, 0.039030973, 0.03890029, 0.0035720312, 0.017119613, -0.00723663, 0.029534599, 0.035807434, 0.011108145, 0.006327287, 0.034849085, 0.03565497, 0.026550647, -0.0057119825, 0.023893403, -0.0014878926, 0.004443258, -0.029991994, 0.038072623, 0.013068407, -0.017827485, -0.017293857, -0.011380404, 0.042254515, -0.026899137, 0.04783037, -0.022543002, -0.027116943, -0.006136706, -0.03310663, 0.03384717, 0.040947676, -0.02217273, -0.0014021312, 0.0030438497, -0.021290611, -0.009169665, -0.03722318, -0.04343067, 0.033368, -0.014342576, -0.05053117, 0.010106235, 0.0020501062, -0.011761566, 0.021878691, 0.019918429, 0.0070896107, -0.0005064008, -0.013558472, 0.0019480094, -0.0017356478, 0.0411437, -0.018099744, 0.019341242, 0.0061094803, 0.03439169, -0.014331686, -0.019417474, -0.008772168, -0.011739785, -0.052839924, 0.024612166, -0.00019534545, -0.02574476, 0.015246474, -0.016291946, 0.008396451, -0.009104324, 0.05148952, -0.044585045, 0.00024673424, 0.048004612, -0.058633585, 0.03367293, -0.05588922, -0.019210558, 0.02992665, 0.023305325, 0.010307706, 0.0437356, -0.012273412, 0.06956749, -0.007492553, -0.02888118, 0.018208647, -0.019058093, 0.04661065, 0.034783743, 0.019798636, -0.0035693084, -0.055366483, -0.04053384, -0.07361869, -0.0047699683, -0.004307129, 0.07771346, 0.028423784, 0.011772457, -0.03474018, -0.021649994, -0.03310663, -0.05209938, 0.013275323, -0.008325664, 0.004394252, 0.043343548, 0.0045331037, 0.04560874, 0.002598707, -0.027247628, 0.0070841652, -0.015279145, -0.022477658, -0.0056085247, 0.056673322, 0.040991236, -0.016792903, -0.00643619, 0.01641174, 0.009245898, 0.013329775, 0.0353936, 0.025352709, -0.020114455, -0.011859579, 0.008156864, 0.0056194146, -0.028859397, 0.010046338, 0.066997364, 0.038464677, -0.027552556, -0.0026477135, -0.0059025637, -0.030057335, -0.047133386, -0.0054315566, 0.045478053, 0.019765966, -0.003487631, 0.04752544, 0.020332262, 0.043800943, -0.018589808, 0.015268255, -0.0009331659, 0.027835706, -0.014364357, 0.0404685, 0.043299988, -0.033956077, -0.010242363, -0.02406765, 0.071789116, -0.053580467, 0.0012319696, -0.01077599, -0.022978615, 0.011010133, 0.00498233, 0.041949585, -0.02343601, 0.014527712, -0.06525491, -0.016444411, -0.014930654, -0.035328258, 0.020942122, 0.021693556, -0.043844502, -0.0033052177, 0.012850599, 0.027356531, 0.06804284, -0.038682483, 0.02121438, 0.04722051, 0.009485485, 0.0061802673, -0.03371649, -0.023871623, 0.00031258675, -0.057065375, -0.003193592, -0.0481353, 0.015889004, -0.05436457, 0.036417294, 0.024437921, -0.025526954, -0.015932566, -0.059025638, 0.039357685, -0.0052083046, -0.0061802673, 0.015801882, 0.03637373, 0.031734448, -0.0005200137, -0.005603079, -0.027683241, 0.011347733, -0.007960837, -0.0385518, -0.017773032, 0.002994843, 0.0022747195, 0.034173883, -0.06473217, 0.0180344, -0.003868793, -0.0075252242, -0.039401244, -0.030732537, -0.0057446538, 0.0010468338, -0.03794194, -0.0552358, -0.019820416, 0.08572875, 0.03450059, -0.025853664, 0.03789838, -0.027726803, -0.064775735, 0.013155529, 0.029643502, -0.0071168365, 0.006261945, -0.0071168365, -0.047176946, 0.013645595, 0.022956835, 0.006300061, 0.031298835, 0.008962749, 0.007514334, 0.008685045, -0.022009375, -0.0014960603, 0.048309542, 0.0053988853, 0.019352132, -0.017478993, 0.006359958, -0.029011862, 0.04687202, 0.00095154333, -0.0036754895, 0.006659442, 0.0028995527, 0.039902203, 0.0033188309, -0.019831307, -0.04752544, 0.07231185, -0.0021916807, 0.0009971466, -0.014320795, 0.027705021, -0.023523131, -0.046741333, -0.007138617, -0.0057500987, -0.029730625, -0.02927323, 0.01800173, -0.019646171, -0.025026, 0.008946413, 0.018448234, 0.024917096, -0.0023441454, -0.035524286, -0.0071495073, -0.032431427, 0.022150949, -0.0056466404, -0.015355377, 0.06268479, -0.02511312, -0.058459338, 0.03561141, 0.0049006524, 0.01543161, -0.016226605, 0.061639316, -0.024220113, 0.0017002542, 0.021312393, -0.0066921134, 0.027813924, 0.0018540801, -0.03118993, 0.016923586, -0.01447326, 0.017881935, 0.03434813, 0.023610255, -5.2537376e-05, -0.018350221, -0.020953013, 0.026768453, -0.005355324, -0.05824153, -0.007911831, 0.0077974824, 0.051707327, -0.03794194, 0.03469662, 0.013525801, -0.037375644, -0.022227181, -0.018829396, 0.019515486, -0.015442501, 0.0007834237, -0.028293101, -0.024459701, 0.032344308, 0.051576644, -0.022455879, 0.015921675, 0.043299988, -0.019439254, -0.012099166, 0.025134902, 0.009850311, -0.005428834, 0.014952435, 0.001104008, -0.0063762935, -0.029687064, 0.023675596, -0.031364176, 0.0027906494, 0.0031336949, 0.017544337, 0.047961053, -0.020430276, 0.00067588163, -0.036482636, -0.07435923, 0.018175976, -0.01960261, 0.014995997, -0.015823662, -0.028794056, 0.01962439, -0.012719916, -0.009518156, 0.024525043, 0.0026722169, 0.025265586, -0.0038143413, 0.008832064, 0.015377158, -0.022564782, 0.029098986, 0.029338572, 0.009921099, -0.04367026, 0.022412317, 0.015584075, -0.00237001, 0.03633017, 0.029795967, -0.012469438, -0.013950524, -0.012153618, 0.024503263, -0.020201579, 0.0038606252, -0.013101078, 0.0321265, 0.04184068, -0.013798059, 0.008494465, -0.02990487, 0.012186289, -0.028619811, -0.028118854, 0.025483392, 0.0094909305, 0.00063129934, 0.0039967545, -0.0046311165, -0.033934295, -0.039488368, 0.0055704084, -0.008238541, 0.01350402, -0.012360535, 0.05244787, -0.00706783, -0.008380116, -0.033694707, -0.004614781, -0.043517794, 0.05649908, -0.021247052, 0.014179221, -0.00771036, 0.05340622, -0.020778766, 0.024699287, -0.019384803, 0.03343334, 0.0023958746, -0.029752405, -0.00038422475, -0.05806729, -0.00329705, 0.026964478, -0.009082543, 0.019254118, -0.026724892, -0.019918429, -0.00883751, -0.05301417, -0.007193069, 0.04979063, 0.003120082, -0.038072623, -0.011859579, 0.0027361976, 0.0011394017, -0.023196422, -0.012055605, 0.016368179, -0.03857358, -0.04018535, 0.013602033, 0.0024707457, 0.00031956338, -0.010814106, -0.0027838429, 0.007062385, -0.025897225, 0.015910786, -0.03722318, -0.014985106, 0.01107003, -0.014734629, 0.017958168, 0.008445458, -0.026942698, -0.018241318, -0.0014538602, 0.0016893639, -0.013471349, -0.0028233202, -0.007808373, -0.0012578341, -0.014778189, 0.017642349, -0.07366225, -0.009872092, 0.008968194, -0.016651329, -0.008723161, 0.021247052, -0.036504414, -0.011685333, -0.005178356, -0.0030629078, -0.023109298, 0.05497443, 0.0018377447, 0.0289683, 0.011304172, 0.029512819, -0.0047563557, -0.000321265, -0.038072623, 0.05776236, -0.0044051423, -0.014930654, 0.002137229, -0.03988042, -0.030688975, -0.018165085, -0.022020265, -0.004307129, 0.020582741, 0.004367026, -0.031102808, 0.0027688686, -0.010057228, -0.016901806, -0.026398182, -0.017413652, -0.02252122, 0.010846778, -0.012033825, 0.07954303, 0.024590384, -0.00074939145, -0.00097332406, -0.0579366, 0.017195845, 0.0030928561, -0.0005897799, 0.024307236, -0.014691067, 0.00068200746, 0.0045194905, -0.049703505, 0.045826547, -0.034892645, -0.002891385, -0.006779236, 0.018382892, -0.024132991, -0.012022934, 0.026223935, 0.028380223, -0.023980526, -0.0021522031, 0.022586562, -0.035567846, 0.014211892, -0.032910604, -0.011816017, 0.02123616, 0.0068990295, 0.0040239803, 0.0076722438, 0.017947279, 0.0109720165, 0.0100898985, -0.05458238, -0.022782588, 0.00996466, -0.018165085, -0.029316792, -0.04918077, 0.0141574405, 0.013384227, 0.01930857, -0.028075293, 0.0093493555, -0.0031309724, -0.017947279, -0.024764631, 0.023239983, 0.0007534753, 0.0137218265, 0.0035094116, -0.0029077204, -0.0078573795, -0.0018050737, -0.025374489, -0.014299015, 0.023936965, -0.003041127, -0.013558472, 0.008342, -0.0019670674, 0.017718581, 0.00080248184, 0.01413566, 0.01638996, 0.036351953, 0.037419204, 0.019787746, 0.0125347795, 0.012480328, -0.019068982, -0.006300061, -0.008919188, -0.019798636, 0.0044949874, -0.034108542, 0.0103131505, -0.027748583, -0.011696224, 0.0289683, 0.04022891, -0.015355377, -0.008429122, 0.0057991054, -0.026093252, 0.010046338, -0.009496375, -0.013024845, -0.021813348, -0.03500155, 0.026245717, -0.00690992, 0.0094909305, 0.010487396, -0.02824954, -0.036155924, -0.020408494, 0.031625543, -0.013373336, 0.02125794, 0.020648083, -0.04184068, -0.04173178, 0.027095163, 0.04783037, 0.0035230245, 0.012850599, 0.017478993, 0.012414986, -0.0010121209, 0.008401897, -0.024329016, -0.0218678, 0.014734629, 0.007759366, 0.040381376, 0.025897225, -0.027487215, -0.0131882, 0.0032807146, -0.011097255, 0.018731384, 0.004334355, 0.018731384, 0.020746095, 0.02602791, -0.005880783, -0.0028941075, 0.0085979225, -0.014680177, 0.005946125, 0.027225846, -0.021072805, 0.019559048, -0.04783037, 0.006779236, 0.012447657, -0.011467527, -0.027596118, -0.0039885864, -0.027530776, -0.0083746705, -0.020168908, -0.015540513, -0.025309147, -0.038116187, -0.016727561, 0.003343334, 0.013612923, 0.0068064616, -0.010514623, 0.027988171, 0.011456637, 0.015910786, 0.028075293, -0.040577404, 0.004168277, -0.019417474, 0.014516822, 0.012001153, 0.013634704, 0.0014198279, 0.005336266, 0.0056684213, 0.03116815, 0.0122407405, -0.0025047779, -0.012926832, 0.04147041, -0.0017220348, 0.005545905, -0.054538816, -0.023632035, 0.016956257, -0.018785834, 0.013939634, -0.01445148, -0.008957304, 0.011423965, -0.024329016, 0.008739497, -0.023544913, -0.032257184, 0.017391872, -0.011336843, -0.019809525, 0.03439169, -0.017903717, 0.008881072, -0.05680401, -0.039074536, 0.0044214777, 0.042951494, -0.0022937777, 0.0340432, 0.04428012, -0.041230824, 0.010492842, -0.010340377, 0.007269301, -0.00945826, -0.024176553, 0.047699682, -0.016814683, 0.0152029125, 0.0036673215, -0.0028968302, 0.006234719, -0.0032861598, -0.011146261, -0.02057185, 0.01899275, -0.011315062, -0.014701958, 0.0013898795, -0.026267497, 0.0037489992, 0.042624786, 0.021944033, -0.016270166, -0.004642007, -0.013209981, 0.020125346, -0.0025619522, -0.0009944241, 0.04371382, -0.022891492, 0.0024898036, 0.020985683, -0.036591537, 0.008031625, -0.024808193, -0.004968717, -0.03567675, 0.01992932, -0.0086796, -0.0015382604, -0.0052164723, 0.004851646, -0.022913273, 0.014201002, -0.009942879, 0.022586562, -0.0033678373, -0.0038932962, -0.024960656, 0.016934477, 0.00820587, 0.047612563, -0.0093493555, 0.0037027153, -0.021846019, -0.011434856, 0.028467346, -0.009245898, -0.020615412, -0.04049028, -0.040011104, 0.0010488757, 0.0026517976, -0.0024693843, 0.0032562113, 0.060593843, -0.008004399, 0.045434494, 0.029817747, 0.022346975, -0.0051048463, -0.017958168, -0.019983772, -0.0015750153, 0.03859536, 0.0056194146, 0.026463524, 0.014723738, -0.0016662219, -0.026746672, -0.024024088, -0.007819263, 0.028009951, -0.019765966, -0.0110536935, -0.013199091, 0.007993509, -0.021748006, 0.024220113, 0.0012843793, 0.029142547, -0.034261007, 0.01765324, -0.0321265, -0.026964478, 0.018230427, -0.019863978, -0.005826331, 0.027813924, -0.024764631, 0.00026783426, 0.046784896, -0.021323284, -0.00643619, 0.001950732, 0.043343548, -0.007933612, 0.027400093, -0.013090188, -0.030754317, -0.008842955, 0.014331686, -0.004456871, -0.021965813, -0.022368755, -0.006811907, -0.029795967, 0.04301684, -0.01701071, -0.005336266, -0.024590384, 0.026006129, 0.035197575, 0.0063490677, 0.007949947, 0.0047236844, -0.0047563557, 0.023283545, -0.00820587, -0.016281057, 0.05562785, 0.008706826, -0.009028091, -0.029708844, 0.009627059, 0.002244771, 0.037201397, -0.0033024952, 0.008957304, 0.020299591, -0.0011074113, -0.010149796, -0.017239407, -0.016368179, 0.03408676, -0.02441614, -0.0017451767, -0.019874869, -0.007683134, -0.006038693, 0.042668346, 0.01635729, -0.048875842, -0.024481481, -0.00061904767, 0.018077962, -0.010797771, -0.02121438, 0.007748476, 0.013090188, -0.027857486, -0.021486638, -0.005826331, 0.018393783, -0.037484545, 0.056324832, 0.0334769, -0.014821751, 0.006261945, -0.007421766, -0.0051620207, 0.0080806315, 0.020484727, -0.006082254, -0.021399517, -0.003218095, 0.021933142, 0.017555226, -0.0049251555, 0.006724784, 0.008091521, 0.0038715154, 0.013906962, -0.0035556955, -0.00870138, -0.0192759, 0.015268255, -0.020626301, 0.038159747, -0.03406498, 0.04336533, -0.004838033, 0.02990487, 0.018546248, -0.020081785, -0.010383938, -0.013253543, 0.009213227, -0.018023511, -0.02602791, 0.020310482, -0.047394756, -0.0057119825, 0.01044928, 0.009425588, -0.018437343, 0.02509134, 0.0051484075, 0.006528758, 0.0018227705, 0.002164455, -0.041971367, 0.033542242, 0.044541486, -0.02857625, -0.04918077, -0.0023931519, 0.012959504, 0.044868197, 0.002677662, -0.01075421, -0.016324617, -0.0055077886, -0.030797878, 0.007939057, -0.005592189, -0.017598787, -0.015584075, 0.016183043, 0.01479997, 0.008832064, 0.018600699, -0.027160505, -0.00950182, -0.0015450668, -0.017903717, 0.007579676, 0.007421766, 0.0069371457, -0.00030033512, 0.007650463, -0.005047672, -0.0003093537, 0.026768453, -0.009539937, -0.03053651, 0.0058372216, 0.04312574, 0.022978615, 0.020125346, 0.01673845, 0.03848646, -0.014081208, -0.021791568, 0.016564205, 0.029795967, 0.015573185, 0.029055424, 0.021846019, -0.014288125, 0.017544337, -0.0039559156, 0.021388626, -0.013035735, 0.020473838, 0.026093252, -0.017729472, 0.00529815, 0.0092676785, 0.0077974824, -0.022891492, 0.016694888, 0.009872092, 0.009670621, -0.02574476, 0.0032425984, -0.014941545, 0.021704445, -0.00594068, 0.025265586, 0.0023945132, 0.0060659186, 0.0019765964, -0.018372001, 0.014995997, 0.019646171, -0.013787169, -0.02280437, 0.036852907, 0.0034331793, -0.005303595, -0.0014770022, -0.011696224, -0.02376272, -0.023806281, -0.0031173595, -0.027835706, 0.022477658, 0.00578277, -0.012589232, -0.004173722, -0.016041469, -0.01350402, 0.023196422, 0.002904998, -0.026093252, -0.013580252, -0.01381984, 0.019482816, -0.0051021236, 0.025919007, 0.051228154, -0.019874869, -0.028205978, 0.02376272, -0.008456348, 0.026899137, 0.02478641, 0.006942591, -0.004661065, -0.026528865, -0.01701071, -0.009311239, -0.05053117, 0.03463128, 0.013841621, -0.04499888, 0.021377735, 0.014963325, -0.014821751, 0.022085607, 0.0025061392, -0.002514307, -0.00097196276, 0.024873534, -0.01412477, -0.0122298505, -0.0018608867, 0.0131882, -0.019591719, 0.0289683, -0.023196422, -0.00055166375, 0.016172154, -0.009708737, -0.01572565, 0.06686668, -0.0056629763, -0.01734831, -0.02929501, -0.0059515703, 0.0017329252, -0.013133748, -0.01349313, -0.0030710755, 0.029752405, -0.038943853, -0.013035735, -0.017827485, 0.014756409, 0.0011918114, 0.017783923, 0.0007820625, 0.009588943, -0.011718005, -0.039640833, -0.009763189, -0.023588473, -0.0034141212, -0.010182466, 0.007040604, 0.024481481, -0.02343601, -0.025200244, -0.016193934, 0.0081514185, 0.004974162, 0.008505355, 0.02439436, -0.019014532, 0.043452453, -0.0038987412, -0.004712794, -0.021639103, 0.039139878, 0.0010903951, 0.018186865, 0.036504414, 0.006904475, -0.040316034, 0.030166239, -0.022031154, 0.027683241, 0.037767693, 0.0064906417, 0.032496773, 0.011271501, -0.015279145, -0.009681511, 0.00041315221, 0.03051473, 0.006071364, 0.036112364, -0.012665464, 0.017740361, -0.00082153996, 0.045782983, 0.04186246, 0.010187912, -0.04210205, -0.0037244959, 0.020081785, 0.0012244824, 0.021965813, 0.018981861, 0.0016212992, 0.021149037, -0.06107302, -0.025134902, 0.006615881, 0.0023577583, 0.015823662, -0.009071652, 0.016999818, -0.019559048, -0.025701199, -0.015932566, -0.025330927, -0.018502686, 0.03633017, 0.040577404, 0.005134795, -0.00081813673, -0.0103131505, -0.012414986, -0.029229669, 0.017174065, 0.030950343, -0.0040757093, -0.014244563, -0.013395117, -0.005603079, 0.023414228, -0.0016335509, 0.015878115, -0.048658032, -0.028728714, -0.033651147, -0.0026803846, -0.022869712, 0.03857358, -0.0046964586, 0.008020734, 0.0059624603, 0.003185424, 0.024220113, -0.01156554, 0.0072747464, -0.045129564, -0.0035938118, -0.039096314, 0.0042118384, 0.023719158, -0.020408494, 0.009529047, -0.023022177, -0.0045385486, 0.030427607, -0.0070732753, 0.04214561, 0.0074489918, 0.040098228, -0.014734629, -0.028140636, -0.055453606, 0.03493621, 0.014070318, 0.0020773322, 0.0061857123, 0.010661642, 0.020125346, -0.0075742304, -0.040032886, 0.012393205, -0.03441347, 0.0032534888, 0.001165947, -0.005989686, -0.020484727, 0.0008474045, -0.0048679817, 0.018883847, -0.023218201, -0.024437921, 0.015268255, -0.009599834, 0.006142151, -0.026332838, -0.00835289, -0.011707114, 0.0058862283, -0.02478641, -0.010035447, -0.022074716, 0.026136814, -0.007808373, -0.016825574, -0.014876203, -0.020114455, -0.0048298654, 0.06359958, -0.0013197729, -0.0010420693, -0.02990487, 0.022913273, -0.01046017, 0.00028995526, 0.058677144, 0.02890296, -0.022651905, 0.021617323, 0.025635857, -0.020386714, 0.003879683, -0.015213803, -0.029447475, -0.010895784, 0.00914244, -0.028075293, -0.0077920374, -0.010084454, 0.030667193, -0.010792326, 0.00035359568, -0.016095921, 0.0013953247, -0.010111679, 0.02411121, 0.016139481, -0.0026477135, 0.005113014, 0.025200244, 0.016880024, -0.017751252, -0.0036918249, -5.9003516e-05, -0.014887094, 0.011293281, -0.032649234, -0.019983772, -0.021323284, 0.010530958, -0.0146039445, 0.018589808, 0.055453606, 0.02441614, -0.008663264, -0.020484727, 0.011227939, -0.026332838, 0.008287548, -0.005491453, -0.034609497, 0.023719158, -0.0114893075, 0.016869135, 0.009888427, 0.011728895, -0.020179797, 0.0037626121, 0.022205401, 0.024329016, -0.007013378, -0.027204067, -0.01994021]"
../../../gradio,../../../gradio/gradio/components,gallery.py,"""""""gr.Gallery() component.""""""

from __future__ import annotations

from concurrent.futures import ThreadPoolExecutor
from pathlib import Path
from typing import Any, Callable, List, Literal, Optional, Tuple, Union
from urllib.parse import urlparse

import numpy as np
import PIL.Image
from gradio_client import file
from gradio_client.documentation import document
from gradio_client.utils import is_http_url_like

from gradio import processing_utils, utils, wasm_utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel, GradioRootModel
from gradio.events import Events

GalleryImageType = Union[np.ndarray, PIL.Image.Image, Path, str]
CaptionedGalleryImageType = Tuple[GalleryImageType, str]


class GalleryImage(GradioModel):
    image: FileData
    caption: Optional[str] = None


class GalleryData(GradioRootModel):
    root: List[GalleryImage]


@document()
class Gallery(Component):
    """"""
    Creates a gallery component that allows displaying a grid of images, and optionally captions. If used as an input, the user can upload images to the gallery.
    If used as an output, the user can click on individual images to view them at a higher resolution.

    Demos: fake_gan
    """"""

    EVENTS = [Events.select, Events.upload, Events.change]

    data_model = GalleryData

    def __init__(
        self,
        value: list[np.ndarray | PIL.Image.Image | str | Path | tuple]
        | Callable
        | None = None,
        *,
        format: str = ""png"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        columns: int | tuple | None = 2,
        rows: int | tuple | None = None,
        height: int | float | None = None,
        allow_preview: bool = True,
        preview: bool | None = None,
        selected_index: int | None = None,
        object_fit: Literal[""contain"", ""cover"", ""fill"", ""none"", ""scale-down""]
        | None = None,
        show_share_button: bool | None = None,
        show_download_button: bool | None = True,
        interactive: bool | None = None,
        type: Literal[""numpy"", ""pil"", ""filepath""] = ""filepath"",
    ):
        """"""
        Parameters:
            value: List of images to display in the gallery by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            format: Format to save images before they are returned to the frontend, such as 'jpeg' or 'png'. This parameter only applies to images that are returned from the prediction function as numpy arrays or PIL Images. The format should be supported by the PIL library.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            columns: Represents the number of images that should be shown in one row, for each of the six standard screen sizes (<576px, <768px, <992px, <1200px, <1400px, >1400px). If fewer than 6 are given then the last will be used for all subsequent breakpoints
            rows: Represents the number of rows in the image grid, for each of the six standard screen sizes (<576px, <768px, <992px, <1200px, <1400px, >1400px). If fewer than 6 are given then the last will be used for all subsequent breakpoints
            height: The height of the gallery component, specified in pixels if a number is passed, or in CSS units if a string is passed. If more images are displayed than can fit in the height, a scrollbar will appear.
            allow_preview: If True, images in the gallery will be enlarged when they are clicked. Default is True.
            preview: If True, Gallery will start in preview mode, which shows all of the images as thumbnails and allows the user to click on them to view them in full size. Only works if allow_preview is True.
            selected_index: The index of the image that should be initially selected. If None, no image will be selected at start. If provided, will set Gallery to preview mode unless allow_preview is set to False.
            object_fit: CSS object-fit property for the thumbnail images in the gallery. Can be ""contain"", ""cover"", ""fill"", ""none"", or ""scale-down"".
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            show_download_button: If True, will show a download button in the corner of the selected image. If False, the icon does not appear. Default is True.
            interactive: If True, the gallery will be interactive, allowing the user to upload images. If False, the gallery will be static. Default is True.
            type: The format the image is converted to before being passed into the prediction function. ""numpy"" converts the image to a numpy array with shape (height, width, 3) and values from 0 to 255, ""pil"" converts the image to a PIL image object, ""filepath"" passes a str path to a temporary file containing the image. If the image is SVG, the `type` is ignored and the filepath of the SVG is returned.
        """"""
        self.format = format
        self.columns = columns
        self.rows = rows
        self.height = height
        self.preview = preview
        self.object_fit = object_fit
        self.allow_preview = allow_preview
        self.show_download_button = (
            (utils.get_space() is not None)
            if show_download_button is None
            else show_download_button
        )
        self.selected_index = selected_index
        self.type = type

        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
            interactive=interactive,
        )

    def preprocess(
        self, payload: GalleryData | None
    ) -> (
        List[tuple[str, str | None]]
        | List[tuple[PIL.Image.Image, str | None]]
        | List[tuple[np.ndarray, str | None]]
        | None
    ):
        """"""
        Parameters:
            payload: a list of images, or list of (image, caption) tuples
        Returns:
            Passes the list of images as a list of (image, caption) tuples, or a list of (image, None) tuples if no captions are provided (which is usually the case). The image can be a `str` file path, a `numpy` array, or a `PIL.Image` object depending on `type`.
        """"""
        if payload is None or not payload.root:
            return None
        data = []
        for gallery_element in payload.root:
            image = self.convert_to_type(gallery_element.image.path, self.type)  # type: ignore
            data.append((image, gallery_element.caption))
        return data

    def postprocess(
        self,
        value: list[GalleryImageType | CaptionedGalleryImageType] | None,
    ) -> GalleryData:
        """"""
        Parameters:
            value: Expects the function to return a `list` of images, or `list` of (image, `str` caption) tuples. Each image can be a `str` file path, a `numpy` array, or a `PIL.Image` object.
        Returns:
            a list of images, or list of (image, caption) tuples
        """"""
        if value is None:
            return GalleryData(root=[])
        output = []

        def _save(img):
            url = None
            caption = None
            orig_name = None
            if isinstance(img, (tuple, list)):
                img, caption = img
            if isinstance(img, np.ndarray):
                file = processing_utils.save_img_array_to_cache(
                    img, cache_dir=self.GRADIO_CACHE, format=self.format
                )
                file_path = str(utils.abspath(file))
            elif isinstance(img, PIL.Image.Image):
                file = processing_utils.save_pil_to_cache(
                    img, cache_dir=self.GRADIO_CACHE, format=self.format
                )
                file_path = str(utils.abspath(file))
            elif isinstance(img, str):
                file_path = img
                if is_http_url_like(img):
                    url = img
                    orig_name = Path(urlparse(img).path).name
                else:
                    url = None
                    orig_name = Path(img).name
            elif isinstance(img, Path):
                file_path = str(img)
                orig_name = img.name
            else:
                raise ValueError(f""Cannot process type as image: {type(img)}"")
            return GalleryImage(
                image=FileData(path=file_path, url=url, orig_name=orig_name),
                caption=caption,
            )

        if wasm_utils.IS_WASM:
            for img in value:
                output.append(_save(img))
        else:
            with ThreadPoolExecutor() as executor:
                for o in executor.map(_save, value):
                    output.append(o)
        return GalleryData(root=output)

    @staticmethod
    def convert_to_type(img: str, type: Literal[""filepath"", ""numpy"", ""pil""]):
        if type == ""filepath"":
            return img
        else:
            converted_image = PIL.Image.open(img)
            if type == ""numpy"":
                converted_image = np.array(converted_image)
            return converted_image

    def example_payload(self) -> Any:
        return [
            {
                ""image"": file(
                    ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
                )
            },
        ]

    def example_value(self) -> Any:
        return [
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
        ]
","The code defines a `Gallery` component that allows displaying a grid of images with optional captions. It can be used as an input to upload images or as an output to view images at a higher resolution. The component has various parameters for customization such as format, label, size, preview options, object fit, buttons display, interactivity, and image type.

The `Gallery` component preprocesses and postprocesses the data to convert images to the desired format (filepath, numpy array, or PIL image) based on the specified type. It also provides methods for generating example payload and value for the component.

The component is part of the Gradio library and is designed to be used in Gradio interfaces for creating interactive applications with image galleries.","[-0.043849647, 0.0065083834, -0.0015173546, -0.009235817, -0.026899757, -0.053986806, -0.017148888, -0.02888973, -0.032986734, -0.028046917, -0.008369594, -0.03581952, -0.033923194, -0.025705773, 0.0008640289, -0.0284215, 0.009821104, 0.003406366, 0.015826141, 0.061899874, 0.020250905, -0.06185305, -0.021842884, 0.015205737, -0.01607196, -0.030669, -0.045582093, 0.06264904, -0.009780133, 0.006467413, -0.050053682, -0.031582046, 0.006350356, 0.0129816495, -0.042046964, -0.033267673, 0.019548561, 0.023341216, -0.0001580273, -0.015861258, -0.018097052, -0.033923194, -0.001811461, 0.037341263, -0.008498357, 0.04225767, -0.024020148, 0.012700712, 0.02486296, 0.019408092, -0.03485965, 0.0051271077, -0.008012569, -0.019829499, -0.032167334, 0.0067951735, -0.06826779, -0.0015641776, 0.001343232, -0.010183981, 0.031043584, 0.010207392, 0.03130111, 0.0111204395, -0.033314496, 0.022744225, -0.006900525, 0.029428193, 0.013157235, -0.005931876, 0.04684631, -0.02163218, 0.015287678, -0.034953296, -0.01703183, -0.021643886, -0.018998392, -0.0011120439, 0.06082295, -0.03890983, -0.0046032765, 0.0031225022, -0.040852983, 0.004023843, -0.021082012, 0.009727458, -0.015978316, 0.009434815, -0.026361294, -0.002673295, -0.07613404, 0.025401425, -0.017523471, 0.06517748, -0.03551517, 0.0066781165, 0.0009328, -0.030434886, 0.018764278, 0.075244404, 0.03359543, 0.007561899, -0.038347956, -0.048040297, 0.07393336, -0.04794665, -0.018108757, 0.03972923, -0.0144331595, 0.0005878469, -0.009030967, -0.008088657, -0.023189042, 0.05019415, 0.01380105, -0.041391443, 0.037224207, -0.008703207, -0.0002613669, -0.016493367, -0.039284416, -0.0074448413, -0.021749238, -0.065739356, 0.043287773, -0.036521863, -0.010558564, -0.045418214, -0.021257598, -0.014386336, 0.008346182, -0.019630501, 0.029170668, -0.06353868, -0.036568686, 0.02349339, -0.018026818, -0.035632227, -0.057826284, 0.013051884, 0.042819545, -0.025565304, 0.045394804, 0.004111636, -0.0061572115, -0.033010144, -0.021175656, 0.041274387, -0.045933265, -0.020063613, 0.0042696632, 0.017383002, -0.021643886, -0.013742521, -0.02275593, 0.03003689, 0.028913142, -0.014503393, -0.0064147376, -0.013449878, -0.009148024, -0.007573604, 0.020016791, -0.0063327975, -0.023399744, 0.024347909, -0.018670632, 0.03567905, -0.028538559, 0.026454939, -0.0147258025, -0.006637146, -0.031862985, -0.0037546114, 0.025050253, 0.014831154, -0.018436518, -0.01985291, -0.008861234, -0.02138636, -0.023364628, -0.0035497611, -0.05843498, -0.0041818703, -0.026033534, -0.014819448, -0.0020280168, -0.04052522, -0.05145837, 0.0015788097, 0.025401425, -0.015194031, -0.008194008, 0.041742615, 0.009224111, -0.04321754, 0.0026762215, 0.021878, -0.016423132, 0.035304468, 0.0076496913, 0.026431527, -0.004184797, 0.018916452, -0.00024362541, -0.0018626736, -0.0007308762, -0.0098737795, -0.012525126, -0.0098737795, 0.011524287, -0.012337835, 0.04438811, -0.04082957, -0.017663939, -0.043053657, -0.022217467, 0.06264904, -0.01919739, -0.007948187, -0.07243503, 0.014877977, 0.035070352, -0.05211389, 0.03902689, -0.011214085, -0.010944854, -0.02404356, 0.015837846, -0.036123868, 0.034883063, -0.016060255, 0.0007308762, -0.0077843075, 0.0214683, -0.0529567, 0.0233061, -0.03441483, 0.06288315, 0.05646842, 0.007866248, -0.000970112, 0.03771585, 0.004986639, 0.0034883062, 0.033689078, -0.024769315, -0.051224254, 0.049632277, 0.09022773, -0.005162225, 0.0036404806, 0.013730816, -0.010224951, 0.020379668, 0.017394708, -0.0337359, 0.0044393963, -0.02551848, -0.034274366, 0.020040201, -0.023587037, -0.01703183, -0.013461584, 0.014714097, 0.06321092, 0.008562738, 0.021503417, -0.0054109716, 0.024160618, 0.0010791216, -0.011073616, 0.003643407, 0.0067132334, -0.007000024, 0.018038522, 0.02469908, 0.048040297, 0.013754227, -0.018658927, -0.016715776, 0.006742498, -0.013449878, 0.060729302, -0.008966586, 0.0148428595, 0.026080357, -0.01774588, 0.0019650985, -0.023657272, 0.016985007, -0.017699057, 0.023540214, 0.014714097, -0.03130111, 0.020789368, 0.040244285, 0.005759217, 0.036498453, 0.005990405, -0.011717431, -0.013250881, -0.047033604, -0.046050325, -0.025893064, 0.0040384755, -0.016657248, 0.019724147, -0.010394684, -0.004383794, 0.0044276905, 0.018904746, -0.016996713, -0.016001727, -0.07884976, 0.0474316, 0.004863729, -0.017429825, -0.00061162416, 0.006988318, -0.018963275, 0.020087024, 0.032237567, -0.028210798, -0.044481758, -0.058294512, -0.031862985, -0.030153949, -0.0033332054, -0.03691986, 0.024816139, 0.0010783899, -0.015182326, 0.047010195, 0.023657272, 0.011278466, -0.05145837, 0.019220801, -0.05183295, 0.022732519, -0.023282688, -0.037341263, 0.033454962, 0.024160618, 0.033337906, 0.048976757, -0.04094663, 0.055859722, -0.02283787, -0.065786175, 0.016200723, -0.006918084, 0.010031806, 0.0042989277, 0.056421597, -0.03228439, -0.033923194, -0.05487644, -0.094441794, -0.019162273, -0.07369924, 0.0051739304, 0.017347885, 0.029006787, -0.04487975, 0.01371911, -0.005048094, -0.030856293, 0.015615438, -0.010055218, 0.024464967, 0.019454915, -0.025471658, -0.022732519, -0.038652305, -0.0074389884, 0.04441152, -0.03242486, -0.06873602, -0.040314518, -0.0143746305, -0.008826117, 0.04178944, -0.0126890065, 0.0111497035, 0.011811077, 0.024277674, 0.047010195, -0.004565233, 0.025893064, -0.020028496, -0.03872254, -0.047478423, -0.042398136, 0.011372113, 0.007637986, 0.043966703, 0.005089064, 0.03160546, 0.027157282, -0.010148864, -0.02404356, -0.002502099, 0.013274292, -0.013449878, -0.044973396, 0.061291177, 0.019642208, 0.031090407, -0.0013073832, -0.0083813, 0.026384706, 0.016832832, -0.032214157, 0.024956606, -0.00057467795, -0.029030198, -0.019478327, -0.013590347, 0.06428784, 0.025260955, 0.010804385, -6.20152e-07, -0.016856244, -0.0048900666, 0.013941519, 0.03792655, -0.012501715, -0.021210775, -0.037247617, -0.001621243, 0.028444912, 0.0046969224, 0.026337883, -0.0018143874, -0.024066972, 0.06353868, 0.01971244, 0.0015378396, 0.039658997, -0.028210798, 0.0029322843, 0.029568663, 0.016668953, -0.021433184, 0.0035848783, 0.023704095, 0.0007937945, -0.045909856, -0.035444938, -0.028538559, 0.026759287, -0.0055133966, -0.024745904, 0.040852983, -0.0128645925, 0.014690685, 0.0061455057, 0.015521792, -0.028632205, 0.0015919786, 0.03324426, -0.0141405165, 0.059792846, 0.024277674, -0.007076111, -0.032401446, -0.010400537, -0.027180694, -0.004348677, 0.0015188179, 0.02007532, 0.042679075, 0.034578715, -0.05777946, 0.02091813, -0.02615059, -0.011495022, -0.030551944, -0.012490009, -0.022966633, 0.010260068, -0.012560244, -0.04499681, -0.02921749, 0.079786226, -0.0011383818, -0.06035472, 0.044903163, -0.03663892, -0.0047466718, -0.0039711674, -0.028117152, -0.009897191, 0.014187339, 0.02007532, -0.06428784, -0.005920171, -0.009054379, -0.019923145, 0.019150566, -0.0017953656, 0.027836215, 0.053003523, -0.0028166901, -0.01719571, 0.021924824, 0.0048139794, 0.027204106, -0.00858615, -0.0043867207, 0.0045359684, 0.0085100625, 0.011746695, 0.004375015, -0.015685672, -0.025846241, 0.016083667, -0.0008457387, 0.01750006, -0.01927933, 0.02790645, -0.039658997, -0.023657272, 0.02050843, 0.022990044, -0.016270958, -0.09041502, 0.007280961, -0.0032688237, -0.031090407, -0.013180647, -0.014269279, 0.025939887, -0.03354861, -0.02919408, 0.0044276905, 0.0016797716, -0.0024816138, -0.05698347, 0.007280961, -0.016469955, 0.0041526062, -0.00062954857, 0.0037341265, 0.036264338, -0.020637194, -0.084421694, -0.003622922, 0.033361316, 0.044083763, -0.055391494, 0.056093834, -0.014479983, -6.364988e-05, 0.036357984, 0.017406413, 0.02647835, -0.005671424, 0.010265921, 0.0030171508, 0.021515124, 0.03483624, 0.018998392, -0.009522608, 0.0145502165, -0.011904723, -0.00031312814, -0.022170644, 0.021655591, -0.008346182, 0.0057914075, -0.01807364, 0.04244496, 0.011623785, 0.0046647317, -0.022240879, -0.019829499, -0.010289333, 0.0066781165, 0.0024274748, -0.022439875, -0.0112082325, -0.024745904, -0.037013505, 0.0115594035, -0.012993355, 0.012969944, 0.066909924, 0.0040735924, -0.033056967, -0.008574444, 0.002462592, 0.006221593, -0.00091597304, 0.033267673, 0.0015407661, 0.036381394, -0.017137183, 0.027555278, 0.015194031, -0.02500343, -0.035093766, 0.035281055, 0.025378013, -0.013906402, 0.033454962, -0.0023469978, -0.030060302, -0.013613759, -0.015264266, 0.02582283, -0.04921087, -0.038137253, -0.027016815, -0.0056041162, 0.0054929117, 0.048789464, 0.019419799, -0.020040201, 0.0054021925, -0.036498453, 0.0014851639, -0.0153345, 0.002278227, 0.029802777, -0.0064205904, -0.011547698, -0.0031839572, 0.043802824, 0.008071098, -0.0023323658, 0.03279944, -0.0020060686, 0.016750893, 0.008673943, -0.012396364, -0.028913142, 0.004898846, -0.018717455, 0.016165607, 0.05876274, -0.0018612103, 0.0016051476, 0.021175656, 0.003181031, -0.011588668, -0.0020060686, 0.039003477, 0.0028401017, -0.023610448, 0.011518434, 0.00887294, -0.017699057, -0.0013117729, 0.009633812, -0.03017736, 0.019092038, -0.018694043, 0.030926526, -0.030645588, -0.016025137, -0.0029688645, -0.017535176, 0.012068603, 0.018284343, 0.010810237, -0.008527621, -0.0060401545, 0.05876274, -0.018752571, 0.0053378106, 0.026571997, 0.017078653, -0.009967425, -0.045558684, -0.012817769, -0.017722469, -0.013005061, 0.0072224326, -0.046893135, 0.009265082, -0.026923168, 0.03130111, -0.0051797833, -0.049632277, -0.0012656816, 0.044458345, 0.02486296, -0.038347956, 0.009229965, 0.0030025186, 0.000106083135, 0.0002789255, -0.0141405165, 0.047876418, -1.6872706e-05, -0.020660605, 0.043006834, -0.0112374965, 0.019724147, 0.02615059, 0.036896445, -0.0029044831, 0.006303533, 0.011050205, -0.007954041, -0.016715776, 0.008989997, -0.010172275, 0.007895512, 0.012302717, -0.015978316, -0.007942335, -0.0010813164, 0.004029696, 0.016680658, 0.0015290604, 0.017558588, -0.013005061, -0.022194056, 0.015521792, -0.080067165, -0.025354601, -0.008492503, -0.055906545, -0.026571997, -0.004661805, -0.035468347, 0.0009825493, 0.009352875, -0.018366283, 0.04115733, 0.013391349, -0.006198182, 0.025869653, 0.013028473, -0.009224111, 0.02757869, 0.006566912, -0.008972438, 0.029428193, 0.011073616, -0.0055251024, -0.008849529, -0.015158914, 0.012115425, -0.002768404, 0.003906786, 0.005194416, 0.0023835783, 0.0071580512, 0.012232483, -0.0029483796, -0.017113771, -0.020836191, -0.010675621, -0.008457387, -0.030739235, 0.006637146, 0.01621243, 0.035585403, -0.022041881, -0.016306076, 0.015404735, -0.033946604, 0.026361294, -0.002733287, 0.0035468347, 0.026501762, 0.002740603, 0.0038160665, 0.017757585, -0.013414761, 0.024301086, -0.012607066, 0.0015305236, -0.03549176, 0.0075209285, 0.023189042, 0.0017353737, -0.00072319433, 0.020520136, 0.009341169, 0.0629768, 0.0026601262, -0.01848334, -0.006555206, 0.0062040347, -0.043006834, -0.005156372, -0.016575307, 0.03661551, -0.019642208, 0.014877977, 0.03902689, 0.01686795, -0.058060396, -0.010857061, 0.0314884, -0.022135526, -0.025635539, -0.03214392, 0.026829522, 0.02210041, 0.03162887, -0.03190981, -0.062227637, -0.01645825, 0.011922281, 0.0099323075, 0.00601089, -0.018272636, 0.030645588, -0.008884646, 0.020239199, 0.05337811, -0.02067231, 0.0028591235, -0.009101202, -0.02533119, -0.01944321, -0.04649514, 0.008469093, -0.011454052, 0.038184077, 0.014678979, 0.006086977, 0.022779342, 0.013871284, 0.04502022, 0.016107079, 0.0019285183, 0.024464967, 0.02026261, 0.04455199, 0.0025298998, 0.0034297775, -0.008474945, -0.029006787, 0.016469955, 0.04033793, -0.01580273, 0.016118784, 0.08025445, -0.02565895, 0.02500343, 0.0017265945, -0.019782675, -0.0036317012, -0.014152222, -0.00907779, -0.026033534, -0.024277674, 0.019899733, -0.028140564, 0.021679003, 0.019630501, -0.015053563, 0.043826237, -0.004770083, -0.0045886445, -0.033056967, 0.021351242, -0.013274292, -0.047337953, -0.006561059, -0.012735829, 0.059886493, 0.0084515335, -0.027648924, -0.014889683, -0.004173091, 0.023376334, -0.024090383, -0.00464132, 0.014152222, -0.024886372, -0.02727434, -0.006742498, 0.019969968, -0.0026367146, 0.04352189, 0.008931468, -0.0147258025, -0.026267648, 0.010517594, -0.020871308, 0.002272374, 0.02500343, -0.015076974, -0.0037985079, -0.013672288, 0.010014248, 0.010435654, 0.05080285, -0.023949914, 0.009616253, 0.0126890065, -0.009516755, -0.046261027, -0.012735829, -0.031652283, 0.013754227, -0.024488378, 0.0057826284, -0.032237567, -0.01036542, -0.026829522, -0.061291177, -0.050615557, -0.008082803, -0.0019080333, 0.0052002687, 0.021643886, 0.010558564, -0.0014895536, 0.0038453308, 0.0013037252, 0.0021875075, 0.016341193, -0.012162249, 0.0012305644, -0.011126292, -0.022744225, 0.026923168, 0.023973325, 0.02297834, -0.026103768, -0.000272341, 0.007386313, 0.0097859865, 0.013707404, 0.015556909, 0.016177313, -0.009458226, -0.014468277, -0.009791839, -0.014854565, -0.0019621723, -0.0015173546, -0.021257598, -0.004852023, -0.020964954, 0.0002712436, -0.020133847, 0.011787665, -0.010962412, -0.011676461, -0.016118784, -0.00472326, 0.029077021, 0.061103888, -0.031020172, -0.013964931, -0.0374115, -0.0032541917, 0.02089472, 0.025073664, -0.010681475, -0.03448507, -0.0210586, -0.011126292, -0.006520089, -0.0034853797, -0.011377965, 0.02938137, -0.0050861374, 0.010511741, 0.023879679, -0.0009606011, 0.008369594, 0.030856293, -0.01259536, -0.025167309, 0.011073616, 0.00070746476, -0.03549176, 0.06480289, 0.012361246, 0.029568663, 0.020988366, 0.006660558, 0.0013322579, -0.074823, -0.04029111, -0.013871284, -0.010260068, 0.03713056, 0.007280961, -0.020754252, -0.008188155, 0.011711578, -0.009370433, 0.012466597, 0.017125476, 0.0065376475, 0.014948212, 0.043030247, -0.01218566, -0.06733133, -0.008989997, 0.048648994, -0.032869678, -0.01476092, -0.023282688, 0.021421477, 0.0075150756, -0.034766003, 0.0010469308, -0.011928135, 0.02469908, 0.04780618, 0.006198182, 0.02201847, -0.033010144, -0.013367939, 0.03193322, -0.014971623, -0.030060302, -0.016879655, -0.01355523, 0.029638896, -0.0087441765, -0.0066195875, -0.015217443, 0.030598765, 0.01782782, 0.047993474, -0.018740866, 0.00019259576, 0.035913166, -0.009750869, -0.027204106, -0.009165583, 0.043685768, -0.0066956747, 0.0017529323, 0.008059392, -0.029755954, -0.023786034, -0.030224184, 0.010236657, 0.039658997, 0.00530562, -0.040572044, -0.0010461992, -0.002585502, 0.01517062, -0.009715752, -0.006479119, 0.01330941, 0.0036931564, 0.02790645, -0.019490033, 0.0006364988, -0.0048695817, -0.014643863, 0.039752644, 0.02091813, -0.022135526, 0.020005085, 0.022076998, -0.025307778, -0.036077045, -0.0048052003, 0.033314496, 0.015264266, -0.01069318, -0.007456547, -0.014117105, -0.004260884, -0.0037897285, -0.017336179, -0.011319436, -0.007122934, -0.018623808, -0.043849647, 0.0097859865, -0.013590347, -0.013742521, -0.014011754, 0.032237567, 0.041859675, 0.020274317, 0.030411474, 0.014796037, -0.015100386, 0.0345553, -0.02423085, -0.033337906, 0.044926573, 0.0014661421, -0.04860217, -0.008340329, 0.00022515231, -0.024605434, 0.030153949, -0.0021201996, 0.009276788, 0.00034842824, 0.0021875075, -0.009177289, -0.031371344, -0.029100433, 0.019923145, 0.0010147401, -0.0050246827, 0.013438173, -0.038160663, 0.013683993, 0.05426774, 0.008123773, -0.027719157, -0.029592074, 0.0055748518, 0.0021875075, 0.033056967, 0.028819496, -0.01801511, 0.01930274, 0.007860394, -0.024558611, -0.008504209, 0.046284437, -0.025120487, -0.008328624, 0.028374678, -0.019536857, 0.021784354, -0.00605186, -0.024254262, 0.0011178968, -0.038465012, -0.01864722, 0.029638896, -0.0067600566, -0.034438245, 0.0228964, -0.021866295, -0.0013900549, -0.034953296, -0.0061572115, 0.02267399, -0.017874643, -0.00601089, 0.011126292, 0.027859626, 0.008837823, 0.015603732, 0.003874595, 0.04471587, 0.0024333277, 0.0030756793, 0.039471705, 0.011746695, -0.040899806, -0.006444002, -0.022088705, 0.020133847, -0.015826141, 0.009920603, -0.042468373, -0.022521816, 0.006654705, 0.003909712, -0.023563625, 0.014737508, 0.017429825, 0.011688167, 0.020426491, 0.0039565354, -0.016434839, 0.031066995, 0.016481662, -0.023505097, -0.015158914, -0.0060752714, 0.00261184, 0.0337359, 0.018331166, -0.015158914, -0.009423109, -0.008252536, -0.020695722, 0.028187387, 0.011547698, 0.011044352, -0.008387152, 0.015041857, -0.0064030318, -0.0116179325, -0.022826165, -0.02251011, 0.007848689, 0.001587589, -0.038839597, 0.023926502, 0.033806134, -0.018729161, 0.0033888074, 0.020168966, -0.006847849, 0.021913119, 0.026923168, -0.021105424, -0.0010322987, -0.01459704, 0.016388016, 0.02533119, -0.010394684, -0.0014815059, 0.014362925, -0.007245844, -0.025588715, 0.005841157, -0.0032922353, 0.008814411, -0.008153038, 0.031886395, -0.0038658157, 0.0010147401, -0.0013388423, 0.02256864, -0.00022954195, 0.001845115, 0.009399697, -0.016013432, -0.039588764, 0.0022445729, 0.015779318, -0.08081633, 0.011594521, 0.016528483, 0.005463647, -0.03214392, 0.06962565, 0.010347861, 0.019080332, -0.008106215, 0.040080402, 0.013964931, 0.018495046, -0.007632133, 9.049074e-05, 0.01355523, 0.025378013, 0.022638872, 0.015931493, -0.030153949, 0.010008396, 0.01694989, 0.022381347, 0.0100201005, -0.010049365, -0.0126890065, -0.012735829, -0.0048198323, 0.022369642, -0.018366283, 0.010991676, -0.02338804, -0.009973278, -0.010342008, 0.0110326465, -0.021421477, -0.027367987, 0.034742594, 0.01837799, 0.007913071, -0.0019255918, 0.029123845, 0.020707428, 0.032167334, -0.039893113, 0.016505072, 0.004076519, -0.008410564, 0.027508454, -0.0021158098, -0.000690272, -0.023774328, -0.018857924, -0.0028532706, -0.020110436, 0.014199045, 0.015205737, -0.01960709, 0.0045974236, 0.03727103, -0.013016767, 0.038488425, 0.02437132, -0.022088705, -0.003839478, -0.006098683, 0.0008684185, -0.03340814, -0.02404356, -0.007719926, -0.011711578, -0.0037312, -0.034812827, 0.02091813, 0.008369594, -0.018576987, -0.022439875, -0.020414785, -0.012396364, 0.008826117, 0.0072341384, 0.011219937, 0.021152245, -0.011132145, 0.011910575, -0.03226098, -0.0111497035, -0.011436494, 0.0030844586, 0.009768428, 0.0035175704, 0.023973325, 0.005718247, 0.007971599, 0.013531819, 0.017652234, -0.0027040225, 0.0064264433, -0.018752571, 0.054455034, 0.00024088188, 0.011881311, -0.008738324, -0.00013342698, -0.0060284487, -0.020964954, -0.0032658973, -0.00078501523, 0.016306076, 0.024441555, -0.002686464, 0.010622946, 0.036685742, 0.037692435, -0.02091813, -0.018225815, 0.018214108, 0.010178128, 0.0005604116, 0.031254288, -0.0125719495, -0.016189018, -0.055063732, -0.0015597879, 0.01036542, -0.009891338, 0.010792679, 0.016364604, -0.040244285, -0.0052324594, 0.024441555, 0.019220801, 0.020789368, 0.042164024, -0.0066781165, 0.016481662, 0.000878661, 0.03806702, -0.006098683, 0.0099030435, -0.040431574, -0.023891386, 0.015369617, 0.005162225, 0.012829475, -0.0057972604, -0.008439828, 0.016575307, -0.039963346, -0.02757869, 0.0036404806, -0.027836215, 0.0081588905, -0.02100007, -0.015404735, -0.011875458, -0.012232483, -0.014585334, -0.006654705, -0.017874643, -0.021117128, 0.040782746, -0.0099323075, -0.00875003, -0.02711046, 0.036896445, -0.001893401, 0.009575283, 0.031699106, 0.0048871404, -0.015709084, 0.0022109188, 0.0016505073, 0.025799418, 0.023341216, 0.017675646, -0.011846194, -0.025565304, -0.012173954, 0.01525256, -0.008592002, 0.02155024, 0.022416465, 0.014421454, 0.00090134086, 0.010944854, 0.03017736, -0.010312744, 0.018249227, -0.06377279, 0.011764254, 0.012138837, 0.04277272, 0.010459065, 0.004553527, 0.01363717, -0.014959917, -0.0012664131, 0.011067763, -0.013239175, 0.042070378, 0.061899874, 0.03471918, 0.012642183, 0.016551895, -0.011272614, 0.045441628, 0.032705795, 0.0074038715, 0.008463239, 0.00071441504, 0.029428193, 0.02179606, -0.015112092, 0.0028371753, 0.015638849, 0.0057855546, -0.0020792296, 0.023142219, -0.030364651, -0.026548585, 0.018822806, 5.9671765e-05, -0.025705773, -0.012408069, -0.0058440836, -0.035117175, 0.012396364, 0.014971623, 0.0024391806, 0.00058601785, -0.017944876, 0.0069824653, -0.022147233, -0.007292667, -0.019794382, 0.0044276905, -0.020145554, 0.01719571, 0.0085100625, 0.0068068793, 0.037669025, 0.0074272826, -0.030903116, -0.033291083, 0.044271052, 0.0063445033, 0.009686488, 0.03448507, 0.02713387, 0.002414306, 0.027789392, 0.03003689, -0.00053151307, 0.031862985, 0.010295185, 0.012068603, -0.015720788, -0.00854518, -0.0027640143, 0.00766725, 0.010505889, 0.059980135, -0.00858615, -0.0171723, -0.0071697566, -0.025167309, -0.01842481, -0.0050861374, 0.05361222, 0.0075209285, 0.058715917, 0.0048403176, 0.009499196, 0.012817769, -0.027531866, 0.0054197507, 0.0032044423, -0.029334547, -0.00060394226, -0.004023843, 0.0047817887, 0.005639233, 6.7582274e-05, -0.027883038, 0.02379774, 0.010412242, -0.00061052677, -0.02888973, 0.023329511, -0.021889707, 0.00026319592, -0.0052383123, -0.06859555, 0.0010498572, 0.013028473, 0.010061071, 0.026899757, 0.020063613, -0.028632205, 0.008515915, 0.015556909, -0.009885485, 0.008147185, -0.017301062, -0.035913166]"
../../../gradio,../../../gradio/gradio/components,dropdown.py,"""""""gr.Dropdown() component.""""""

from __future__ import annotations

import warnings
from typing import Any, Callable, Literal

from gradio_client.documentation import document

from gradio.components.base import FormComponent
from gradio.events import Events


@document()
class Dropdown(FormComponent):
    """"""
    Creates a dropdown of choices from which a single entry or multiple entries can be selected (as an input component) or displayed (as an output component).

    Demos: sentence_builder
    """"""

    EVENTS = [
        Events.change,
        Events.input,
        Events.select,
        Events.focus,
        Events.blur,
        Events.key_up,
    ]

    def __init__(
        self,
        choices: list[str | int | float | tuple[str, str | int | float]] | None = None,
        *,
        value: str | int | float | list[str | int | float] | Callable | None = None,
        type: Literal[""value"", ""index""] = ""value"",
        multiselect: bool | None = None,
        allow_custom_value: bool = False,
        max_choices: int | None = None,
        filterable: bool = True,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            choices: A list of string options to choose from. An option can also be a tuple of the form (name, value), where name is the displayed name of the dropdown choice and value is the value to be passed to the function, or returned by the function.
            value: default value(s) selected in dropdown. If None, no value is selected by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            type: Type of value to be returned by component. ""value"" returns the string of the choice selected, ""index"" returns the index of the choice selected.
            multiselect: if True, multiple choices can be selected.
            allow_custom_value: If True, allows user to enter a custom value that is not in the list of choices.
            max_choices: maximum number of choices that can be selected. If None, no limit is enforced.
            filterable: If True, user will be able to type into the dropdown and filter the choices by typing. Can only be set to False if `allow_custom_value` is False.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, choices in this dropdown will be selectable; if False, selection will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.choices = (
            # Although we expect choices to be a list of tuples, it can be a list of tuples if the Gradio app
            # is loaded with gr.load() since Python tuples are converted to lists in JSON.
            [tuple(c) if isinstance(c, (tuple, list)) else (str(c), c) for c in choices]
            if choices
            else []
        )
        valid_types = [""value"", ""index""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.multiselect = multiselect
        if multiselect and isinstance(value, str):
            value = [value]
        if not multiselect and max_choices is not None:
            warnings.warn(
                ""The `max_choices` parameter is ignored when `multiselect` is False.""
            )
        if not filterable and allow_custom_value:
            filterable = True
            warnings.warn(
                ""The `filterable` parameter cannot be set to False when `allow_custom_value` is True. Setting `filterable` to True.""
            )
        self.max_choices = max_choices
        self.allow_custom_value = allow_custom_value
        self.filterable = filterable
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def api_info(self) -> dict[str, Any]:
        if self.multiselect:
            json_type = {
                ""type"": ""array"",
                ""items"": {""type"": ""string"", ""enum"": [c[1] for c in self.choices]},
            }
        else:
            json_type = {
                ""type"": ""string"",
                ""enum"": [c[1] for c in self.choices],
            }
        return json_type

    def example_payload(self) -> Any:
        if self.multiselect:
            return [self.choices[0][1]] if self.choices else []
        else:
            return self.choices[0][1] if self.choices else None

    def example_value(self) -> Any:
        if self.multiselect:
            return [self.choices[0][1]] if self.choices else []
        else:
            return self.choices[0][1] if self.choices else None

    def preprocess(
        self, payload: str | int | float | list[str | int | float] | None
    ) -> str | int | float | list[str | int | float] | list[int | None] | None:
        """"""
        Parameters:
            payload: the value of the selected dropdown choice(s)
        Returns:
            Passes the value of the selected dropdown choice as a `str | int | float` or its index as an `int` into the function, depending on `type`. Or, if `multiselect` is True, passes the values of the selected dropdown choices as a list of correspoding values/indices instead.
        """"""
        if self.type == ""value"":
            return payload
        elif self.type == ""index"":
            choice_values = [value for _, value in self.choices]
            if payload is None:
                return None
            elif self.multiselect:
                if not isinstance(payload, list):
                    raise TypeError(""Multiselect dropdown payload must be a list"")
                return [
                    choice_values.index(choice) if choice in choice_values else None
                    for choice in payload
                ]
            else:
                return (
                    choice_values.index(payload) if payload in choice_values else None
                )
        else:
            raise ValueError(
                f""Unknown type: {self.type}. Please choose from: 'value', 'index'.""
            )

    def _warn_if_invalid_choice(self, value):
        if self.allow_custom_value or value in [value for _, value in self.choices]:
            return
        warnings.warn(
            f""The value passed into gr.Dropdown() is not in the list of choices. Please update the list of choices to include: {value} or set allow_custom_value=True.""
        )

    def postprocess(
        self, value: str | int | float | list[str | int | float] | None
    ) -> str | int | float | list[str | int | float] | None:
        """"""
        Parameters:
            value: Expects a `str | int | float` corresponding to the value of the dropdown entry to be selected. Or, if `multiselect` is True, expects a `list` of values corresponding to the selected dropdown entries.
        Returns:
            Returns the values of the selected dropdown entry or entries.
        """"""
        if value is None:
            return None
        if self.multiselect:
            if not isinstance(value, list):
                value = [value]
            [self._warn_if_invalid_choice(_y) for _y in value]
        else:
            self._warn_if_invalid_choice(value)
        return value
","The code defines a `Dropdown` component for Gradio, which creates a dropdown menu with selectable options. The component can be used for both input and output. It allows for single or multiple selections, custom values, filtering, and setting default values. The component has various parameters such as choices, value, type, multiselect, allow_custom_value, max_choices, filterable, label, info, and more. The component also includes methods for API information, example payload, preprocessing, and postprocessing of selected values.","[-0.038013067, 0.026336618, 0.04423894, -0.027652273, 0.013003851, -0.014519205, -0.01844268, 0.028427571, -0.003929348, -0.041302204, 0.0013083144, -0.023482112, -0.03695584, 0.0023302971, 0.040456425, -0.013050839, -0.011218318, -0.024151688, -0.024879998, 0.060144283, 0.007976165, -0.04423894, 0.010225703, 0.060849097, -0.014225532, -0.043839544, -0.015541188, 0.104124784, -0.014859866, 0.009532634, -0.014401736, -0.0394227, 0.00037957268, -0.020733332, 0.005224447, -0.064467154, 0.044544358, 0.04990096, -0.020533634, -0.036438975, -0.048679277, -0.019041773, -0.015752634, 0.026430592, -0.013649933, 0.031082377, -0.028592028, 0.018419186, 0.025890233, 0.035992593, -0.0746165, -0.02556132, -0.03540525, -0.023164947, -0.016692387, 0.014343002, -0.08241646, 0.011382775, 0.0064490647, -0.036744397, -0.012393011, -0.0009184631, 0.0077353534, 0.035475727, 0.03129382, 0.008622247, -0.019264964, 0.023106212, 0.012369517, 0.010724947, 0.020909535, -0.034747418, -0.008387308, -0.021814048, 0.021579111, -0.0025520206, -0.018818581, -0.06958881, 0.036485966, 0.01293337, -0.026031196, 0.006331595, -0.06728642, -0.044661827, 0.010090613, 0.0086868545, -0.008228725, 0.012792407, -0.014519205, -0.044074483, -0.06117801, -0.054082867, 0.007347705, 0.048350364, -0.021790555, 0.011488497, -0.0035886872, -0.0052420674, -0.0042670723, 0.06080211, 0.021637846, -0.029508289, -0.017855333, -0.05380094, 0.0056062224, -0.04900819, 0.0139671, 0.03458296, 0.008316826, 0.009097997, -0.005700198, -0.010478262, -0.082040556, 0.04663531, -0.0091743525, -0.06056717, -0.013978846, -0.029625757, -0.019805323, -0.03190466, -0.0060849097, -0.04106727, 0.007488668, -0.050182886, 0.030941414, -0.00533898, -0.04430942, -0.0138261365, -0.043181714, 0.004581303, -0.017150518, 0.02325892, 0.003007214, -0.06315149, -0.018677618, 0.049619034, -0.09012245, -0.0008105382, -0.04059739, 0.00967947, 0.028662508, -0.038764868, 0.013144814, 0.011447383, -0.032961886, -0.04412147, -0.0417016, 0.04174859, -0.06573582, 0.031505268, -0.027722755, 0.0047457595, -0.054693706, -0.005312549, 0.00051906746, -0.00579711, 0.05065276, -0.022060735, 0.017679129, -0.019523397, -0.017538166, 0.02502096, 0.017890574, -0.03439501, -0.008986401, -0.026806494, -0.031787194, 0.04217148, -0.03542874, 0.024057712, -0.0009683875, -0.017737864, -0.031364303, 0.043158222, -0.023282416, 0.0052831816, 0.012792407, 0.011365155, -0.002400779, -0.010707327, 0.01852491, -0.022507118, 0.017373709, 0.024269158, -0.0095678745, -0.06310451, -0.033361282, -0.06676955, -0.03164623, 0.00040233234, 0.02727637, -0.0015770254, -0.004038007, -0.030964907, -0.027229384, -0.011030368, 0.00032340767, 0.012545722, 0.00038214232, -0.0017811282, 0.06836713, 0.0006648028, 0.018889064, -0.006672256, -0.034911875, 0.02969624, -0.028521545, 0.010325551, 0.043980505, -0.03286791, 0.034113083, -0.031810686, -0.015212274, 0.029132387, -0.041255217, -0.014707156, 0.014225532, 0.017726118, 0.021461641, -0.0023831585, -0.037848607, 0.003074759, 0.022683322, -0.05793586, 0.046118446, -0.027793236, 0.040456425, -0.028803471, 0.041842565, 0.0019617374, 0.034770913, -0.025913728, 0.023106212, 0.0050012553, 0.029531782, -0.017773105, 0.013567704, -0.047692537, 0.040691365, 0.0018545466, -0.039516672, -0.046353385, 0.0076237577, -0.010437148, 0.008757336, 0.019499904, -0.023634823, -0.015658658, 0.002541742, 0.0428528, -0.02242489, 0.03190466, 0.024410121, -0.017843587, 0.023000488, -0.032656465, 0.00728897, 0.023905003, 0.00053228275, -0.0026636163, -0.015247515, -0.029320337, 0.0031687343, 0.061318975, -0.011259433, 0.05295516, 0.019159243, 0.028004682, -0.018113766, -0.029508289, -0.022460131, -0.021825796, 0.06489004, 0.022048987, 0.011999489, -0.010589858, 0.045907002, 0.028310101, -0.0017267987, 0.007835202, -0.071985185, -0.0214264, -0.0016093294, -0.0030101507, -0.005456449, 0.010137601, 0.060050305, 0.0006629674, 0.0038764868, -0.045625076, 0.0061201504, -0.0051745228, 0.048961204, -0.035475727, -0.00952676, 0.0077353534, 0.02066285, 0.007353578, 0.020768572, -0.010971633, 0.00654304, 0.019758336, 0.016163776, -0.06221174, 0.0062023792, -0.017185759, 0.014049328, 0.02035743, -0.04825639, -0.018419186, 0.027299866, 0.016445702, 0.022084229, -0.008446042, -0.08791403, 0.01457794, 0.03470043, 0.0063962033, 0.0052450043, -0.034770913, 0.02532638, 0.029555276, 0.011752804, -0.011024494, -0.05234432, -0.051874444, -0.041607626, -0.040080525, -0.0016739375, -0.0336667, 0.028357089, -0.0090803765, -0.026336618, 0.06681654, 0.019981528, -0.012851141, -0.044826284, 0.032844417, -0.055586472, 0.014495712, -0.012921623, -0.0024242727, 0.012639697, -0.0027282245, 0.037378732, -0.0150478175, -0.062117767, 0.04905518, -0.015364984, -0.01484812, -0.0241047, -0.019124001, -0.0010638314, 0.004325807, 0.031199846, -0.032891404, -0.044004, -0.06531293, -0.06827316, -0.010971633, -0.010531123, 0.021825796, -0.04254738, 0.03080045, -0.016199017, -0.007688366, -0.0531901, -0.013626439, -0.019347195, -0.013215296, 0.032726947, -0.010243323, -0.024386628, 0.02059237, -0.05539852, -0.007606137, 0.02739384, -0.030001659, 0.0036298013, -0.018501414, 0.052485283, -0.018055031, -0.048162412, -0.009039262, -0.025044454, -0.009186099, -0.0051128515, 0.034723926, 0.00728897, -0.010619225, -0.026007703, -0.01603456, 0.026289629, -0.020897789, 0.0099085355, 0.005720755, -0.02701794, 0.0130390925, 0.012792407, 0.026148666, 0.014765891, -0.018055031, -0.045390137, 0.055586472, -0.008399055, -0.020392671, 0.03303237, 0.033243813, 0.005808857, -0.03141129, 0.025843246, 0.021027004, 0.0482094, -0.0006626003, 0.04435641, 0.012310782, 0.0021173842, -0.014354749, -0.00801728, 0.048961204, 0.009867421, -0.052203357, -0.005729565, -0.04499074, 0.012686685, 0.027746249, 0.01710353, 0.033737183, 0.037331745, -0.00994965, -0.01924147, -0.00013674161, 0.04320521, 0.0055239936, 0.019793577, -0.016903833, 0.042335935, 0.017514672, 0.05295516, 0.00297491, -0.013837883, 0.028239619, 0.031246834, 0.01771437, -0.026689025, 0.002020472, 0.002393437, -0.017162265, -0.04346364, -0.03232755, -0.017044796, 0.035264283, -0.024997467, 0.0026959204, 0.021473387, 0.0135794515, 0.008739716, 0.000878083, 0.009327062, -0.013062586, -0.01813726, 0.013555957, 0.0009669192, 0.010149348, -0.00048492796, -0.012111085, 0.037214275, 0.012122832, -0.003961652, 0.00966185, -0.013321019, 0.027652273, 0.009397544, 0.044638336, -0.028779978, 0.017749611, 0.04327569, 0.0046605943, -0.019429423, 0.029226363, -0.016680641, 0.029226363, -0.020721585, -0.0359691, 0.02537337, 0.092612796, -0.0028912132, -0.0114767505, -0.014530952, -0.012886383, 0.010002511, -0.0070422846, -0.0133915, -0.00979694, 0.019969782, -0.0038060052, -0.06484305, -0.010783682, -0.024668554, -0.04200702, 0.010114106, -0.030189611, 0.0068190927, 0.064232215, 0.023846269, 0.010672086, 0.023811027, -0.0135794515, -0.006566534, -0.021015259, -0.037214275, -0.010660339, -0.008821945, 0.00050144707, 0.011500244, -0.04167811, -0.03408959, -0.0021878658, -0.053237088, 0.009626609, -0.03622753, 0.02276555, -0.022554105, -0.0054828795, 0.019887552, 0.008839564, -0.0060790363, -0.05455274, 0.035710666, -0.01159422, -0.012486987, -0.006355089, 0.0013920112, 0.045742545, -0.046893746, -0.018607138, -0.001832521, 0.0053477897, 0.03627452, -0.043557618, -0.006907195, -0.007265476, 0.016809857, -0.012099338, 0.006355089, 0.01676287, 0.025349874, -0.052062392, 0.0055239936, -0.005488753, 0.009597242, -0.06324547, 0.018419186, -0.034747418, 0.0042553255, 0.022283927, 0.017467685, 0.022671575, -0.011558979, -0.047199164, -0.0010256538, -0.018677618, 0.021684833, 0.05065276, -0.0059116427, -0.01591709, -0.025608307, 0.009215467, -0.0558684, 0.0073946924, -0.014296014, 0.010184588, 0.006126024, 0.034442, 0.027840225, 0.037519693, -0.01189964, -0.010736694, 0.0119172605, -0.007165627, 0.015623417, -0.031434786, 0.01740895, -0.01852491, -0.034770913, -0.009332936, 0.008769083, 0.01545896, -0.0023273604, 0.009350556, 0.0050482433, 0.02325892, -0.004998319, 0.039963055, -0.007030538, 0.007741227, 0.0053536636, 0.033102848, -0.017021302, -0.016668893, 0.025631802, -0.0017297354, -0.0032010383, 0.0030982527, 0.017679129, -0.0070951455, 0.026736014, 0.007406439, -0.031199846, 0.0115707265, -0.014307761, 0.030542018, -0.023399884, -0.01924147, -0.020263454, -0.016445702, -0.0539419, 0.012310782, 0.020263454, -0.0074358066, 0.005755996, -0.0067133703, 0.019135749, -0.01384963, -0.011576599, 0.02452759, 0.029202867, -0.020005021, 0.035029344, -0.0010117043, 0.011911387, 0.0040115765, 0.045789532, -0.014260773, 0.013755655, -0.02023996, -0.0068425867, -0.026031196, -0.024034219, -0.05168649, 0.00920372, 0.017585155, -0.00032138865, 0.0075004147, 0.03256249, 0.016257752, -0.021520376, 0.015400225, 0.05643225, -0.0034682811, 0.016422208, 0.028028175, 0.01966436, -0.008105381, -0.012674937, -0.007823455, 0.0048103677, -0.020874295, -0.004819178, 0.035146814, -0.033690196, -0.029743226, 0.024739034, 0.00805252, 0.0030776956, 0.024621565, 0.010572237, 0.01591709, -0.01457794, 0.009538507, -0.034911875, -0.0068190927, -0.01205235, 0.018031538, 0.018184248, -0.046447363, 0.043675087, -0.009550254, 0.015682152, 0.021931518, -0.046047967, 0.022859525, -0.04200702, -0.027534803, 0.008540018, -0.04687025, 0.0021305995, 0.007453427, 0.0214264, -0.020322189, 0.010836543, 0.007406439, 0.035875123, 0.019793577, 0.01278066, 0.05666719, 0.015317997, 0.0181725, 0.03286791, -0.03303237, 0.026407098, 0.031458277, 0.0007606137, -0.019311953, -0.0064431913, -0.013344512, 0.007247856, 0.025232406, 0.01354421, -0.026689025, 0.009879168, 0.031693216, 0.003544636, -0.02008725, -0.010989253, 0.0046605943, -0.0010858568, 0.0063022277, 0.0034653444, -0.008281586, -0.031622734, 0.008381435, -0.04966602, -0.0074593006, 0.014401736, -0.0639033, -0.0059087058, -0.003982209, -0.03822451, 0.018536655, -0.01610504, -0.00058440975, 0.0041730967, 0.014178544, 0.0072830967, 0.024175182, -0.005459386, -0.008404928, 0.012792407, -0.032468516, 0.017056542, 0.0160698, -0.010912898, -0.0204749, -0.016116789, -0.010507629, 0.028756484, 0.02023996, -0.03279743, 0.011447383, -0.027064927, 0.0075356555, -0.0024668553, -0.0030365814, -0.021496883, -0.012674937, -0.013931859, -0.04040944, -0.028474558, -0.017890574, 0.03991607, 0.030518524, -0.012533974, 0.008504777, -0.00010856733, -0.046447363, 0.019206231, -0.0223779, 0.017232746, 0.026618544, 0.010619225, -0.01836045, 0.00625524, 0.010296185, 0.039775103, -0.014707156, -0.0348179, -0.031810686, 0.015940584, 0.018689366, 0.028826967, 0.0019397119, 0.034606457, -0.007189121, 0.04778651, 0.011905514, 8.3742765e-05, 0.020275202, -0.0045166947, -0.043557618, 0.0054065245, 0.013156561, -0.022002, -0.018571896, 0.038013067, 0.017690876, 0.02035743, -0.08861884, -0.008998148, 0.004361048, -0.027605286, -0.015541188, -0.041490156, 0.04259437, 0.039657637, 0.0193237, -0.03401911, -0.04151365, -0.0098615475, 0.028192632, -0.010078866, -0.011564853, 0.0049014064, 0.010971633, 0.010219829, -0.007876317, 0.015317997, 0.01966436, -0.017843587, -0.022002, -0.016116789, -0.011952502, -0.0132857775, -0.005720755, 0.01610504, 0.016551424, 0.033079356, 0.027158903, -0.0005796376, -0.016915578, 0.021250196, 0.015670404, -0.02330591, 0.035005853, -0.039845586, 0.010296185, -0.0290854, 0.041772082, -0.011277053, -0.026148666, 0.0027796172, 0.01852491, 0.022507118, 0.009303569, 0.030166116, 0.014824626, 0.00669575, 0.027041433, 0.009562001, 0.018677618, -0.0028133898, 0.0012400353, -0.00076428463, -0.027041433, 0.08077189, -0.0014419357, -0.0152945025, 0.004554872, 0.014237279, 0.055304546, -0.004137856, -0.009603116, -0.031458277, 0.04661182, -0.011300547, -0.065970756, -0.012334277, 0.007970292, 0.027981188, -0.011012747, -0.009338809, -0.023505608, -0.015658658, -0.0027708071, -0.0187481, -0.025702283, 0.006061416, 0.020886041, -0.025467344, -0.024762528, -0.0016298866, 0.0008171458, 0.03152876, -0.00460186, -0.00935643, -0.01683335, -0.028639015, -0.004863229, -0.0017003681, 0.009121492, -0.0027840224, 0.0024389564, -0.023752293, 0.0035328893, 0.00033258495, 0.023752293, -0.01993454, 0.013931859, 0.010977506, -0.010589858, -0.013943606, 0.030377561, -0.047645546, -0.034794405, -0.020169478, 0.011705816, -0.017361963, -0.005773616, -0.035945605, -0.0082933325, -0.013461982, -0.023822773, 0.014296014, 0.008040774, 0.0026856419, 0.004971888, 0.016292991, 0.040526908, 0.015224021, -0.018454427, 0.018665873, 0.00728897, 0.021872783, 0.004278819, -0.046893746, -0.0064255707, 0.0055680447, 0.025631802, 0.005036496, -0.001559405, 0.048961204, 0.014942095, 0.025490839, -0.01645745, 0.0035093953, -0.04282931, 0.007224362, 0.0012525164, 0.015411972, 0.004980698, -0.0152945025, 0.0014265178, 0.0018178375, -0.00014784612, 0.008892426, -0.031481773, 0.009749952, 0.0070951455, -0.022283927, 0.013990594, 0.011136089, 0.025725776, 0.09886216, 0.024480602, -0.043792553, 0.0223779, 0.012463492, -0.0066370154, 0.022930007, 0.013720415, -0.04748109, 0.009943776, -0.0017209252, 0.02261284, 0.009403418, -0.04273533, 0.050464813, -0.017878827, 0.004181907, 0.0022877145, 0.016939074, 0.015552935, 0.05239131, 0.013015598, -0.015552935, 0.014014088, 0.008375561, -0.033878148, 0.06348041, -0.0019059394, 0.04212449, 0.03439501, 0.006249367, -0.0036180546, -0.031317316, -0.0072772233, -0.005488753, 0.0075826435, 0.046940733, 0.010002511, -0.030847438, -0.008134749, 0.016821604, 0.0014823157, 0.017773105, 0.0329149, -0.017162265, 0.016422208, 0.014413483, -0.006178885, -0.0050776107, -0.02166134, -0.005597412, -0.032656465, 0.029954672, -0.005729565, 0.062493667, -0.015752634, -0.013262284, -0.0005906503, -0.027370347, 0.0208508, 0.029602263, 0.014296014, 0.011030368, -0.044050988, 0.0045842393, -0.014448724, 0.00013206119, -0.018736353, -0.015376732, 0.033102848, 0.007048158, 0.0042288946, -0.019452916, 0.014389989, 0.027417334, 0.024621565, 0.014190291, 0.0026078185, -0.009215467, 0.025913728, -0.032538995, -0.037848607, 0.012228554, 0.028498052, 0.016668893, 0.015564682, 0.004499074, 0.0022935881, -0.018689366, -0.029672746, -0.0124047585, 0.012451746, -0.00996727, -0.01917099, -0.008904173, -0.0306125, 0.0027634653, 0.017773105, 0.012580962, -0.01040778, 0.021755314, 0.018571896, 0.004002766, -0.004258262, -0.018701112, -0.012169819, -0.0021629035, 0.012956864, -0.017632142, 0.02520891, 0.038506437, -0.018066779, -0.0063374685, -0.0017767232, 0.0223779, 0.019147497, 0.03352574, -0.010437148, 0.006114277, 0.0030365814, 0.013133068, 0.0026107552, -0.026759507, -0.021872783, 0.0018736353, -0.013990594, 0.046212424, -0.0053419163, -0.007553276, -0.02330591, -0.012416505, 0.024269158, -0.0018971292, 0.024010725, -0.020380924, 0.010196336, 0.043534122, -0.02502096, -0.041795578, -0.002798706, 0.0032597731, -0.019805323, -0.01683335, 0.0070011704, -0.00923896, 0.0142137855, 0.0329149, 0.0053507267, 0.024809517, 0.00935643, -0.017244494, -0.014989083, 0.009650103, -0.00864574, 0.016363474, -0.00025200835, 0.023940243, -0.0021261943, -0.016657148, 0.04741061, -0.013461982, -0.028521545, -0.00431406, -0.020392671, 0.01978183, 0.037519693, 0.0045871763, -0.018090272, 0.008287459, 0.00074225914, -0.025279393, -0.010959886, 0.029414313, -0.026783, 0.025490839, 0.0036151176, 0.0003171671, 0.0033126343, -0.022695068, 0.009409291, 0.0012488455, -0.021767061, -0.009450405, 0.0047252025, -0.00020116617, 0.004422719, -0.015717393, 0.0023273604, 0.00017354253, -0.013144814, 0.007864569, 0.06315149, -0.029790215, -0.0051011043, -0.0042641354, 0.028216125, -0.0021717136, -0.014589687, 0.009327062, 0.05690213, 0.0031716712, -0.005632653, 0.009197846, 0.009885042, 0.001158541, 0.021097487, 0.022812538, 0.001375125, 0.004337554, -0.011558979, -0.020862548, -0.030565511, 0.020181226, 0.017679129, -0.027464323, -0.010190462, 0.033572726, 0.0482094, 0.03524079, -0.007353578, -0.015482454, 0.008240472, -0.00033221787, 0.036415484, -0.014260773, 0.0024874124, -0.006313975, 0.044285927, 0.0114297625, -0.03766066, -0.0035534464, -0.0062199994, -0.0047075823, 0.024786022, -0.01027269, -0.01954689, 0.0076120105, 0.009984891, 0.0019264965, 0.019100508, 0.0027487816, 0.019276712, 0.0038882338, 0.0050688004, -0.013332766, 0.01159422, 0.030424548, 0.0024389564, -0.007112766, 0.007429933, -0.05234432, -0.03657994, -0.015529442, -0.022530612, -0.011564853, -0.026689025, 0.016621906, 0.017726118, 0.022002, 0.04186606, 0.01098338, 0.022048987, -0.0138261365, 0.015083058, 0.007841076, -0.0048661656, 0.02361133, 0.0064608115, 0.0049131536, 0.006313975, 0.02008725, 0.051827457, -0.024316145, 0.0051627755, 0.010901151, -0.011259433, -0.011159584, -0.007864569, -0.0011688195, -0.053566, 0.02218995, -0.008710349, 0.011347534, -0.028498052, 0.012369517, 0.020486645, 0.01369692, 0.0099085355, 0.035710666, -0.001767913, -0.005938073, 0.019370688, 0.014401736, 0.05168649, 0.01118895, 0.012921623, 0.017091783, 0.0023640697, 0.0037795748, 0.0005671565, -0.0083931815, 0.00200432, -0.014871613, -0.0009169947, -0.005588602, -0.028075162, 0.004246515, -0.049384095, 0.024269158, 0.015482454, 0.0077764676, -0.031364303, 0.0025520206, -0.015317997, -0.010378413, 0.028404078, 0.025984209, -0.009268328, -0.0045842393, 0.0076002637, 0.012839395, -0.01883033, 0.005018876, 0.038201015, -0.03164623, 0.0016533803, 0.0053947777, -0.012040603, -0.022789044, -0.028192632, -0.030260092, 0.013732161, -0.024645058, 0.02647758, 0.032844417, -0.037214275, -0.0017943436, 0.033760678, 0.019570386, 0.067991234, -0.006454938, -0.012181566, -0.006995297, -0.0015241642, 0.03049503, -0.032726947, 0.0067897257, 0.012909876, -0.03347875, 0.0018985976, -0.011623587, 0.02483301, 0.0005220042, -0.008528271, -0.008299206, -0.012592709, 0.008540018, 0.015752634, 0.005976251, 0.00012370986, -0.0150008295, -0.007893937, 0.019770084, -0.018971292, -0.030048648, -0.010149348, -0.0010550212, 0.04261786, 0.0019822945, -0.006619395, -0.00431406, -0.020181226, 0.0117704235, 0.02452759, 0.018078525, -0.015588176, -0.011159584, 0.054223828, -0.00095076713, 0.014859866, 0.004874976, -0.011059735, -0.011823285, 0.015153539, 0.024151688, 0.02751131, 0.0038294992, 0.053049136, -0.0009970206, 0.042218465, 0.041349195, 0.043722074, -0.003391926, 0.016845098, 0.025349874, 0.0022201699, 0.002967568, 0.0114767505, 0.008281586, -0.0029088336, -0.041137747, -0.0045871763, 0.01369692, -0.00012334276, 0.017491179, 0.031317316, 0.027722755, 0.02334115, 0.028169138, 0.022095975, 0.023881508, 0.03585163, -0.026266135, 0.023963736, 0.035123322, 0.026219148, -0.0059116427, 0.031787194, -0.020063756, -0.0068249665, 0.017056542, 0.00744168, 0.005594475, 0.033619713, -0.008404928, 0.013685173, -0.00432287, -0.049759995, -0.0037472707, -0.03432453, -0.017690876, -0.021391159, -0.009579621, -0.0056825774, -0.056479238, -0.0038941072, -0.006126024, -0.033995617, -0.007764721, 0.052438296, 0.046400372, -0.022706816, -0.03110587, 0.013003851, 0.010384286, 0.025490839, 0.0056678937, 0.043111235, 0.007148007, -0.022601094, -0.016504437, -0.012451746, 0.024151688, 0.04156064, -0.0059821242, -0.029625757, -0.0033948629, 0.00093902025, -0.024081206, 0.0015050754, 0.014260773, 0.009262455, -0.0039322847, 0.014155051, 0.011406269, 0.0025079695, 0.014072822, -0.048091933, -0.021919772, -0.00061891635, 0.03364321, 0.031505268, -0.00400864, -0.009473899, 0.012792407, 0.006249367, -0.010660339, -0.0033625588, 0.029931178, 0.0014698346, 0.019911047, 0.0060026813, -0.023117958, -0.0083931815, 0.030354068, 0.031693216, 0.024433615, -0.0049572047, 0.018219488, 0.027158903, 0.035687175, -0.007940925, 0.027229384, 0.014801132, -0.01308608, -0.012369517, 0.0013384159, -0.01813726, -0.016821604, -0.0059439465, 0.0072302353, -0.041772082, -0.030659487, 0.001483784, -0.04663531, 0.02123845, 0.010149348, 0.0003074392, -0.0126984315, 0.012592709, 0.01710353, -0.009021643, 0.0056032855, -0.038388968, 0.0015461897, -0.030565511, -0.0033302547, -0.02307097, -0.008575259, 0.033760678, -0.0045724926, -0.016480943, -0.027769743, 0.01698606, -0.02532638, 0.0064079505, 0.02617216, 0.030166116, 0.012827648, -0.0041525397, 0.009162606, -0.0012069971, -0.0068602073, 0.014718903, -0.0025769828, 0.0007040816, 0.0068132193, -0.0062963543, 0.026665531, -0.00033992677, 0.023270668, -0.006490179, -0.017091783, 0.0006860941, -0.030729968, -0.035593197, -0.0075356555, 0.03620404, -0.024457108, 0.02934383, -0.0026562745, -0.010108233, 0.0028163265, -0.02169658, 0.022436636, 0.03704982, -0.039657637, -0.007247856, 0.023117958, 0.0062611136, 0.030401055, -0.0016445701, -0.049947947, 0.0103020575, 0.01871286, 0.0038030685, -0.008851312, 0.0058910856, -0.031340808, 0.010630972, -0.016621906, -0.06827316, -0.0129451165, 0.011265306, 0.008816071, 0.0043933517, -0.019570386, -0.028310101, 0.0091273645, 0.012909876, 0.0036797258, -0.0012767444, -0.0066135214, -0.011717563]"
../../../gradio,../../../gradio/gradio/components,video.py,"""""""gr.Video() component.""""""

from __future__ import annotations

import tempfile
import warnings
from pathlib import Path
from typing import Any, Callable, Literal, Optional

from gradio_client import file
from gradio_client import utils as client_utils
from gradio_client.documentation import document

import gradio as gr
from gradio import processing_utils, utils, wasm_utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events

if not wasm_utils.IS_WASM:
    # TODO: Support ffmpeg on Wasm
    from ffmpy import FFmpeg


class VideoData(GradioModel):
    video: FileData
    subtitles: Optional[FileData] = None


@document()
class Video(Component):
    """"""
    Creates a video component that can be used to upload/record videos (as an input) or display videos (as an output).
    For the video to be playable in the browser it must have a compatible container and codec combination. Allowed
    combinations are .mp4 with h264 codec, .ogg with theora codec, and .webm with vp9 codec. If the component detects
    that the output video would not be playable in the browser it will attempt to convert it to a playable mp4 video.
    If the conversion fails, the original video is returned.

    Demos: video_identity_2
    """"""

    data_model = VideoData

    EVENTS = [
        Events.change,
        Events.clear,
        Events.start_recording,
        Events.stop_recording,
        Events.stop,
        Events.play,
        Events.pause,
        Events.end,
        Events.upload,
    ]

    def __init__(
        self,
        value: str
        | Path
        | tuple[str | Path, str | Path | None]
        | Callable
        | None = None,
        *,
        format: str | None = None,
        sources: list[Literal[""upload"", ""webcam""]] | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        mirror_webcam: bool = True,
        include_audio: bool | None = None,
        autoplay: bool = False,
        loop: bool = False,
        show_share_button: bool | None = None,
        show_download_button: bool | None = None,
        min_length: int | None = None,
        max_length: int | None = None,
    ):
        """"""
        Parameters:
            value: A path or URL for the default value that Video component is going to take. Can also be a tuple consisting of (video filepath, subtitle filepath). If a subtitle file is provided, it should be of type .srt or .vtt. Or can be callable, in which case the function will be called whenever the app loads to set the initial value of the component.
            format: Format of video format to be returned by component, such as 'avi' or 'mp4'. Use 'mp4' to ensure browser playability. If set to None, video will keep uploaded format.
            sources: A list of sources permitted for video. ""upload"" creates a box where user can drop an video file, ""webcam"" allows user to record a video from their webcam. If None, defaults to [""upload, ""webcam""].
            height: The height of the displayed video, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the displayed video, specified in pixels if a number is passed, or in CSS units if a string is passed.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to upload a video; if False, can only be used to display videos. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            mirror_webcam: If True webcam will be mirrored. Default is True.
            include_audio: Whether the component should record/retain the audio track for a video. By default, audio is excluded for webcam videos and included for uploaded videos.
            autoplay: Whether to automatically play the video when the component is used as an output. Note: browsers will not autoplay video files if the user has not interacted with the page yet.
            loop: Whether to replay video on loop when the component is used as an output.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            show_download_button: If True, will show a download icon in the corner of the component that allows user to download the output. If False, icon does not appear. By default, it will be True for output components and False for input components.
            min_length: The minimum length of video (in seconds) that the user can pass into the prediction function. If None, there is no minimum length.
            max_length: The maximum length of video (in seconds) that the user can pass into the prediction function. If None, there is no maximum length.
        """"""
        valid_sources: list[Literal[""upload"", ""webcam""]] = [""upload"", ""webcam""]
        if sources is None:
            self.sources = valid_sources
        elif isinstance(sources, str) and sources in valid_sources:
            self.sources = [sources]
        elif isinstance(sources, list):
            self.sources = sources
        else:
            raise ValueError(
                f""`sources` must be a list consisting of elements in {valid_sources}""
            )
        for source in self.sources:
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must a list consisting of elements in {valid_sources}""
                )
        self.format = format
        self.autoplay = autoplay
        self.loop = loop
        self.height = height
        self.width = width
        self.mirror_webcam = mirror_webcam
        self.include_audio = (
            include_audio if include_audio is not None else ""upload"" in self.sources
        )
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        self.show_download_button = show_download_button
        self.min_length = min_length
        self.max_length = max_length
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(self, payload: VideoData | None) -> str | None:
        """"""
        Parameters:
            payload: An instance of VideoData containing the video and subtitle files.
        Returns:
            Passes the uploaded video as a `str` filepath or URL whose extension can be modified by `format`.
        """"""
        if payload is None:
            return None
        if not payload.video.path:
            raise ValueError(""Payload path missing"")
        file_name = Path(payload.video.path)
        uploaded_format = file_name.suffix.replace(""."", """")
        needs_formatting = self.format is not None and uploaded_format != self.format
        flip = self.sources == [""webcam""] and self.mirror_webcam

        if self.min_length is not None or self.max_length is not None:
            # With this if-clause, avoid unnecessary execution of `processing_utils.get_video_length`.
            # This is necessary for the Wasm-mode, because it uses ffprobe, which is not available in the browser.
            duration = processing_utils.get_video_length(file_name)
            if self.min_length is not None and duration < self.min_length:
                raise gr.Error(
                    f""Video is too short, and must be at least {self.min_length} seconds""
                )
            if self.max_length is not None and duration > self.max_length:
                raise gr.Error(
                    f""Video is too long, and must be at most {self.max_length} seconds""
                )

        if needs_formatting or flip:
            format = f"".{self.format if needs_formatting else uploaded_format}""
            output_options = [""-vf"", ""hflip"", ""-c:a"", ""copy""] if flip else []
            output_options += [""-an""] if not self.include_audio else []
            flip_suffix = ""_flip"" if flip else """"
            output_file_name = str(
                file_name.with_name(f""{file_name.stem}{flip_suffix}{format}"")
            )
            output_filepath = Path(output_file_name)
            if output_filepath.exists():
                return str(output_filepath.resolve())
            if wasm_utils.IS_WASM:
                raise wasm_utils.WasmUnsupportedError(
                    ""Video formatting is not supported in the Wasm mode.""
                )
            ff = FFmpeg(
                inputs={str(file_name): None},
                outputs={output_file_name: output_options},
            )
            ff.run()
            return str(output_filepath.resolve())
        elif not self.include_audio:
            output_file_name = str(file_name.with_name(f""muted_{file_name.name}""))
            if Path(output_file_name).exists():
                return output_file_name
            if wasm_utils.IS_WASM:
                raise wasm_utils.WasmUnsupportedError(
                    ""include_audio=False is not supported in the Wasm mode.""
                )
            ff = FFmpeg(
                inputs={str(file_name): None},
                outputs={output_file_name: [""-an""]},
            )
            ff.run()
            return output_file_name
        else:
            return str(file_name)

    def postprocess(
        self, value: str | Path | tuple[str | Path, str | Path | None] | None
    ) -> VideoData | None:
        """"""
        Parameters:
            value: Expects a {str} or {pathlib.Path} filepath to a video which is displayed, or a {Tuple[str | pathlib.Path, str | pathlib.Path | None]} where the first element is a filepath to a video and the second element is an optional filepath to a subtitle file.
        Returns:
            VideoData object containing the video and subtitle files.
        """"""
        if value is None or value == [None, None] or value == (None, None):
            return None
        if isinstance(value, (str, Path)):
            processed_files = (self._format_video(value), None)

        elif isinstance(value, (tuple, list)):
            if len(value) != 2:
                raise ValueError(
                    f""Expected lists of length 2 or tuples of length 2. Received: {value}""
                )

            if not (
                isinstance(value[0], (str, Path)) and isinstance(value[1], (str, Path))
            ):
                raise TypeError(
                    f""If a tuple is provided, both elements must be strings or Path objects. Received: {value}""
                )
            video = value[0]
            subtitle = value[1]
            processed_files = (
                self._format_video(video),
                self._format_subtitle(subtitle),
            )

        else:
            raise Exception(f""Cannot process type as video: {type(value)}"")
        if not processed_files[0]:
            raise ValueError(""Video data missing"")
        return VideoData(video=processed_files[0], subtitles=processed_files[1])

    def _format_video(self, video: str | Path | None) -> FileData | None:
        """"""
        Processes a video to ensure that it is in the correct format.
        """"""
        if video is None:
            return None
        video = str(video)
        returned_format = video.split(""."")[-1].lower()
        if self.format is None or returned_format == self.format:
            conversion_needed = False
        else:
            conversion_needed = True

        is_url = client_utils.is_http_url_like(video)

        # For cases where the video is a URL and does not need to be converted to another format, we can just return the URL
        if is_url and not (conversion_needed):
            return FileData(path=video)

        # For cases where the video needs to be converted to another format
        if is_url:
            video = processing_utils.save_url_to_cache(
                video, cache_dir=self.GRADIO_CACHE
            )
        if (
            processing_utils.ffmpeg_installed()
            and not processing_utils.video_is_playable(video)
        ):
            warnings.warn(
                ""Video does not have browser-compatible container or codec. Converting to mp4""
            )
            video = processing_utils.convert_video_to_playable_mp4(video)
        # Recalculate the format in case convert_video_to_playable_mp4 already made it the selected format
        returned_format = utils.get_extension_from_file_path_or_url(video).lower()
        if self.format is not None and returned_format != self.format:
            if wasm_utils.IS_WASM:
                raise wasm_utils.WasmUnsupportedError(
                    ""Returning a video in a different format is not supported in the Wasm mode.""
                )
            output_file_name = video[0 : video.rindex(""."") + 1] + self.format
            ff = FFmpeg(
                inputs={video: None},
                outputs={output_file_name: None},
                global_options=""-y"",
            )
            ff.run()
            video = output_file_name

        return FileData(path=video, orig_name=Path(video).name)

    def _format_subtitle(self, subtitle: str | Path | None) -> FileData | None:
        """"""
        Convert subtitle format to VTT and process the video to ensure it meets the HTML5 requirements.
        """"""

        def srt_to_vtt(srt_file_path, vtt_file_path):
            """"""Convert an SRT subtitle file to a VTT subtitle file""""""
            with open(srt_file_path, encoding=""utf-8"") as srt_file, open(
                vtt_file_path, ""w"", encoding=""utf-8""
            ) as vtt_file:
                vtt_file.write(""WEBVTT\n\n"")
                for subtitle_block in srt_file.read().strip().split(""\n\n""):
                    subtitle_lines = subtitle_block.split(""\n"")
                    subtitle_timing = subtitle_lines[1].replace("","", ""."")
                    subtitle_text = ""\n"".join(subtitle_lines[2:])
                    vtt_file.write(f""{subtitle_timing} --> {subtitle_timing}\n"")
                    vtt_file.write(f""{subtitle_text}\n\n"")

        if subtitle is None:
            return None

        valid_extensions = ("".srt"", "".vtt"")

        if Path(subtitle).suffix not in valid_extensions:
            raise ValueError(
                f""Invalid value for parameter `subtitle`: {subtitle}. Please choose a file with one of these extensions: {valid_extensions}""
            )

        # HTML5 only support vtt format
        if Path(subtitle).suffix == "".srt"":
            temp_file = tempfile.NamedTemporaryFile(
                delete=False, suffix="".vtt"", dir=self.GRADIO_CACHE
            )

            srt_to_vtt(subtitle, temp_file.name)
            subtitle = temp_file.name

        return FileData(path=str(subtitle))

    def example_payload(self) -> Any:
        return {
            ""video"": file(
                ""https://github.com/gradio-app/gradio/raw/main/demo/video_component/files/world.mp4""
            ),
        }

    def example_value(self) -> Any:
        return ""https://github.com/gradio-app/gradio/raw/main/demo/video_component/files/world.mp4""
","The code defines a `Video` component in the Gradio library that allows users to upload/record videos as input or display videos as output. The component supports various features such as setting video format, specifying video sources (upload or webcam), adjusting video dimensions, handling subtitles, and more. It also includes methods for preprocessing and postprocessing video data, as well as converting video formats and subtitles to ensure compatibility with HTML5 requirements. Additionally, the component provides methods for generating example payloads and values for demonstration purposes.","[-0.071972184, 0.024729837, 0.0024505681, -0.0265352, 0.024693487, -0.043546807, 0.048369188, -0.014236922, 0.023166804, -0.019701477, 0.056656893, -0.008814775, -0.048151087, -0.016236149, -0.0146246515, -0.046139743, -0.022124782, -0.017605318, 0.009511475, 0.03872443, -0.0009859826, -0.03581646, -0.0048375246, 0.046842504, 0.01588477, -0.06891882, -0.02929777, 0.105946936, -0.011795442, -0.016151333, -0.03128488, -0.039184857, 0.0030700257, -0.014442903, -0.0010064292, -0.04521889, 0.039984547, 0.0114319455, -0.017896114, 0.0013706824, 0.005603895, -0.027674153, -0.017568968, 0.012231637, -0.012988919, 0.014249039, -0.02723796, 0.012110472, -0.009717457, 0.02716526, -0.05815934, -0.0044013294, -0.017120656, 0.027746852, -0.020270955, 0.02423306, -0.038530566, 0.016018052, -0.02130086, -0.040299576, 0.00443465, -0.040129945, 0.015933236, -0.0041468823, 0.0035895219, -0.028255748, -0.03865173, 0.019616662, 0.023978611, -0.006888247, 0.066010855, -0.028207282, 0.04895078, -0.04524312, -0.03739161, 0.015945353, -0.0025641606, -0.01194084, 0.029903594, -0.023942262, -0.001556974, 0.021349326, -0.067852564, -0.0069245966, -0.022282299, 0.03249653, -0.014515602, 0.029346235, 0.009802273, -0.013182784, -0.040566143, 0.010692838, -0.05084096, 0.074492425, -0.0078575695, 0.010711012, -0.022052083, -0.035622597, 0.047351398, 0.037173513, -0.0044073877, -0.033562787, -0.026874462, -0.059467927, 0.04008148, -0.025929373, 0.00014142261, 0.023251621, 0.0029140254, 0.004052979, -0.00020314119, -0.00030953946, -0.035283335, 0.029128138, -0.0036349588, -0.045049258, 0.019943807, -0.030460956, -0.03382935, -0.025687043, -0.043304477, 0.025056982, -0.019495497, -0.054378986, 0.052246474, -0.02796495, 0.014467136, -0.013412998, -0.036325354, -0.010395982, 0.011959014, -0.007336559, 0.033393156, -0.052004144, -0.031139482, 0.028473845, -0.053361196, -0.019144116, -0.024523856, 0.04793299, 0.03184224, -0.04800569, 0.027746852, -0.009965845, -0.017568968, -0.040057246, -0.038603265, 0.004637602, -0.024499623, -0.045533918, -0.005300982, 0.03017016, -0.06547773, -0.0069730626, -0.023578767, 0.008887474, 0.018913902, 3.7911486e-05, -0.012480025, -0.008257415, -0.016405782, 0.012661774, 0.02876464, -0.005513021, -0.01595747, 0.0021309946, 0.0039196974, 0.0177386, -0.054766715, 0.054766715, 0.0071245194, -0.0068943053, -0.069403484, 0.022149015, 0.0235303, -0.023699932, 0.014612535, -0.047327165, 0.008645144, -0.006433877, -0.018102095, 0.006427819, -0.018465592, 0.0015501585, -0.022294415, -0.009517534, -0.01417634, -0.047811825, -0.017920347, -0.0027504521, -0.011952956, 0.013909776, -0.0028049767, 0.01008701, 0.039572585, -0.011116916, 0.0050647096, -0.023930145, 0.0176659, -0.021022178, 0.044613063, 0.013364532, 0.006791315, -0.04277135, -0.050986357, -0.020997945, -0.008281648, 0.026874462, -0.0017023725, -0.004489174, 0.0119832475, 0.0027141026, 0.039257556, -0.0017629551, -0.046769805, 0.026898695, -0.016951025, 0.039330255, -0.016660228, -0.017581085, -0.07478322, 0.011316839, 0.02789225, -0.0323269, 0.01089276, -0.010032486, 0.019265283, 0.004646689, 0.016611762, -0.022342881, 0.05142255, 0.0029231128, -0.0062945373, -0.0036076966, 0.057577748, -0.05932253, 0.024354225, -0.019434914, 0.04475846, 0.041414298, -0.013025269, -0.0006149139, 0.012370977, 0.00082695315, 0.01508508, 0.04301368, -0.009317611, -0.050792493, 0.0323269, 0.06853109, -0.0096084075, -0.025081215, 0.017508386, -0.017447803, 0.009971904, -0.012013539, -0.025783975, 0.047206, -0.0144550195, 0.017362988, 0.0060976436, -0.03952412, -0.039742216, 0.043837603, -0.0033986866, 0.048563052, -0.010226351, 0.013570514, 0.032835796, 0.015315293, -0.005649332, -0.017253939, 0.016890442, 0.038385164, 0.013025269, 0.021458374, 0.05156795, 0.036083024, 0.028570777, 0.047908757, -0.0019916545, 0.004743621, -0.037682407, 0.06557466, -0.034944072, 0.019337982, 0.011438004, -0.014927564, 0.01944703, -0.02827998, 0.028401146, 0.004552786, 0.037100814, -0.06368448, 0.011056333, 0.036567688, 0.046527475, 0.01211653, 0.037440076, 0.011092683, -0.013316066, 0.010529264, 0.013182784, -0.017399337, -0.04863575, 0.031575676, -0.013437231, 0.0047981455, -0.008548211, -0.01029905, 0.041365832, 0.031963404, -0.007415316, -0.002586879, -0.069403484, 0.029055437, 0.04308638, -0.0014615564, -0.033926282, -0.0058219926, 0.008354347, 0.019362215, 0.012140763, -0.04546122, -0.03341739, -0.040590376, -0.030364024, -0.03286003, 0.0014282359, -0.03159991, 0.024560206, 0.0071063447, -0.015266827, 0.016878325, 0.025153916, -0.035864927, -0.045509685, 0.034944072, -0.041365832, -0.003983309, -0.03836093, -0.038990993, 0.014345971, 0.022997173, 0.015909003, 0.032641932, -0.028982738, 0.006785257, -0.0078575695, -0.039887615, -0.02004074, -0.03865173, -0.012686007, -0.016296733, 0.08593043, -0.0027565104, -0.023966495, -0.043207545, -0.06635012, -0.030630587, -0.04061461, 0.049411207, -0.03176954, 0.04587318, 0.018126328, 0.012698123, -0.008015084, -0.010262701, 0.01762955, -0.019580312, 0.009838622, 0.01749627, 0.0023612087, 0.007639472, -0.025468946, -0.0144550195, 0.026147472, 0.0021870336, -0.04870845, -0.008917766, -0.0078333365, 0.006176401, 0.018683689, -0.04672134, -0.011874199, -0.025275081, -0.008317998, 0.053603526, 0.013134318, 0.025735509, -0.052537274, -0.018720038, -0.027310658, -0.029879361, 0.029637031, -0.0026838114, 0.0323996, 0.008614852, 0.008820834, -0.005876517, 0.0021476548, -0.0037137163, -0.02447539, 0.021918802, -0.008221066, -0.025565878, 0.043134846, 0.043983, 0.025444712, -0.02922507, -0.010232409, 0.021809753, 0.041486997, -0.0016554209, 0.018005162, -0.02119181, -0.02063445, -0.040735774, 0.030727519, 0.06067958, 0.0050313887, -0.0027262191, -0.051374085, -0.031091016, 0.0014395951, 0.031333346, 0.004165057, -0.0059189247, 0.021846103, -0.040663075, -0.029976293, -0.0015213818, 0.028934272, -0.0026005101, 0.021312976, -0.033950515, 0.012389151, 0.002209752, 0.027286425, 0.04810262, -0.055396773, 0.042819817, 0.0037409784, 0.012213462, -0.032569233, 0.011971131, 0.004140824, 0.02063445, -0.03620419, -0.041632395, -0.014927564, 0.0037349202, -0.022803308, -0.00051343796, 0.02629287, -0.047327165, 0.0028307242, 0.010989692, -0.015666673, 0.0060885563, -0.025638577, 0.042504787, -0.03293273, 0.05418512, 0.023372786, 0.0040378333, 0.03484714, 0.018913902, -0.03475021, -0.0059401286, 0.0076334137, 0.060243387, 0.0222096, 0.024172477, -0.029661264, -0.013207017, 0.015387992, -0.034822907, -0.043595273, 0.00018335717, -0.031672608, -0.003519852, -0.016963141, -0.014030941, -0.005143467, 0.098095424, -0.019459147, -0.060388785, 0.042286687, -0.049968567, 0.010795828, -0.021288743, 0.00067398197, -0.010862469, -0.011783325, 0.03293273, -0.07793352, 0.009263087, 0.0068761306, 0.0001950004, 0.039499886, 0.008305881, -0.028449612, 0.035622597, 0.03484714, -0.025444712, 0.03453211, -0.011880257, -0.0026398888, 0.036519222, -0.0045285528, -0.048344955, 0.010038544, 0.012370977, -0.0047072717, -0.034580577, -0.029346235, 0.002886763, -0.012019597, 0.0023339465, -0.029103905, 0.03286003, 0.008778426, -0.0021779463, -0.014963914, 0.02408766, -0.011534936, -0.0384821, 0.021034295, -0.037827805, -0.020682916, -0.016466364, -0.020137671, 0.008305881, -0.052537274, -0.02021037, -0.007518307, 0.0076273554, -0.014491369, -0.019580312, 0.005425176, 0.0009413029, -0.0036107257, -0.0065126345, 0.010608022, 0.046091277, 0.002244587, -0.05617223, -0.012280103, 0.015715139, 0.026729064, -0.07187525, 0.011753034, -0.06402374, 0.0028216369, 0.028861573, 0.0014963914, -0.0002432772, -0.0499201, -0.0034683566, 0.0014373233, 0.010916993, 0.011419829, 0.00911163, -0.0014395951, 0.0002879569, -0.008705727, -0.033126593, -0.020052856, 0.040129945, -0.046163976, -0.011438004, 0.018768504, 0.027262192, -0.0051404377, 0.012746589, 0.0111048, -0.010589846, -0.005931041, -0.015315293, 0.027698386, -0.038070135, 0.00012040801, -0.05268267, -0.01029905, -0.0018674601, 0.0017826444, 0.0321815, 0.032448065, -0.002115849, 0.013776494, 0.023493951, -0.028885806, 0.020513285, 0.011068449, 0.02590514, 0.015557624, 0.0053645936, -0.046091277, -0.004786029, 0.012904104, -0.016902559, -0.005419118, 0.030291324, 0.039427187, -0.014067291, 0.019713594, -0.020658683, -0.045655083, -0.0009814389, -0.017787065, 0.047811825, -0.03249653, -0.06387834, -0.020864664, -0.0014585273, -0.027431823, 0.030145926, 0.041171968, -0.006864014, 0.009602349, -0.012274045, 0.013449348, -0.0060158568, 0.01818691, 0.036083024, -0.02111911, -0.024887351, -0.012249812, 0.0037833864, 0.030364024, -0.0051525543, 0.04032381, -0.0042953095, 0.019289516, -0.028255748, -0.018586757, -0.025929373, 0.012140763, -0.030073227, 0.0024157332, 0.04395877, 0.018053629, 0.008348289, 0.032205734, 0.0067670816, -0.021603772, 0.018901786, 0.043619506, -0.016042285, -0.027383357, 0.004870845, 0.030994082, -0.0048890198, -0.010232409, -0.016333083, -0.049290042, 0.003704629, 0.002458141, 0.018308077, -0.021688588, -0.03249653, -0.033223525, -0.00813625, -0.023336437, 0.014927564, 0.013400882, 0.007209335, -0.025614344, 0.033562787, -0.061939698, -0.0108564105, 0.012649657, 0.0021643152, 0.018065745, -0.041075036, 0.0035531723, -0.0068761306, 0.014988147, 0.050550163, -0.027068326, -0.005519079, -0.059952587, 0.0055069625, -0.011444062, -0.0384821, -0.0058916626, 0.008208949, 0.034410942, -0.02245193, -0.010571672, 0.0023278883, -0.008039317, 0.021603772, -0.020561751, 0.029006971, 0.006361178, -0.02922507, 0.03739161, -0.03399898, 0.028619243, 0.004419504, 0.004843583, -0.021143343, -0.011474353, -0.016708694, -0.022985056, 0.0015122944, 0.012122588, -0.014030941, 0.005670536, 0.005788672, -0.006018886, -0.011044216, -0.009160097, -0.0025899082, 0.0144307865, -0.00091252616, 0.008366464, -0.011825733, -0.008754193, 0.035065237, -0.090583175, -0.030460956, 0.008245299, -0.032545, -0.009693224, 0.0060461485, -0.033247758, 0.014091524, -0.011547052, 0.0028231514, 0.008027201, 0.035792228, -0.018489825, 0.046987902, -0.024863118, -0.03843363, 0.02031942, -0.037997436, -0.020816198, 0.031672608, 0.01382496, -0.015799955, 0.0065550427, -0.022185367, 0.031381812, -0.00010630362, -0.0032320842, 0.014394437, -0.00033017542, 0.0078818025, -0.039548352, 0.017435687, -0.01675716, -0.005243428, -0.018417126, -0.0035592306, -0.04340141, -0.014988147, -0.015182012, 0.0041499115, 0.021325093, -0.0014729156, -0.018671572, -0.043110613, 0.02210055, -0.0009420602, 0.017132772, 0.030994082, -0.008087783, 0.011159324, -0.006754965, -0.014539835, 0.05418512, -0.014697351, -0.03959682, -0.018526174, 0.008366464, 0.01564244, -0.006658033, -0.020125555, 0.046357844, 0.00073570054, 0.026971394, 0.014527719, -0.006839781, 0.015133546, -0.012304336, -0.047666427, 0.0028564718, -0.010105185, 0.010244526, -0.010323283, 0.027940717, 0.014648885, 0.013037385, -0.047666427, 0.00841493, 0.014067291, -0.022270182, -0.036325354, -0.020997945, 0.033853583, -0.0114319455, 0.004961719, -0.023942262, -0.04182626, -0.01909565, 0.028376913, -0.04095387, -0.009420602, -0.03649499, 0.02339702, -0.020307304, 0.019168349, 0.005537254, 0.02115546, -0.029443167, -0.014661001, -0.013061618, 0.001808392, -0.013400882, 0.018077862, -0.021833986, -0.000548273, -0.00062475854, 0.03802167, 0.028037649, 0.002265791, 0.038312465, 0.003616784, 0.0042195814, 0.018865436, 0.008366464, 0.02723796, -0.010547439, 0.040808473, -0.004231698, -0.03065482, 0.008978348, 0.020416353, -0.013655329, 0.015812071, 0.05156795, -0.004570961, 0.013437231, -0.025299314, -0.017253939, -0.002017402, -0.015618207, -0.004892049, -0.010371749, -0.03857903, 0.019507613, -0.026099004, -0.012292219, 0.0326177, -0.024378458, 0.03382935, -0.025638577, 0.0039651343, -0.028885806, 0.015630323, 0.006385411, -0.061600436, -0.016708694, -0.024342109, 0.05016243, 0.008736018, 0.0038621437, 0.0014698865, 0.016963141, -0.010383866, -0.008548211, -0.0043346887, 0.002433908, 0.000743652, -0.030291324, -0.0057856427, 0.0007728074, 0.0070760534, 0.017932463, -0.024693487, -0.015763605, -0.040590376, -0.0029306856, 0.014709467, -0.015969586, -0.0005005641, -0.014745817, 0.0011487985, -0.036155723, 0.008826892, -0.010056719, 0.024317876, -0.026656365, 0.03242383, -0.0005971177, -0.007918152, -0.019313749, 0.026099004, -0.033708185, -0.0049556606, -0.008590619, 0.0029897536, -0.053603526, 0.00317756, -0.013594747, -0.019653011, -0.0326904, 0.002140082, 0.02907967, 0.0023990727, 0.005955274, -0.005603895, 0.009038931, 0.0040802415, 0.021203928, 0.005719002, -0.00021828685, -0.006197605, 0.018283844, 0.00942666, -0.022294415, -0.006276362, -0.00635512, 0.03448364, 0.007875744, -0.017532619, 0.019301632, 0.051131755, 0.02241558, -0.037440076, 0.06499306, -0.020610217, -0.035840694, 0.016102867, -0.0021325091, -0.011952956, -0.00020882081, -0.041705094, -0.001613013, -0.010620139, 0.04245632, -0.022682143, 0.00893594, 0.01295257, -0.034192845, 0.017544735, -0.019955924, 0.04182626, 0.045412753, 0.009105572, -0.016805626, 0.021094877, -0.014273272, 0.0441284, 0.034968305, -0.017205471, -0.0645084, 0.015448575, -0.00436498, 0.00018411445, -0.023081988, -0.015933236, 0.034265544, -0.022851774, 0.00060241873, 0.035428733, 0.03121218, 0.020198254, 0.0044013294, 0.0045891358, -0.0018235378, 0.010916993, -0.009953729, -0.0014850321, 0.017641667, -0.011183557, 0.014345971, 0.012795055, 0.019471264, -0.0043740673, -0.05166488, -0.023191039, -0.0005062437, -0.015145662, 0.016841976, 0.04570355, -0.07100286, -0.0022248977, -0.01647848, 0.013425115, 0.012346744, 0.015375876, -0.0075788894, 0.006864014, 0.01787188, -0.015448575, -0.0020991887, -0.005261603, 0.033805117, -0.019253166, 0.0021325091, 0.0038621437, 0.03191494, 0.01878062, -0.03697965, -0.03058212, 0.014842749, -0.013570514, 0.031042548, -0.0032987252, 0.00041158337, -0.04381337, -0.03770664, 0.0120074805, 0.011389538, -0.011092683, -0.038312465, -0.0192774, 0.015497041, -0.011637927, -0.021943035, 0.0032805505, 0.04063884, 0.026486734, 0.025493179, -0.014394437, 0.005191933, 0.02021037, -0.036640387, -0.027940717, 0.0046981843, 0.045364287, 0.012383093, -0.023033522, 0.012637541, 0.0085058035, -0.0031200063, -0.02122816, 0.031163715, 0.051374085, -0.029006971, 0.0066883243, 0.009341844, -0.018380776, 0.013643213, 0.010123361, 0.0029337148, 0.022403464, 0.0145519525, 0.0161998, -0.021797637, 0.019313749, -0.017326638, -0.016139217, -0.0073123258, 0.029128138, -0.013110085, 0.029176604, 0.021567423, -0.052634206, -0.030267091, 0.016599646, 0.03729468, 0.018126328, 0.0018583727, -0.022342881, 0.01099575, -0.011286547, 0.007548598, 0.0041226493, -0.026898695, 0.0008140793, -0.010226351, -0.028037649, 0.0295401, -0.015436458, -0.031575676, -0.0018750329, -0.01996804, 0.0002898501, 0.0352591, 0.029152371, 0.010250584, 0.0056584193, 0.021967268, -0.014333854, -0.010711012, 0.05631763, -0.008293765, -0.040517677, -0.021434141, 0.011868141, 0.003295696, 0.02182187, 0.0004638359, -0.004134766, 0.0054554674, 0.021046411, 0.0046527474, 0.0069245966, -0.026438268, -0.0056826524, 0.006158226, -0.0016857121, 0.010444448, -0.023627233, 0.018841203, 0.013679562, 0.00345624, -0.0440557, -0.012237695, 0.017350871, 0.0096387, 0.005631157, -0.00030783558, -0.01833231, 0.036543455, -0.0055009043, -0.059031732, 0.008202891, 0.03673732, 0.003156356, 0.02147049, 0.0132676, -0.019907458, 0.020064972, 0.007318384, 0.012322511, -0.001085944, -0.013473581, 0.0019144117, 0.009414543, 0.016114984, -0.015242594, 0.0034895604, -0.0072699175, 0.018138444, -0.031624142, 0.015618207, 0.022258066, -0.023215272, -0.011916607, -0.010517147, 0.022839658, 0.010801886, 0.025226615, -0.012734473, 0.056996156, 0.012819288, 0.0050223013, 0.019035067, -0.010426274, 0.0061370223, -0.0045043197, 0.004552786, -0.01120779, -0.017314522, -0.02119181, -0.027116794, 0.013388765, -0.0018068774, 0.00869361, -0.032036103, -0.0051677, -0.00359558, 0.053894322, 0.03293273, -0.013570514, -0.030872917, 0.011728801, 0.010147594, 0.022839658, -0.03009746, 0.012431559, 0.029273536, 0.03920909, 0.013364532, -0.058062408, 0.028885806, -0.00046269997, -0.0038954644, 0.0120074805, -0.0072214515, 0.007360792, -0.0036410172, 0.026559433, 0.014055175, 0.025226615, -0.010480798, 0.0060491776, 0.007796987, 0.0007152539, -0.03317506, 0.0076758214, 0.03424131, 0.02970973, 0.016611762, 0.023603, -0.02796495, 0.02224595, 0.0007800016, -0.015872654, -0.010032486, -0.005879546, 0.022124782, 0.0014259641, 0.023954378, -0.0048799324, 0.026365569, -0.009626583, -0.004534611, -0.0027080444, -0.022439813, 0.023615116, -0.007984793, 0.030727519, -0.0002451704, -0.020270955, -0.009038931, 0.040905405, -0.008633028, 0.0045861066, 0.031018315, -0.030145926, -0.016987374, -0.01354628, 0.008439163, -0.05093789, 0.053118866, 0.024281526, 0.01323125, -0.005606924, 0.011553111, 0.010589846, 0.031502977, 0.021022178, 0.043983, 0.00058651576, 0.009481184, 0.015000263, 0.011813616, 0.014612535, 0.0015766635, -0.00052063214, 0.00024914613, -0.0062642456, 0.030073227, -0.014188456, -0.0013774979, -0.0025217526, -0.012225579, -0.018962368, 0.010177885, -0.0059189247, 0.009329728, -0.038942527, 0.0038167068, -0.004767854, -0.013291833, -0.043789137, 0.017956696, -0.020804081, -0.028473845, 0.04960507, 0.0444919, 0.008208949, -0.0016811684, 0.016417898, 0.004510378, 0.012564841, -0.012237695, 0.044540364, -0.032738864, -0.008657261, -0.009814389, -0.0042498726, -0.002779229, -0.023821097, 0.0077666957, 0.0030594238, -0.033247758, -0.014757933, -0.016890442, -0.028619243, -0.017678017, 0.042650186, 0.024499623, 0.04967777, -0.0011980218, -0.007112403, 0.01815056, 0.0055948077, 0.01592112, -0.043037914, -0.0064399354, -0.014224806, 0.01413999, 0.009305495, -0.025638577, 0.027286425, 0.006815548, -0.020755615, -0.0030048992, -0.00030556374, -0.021203928, 0.004183232, 0.008002968, -0.017290289, -0.0084815705, -0.030073227, 0.0033017544, 0.0034986478, -0.017859764, -0.023481835, 0.0071548107, -0.017593201, 0.0265352, -0.0028458699, -0.029661264, -0.025687043, 0.033708185, 0.01323125, -0.009099513, 0.0020234603, 0.002859501, 0.036688853, 0.004667893, 0.009341844, 0.0048405537, -0.001463071, 0.00021582568, -0.024838885, 0.0058431965, 0.02443904, 0.012552724, 0.0037197745, 0.0041044746, 0.025226615, -0.018986601, 0.05767468, -0.0029200837, 0.010511089, -0.003931814, -0.0028913068, 0.018344427, 0.014661001, 0.024838885, 0.010838236, -0.044928093, 0.00597042, 0.0012987405, -0.021106994, 0.008742076, 0.026753297, -0.016078634, 0.020755615, 0.021325093, 0.0264625, 0.018550407, 0.06256976, -0.014285388, 0.03145451, 0.018211143, 0.037488542, 0.0029064526, 0.019289516, -0.04182626, 0.026947161, 0.01948338, 0.004867816, -0.02035577, -0.012649657, -0.011831791, 0.0072275097, -0.009135864, -0.015363759, -0.0029215983, -0.013400882, 0.013497814, -0.029152371, -0.021373559, -0.027795319, 0.0061127893, -0.021385675, -0.006252129, -0.023178922, -0.013994591, 0.037900504, 0.023590883, -0.017484153, -0.05118022, 0.016405782, -0.01225587, 0.024984283, 0.0144550195, -0.004052979, -0.03317506, -0.012243753, -0.0014009738, 0.0132797165, 0.029200837, 0.02443904, 0.00022642764, -0.006888247, -0.005443351, 0.010523206, -0.029006971, 0.028328447, -0.010365691, 0.012516375, 0.011219907, -0.0029912682, 0.029176604, -0.0052979523, 0.0029579478, -0.06605932, -0.019374331, -0.0045861066, 0.037609708, 0.05059863, -0.013485697, -0.010529264, -0.030218625, 0.014818516, -0.0068943053, -0.037488542, 0.041559696, 0.025202382, 0.005191933, -0.017144889, 0.008069608, -0.01592112, 0.03201187, 0.0013381193, 0.004137795, 0.011153266, 0.0056190407, 0.021967268, 0.029418934, -0.032278433, 0.012195287, 0.014879098, -0.019507613, -0.017375104, 0.008826892, -0.004913253, -0.0114319455, -0.0058704587, 0.012328569, -0.02811035, -0.042286687, -0.023081988, -0.012831405, 0.009614467, -0.043789137, -0.009305495, -0.020561751, -0.008778426, 0.0016917704, -0.0088693, -0.045970112, -0.008802659, -0.013934009, -0.00782122, 0.0026005101, 0.00806355, 0.008717843, 0.032908496, -0.02004074, -0.02423306, -0.019883225, 0.020646567, 0.026026305, 0.003153327, 0.036107257, 0.033732418, -0.01878062, -0.0071002864, -0.007566773, -0.025759742, 0.028086115, -0.006203663, -0.0031169772, -0.011965073, -0.016926792, 0.0069427714, -0.01382496, 0.0023203155, 0.021918802, -0.011722743, -0.0018159648, 0.013812844, -0.03191494, -0.0045164363, 0.010686779, 0.0046981843, -0.0037833864, 0.00027905882, 0.0071002864, -0.010347516, 0.0042286688, -0.0026156558, -0.019592429, 0.013158551, 0.028376913, -0.038869828, 0.0038045903, -0.007869686, 0.029273536, 0.0026656366, -0.012601191, 0.024887351, 0.013909776, -0.024766186, 0.015097196, 0.036931183, -0.04870845, 0.02622017, -0.027334891, -0.078612044, -0.0018129357, 0.012098355, 0.016745044, -0.00020257322, 0.019337982, -0.01655118, 0.020222489, -0.011322897, -0.015860537, 0.010668605, -0.008221066, -0.019168349]"
../../../gradio,../../../gradio/gradio/components,fallback.py,"from gradio.components.base import Component


class Fallback(Component):
    def preprocess(self, payload):
        """"""
        This docstring is used to generate the docs for this custom component.
        Parameters:
            payload: the data to be preprocessed, sent from the frontend
        Returns:
            the data after preprocessing, sent to the user's function in the backend
        """"""
        return payload

    def postprocess(self, value):
        """"""
        This docstring is used to generate the docs for this custom component.
        Parameters:
            payload: the data to be postprocessed, sent from the user's function in the backend
        Returns:
            the data after postprocessing, sent to the frontend
        """"""
        return value

    def example_payload(self):
        return {""foo"": ""bar""}

    def example_value(self):
        return {""foo"": ""bar""}

    def api_info(self):
        return {""type"": {}, ""description"": ""any valid json""}
","This code defines a custom component named `Fallback` that inherits from the `Component` class. It includes methods for preprocessing, postprocessing, providing example payload and value, and specifying API information. The `preprocess` method takes the data sent from the frontend, the `postprocess` method takes the data from the backend, and the `api_info` method returns information about the expected data type and description.","[-0.035326473, 0.001988063, 0.03535178, 0.01477841, 0.019181566, -0.034795057, -0.05815203, 0.029126627, 0.04635967, 0.0027788598, 0.0065161656, -0.060480136, -0.045954783, -0.028873572, -0.016410615, -0.0018362302, 0.034364864, -0.017992208, 0.02646955, 0.001774548, 0.011166051, -0.03646522, 0.029177237, 0.021269271, -0.0012439233, -0.024280624, -0.025609164, 0.0805727, -0.01579063, -0.019624414, 0.025773648, -0.038919855, -0.0025368761, 0.007199414, 0.01832118, 0.0101728095, -0.0049250824, 0.04271568, 0.00065122114, -0.0048491657, -0.03940066, 0.011659508, -0.001673326, 0.021079479, -0.053242765, 0.038590882, -0.018726068, 0.04501848, -0.048966136, 0.034364864, -0.016562449, -0.056684315, -0.037958246, 0.04203243, -0.028898878, 0.005187627, -0.039830852, 0.02085173, -0.016587753, 0.025735691, -0.0040299003, -0.025533246, -0.015664103, 0.028468685, -0.008970799, 0.0017713849, 0.005564046, 0.010248726, -0.019725636, 0.020295009, 0.05253421, 0.0005416958, -0.04185529, -0.015917158, -0.0047574337, -0.028974794, -0.012804582, 0.07368961, 0.028873572, -0.015752671, -0.03180901, 0.033175506, -0.021155396, -0.08912596, -0.0025795791, -0.0009924499, 0.01376619, 0.005573536, -0.052281156, -0.028898878, -0.00656045, 0.008236939, -0.04390504, 0.057139814, -0.002766207, 0.027228715, -0.009128958, -0.020788467, 0.02177538, 0.034263644, 0.06984317, -0.015221257, -0.02882296, -0.009755269, 0.047675557, -0.026165884, -0.01708121, 0.011090134, -0.036035027, -0.0009861236, -0.035832584, -0.01744814, -0.032568175, 0.035933807, -0.07783971, -0.01730896, -0.02195252, 0.016094295, -0.00015657776, -0.01523391, -0.0216362, 0.0026523324, 0.010096894, -0.018106082, 0.015170646, -0.044891953, 0.0021604567, -0.008578563, -0.046334364, -0.04390504, -0.022344753, -0.0068704425, 0.0026127927, -0.022458628, -0.01680285, 0.03871741, -0.044158094, -0.016701628, -0.051724438, 0.003909699, 0.022559851, -0.008205308, 0.07591649, -0.041121434, -0.013867413, 0.017346919, -0.0058708754, 0.0089518195, -0.033023674, 0.013804149, -0.00418806, 0.0232431, -0.05106649, -0.029303765, -0.015259215, 0.012829887, 0.03320081, -0.01877668, 0.007250025, -0.046739254, -0.0464862, 0.004782739, 0.026292412, -0.028595211, 0.0019754104, -0.0437279, -0.008730397, -0.030999234, -0.05906303, -0.0009663537, -0.011678487, -0.0043683616, -0.059417307, 0.008300203, -0.0048776343, 0.0061808676, 0.0036598076, -0.035604835, -0.0068071787, -0.018561583, 0.009590783, 0.030265374, -0.03917291, -0.014765757, -0.04198182, -0.013778843, 0.01450005, 0.042108346, 0.0016685813, 0.040159825, 0.00692738, 0.024103487, 0.024242666, -0.06513635, 0.021041522, -0.007250025, 0.020332968, -0.034187727, 0.047675557, 0.009072021, -0.016511837, 0.0023122898, 0.045701727, 0.036617056, 0.0085975425, 0.03724969, -0.027380548, 0.02398961, 0.0018362302, -0.03932474, 0.0139433285, 0.005851896, 0.0409696, 0.032644093, -0.059366696, -0.033959977, -0.027203409, 0.05739287, -0.008395099, 0.015069423, -0.030923318, 0.02135784, 0.04714414, -0.029480904, -0.0064465753, -0.026520161, 0.012058069, -0.0174861, -0.045777645, 0.0093060965, 0.011716445, 0.00295758, -0.015309826, 0.0056051677, 0.021294575, -0.012121333, 0.0070412545, -0.068173006, 0.036768887, 0.02467286, -0.036566444, -0.008920188, 0.020295009, -0.020598674, 0.03006293, 0.030493123, -0.029126627, -0.027380548, 0.0120390905, 0.052787267, 0.04000799, -0.0016938867, 0.03613625, -0.012791929, 0.0048112078, -0.046384975, 0.041728765, 0.04390504, 0.008508974, 0.0060606664, -0.07728299, -0.021762727, -0.018839942, 0.035149336, -0.035048112, 0.002249026, 0.02366064, 0.011551959, 0.007851031, -0.044816036, 0.0028152366, 0.0044759098, 0.04124796, -0.015879199, -0.024799388, -0.004229181, 0.050104883, 0.03135351, 0.040615324, 0.013551094, -0.0064718807, -0.038363133, -0.005393234, 0.03828722, -0.0052825226, 0.018852595, 0.01038158, -0.040918987, 1.3888369e-05, -0.03962841, -0.024343887, 0.022724336, 0.006724936, -0.047574334, 0.0105017815, 0.040817767, 0.00649086, 0.002011787, 0.036996637, 0.013981287, -0.014474744, -0.05445743, -0.022395365, -0.02922785, 0.04861186, -0.065946124, 0.002880082, 0.011311557, -0.0076675657, -0.061998468, 0.016372656, 0.0052129324, 0.007635934, -0.046840474, -0.03945127, 0.0035617487, 0.05106649, -0.01615756, 0.0064529018, -0.02619119, 0.0075789965, -0.014019245, 0.0125641795, -0.042386707, -0.056481868, -0.03277062, -0.045651115, -0.012481936, 0.021813339, 0.033352647, 0.018283222, -0.010160157, 0.008028169, 0.0037958245, 0.01711917, 0.017764458, -0.0524836, 0.018397097, -0.015917158, 0.019776246, -0.05283788, -0.059923418, 0.012456631, 0.0099766925, 0.025938135, 0.040210433, -0.046056006, 0.022547198, -0.008161023, 0.003618686, -0.03714847, -0.0038116404, 0.031758398, -0.05961975, 0.036566444, -0.048890222, -0.015588187, -0.07444877, -0.033251423, -0.02149702, -0.013184164, -0.014740452, -0.033175506, 0.04686578, -0.0075663435, 0.045043785, -0.017992208, -0.057797756, 0.035225254, -0.024609596, -0.02062398, 0.010343622, 0.0069526853, 0.012899477, -0.054862317, -0.0051212, 0.006573103, -0.016866114, -0.0290001, -0.020079913, 0.09261812, -0.00900243, -0.016764892, 0.0007140895, 0.006165052, 0.036667664, 0.01486698, -0.011292578, 0.0068388106, 0.016284088, -0.027228715, -0.015018812, -0.010723204, -0.029607432, 0.014829021, 0.030822096, -0.0005499992, -0.0042703026, 0.001774548, 0.0012304798, 0.038464356, -0.006057503, -0.016904073, 0.0072753304, 0.0005919114, -0.024647554, 0.0847228, -0.008534279, 0.029860487, -0.0055830255, 0.064984515, -0.017713849, 0.05602637, 0.0003965846, 0.022370059, 0.009103653, 0.061998468, -0.02844338, -0.034769755, -0.006585756, 0.0524836, -0.01634735, -0.04203243, -0.026140578, 0.008433057, -0.0067375884, 0.022774948, -0.022711683, 0.0076612392, -0.05344521, 0.012899477, 0.004513868, 0.0391223, 0.03940066, -0.0038622515, -0.071867615, 0.0037135817, 0.021901907, 0.024660207, 0.0065794294, -0.016068991, 0.0062156627, -0.003786335, -0.013753538, -0.033403255, -0.003618686, -0.030872706, -0.040590018, -0.015271868, -0.027962575, -0.008268571, 0.04921919, -0.013715579, -0.0075157327, 0.019346053, -0.01915626, -0.008382446, 0.044664204, 0.054103155, 0.026267106, 0.03466853, 0.018346485, -0.021876602, 0.019358706, -0.025254887, 0.0048902873, 0.030670263, 0.038236607, -0.0074081845, 0.007281657, 0.0014297606, 0.044436455, 0.027405854, -0.0024056039, -0.0023597376, 0.019447275, 0.008856924, 0.02596344, -0.012678054, 0.00075204775, -0.01891586, 0.02697566, -0.0025194786, -0.02099091, -0.013513136, 0.11964439, -0.0096350685, 0.0039444943, -0.005083242, -0.015044118, -0.002291729, -0.011115439, 0.022230878, -0.013323344, 0.018675458, -0.0071234973, -0.027962575, -0.0067186095, 0.029809875, -0.0037199082, 0.01592981, 0.0012083375, -0.0153224785, 0.027658908, -0.0028468685, 0.0075347116, 0.024710817, 0.030822096, -0.018270569, -0.027886657, 0.00936936, -0.014171079, 0.014171079, -0.026596077, 0.0047226385, -0.00020086239, -0.034364864, 0.0026222821, -0.011817668, -0.0035364432, 0.027228715, 0.04479073, 0.009109979, -0.025571205, -0.005949955, 0.00973629, -0.017460793, -0.058101423, -0.004112143, 0.006082809, 0.013234775, -0.0027630439, 0.0142976055, 0.012013785, -0.036288083, 0.02753238, 0.023584723, -0.030113542, 0.0065984083, -0.03783172, -0.0026475876, 0.012355409, -0.002443562, -0.017941598, -0.0055672093, 0.038616188, -0.0070602335, -0.013171512, -0.012576832, 0.016031032, 0.014360869, -0.027203409, 0.036946025, 0.013310691, -0.004846003, 0.028063796, 0.0006844346, -0.005734858, -0.0108181, -0.0026096294, 0.040564712, -0.0037452136, 0.030088237, 0.05002897, -0.024938567, 0.006984317, 0.0004717103, -0.00080344954, -0.027810741, -0.007787767, 0.0050610993, 0.026671994, -0.04782739, 0.030619651, 0.016284088, 0.021193353, 0.054659873, -0.042007126, 0.0071171713, 0.0050421203, 0.0018109246, 0.00016053175, -0.015866546, 0.02283821, -0.03563014, 0.022673726, 0.006101788, -0.010406885, 0.014955549, 0.031733092, -0.033403255, -0.0072247195, 0.009584457, 0.04074185, 0.019232178, 0.0023565744, 0.0015997819, 0.00039994548, -0.03254287, 0.009356707, 0.011279926, -0.039350048, 0.0055861883, -0.010185462, -0.029658042, 0.005089568, -0.014436786, -0.004244997, -0.0132600805, -0.002155712, 0.005725369, 0.042184263, -0.005424866, -0.03770519, -0.003599707, -0.048510637, -0.018435055, 0.04355076, -0.009926082, 0.021901907, 0.036946025, -0.01598042, 0.004649885, -0.022901475, 0.00446642, -0.00699697, 0.009786901, 0.003650318, 0.011406452, -0.022458628, 0.061391138, 0.047549028, 0.008274898, -0.002003879, -0.014348217, 0.020105217, 0.030037625, -0.017992208, -0.020358272, -0.07034928, -0.03355509, -0.00047605968, 0.032973062, 0.011191356, 0.043702595, 0.0073322677, -0.0013245846, 0.0501808, 0.041804682, -0.0011039523, -0.004036227, -0.019244831, 0.0061492356, 0.04441115, 0.020282356, -0.029607432, 0.025836913, 0.031201677, 0.031505343, 0.022370059, -0.03760397, 0.008123064, -0.013007025, 0.01840975, 0.036186863, 0.058860585, 0.05159791, 0.0031695135, 0.026950354, -0.0062251524, -0.050104883, -0.008882229, 0.020914994, 0.03631339, 0.009673026, -0.0382113, -0.00533946, -0.03185962, 0.001213873, 0.020864382, -0.057089202, -0.019320747, -0.038185995, -0.027329937, 0.037300304, -0.04980122, -0.027127493, 0.004836513, 0.02301535, 0.0038148037, -0.013171512, 0.00030465447, 0.009654047, -0.03742683, -0.008477341, 0.0075157327, -0.029582126, 0.013475177, 0.0023502482, 0.006294742, -0.0056020045, -0.012115006, -0.030012319, -0.0077624614, -0.015550228, -0.019712983, -0.008091433, 0.05906303, 0.016031032, -0.032137983, -0.018194653, -0.010356274, -0.008629175, -0.0054691504, -0.041045517, 0.019586455, 0.007635934, 0.022066394, -0.0122225555, -0.03985616, -0.021572936, 0.009704658, -0.053546432, -0.017359572, 0.0032264509, -0.018523624, 0.015626144, 0.0580002, -0.017106516, 0.029809875, -0.0065984083, 0.0073069623, -0.021534977, 0.0092934435, -0.0054849666, 0.0015246562, -0.008686112, -0.024204709, -0.002949672, 0.0012874171, -0.009015083, 0.001330911, -0.007167782, -0.012070722, 0.019953385, -0.036768887, -0.0010912996, 0.0058392435, -0.004207039, -0.018485665, 0.013589052, 0.00973629, -0.023951653, -0.009242833, 0.004292445, -0.03967902, -0.0052698697, -0.00692738, -0.03185962, -0.006209336, 0.014120467, 0.042158958, 0.0096350685, 0.0065984083, -0.034263644, -0.010362601, 0.029455598, -0.028190324, 0.027456464, 0.027355243, 0.055014152, -0.026165884, -0.025254887, -0.009767922, 0.042462625, -0.030138846, -0.032441646, -0.015157993, -0.0060543404, 0.017334266, 0.009375687, -0.013918024, 0.04041288, -0.007882662, 0.012519895, 0.023483502, 0.026621383, 0.042007126, -0.028240934, -0.06341558, -0.0046467218, 0.022977391, -0.006323211, -0.023053307, 0.029632738, 0.016638365, 0.03547831, -0.07480305, 0.004191223, 0.016600406, -0.016688975, -0.00031295783, -0.034795057, -0.0058930176, 0.0032992042, 0.012886824, -0.039830852, 0.0227876, 0.011033197, -0.00149856, 0.02877235, 0.0039792894, -0.00017367874, 0.006522492, -0.00346369, -0.041905902, -0.004713149, 0.011855626, -0.0067375884, -0.028569907, -0.039982684, -0.008053474, -0.016549796, 0.008806313, -0.01837179, 0.038742717, 0.017460793, 0.001622715, -0.020079913, 0.0017223554, -0.0025384577, 0.026798522, 0.045094397, 0.012045417, -0.017890986, 0.039476577, -0.05546965, 0.016005727, -0.0019833182, -0.007003296, 0.008648153, 0.019004429, 0.021674158, 0.0037989877, 0.04861186, 0.0056905737, -0.0059056706, 0.019902773, -0.025065094, 0.0017444977, -0.0061270935, 0.028316852, 0.012817235, -0.047397196, 0.025343455, 0.016764892, 0.02803849, 0.003517464, -0.005864549, 0.05855692, 0.008730397, 0.030417208, -0.009084674, 0.050484467, 0.0019042387, -0.03917291, 0.0054628244, 0.04119735, 0.02247128, -0.0012225718, 0.02619119, -0.007724503, 0.011748077, 0.0055893515, -0.047675557, -0.009147937, -0.013007025, 0.026950354, -0.024002263, 0.004596111, 0.011172377, -0.03102454, 0.011659508, -0.009559152, 0.023217794, -0.005276196, -0.018536277, 0.02287617, -0.022180269, -0.004918756, -0.0146265775, 0.009970366, -0.0021841808, 0.0011901491, 0.04567642, 0.0038274564, -0.009559152, 0.028797656, 0.008648153, 0.001065994, -0.0034700164, -0.023255752, -0.011450738, -0.043980952, 0.0022695868, -0.017599974, -0.005681084, 0.020826424, -0.025748344, -0.048789, -0.009407318, -0.02882296, -0.0023755536, 0.07146272, 0.0030793627, 0.00045075416, 0.040438183, -0.0030382413, 0.02674791, -0.0027456465, 0.021889254, -0.013146206, -0.0010256635, 0.012627443, 0.009337729, -0.012159292, -0.0022268838, 0.039248828, 0.035453003, -0.025368761, 0.04405687, 0.062453967, 0.03203676, -0.036617056, 0.010773815, -0.029430293, 0.0069020744, 0.0011585173, 0.00089834514, -0.011431758, -0.036490526, 0.036364, 0.02186395, -0.041905902, 0.033681616, 0.006174541, -0.02121866, 0.01989012, 0.004273466, -0.016726933, -0.024255319, 0.008217961, 0.046612725, 0.019966038, -0.016828155, 0.019599108, 0.04226018, -0.0266973, 0.040817767, -0.033959977, -0.023888389, 0.029025406, 0.009135284, -0.009824859, 0.008230613, -0.016031032, -0.00043414743, -0.033959977, -0.00033944953, 0.034466088, -0.006775547, 0.016410615, 0.048789, 0.01074851, 0.031328205, -0.011273599, -0.0037135817, 0.016334698, 0.008471015, 0.009065694, 0.07394266, 0.018093431, 0.010394233, 0.020105217, -0.019346053, -0.022774948, 0.022357406, 0.01104585, 0.028848266, 0.0098185325, 0.008540605, -0.035022806, 0.025520595, -0.016372656, 0.04013452, -0.0065477975, -0.014753105, -0.0047004963, 0.023281058, -0.016954683, -0.04709353, 0.04671395, 0.045499284, -0.034086503, 0.024040222, -0.01966237, 0.044537675, -0.0011253038, 0.011729098, -0.007452469, -0.005554557, -0.01804282, -0.013918024, -0.00072041585, 0.014664535, -0.01966237, 0.0048080445, -0.0015428446, 0.010122199, -0.017422834, -0.014171079, -0.026621383, -0.004887124, -0.03142943, -0.020586021, -0.016929377, 0.033302035, -0.016195519, 0.021927213, 0.009729964, -0.018169347, 0.022952085, -0.03563014, -0.0200293, -0.0038843937, 0.019257484, 0.01795425, 0.0055355774, 0.017144475, 0.011381147, -0.007231046, -0.0049567143, -0.0027108514, -0.007401858, 0.04451237, -0.020535411, 0.017764458, 0.0031030865, 0.016322047, 0.043980952, -0.012785602, 0.0015151666, -0.008920188, 0.009400993, 0.018789332, 0.005380581, 0.007983885, -0.008958146, -0.012880498, 0.03342856, -0.02725402, -0.0036123598, 0.014474744, 0.0028199814, 0.017017948, -0.025305497, 0.028089102, -0.006168215, 0.04957347, -0.013791496, 0.004017248, 0.017460793, -0.0028452869, -0.033858754, -0.048814304, 0.023647986, -0.042513236, -0.019181566, 0.03327673, -0.010349948, -0.019219525, -0.021345187, 0.01598042, -0.008363467, -0.0032517563, -0.009786901, 0.019738289, 0.018865248, -0.0009608181, -0.015044118, -0.041956514, 0.044891953, -0.006554124, -0.03342856, -0.012368062, 0.006085972, -0.011469716, 0.011260946, 0.016410615, 0.0039697997, 0.0111976825, -0.007907968, -0.04332301, 0.018498318, -0.019902773, 0.027760131, -0.018219957, 0.021028869, 0.00108181, -0.0024831018, 0.017827723, 0.07217128, 0.043651983, -0.002981304, -0.01689142, 0.0046751904, -0.020092566, 0.0271528, 0.009027736, -0.0013570073, 0.02121866, 0.020535411, -0.040994905, 0.006908401, 0.024989178, -0.0016859787, 0.0028104917, 0.01956115, -0.012690707, 0.0027155962, -0.029835181, 0.01629674, 0.012374388, 0.001708121, 0.008104086, -0.0024356542, 0.029708654, -0.008989777, -0.019055039, 0.0061492356, -0.014234343, -0.02154763, -0.043930344, 0.035427697, -0.010912996, -0.015664103, -0.03793294, 0.052129325, -0.017144475, 0.012045417, -0.0033656312, 0.025305497, -0.0072436985, 0.0017539873, 0.02674791, 0.0024562147, -0.014120467, 0.031404123, 0.043854427, 0.034364864, -0.008123064, 0.010969933, 0.00039777078, -0.011646855, -0.0046024374, -0.0045360103, -0.018523624, 0.010293011, 0.00176664, 0.025558552, -0.020472147, -0.035048112, -0.026722604, -0.024065528, 0.013158859, -0.023685945, 0.016334698, -0.003432058, -0.0123807145, -0.022964738, 0.028139712, 0.013323344, 0.017296307, 0.014917591, -0.0106725935, 0.028544601, -0.003735724, -0.028114408, -0.005288849, 0.008097759, -0.040918987, 0.007888989, -0.033909366, -0.027760131, -0.017005295, -0.00048001364, -0.0051275264, 0.013740885, 0.03894516, -0.00699697, 0.035528917, 0.03428895, -0.025381414, -0.02950621, 0.038768023, 0.0036534811, -0.0054723136, -0.0014677189, -0.03006293, -0.007281657, -0.024622248, -0.010691573, 0.019649718, -0.0021999967, 0.007907968, -0.020370925, 0.0034225686, -0.008452036, 0.005564046, -0.0030746178, -0.016537143, -0.004611927, 0.033757534, 0.0012194086, -0.0045739687, 0.01758732, -0.01711917, -0.029076016, -0.009375687, 0.019282788, 0.028089102, -0.01282356, 0.009204875, 0.0035364432, 0.005630473, -0.021269271, 0.0027409017, 0.007047581, 0.030366596, -0.025760995, 0.028316852, -0.016284088, -0.007560017, 0.00497253, -0.037350915, 0.026317718, 0.03714847, 0.010615656, 0.009236506, -0.018890554, -0.010906669, -0.017195085, -0.0031426265, -0.023306362, 0.0053109913, -0.004460094, -0.005038957, -0.0460307, -0.025773648, -0.007237372, 0.0014463674, -0.0047542704, 0.013715579, -0.020687245, -0.0023518295, 0.015537575, -0.011178703, 0.00743349, 0.016790198, 0.029809875, -0.03573136, -0.012671728, 0.028797656, 0.015740018, -0.031783704, -0.012589484, -0.013032331, -0.0106725935, 0.0076106284, 0.0020766323, -0.01334865, -0.0065351445, -0.016967336, -0.008319182, -0.0030983419, -0.030771485, -0.012867846, -0.036617056, -0.008142044, 0.037730496, 0.016435921, 0.010008324, 0.008091433, 0.0015428446, 0.004498052, -0.007958579, 0.011811341, -0.045372758, -0.013500483, 0.030948622, -0.03674358, -0.021699464, -0.023939, -0.02140845, 0.020864382, -0.025900176, -0.02697566, 0.00047487346, -0.026317718, -0.018207306, 0.00013186537, -0.009616089, 0.0025906502, -0.014613925, -0.0008121483, 0.004071022, -0.003922352, 0.013639663, -0.012937436, 0.008977125, 0.025710385, -0.0052350746, -0.0052477275, 0.02472347, 0.0382113, -0.005545067, -0.05253421, -0.02697566, -0.04360137, 0.039982684, -0.003817967, 0.024230013, 0.0149682015, -0.017460793, 0.0122352075, -0.021054173, -0.0070918654, 0.03692072, 0.008679786, 0.008306529, 0.010293011, -0.016840808, 0.021269271, -0.00446642, -0.024799388, 0.0047574337, -0.007838378, 0.0068514636, 0.022812905, 0.0075789965, 0.018283222, -0.004210202, -0.02932907, -0.012133986, -0.02641894, 0.015993074, 0.012741318, -0.0053552757, 0.024596943, 0.0056241467, -0.039375354, 0.063010685, 0.022015782, 0.019573802, 0.022711683, -0.0028769188, -0.015107382, 0.00062552025, 0.02826624, 0.034997504, -0.015524923, -0.0068704425, 0.02674791, 0.003919189, -0.01592981, 0.015524923, -0.0022474444, -0.012070722, 0.00699697, -0.055368427, 0.04775147, 0.017372224, -0.0045201946, -0.033757534, -0.009400993, -0.01477841, 0.001440041, -0.039375354, -0.010134852, -0.028139712, -0.014348217, -0.0113558415, 0.016828155, 0.0153224785, 0.016853461, -0.010963607, 0.0019437785, -0.033251423, 0.018561583, 0.019459927, 0.02601405, -0.0067186095, -0.042336095, -0.0052034426, 0.036338694, 0.0096350685, 0.022306796, 0.018839942, -0.025368761, -0.014019245, -0.034213033, -0.013892718, 0.0071424767, 0.027431158, -0.015259215, 0.009103653, 0.033985283, -0.014360869, 0.019852163, -0.05030733, 0.0014613925, -0.008749376, -0.009900776, -0.017182432, 0.012798255, 0.028342158, 0.011779709, -0.023888389, 0.021370493, 0.007692871, 0.060176473, 0.0043050977, 0.02081377, 0.010299337, -0.01160257, -0.020421537, 0.046967003, 0.010128525, 0.005798122, 0.012013785, 0.016132254, -0.014829021, 0.014525356, -0.02563447, 0.03709786, 0.015993074, 0.016309394, 0.008028169, -0.023053307, -0.024192056, 0.0118682785, 0.007926947, 0.010261379, -0.022332102, -0.03208737, -0.023167182, -0.002766207, 0.011627876, -0.01450005, 0.032795925, 0.017321613, -0.00025582276, -0.011836646, -0.01652449, 0.008818965, -0.00026392844, 0.00835714, 0.013551094, 0.008021843, 0.005374255, 0.024065528, 0.0034573635, -0.024267972, 0.025141012, -0.011729098, 0.0074904272, -0.011102787, -0.023964306, 0.0139559815, -0.0055165985, -0.0024419804, 0.032062065, 0.0075157327, -0.016309394, -0.02039623, 0.008344487, -0.0101475045, -0.04064063, 0.013146206, 0.0010683665, 0.004241834, 0.012943761, 0.0129058035, -0.015524923, -0.0030382413, 0.0055672093, -0.026874438, -0.002509989, -0.003330836, 0.005323644, -0.006940033, -0.006573103, -0.019181566, -0.013513136, 0.004963041, 0.002155712, -0.01694203, -0.0061112777, -0.002981304, -0.014449439, 0.031404123, -0.0017603136, -0.0059910766, -0.0034194053, -0.041323878, 0.023964306, 0.01031199, -0.0068198317, -0.0009537009, -0.0018267406, -0.03474445, -0.0033877734, 0.027886657, -0.038742717, 0.013310691, 0.011589917, -0.0013522625, 0.01919422, -0.011501349, 0.0013459361, -0.012089701, -0.021800686, -0.006592082, 0.0024388172, -0.044891953, 0.00074848917]"
../../../gradio,../../../gradio/gradio/components,image.py,"""""""gr.Image() component.""""""

from __future__ import annotations

import warnings
from pathlib import Path
from typing import Any, Literal, cast

import numpy as np
import PIL.Image
from gradio_client import file
from gradio_client.documentation import document
from PIL import ImageOps

from gradio import image_utils, utils
from gradio.components.base import Component, StreamingInput
from gradio.data_classes import FileData
from gradio.events import Events

PIL.Image.init()  # fixes https://github.com/gradio-app/gradio/issues/2843


@document()
class Image(StreamingInput, Component):
    """"""
    Creates an image component that can be used to upload images (as an input) or display images (as an output).

    Demos: sepia_filter, fake_diffusion
    Guides: image-classification-in-pytorch, image-classification-in-tensorflow, image-classification-with-vision-transformers, create-your-own-friends-with-a-gan
    """"""

    EVENTS = [
        Events.clear,
        Events.change,
        Events.stream,
        Events.select,
        Events.upload,
    ]

    data_model = FileData

    def __init__(
        self,
        value: str | PIL.Image.Image | np.ndarray | None = None,
        *,
        format: str = ""png"",
        height: int | str | None = None,
        width: int | str | None = None,
        image_mode: Literal[
            ""1"", ""L"", ""P"", ""RGB"", ""RGBA"", ""CMYK"", ""YCbCr"", ""LAB"", ""HSV"", ""I"", ""F""
        ] = ""RGB"",
        sources: list[Literal[""upload"", ""webcam"", ""clipboard""]] | None = None,
        type: Literal[""numpy"", ""pil"", ""filepath""] = ""numpy"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        show_download_button: bool = True,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        streaming: bool = False,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        mirror_webcam: bool = True,
        show_share_button: bool | None = None,
    ):
        """"""
        Parameters:
            value: A PIL Image, numpy array, path or URL for the default value that Image component is going to take. If callable, the function will be called whenever the app loads to set the initial value of the component.
            format: Format to save image if it does not already have a valid format (e.g. if the image is being returned to the frontend as a numpy array or PIL Image).  The format should be supported by the PIL library. This parameter has no effect on SVG files.
            height: The height of the displayed image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the displayed image, specified in pixels if a number is passed, or in CSS units if a string is passed.
            image_mode: ""RGB"" if color, or ""L"" if black and white. See https://pillow.readthedocs.io/en/stable/handbook/concepts.html for other supported image modes and their meaning.
            sources: List of sources for the image. ""upload"" creates a box where user can drop an image file, ""webcam"" allows user to take snapshot from their webcam, ""clipboard"" allows users to paste an image from the clipboard. If None, defaults to [""upload"", ""webcam"", ""clipboard""] if streaming is False, otherwise defaults to [""webcam""].
            type: The format the image is converted before being passed into the prediction function. ""numpy"" converts the image to a numpy array with shape (height, width, 3) and values from 0 to 255, ""pil"" converts the image to a PIL image object, ""filepath"" passes a str path to a temporary file containing the image. If the image is SVG, the `type` is ignored and the filepath of the SVG is returned.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            show_download_button: If True, will display button to download image.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to upload and edit an image; if False, can only be used to display images. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            streaming: If True when used in a `live` interface, will automatically stream webcam feed. Only valid is source is 'webcam'.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            mirror_webcam: If True webcam will be mirrored. Default is True.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
        """"""
        self.format = format
        self.mirror_webcam = mirror_webcam
        valid_types = [""numpy"", ""pil"", ""filepath""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.height = height
        self.width = width
        self.image_mode = image_mode
        valid_sources = [""upload"", ""webcam"", ""clipboard""]
        if sources is None:
            self.sources = (
                [""webcam""] if streaming else [""upload"", ""webcam"", ""clipboard""]
            )
        elif isinstance(sources, str):
            self.sources = [sources]  # type: ignore
        else:
            self.sources = sources
        for source in self.sources:  # type: ignore
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must a list consisting of elements in {valid_sources}""
                )
        self.streaming = streaming
        self.show_download_button = show_download_button
        if streaming and self.sources != [""webcam""]:
            raise ValueError(
                ""Image streaming only available if sources is ['webcam']. Streaming not supported with multiple sources.""
            )
        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: FileData | None
    ) -> np.ndarray | PIL.Image.Image | str | None:
        """"""
        Parameters:
            payload: image data in the form of a FileData object
        Returns:
            Passes the uploaded image as a `numpy.array`, `PIL.Image` or `str` filepath depending on `type`. For SVGs, the `type` parameter is ignored and the filepath of the SVG is returned.
        """"""
        if payload is None:
            return payload
        file_path = Path(payload.path)
        if payload.orig_name:
            p = Path(payload.orig_name)
            name = p.stem
            suffix = p.suffix.replace(""."", """")
            if suffix in [""jpg"", ""jpeg""]:
                suffix = ""jpeg""
        else:
            name = ""image""
            suffix = ""png""

        if suffix.lower() == ""svg"":
            return str(file_path)

        im = PIL.Image.open(file_path)
        exif = im.getexif()
        # 274 is the code for image rotation and 1 means ""correct orientation""
        if exif.get(274, 1) != 1 and hasattr(ImageOps, ""exif_transpose""):
            try:
                im = ImageOps.exif_transpose(im)
            except Exception:
                warnings.warn(
                    f""Failed to transpose image {file_path} based on EXIF data.""
                )
        with warnings.catch_warnings():
            warnings.simplefilter(""ignore"")
            im = im.convert(self.image_mode)
        return image_utils.format_image(
            im,
            cast(Literal[""numpy"", ""pil"", ""filepath""], self.type),
            self.GRADIO_CACHE,
            name=name,
            format=suffix,
        )

    def postprocess(
        self, value: np.ndarray | PIL.Image.Image | str | Path | None
    ) -> FileData | None:
        """"""
        Parameters:
            value: Expects a `numpy.array`, `PIL.Image`, or `str` or `pathlib.Path` filepath to an image which is displayed.
        Returns:
            Returns the image as a `FileData` object.
        """"""
        if value is None:
            return None
        if isinstance(value, str) and value.lower().endswith("".svg""):
            return FileData(path=value, orig_name=Path(value).name)
        saved = image_utils.save_image(value, self.GRADIO_CACHE, self.format)
        orig_name = Path(saved).name if Path(saved).exists() else None
        return FileData(path=saved, orig_name=orig_name)

    def check_streamable(self):
        if self.streaming and self.sources != [""webcam""]:
            raise ValueError(
                ""Image streaming only available if sources is ['webcam']. Streaming not supported with multiple sources.""
            )

    def example_payload(self) -> Any:
        return file(
            ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
        )

    def example_value(self) -> Any:
        return ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
","The code defines a `Image` component that can be used to upload and display images. It allows users to upload images from sources like webcam, clipboard, or file upload. The component can handle different image formats and modes. It also provides methods for preprocessing and postprocessing image data, as well as generating example payloads and values. The component supports streaming webcam feed and has various customization options such as setting image dimensions, labels, and download buttons.","[-0.03577741, 0.027079232, -0.0096946, 0.01293004, 0.0070628733, -0.06461503, 0.03139315, 0.002011893, -0.020713855, 0.030642906, 0.031674497, -0.0060957577, -0.03169794, -0.050547898, -0.026117977, -0.03474582, 0.0077779526, 0.04506172, 0.00390656, 0.043068875, 0.023878958, -0.050313447, -0.00015367611, 0.028814178, 0.0038274326, -0.030291228, -0.047711026, 0.023796901, -0.0059111267, -0.001483643, -0.04853161, -0.030455343, 0.0069925375, -0.005046584, -0.0214641, -0.005503766, -0.0010880048, 0.050594788, -0.03866117, -0.008299609, -0.037723362, 0.0010674903, -0.013129325, -0.0012279436, -0.07732234, 0.0022097123, -0.022694975, -0.0052458686, -0.03788748, 0.05575274, -0.03920041, -0.017619085, 0.0037072757, -0.015110446, -0.022730144, 0.031627607, -0.06208295, 0.066818886, -0.037910923, -0.040747795, 0.06245807, -0.019975329, -0.033174988, 0.008692316, -0.01889685, -0.0041263592, 0.009413256, -0.0109547805, -0.006523633, -0.0070335665, 0.070992135, -0.01935403, -0.026516546, -0.017572194, -0.0112185385, -0.013891295, -0.028720398, 0.023656229, 0.013879572, -0.058659945, -0.0063536554, 0.02065524, -0.0348396, -0.0025511333, -0.019365754, 0.057815917, -0.04876606, -0.0011480832, -0.013012098, -0.0028310106, -0.06592797, 0.04574163, -0.0006158034, 0.06728779, -0.03219029, 0.04126359, -0.05612786, -0.047429685, 0.021311708, 0.0451555, 0.016036533, 0.013703733, -0.051298145, -0.034863047, 0.054017793, -0.06836627, 0.0047388654, 0.014407089, -0.012683866, -0.004700767, -0.0012953485, -0.02303493, -0.021358598, 0.098563716, 0.010585518, -0.037020005, 0.05617475, 0.014125747, -0.0044340775, -0.013375499, -0.031533822, 0.0127659235, 0.004480968, -0.049188077, 0.034534812, -0.04224829, -0.034534812, -0.002658102, -0.041498043, -0.014407089, 0.0071097636, 0.015063555, 0.01921336, -0.048906732, -0.028157713, 0.02284737, 0.013269996, -0.018533448, -0.069913656, 0.0072035445, 0.037207566, -0.02630554, 0.012496304, -0.005603408, -0.008850572, -0.003874323, -0.08210517, 0.009835271, -0.01940092, -0.033479776, 0.03106492, -0.0081999665, -0.02124137, -0.04506172, -0.051907722, 0.009378089, 0.026915114, -0.02267153, -0.029283082, -0.0177832, -0.04637465, 0.001899063, 0.025156723, 0.005374817, -0.025602182, -0.003604703, -0.009131914, -0.005234146, -0.021475824, -0.014348476, 0.002025081, 0.0068577277, -0.034230024, -0.024758155, 0.009120191, -0.013785791, 0.0019459535, -0.030009884, -0.014618096, -0.047734473, 0.018287273, 0.013141047, -0.032940537, -0.015684854, -0.022659807, -0.024805045, -0.009389811, -0.016939173, -0.02033873, 0.02621176, -0.022202626, 0.02482849, -0.010989948, -0.02100692, 0.011822253, 0.009911467, 0.0016572841, 0.012039121, 0.023468668, -0.05186083, 0.018709287, 0.035800856, 0.03179172, -0.0069163404, 0.008534061, -0.033362553, -0.018017653, 0.054486696, 0.00085941394, 0.0008015335, 0.00799482, -0.010714467, 0.050594788, -0.02792326, -0.055330724, -0.021393765, -0.002083694, 0.03896596, -0.023949295, 0.011693304, -0.047687583, 0.02132343, 0.036082197, -0.0441708, -0.050688572, 0.0024339072, -0.013410667, -0.0197526, -0.016845392, -0.050641682, 0.032119956, -0.014102302, -0.010749634, -0.028626617, 0.016716443, -0.051907722, -0.00040992507, -0.030666351, 0.009155359, -0.0011444199, -0.03160416, 0.024172025, -0.009090885, 0.009073301, -0.0005883285, 0.032073066, 0.00038245018, -0.025602182, -0.03223718, 0.043842565, 0.0012689726, -0.023726566, -0.0008337707, -0.023855513, 0.016001364, -0.013269996, 0.0123908, 0.023855513, 0.021171035, 0.00050114165, 0.0034581702, -0.006904618, -0.04651532, 0.019201636, 0.03636354, 0.027946705, 0.020936584, 0.017208792, 0.0211007, -0.0013231897, -0.0033907653, -0.0030596014, 0.005673744, 0.019998774, -0.015720021, 0.04440525, 0.012086012, 0.03003333, 0.008352361, 0.022788756, -0.01754875, -0.045366503, -0.04494449, 0.08369944, -0.023914127, -0.023023209, 0.005181394, -0.04480382, -0.00080080086, -0.036246315, 0.06016044, -0.003393696, -0.02419547, 0.015462124, -0.004902982, 0.050172776, 0.002697666, 0.009231556, 0.039622426, -0.0035255754, -0.036340095, -0.015356621, -0.016188925, -0.023128713, -0.016493713, 0.02119448, 0.0028632479, -0.011130619, 0.00027310022, -0.04560096, 0.029329972, -0.0059287106, -0.022730144, -0.011728472, -0.05167327, 0.031041475, 0.022237793, 0.040185113, -0.0058964733, 0.033010874, 0.011341626, 0.034370694, 0.024007907, -0.03828605, -0.049188077, -0.033901792, -0.059503973, -0.0033790427, -0.007520055, -0.025367731, 0.014711877, 0.042717196, -0.003622287, -0.025250504, 0.028626617, -0.038356382, -0.037864033, 0.020221503, -0.06592797, 0.011734334, -0.05701878, -0.03901285, 0.010943058, 0.03519128, 0.03870806, 0.02298804, -0.033081207, 0.0780257, -0.0021335152, -0.0338549, 0.02060835, -0.0020001705, 0.034230024, -0.006529494, 0.04196695, -0.012965208, -0.039927214, -0.02787637, -0.063817896, -0.02940031, -0.039669316, 0.027618472, 0.00817066, 0.004425286, -0.025180168, -0.023644507, -0.020995196, -0.051110584, -0.0098763, -0.0024837283, 0.006846005, 0.054252245, 0.008639565, 0.0072035445, -0.025062943, 0.00037109392, 0.002721111, 0.0051520877, -0.033479776, 0.018205214, 0.048906732, 0.0049821096, 0.029306527, -0.019940162, 0.02163994, 0.021440655, 0.026938561, 0.010948919, 0.006939786, 0.015684854, -0.0004857557, -0.001988448, -0.045718182, -0.040325783, -0.011740195, 0.05908196, 0.023820346, -0.016997786, 0.006523633, -0.01135921, 0.018486558, -0.0074379966, -0.0039182827, 0.01041554, -0.036808997, -0.05176705, 0.049141187, 0.0100638615, 0.014442257, 0.013352054, -0.010140059, -0.0057089115, 0.011107174, -0.011857421, -0.006271597, -0.016493713, 0.006529494, -0.081542484, 0.017126735, 0.09279619, -0.005867167, -0.009436702, -0.043725338, -0.02414858, 0.02414858, 0.026469655, 0.03596497, -0.032026175, -0.0031680358, -0.06630309, -0.022519136, 0.0106148245, 0.018697565, 0.043748785, 0.04597608, -0.037254456, 0.032260627, 0.0018170048, -0.0001306888, 0.058659945, -0.055377614, 0.04592919, 0.006037145, -0.01562624, -0.02635243, 0.0049586645, -0.03134626, 0.017032955, -0.030478789, 0.01216807, -0.037676472, -0.010362788, -0.002958494, 0.0052605215, 0.014899439, -0.046749774, -0.0022258307, -0.024078242, 0.0033468055, -0.025016053, -0.03505061, -0.00044948887, 0.015391788, 0.047195233, 0.030642906, 0.035542957, -0.0160717, 3.416042e-05, -0.016798502, -0.010058001, 0.008276164, 0.050688572, 0.04970387, 0.016657831, -0.001755461, -0.0073383544, 0.02738402, -0.00039966777, -0.06311454, 0.001259448, -0.0020001705, 0.006980815, -0.04848472, -0.06958542, -0.0197526, 0.092280395, -0.022272961, -0.051157475, 0.04611675, -0.036433876, -0.0515326, 0.014043688, -0.005366025, -0.009307753, 0.018521726, 0.018580338, -0.04471004, -0.022823924, -0.004923497, -0.022777034, 0.013434112, 0.008276164, -0.017443245, 0.012308742, 0.02308182, -0.021042086, 0.019951884, 0.0009634521, 0.0030859774, -0.0056268536, 0.00884471, -0.011154065, 0.06208295, -0.0036779693, -0.005518419, 0.00141404, -0.0036164254, 0.0264931, -0.0046040555, 0.013281719, -0.0220854, 0.02397274, 0.016224094, -0.034534812, -0.011253707, 0.0038772537, -0.06883517, -0.05697189, -0.0012140229, -0.0048648836, -0.006752224, -0.035988417, 0.009342921, -0.008885739, -0.046351206, 0.0042934064, -0.0070452895, -0.013035543, 0.021440655, -0.021628218, 0.0007861476, -0.023456944, 0.0013927928, 0.012871427, -0.04970387, 0.04142771, -0.026141424, -0.050876133, 0.006623275, 0.03636354, 0.008059295, -0.007977237, 0.04538995, -0.019271974, 0.03169794, 0.031674497, -0.0026463794, 0.023410054, -0.0024910548, -0.004425286, -0.00955979, 0.0018243314, -0.009026411, 0.04480382, 0.010972364, -0.0037160676, -0.0096946, -0.004753519, -0.012273574, 0.016763333, -0.05157949, 0.005492043, 0.005231215, 0.006541217, -0.017021231, 0.03587119, 0.018404499, -0.012566639, -0.020749021, -0.009530483, -0.018967185, -0.01207429, -0.042904757, -0.014453979, 0.008369944, 0.028251493, -0.007649004, -0.009331198, 0.02630554, 0.036246315, 0.026727553, -0.0005143296, -0.0072035445, 0.017044676, 0.023808623, 0.027173012, 0.015051832, 0.008217551, -0.05265797, -0.014067133, -0.00064584264, 0.0027093885, -0.04876606, 0.012672143, 0.013785791, 0.0031035612, -0.0030683936, -0.020409066, -0.03573052, -0.020045664, -0.018486558, 0.03523817, -0.006125064, -0.015790356, 0.018756177, 0.0023474528, -0.009401534, 0.05626853, 0.044780374, 0.00323251, -0.02954098, -0.008287886, -0.006910479, -0.025391176, 0.029118966, 0.055283833, -0.014512593, -0.02414858, -0.0031944115, 0.007402829, 0.03223718, 0.03788748, 0.008874017, -0.011511604, -0.00015981216, -0.029259637, 0.0039710347, -0.02316388, 0.016282707, -0.031815168, 0.013000376, 0.053267546, 0.009677015, -0.003062532, 0.030830467, 0.041404262, -0.04009133, -0.009155359, 0.019893272, -0.0026302608, -0.029165857, -0.0004740331, 0.022694975, -0.00974149, 0.015215949, -0.025062943, -0.017443245, 0.030947693, -0.01916647, 0.025227059, -0.01688056, -0.0009077697, -0.016704721, -0.00013343629, -0.018029377, 0.0037512355, -0.011247845, -0.02940031, -0.025320841, 0.02482849, -0.02060835, -0.0016484922, 0.01073205, 0.021757167, -0.0121094575, -0.04825027, -0.013750623, -0.027665362, 0.01629443, 0.053173766, 0.012062567, 0.00422014, -0.029376864, 0.006136787, -0.004305129, -0.03111181, -0.009706322, 0.014875993, -0.0013415063, -0.025602182, -0.0032794005, 0.022155736, -0.018885126, -0.030103665, -0.02105381, 0.027243348, -0.021780612, -0.03448792, 0.01754875, -0.0018609646, 0.004492691, -0.009899745, -0.014184359, -0.00978838, -0.01400852, -0.041451152, -0.0035841884, 0.003569535, 0.024125135, 0.0029291874, 0.010028694, -0.001472653, -0.018322442, 0.0020895554, 0.016435102, -0.039317638, 0.018392777, -0.00031248084, -0.018592061, 0.0054744594, 0.005984393, -0.004870745, -0.07788503, -0.029048631, 0.01908441, -0.012449413, -0.008176521, 0.00059968483, -0.021827502, 0.019717433, -0.017947318, -0.03263575, -0.014102302, -0.009454286, 0.009882161, 0.03774681, -0.019271974, 0.00790104, 0.009507038, -0.015380066, -0.031275928, 0.01791215, -0.003062532, -0.011904311, -0.011863283, -0.033034317, 0.019014075, -0.030408453, 0.021124145, -0.01059724, 0.018087989, 0.0067580855, -0.028274938, -0.010134198, -0.021042086, -0.0030859774, 0.0036750387, -0.02782948, -0.035355397, -0.0075845295, 0.0016734027, 0.054158464, 0.0018082127, -0.016692998, -0.022507414, -0.044827264, 0.0069515086, 0.0058525135, 0.028181158, -0.0037922647, 0.0009531948, 0.009495315, 0.0072738803, -0.010104891, 0.034089353, 0.0022258307, -0.013504448, -0.012097735, -0.0058085537, -0.0022199694, -0.015743466, 0.017021231, 0.026657218, -0.030220892, 0.036574546, 0.009934913, -0.024031352, 0.011933618, 0.0014565345, -0.036386985, -0.0111657875, -0.0123204645, 0.016892282, -0.016411657, 0.012144625, -0.006834282, 0.021569604, -0.04520239, -0.0045776796, 0.005225354, -0.006582246, -0.0069163404, -0.047429685, 0.012144625, -0.0067991144, 0.024969162, -0.020198058, -0.030619461, 0.0064239907, 0.0115584945, -0.023128713, 0.024711264, -0.014840825, 0.024969162, -0.028298384, -0.035167832, 0.026024196, -0.004425286, -0.0139733525, -0.00884471, 0.02468782, 0.009671154, -0.029072076, 0.013609951, 0.0042465157, 0.032963984, -0.0058700973, -0.017220516, 0.0074379966, 0.004346158, 0.035707075, 0.016481992, 0.032940537, 0.030525679, -0.005873028, 0.0067405016, -0.011159926, -0.026680663, 0.008973659, -0.022460522, -0.015204227, -0.004120498, -0.016997786, 0.030783577, 0.060770016, -0.016552327, 0.003291123, -0.0050084856, -0.047429685, 0.00215403, -0.0018682912, -0.0211007, -0.016493713, -0.043912902, 0.025250504, -0.040232003, 0.013656842, -0.020666964, -0.00046304314, 0.048015814, 0.0012162209, 0.042131066, -0.015004942, 0.035003718, 0.035261616, -0.01557935, -0.00023463539, 0.011253707, 0.010796525, 0.0049352194, 0.022155736, 0.0024617484, -0.0019239736, 0.03146349, 0.0109547805, -0.013469281, -0.020280117, -0.01903752, -0.026938561, 0.009143637, 0.003947589, -0.013258273, -0.0032588858, -0.01108959, -0.038356382, -0.0002093585, -0.0019869825, -0.014043688, 0.024054797, 0.012695588, -0.016857116, -0.0056092693, -0.007268019, -0.025016053, -0.0053396495, 0.029353417, -0.025344286, 0.011839837, -0.0431861, 0.0027401603, -0.040958803, -0.028696952, -0.051251255, -0.000418717, 0.0055301418, 0.01315277, -0.020807635, 0.0025394107, -0.020362176, -0.042764086, -0.018298997, -0.015215949, 0.004633362, 0.01872101, 0.0053865397, 0.01499322, 0.018932017, 0.024031352, 0.032893647, -0.02078419, -0.0047916174, 0.009770797, 0.026235204, 0.022296406, -0.013996798, -0.002899881, 0.0061895386, 0.020807635, -0.021675108, 4.144126e-05, 0.01884996, 0.015192504, 0.019881548, -0.00097664, 0.023914127, -0.048812952, -0.04093536, 0.01884996, -0.017982485, 0.016939173, -0.0063009034, -0.021663385, 0.009659432, -0.030736687, 0.050547898, 0.013164492, 0.0048238547, 0.028626617, -0.031533822, 0.003645732, 0.023351442, -0.00076490035, 0.027852925, -0.040396117, -0.024617484, 0.013949907, 0.017853538, 0.010321759, 0.014582928, -0.002262464, -0.030900802, -0.0034405864, -0.0030859774, -0.0062657357, -0.0017495997, -0.0121094575, 0.046046417, 0.010567934, 0.019447813, 0.023609338, -0.009161221, 0.022261238, 0.025203614, 0.0065470785, 0.012719033, 0.009618402, -0.02298804, -0.022061953, 0.04152149, -0.022870814, 0.050735462, 0.04166216, 0.02487538, -0.010608963, -0.032424744, -0.02424236, 0.010251423, -0.013809236, -0.0037277904, 0.005846652, -0.03542573, -0.022015063, 0.018873405, -0.048015814, 0.03547262, -0.02271842, 0.027501246, -0.015321453, 0.016493713, -0.006939786, -0.040911913, 0.004143943, 0.049891435, -0.04234207, 0.03551951, 0.0047417963, 0.046257425, 0.0077545075, -0.0012169536, -0.0044458, 0.0062657357, 0.0122149605, 0.046820108, -0.006125064, -0.020854525, -0.033456333, -0.022038508, 0.032870203, 0.008539923, -0.03219029, -0.005319135, -0.05880062, 0.004407702, 0.014606373, -0.0016646108, -0.0067111948, 0.058284823, 0.0377937, 0.026657218, 0.016646108, -0.0016455615, 0.005579963, -0.034276914, 0.008762652, -0.023433499, 0.06025422, -0.0009414722, 0.011171648, 0.02787637, -0.010491737, -0.033479776, -0.012543194, 0.010737912, 0.026328985, -0.0050700293, -0.025109833, -0.0037014144, 0.0023269383, 0.013492726, 0.040607125, 7.500639e-05, 0.03730135, -0.012941763, 0.039036296, -0.024476811, -0.013129325, -0.010755496, -0.0005157949, 0.0075610843, 0.03132282, -0.012297019, -0.008821265, 0.041990392, -0.03533195, -0.013082434, -0.015766911, 0.04862539, 0.013328609, 0.032448187, -0.028157713, -0.036316648, 0.011470575, 0.0070335665, -0.007332493, -0.042670306, -0.0008139888, -0.0077779526, -0.05181394, 0.0055565177, -0.019951884, -0.025016053, -0.011148203, 0.022108845, 0.026282094, 0.039739653, 0.019377476, 0.03498027, -0.0077193393, 0.029189302, -0.028134266, -0.016505437, 0.063771, -0.0019049243, -0.032471634, -0.03430036, 0.013680288, 0.017830092, 0.010620685, -0.005371887, 0.0062247063, 0.004431147, 0.002173079, -0.005140365, -0.00489419, -0.017665975, 0.023468668, -0.01948298, 0.002747487, 0.012132903, 0.011617107, 0.020538015, 0.029751986, 0.03861428, -0.025133278, -0.0026185382, 0.03891907, 0.014887717, -0.0022800479, 0.004431147, 0.004659738, 0.048203375, -0.00960668, -0.0682256, -0.008938491, 0.022870814, 0.0026243995, 0.047922034, 0.014582928, -0.013305164, 0.016364764, 0.0095656505, 0.0046714605, 0.016974341, 0.00055316073, -0.00047623107, 0.026868224, 0.010005249, -0.027032342, 0.016962618, -0.013621674, 0.03125248, -0.02298804, -0.0087099, 0.0030361563, 0.0013759414, 0.01369201, -0.016892282, 0.014067133, 0.0033057763, 0.039083187, -0.018908571, 0.05579963, 0.0155207375, 0.011746056, 0.033737674, 0.0045776796, -0.028134266, 0.010257285, -0.0040618847, 0.00066599087, -0.013621674, 0.010896167, -0.013340332, 0.0033614587, -0.012285297, 0.0046011247, 0.0034845462, 0.026680663, 0.0127659235, 0.023632783, 0.015591073, -0.013867849, -0.013527893, 0.0126604205, 0.006670166, 0.00534258, -0.019424366, -0.006007838, 0.008967797, 0.033104654, 0.0109020285, -0.01216807, 0.005673744, -0.022003341, -0.014946329, 0.015344898, 0.00014296091, 0.014489148, 0.005225354, 0.009008827, -0.011699166, -0.0041234284, -0.019201636, -0.0028104961, 0.0024544217, 0.022905983, -0.038004704, -0.009893884, 0.043045428, 0.017490136, 0.009553928, 0.011892589, 0.021804057, 0.008094463, 0.024594039, -0.026000751, -0.021206204, 0.001809678, 0.046257425, 0.0049410807, 0.014899439, 0.00377175, 0.03155727, -0.028603172, -0.010878583, 0.05589341, 0.018310718, 0.034089353, -0.01369201, 0.03106492, -0.043842565, -0.00592578, 0.016798502, 0.0022566027, 0.011083729, -0.00093121495, 0.050923023, -0.026797889, -0.0051257117, 0.02137032, 0.04597608, -0.0093546435, 0.01940092, 0.011828114, -0.0014374852, -0.02581319, 0.015251117, 0.0022316922, 0.028743843, 0.0045542344, 0.040161666, -0.0036398708, 0.029798878, -0.014043688, -0.016950896, -0.0015928098, 0.0023855513, 0.0031387291, -0.024969162, 0.004278753, 0.015133891, 0.001759857, 0.016704721, 0.0022668599, 0.00955979, -0.01369201, 0.0053982623, -0.03160416, 0.041451152, -0.038497057, -0.01764253, -0.037066896, -0.005421708, -0.018158324, 0.015567628, -0.035589848, -0.038637727, 0.016059978, 0.03866117, -0.0069222017, 0.0129769305, 0.0274778, 0.018908571, 0.013281719, -0.040067885, 0.017302575, -0.008352361, 0.00072313857, 0.026657218, -0.016974341, -0.0073207705, -0.02581319, -0.003748305, -0.006341933, -0.037066896, 0.006136787, -0.009395673, -0.022507414, 0.006963231, 0.008487171, 0.00061030843, 0.039833434, 0.010849277, -0.01943609, -0.010474153, -0.005518419, 0.0067405016, -0.024711264, -0.033339106, 0.012894873, -0.02963476, 0.011353349, -0.033081207, -0.005064168, 0.01597792, -0.010796525, -0.018967185, 0.021956451, -0.027313683, -0.011077868, -0.008457864, 0.012402522, 0.008516477, -0.002666894, -1.8041832e-05, -0.014067133, -0.007748646, -0.031440042, -0.0026698248, 0.014688432, 0.020116001, 0.009712183, -0.014758768, -0.0003346439, 0.008633703, -0.03807504, -0.030783577, -0.03277642, -0.008563368, 0.011880866, 0.008446141, 0.01795904, 0.023656229, -0.0077603688, -0.005987324, -0.035660185, -0.004425286, 0.0029819391, 0.005987324, -0.017490136, 0.011775363, -0.0015283354, 0.026750999, 0.031721387, -0.019834658, 0.02801704, -0.0025042428, 0.014172637, 0.01369201, 0.0025613906, -0.026539993, 0.010556212, -0.022554304, 0.004237724, 0.02321077, 0.0012272109, 0.0028090307, 0.011025116, -0.004785756, -0.03277642, -0.0029687514, 0.0451555, 0.019494703, 0.040771242, 0.0018214007, 0.013164492, 0.0015532459, 0.007326632, 0.012636974, -0.0047212816, -0.053126875, 0.03430036, 0.04252963, 0.02240191, -0.03828605, -0.0065470785, -0.008680593, -0.010579657, -0.021780612, -0.0157083, 0.00897952, 0.027454356, 0.018932017, 0.0021203272, 0.001899063, -0.012742478, -0.008094463, -0.03366734, -0.019060966, 0.0009817687, 0.018908571, 0.019776044, 0.018803068, 0.0075435, -0.007572807, -0.0021804057, -0.016646108, 0.02811082, 0.039434865, -0.0017188279, -0.00448976, 0.0013217244, -0.0064708814, 0.020631796, 0.03528506, 0.03169794, -0.018498281, -0.010755496, -0.014981497, 0.018345887, -0.024992608, 0.007783814, -0.012379077, 0.043889455, 0.010069723, 0.0008301074, 0.045554068, -0.019834658, 0.025109833, -0.09307753, -0.01293004, -0.0024939855, 0.04825027, -0.0017994208, -0.003622287, 0.0077545075, -0.013844403, -0.017830092, 0.015122169, -0.012461136, 0.04853161, 0.035355397, 0.03263575, -0.00030167407, -0.011159926, -0.033245325, -0.004255308, 0.013117602, -0.0015796218, -0.0022551373, 0.0010235305, 0.00044326123, -0.017115012, -0.019904993, 0.025461512, -0.036597993, 0.015204227, 0.024805045, 0.010122474, -0.014442257, 0.0063771005, 0.0220854, 0.0018756178, -0.026375875, -0.0053044814, 0.006295042, -0.005155018, 0.011054423, -0.018216938, 0.016270984, -0.017255684, -0.011007532, -0.019916717, -0.015321453, -0.018252106, 0.03380801, -0.019670542, -0.0039182827, 0.0350975, 0.00038831148, 0.028181158, 0.039130077, -0.010866861, -0.006910479, -0.059550866, 0.028673507, 0.007695894, 0.016575772, 0.012836259, 0.017923873, -0.022460522, 0.022167457, 0.0068753115, -0.032073066, 0.010409678, 0.007326632, -0.014453979, -0.023140434, -0.035167832, -0.009290169, -0.011728472, -0.0033292216, 0.018650675, -0.019459534, -0.0019283695, -0.012906595, -0.028884513, 0.015778635, -0.0018126088, 0.020819357, 0.012332187, 0.032448187, -0.012683866, 0.012965208, 0.01768942, 0.023503836, 0.0066056913, -0.014442257, 0.03788748, -0.02625865, -0.010110752, 0.0011165787, -0.0075317775, -0.027055787, -0.002995127, 0.036152534, 0.008094463, -0.027618472, 0.015239394, 0.032987427, -0.023011485, 0.0018726871, -0.016458547, -0.058378603, 0.003973965, -0.014125747, 0.00740869, 0.0030361563, 0.00064437726, -0.010696882, 0.0063302102, 0.015262839, 0.017454969, 0.01594275, -0.041240145, -0.012332187]"
../../../gradio,../../../gradio/gradio/components,base.py,"""""""Contains all of the components that can be used with Gradio Interface / Blocks.
Along with the docs for each component, you can find the names of example demos that use
each component. These demos are located in the `demo` directory.""""""

from __future__ import annotations

import abc
import hashlib
import json
import sys
import warnings
from abc import ABC, abstractmethod
from enum import Enum
from pathlib import Path
from typing import TYPE_CHECKING, Any, Callable

import gradio_client.utils as client_utils

from gradio import utils
from gradio.blocks import Block, BlockContext
from gradio.component_meta import ComponentMeta
from gradio.data_classes import GradioDataModel
from gradio.events import EventListener
from gradio.layouts import Form
from gradio.processing_utils import move_files_to_cache

if TYPE_CHECKING:
    from typing import TypedDict

    class DataframeData(TypedDict):
        headers: list[str]
        data: list[list[str | int | bool]]


class _Keywords(Enum):
    NO_VALUE = ""NO_VALUE""  # Used as a sentinel to determine if nothing is provided as a argument for `value` in `Component.update()`
    FINISHED_ITERATING = ""FINISHED_ITERATING""  # Used to skip processing of a component's value (needed for generators + state)


class ComponentBase(ABC, metaclass=ComponentMeta):
    EVENTS: list[EventListener | str] = []

    @abstractmethod
    def preprocess(self, payload: Any) -> Any:
        """"""
        Any preprocessing needed to be performed on function input.
        Parameters:
            payload: The input data received by the component from the frontend.
        Returns:
            The preprocessed input data sent to the user's function in the backend.
        """"""
        return payload

    @abstractmethod
    def postprocess(self, value):
        """"""
        Any postprocessing needed to be performed on function output.
        Parameters:
            value: The output data received by the component from the user's function in the backend.
        Returns:
            The postprocessed output data sent to the frontend.
        """"""
        return value

    @abstractmethod
    def process_example(self, value):
        """"""
        Process the input data in a way that can be displayed by the examples dataset component in the front-end.

        For example, only return the name of a file as opposed to a full path. Or get the head of a dataframe.
        The return value must be able to be json-serializable to put in the config.
        """"""
        pass

    @abstractmethod
    def api_info(self) -> dict[str, list[str]]:
        """"""
        The typing information for this component as a dictionary whose values are a list of 2 strings: [Python type, language-agnostic description].
        Keys of the dictionary are: raw_input, raw_output, serialized_input, serialized_output
        """"""
        pass

    @abstractmethod
    def example_inputs(self) -> Any:
        """"""
        Deprecated and replaced by `example_payload()` and `example_value()`.
        """"""
        pass

    @abstractmethod
    def flag(self, payload: Any | GradioDataModel, flag_dir: str | Path = """") -> str:
        """"""
        Write the component's value to a format that can be stored in a csv or jsonl format for flagging.
        """"""
        pass

    @abstractmethod
    def read_from_flag(self, payload: Any) -> GradioDataModel | Any:
        """"""
        Convert the data from the csv or jsonl file into the component state.
        """"""
        return payload

    @property
    @abstractmethod
    def skip_api(self):
        """"""Whether this component should be skipped from the api return value""""""

    @classmethod
    def has_event(cls, event: str | EventListener) -> bool:
        return event in cls.EVENTS

    @classmethod
    def get_component_class_id(cls) -> str:
        module_name = cls.__module__
        module_path = sys.modules[module_name].__file__
        module_hash = hashlib.md5(f""{cls.__name__}_{module_path}"".encode()).hexdigest()
        return module_hash


def server(fn):
    fn._is_server_fn = True
    return fn


class Component(ComponentBase, Block):
    """"""
    A base class for defining methods that all input/output components should have.
    """"""

    def __init__(
        self,
        value: Any = None,
        *,
        label: str | None = None,
        info: str | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int | None = None,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        load_fn: Callable | None = None,
        every: float | None = None,
    ):
        self.server_fns = [
            value
            for value in self.__class__.__dict__.values()
            if callable(value) and getattr(value, ""_is_server_fn"", False)
        ]

        # Svelte components expect elem_classes to be a list
        # If we don't do this, returning a new component for an
        # update will break the frontend
        if not elem_classes:
            elem_classes = []

        # This gets overridden when `select` is called
        self._selectable = False
        if not hasattr(self, ""data_model""):
            self.data_model: type[GradioDataModel] | None = None

        Block.__init__(
            self,
            elem_id=elem_id,
            elem_classes=elem_classes,
            visible=visible,
            render=render,
        )
        if isinstance(self, StreamingInput):
            self.check_streamable()

        self.label = label
        self.info = info
        if not container:
            if show_label:
                warnings.warn(""show_label has no effect when container is False."")
            show_label = False
        if show_label is None:
            show_label = True
        self.show_label = show_label
        self.container = container
        if scale is not None and scale != round(scale):
            warnings.warn(
                f""'scale' value should be an integer. Using {scale} will cause issues.""
            )
        self.scale = scale
        self.min_width = min_width
        self.interactive = interactive

        # load_event is set in the Blocks.attach_load_events method
        self.load_event: None | dict[str, Any] = None
        self.load_event_to_attach: None | tuple[Callable, float | None] = None
        load_fn, initial_value = self.get_load_fn_and_initial_value(value)
        initial_value = self.postprocess(initial_value)
        self.value = move_files_to_cache(
            initial_value,
            self,  # type: ignore
            postprocess=True,
            keep_in_cache=True,
        )
        if client_utils.is_file_obj(self.value):
            self.keep_in_cache.add(self.value[""path""])

        if callable(load_fn):
            self.attach_load_event(load_fn, every)

        self.component_class_id = self.__class__.get_component_class_id()

    TEMPLATE_DIR = ""./templates/""
    FRONTEND_DIR = ""../../frontend/""

    def get_config(self):
        config = super().get_config()
        if self.info:
            config[""info""] = self.info
        if len(self.server_fns):
            config[""server_fns""] = [fn.__name__ for fn in self.server_fns]
        config.pop(""render"", None)
        return config

    @property
    def skip_api(self):
        return False

    @staticmethod
    def get_load_fn_and_initial_value(value):
        if callable(value):
            initial_value = value()
            load_fn = value
        else:
            initial_value = value
            load_fn = None
        return load_fn, initial_value

    def attach_load_event(self, callable: Callable, every: float | None):
        """"""Add a load event that runs `callable`, optionally every `every` seconds.""""""
        self.load_event_to_attach = (callable, every)

    def process_example(self, value):
        """"""
        Process the input data in a way that can be displayed by the examples dataset component in the front-end.
        By default, this calls the `.postprocess()` method of the component. However, if the `.postprocess()` method is
        computationally intensive, or returns a large payload, a custom implementation may be appropriate.

        For example,  the `process_example()` method of the `gr.Audio()` component only returns the name of the file, not
        the processed audio file. The `.process_example()` method of the `gr.Dataframe()` returns the head of a dataframe
        instead of the full dataframe.

        The return value of this method must be json-serializable to put in the config.
        """"""
        return self.postprocess(value)

    def as_example(self, value):
        """"""Deprecated and replaced by `process_example()`.""""""
        return self.process_example(value)

    def example_inputs(self) -> Any:
        """"""Deprecated and replaced by `example_payload()` and `example_value()`.""""""
        return self.example_payload()

    def example_payload(self) -> Any:
        """"""
        An example input data for this component, e.g. what is passed to this component's preprocess() method.
        This is used to generate the docs for the View API page for Gradio apps using this component.
        """"""
        raise NotImplementedError()

    def example_value(self) -> Any:
        """"""
        An example output data for this component, e.g. what is passed to this component's postprocess() method.
        This is used to generate an example value if this component is used as a template for a custom component.
        """"""
        raise NotImplementedError()

    def api_info(self) -> dict[str, Any]:
        """"""
        The typing information for this component as a dictionary whose values are a list of 2 strings: [Python type, language-agnostic description].
        Keys of the dictionary are: raw_input, raw_output, serialized_input, serialized_output
        """"""
        if self.data_model is not None:
            return self.data_model.model_json_schema()
        raise NotImplementedError(
            f""The api_info method has not been implemented for {self.get_block_name()}""
        )

    def flag(self, payload: Any, flag_dir: str | Path = """") -> str:
        """"""
        Write the component's value to a format that can be stored in a csv or jsonl format for flagging.
        """"""
        if self.data_model:
            payload = self.data_model.from_json(payload)
            Path(flag_dir).mkdir(exist_ok=True)
            payload = payload.copy_to_dir(flag_dir).model_dump()
        if not isinstance(payload, str):
            payload = json.dumps(payload)
        return payload

    def read_from_flag(self, payload: Any):
        """"""
        Convert the data from the csv or jsonl file into the component state.
        """"""
        if self.data_model:
            return self.data_model.from_json(json.loads(payload))
        return payload


class FormComponent(Component):
    def get_expected_parent(self) -> type[Form] | None:
        if getattr(self, ""container"", None) is False:
            return None
        return Form

    def preprocess(self, payload: Any) -> Any:
        return payload

    def postprocess(self, value):
        return value


class StreamingOutput(metaclass=abc.ABCMeta):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.streaming: bool

    @abc.abstractmethod
    def stream_output(
        self, value, output_id: str, first_chunk: bool
    ) -> tuple[bytes, Any]:
        pass


class StreamingInput(metaclass=abc.ABCMeta):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

    @abc.abstractmethod
    def check_streamable(self):
        """"""Used to check if streaming is supported given the input.""""""
        pass


def component(cls_name: str, render: bool) -> Component:
    obj = utils.component_or_layout_class(cls_name)(render=render)
    if isinstance(obj, BlockContext):
        raise ValueError(f""Invalid component: {obj.__class__}"")
    if not isinstance(obj, Component):
        raise TypeError(f""Expected a Component instance, but got {obj.__class__}"")
    return obj


def get_component_instance(
    comp: str | dict | Component, render: bool = False, unrender: bool = False
) -> Component:
    """"""
    Returns a component instance from a string, dict, or Component object.
    Parameters:
        comp: the component to instantiate. If a string, must be the name of a component, e.g. ""dropdown"". If a dict, must have a ""name"" key, e.g. {""name"": ""dropdown"", ""choices"": [""a"", ""b""]}. If a Component object, will be returned as is.
        render: whether to render the component. If True, renders the component (if not already rendered). If False, does not do anything.
        unrender: whether to unrender the component. If True, unrenders the the component (if already rendered) -- this is useful when constructing an Interface or ChatInterface inside of a Blocks. If False, does not do anything.
    """"""
    if isinstance(comp, str):
        component_obj = component(comp, render=render)
    elif isinstance(comp, dict):
        name = comp.pop(""name"")
        component_cls = utils.component_or_layout_class(name)
        component_obj = component_cls(**comp, render=render)
        if isinstance(component_obj, BlockContext):
            raise ValueError(f""Invalid component: {name}"")
    elif isinstance(comp, Component):
        component_obj = comp
    else:
        raise ValueError(
            f""Component must provided as a `str` or `dict` or `Component` but is {comp}""
        )

    if render and not component_obj.is_rendered:
        component_obj.render()
    elif unrender and component_obj.is_rendered:
        component_obj.unrender()
    if not isinstance(component_obj, Component):
        raise TypeError(
            f""Expected a Component instance, but got {component_obj.__class__}""
        )
    return component_obj
","This code defines a base class `ComponentBase` and a subclass `Component` for defining methods that all input/output components should have in Gradio. The `Component` class includes methods for preprocessing, postprocessing, example data processing, API information, flagging, and reading from flags. It also includes methods for generating example inputs and outputs, as well as handling streaming inputs and outputs. The code also provides functions for creating component instances and getting component instances from strings, dictionaries, or existing Component objects.","[-0.059243906, 0.021107785, 0.04976194, -0.0022678925, 0.004355089, -0.009292081, 0.0119565865, -0.0036353657, -0.006609199, -0.03288061, 0.027171833, -0.025358744, -0.04123552, -0.0024715587, -0.005684279, -0.011325681, 0.0048083607, 0.011007165, -0.009886235, 0.051501527, 0.029009422, -0.045964256, -0.019270195, 0.054343667, 0.022394098, -0.036800805, -0.03481621, 0.06630025, -0.016023787, -0.0013774269, 0.024991225, -0.033591148, -0.023312893, 0.016219797, 0.02793137, -0.04407766, -0.01815539, 0.0058435365, -0.02508923, -0.011619695, -0.009181825, -0.028494898, -0.005129939, 0.02282287, -0.04442068, -0.007301358, -0.015631767, 0.015055989, -0.00652957, 0.020250244, -0.0570388, -0.019698966, 0.0037701225, -0.014406707, -0.036825307, 0.021512056, -0.0754147, 0.018106388, 0.0066398256, -0.014823227, 0.015546013, 0.014835478, -0.006627575, 0.027637355, -0.021352798, 0.0063335607, 0.00033114906, -0.006584698, 0.00201063, 0.0007549433, 0.027122831, -0.02386417, 0.013487912, -0.039838955, -0.014112692, -0.005393327, -0.015129493, 0.02508923, 0.03177806, 0.014161695, -0.0045939754, 0.0021162913, -0.0103517575, -0.0203605, -0.035796255, -0.005028872, -0.027857866, 0.026412295, -0.01673432, -0.07056346, -0.051844545, -0.0084100375, -0.057577826, 0.05478469, -0.016562812, 0.014835478, -0.04199506, -0.025799766, -0.012936635, 0.0244522, 0.051648535, -0.019527458, -0.012244476, -0.01670982, 0.074679665, -0.04586625, -0.03709482, 0.016023787, -0.06458517, 0.0053718886, 0.008906187, 0.012716124, -0.016232045, 0.027514849, -0.02753935, -0.013781926, -0.011705449, -0.0029891466, -0.027147332, 0.019882726, 0.007766881, 0.038442384, -0.046846297, -0.035379734, 0.054490674, -0.023741664, 0.004940055, -0.03748684, -0.023680411, -0.037756354, -0.011638071, -0.013108143, -0.0070992233, -0.034987718, -0.006664327, 0.037192825, -0.03523273, -0.034791708, -0.037021317, 0.00025802827, 0.045106713, -0.010982663, 0.01836365, -0.02138955, 0.01213422, -0.028494898, -0.049051408, 0.02935244, -0.046086762, -0.014247449, -0.010167999, 0.016379053, -0.074679665, -0.02508923, 0.022516605, 0.008385536, 0.02749035, -0.005920103, 0.00795064, -0.025897771, 0.03346864, 0.01633005, 0.030945018, 0.018118639, 0.003084089, -0.024366446, -0.018167641, 0.0056444644, -0.044175666, 0.04976194, 0.011705449, 0.009469715, -0.03768285, -0.014700721, 0.009200201, -0.042117566, -0.040010463, -0.026877819, -0.03687431, -0.030013973, 0.0018544347, -0.017383603, -0.030945018, -0.012912134, 0.005782284, -0.019306947, -0.0044010286, -0.03785436, -0.023888672, -0.0024623708, 0.035355233, 0.009763729, 0.028176382, 0.053755637, 0.023986677, -0.0037976862, 0.029278936, -0.030920517, 0.0064928187, -0.017604114, 0.03569825, -0.00652957, 0.033542145, -0.006970592, -0.028837916, -0.020495255, 0.012023965, 0.0063151848, 0.010535517, -0.003555737, -0.0020642262, -0.02424394, 0.008379411, 0.0058711004, -0.070710465, -0.017579613, -0.03917742, 0.04302411, -0.020017482, -0.0051881294, -0.029719958, -0.004054949, 0.021377299, -0.024133684, 0.0019600962, 0.016795574, 0.020458503, 0.0092430785, 0.018767921, -0.007282982, 0.053363618, -0.019025184, 0.034963217, -0.009855608, -0.0026109093, -0.027147332, -0.0027471972, -0.04932092, 0.048193865, -0.0077791316, -0.047826346, -0.005920103, 0.02915643, -0.0097576035, 0.0069277147, 0.054490674, -0.014737473, -0.056793787, 0.011276678, 0.06595723, -0.018424904, 0.009096071, 0.03606577, 0.034791708, -0.017714368, 0.024158185, 0.027147332, 0.02935244, 0.010982663, 0.0018268708, -0.06654526, -0.048144862, -0.037339833, 0.014406707, 0.017077338, 0.043514136, 0.014541463, 0.025995776, -0.0052034426, -0.019943979, -0.02749035, -0.02320264, 0.059439916, -0.027882367, -0.008189526, -0.005849662, 0.04299961, 0.054490674, 0.040402483, 0.0056169005, -0.00926758, 0.007834259, 0.0122934785, 0.058410864, -0.018853676, 0.054686684, 0.04241158, 0.0005998966, 0.01938045, -0.08506817, 0.025995776, 0.049639434, 0.036580294, -0.060909986, 0.022516605, -0.026632806, 0.019686716, -0.020225743, 0.04927192, -0.012752876, 0.01633005, 0.021487555, 0.007822009, 0.0023199576, -0.031043023, -0.001556592, 0.02404793, -0.027612854, -0.016293298, -0.028004874, 0.042705595, -0.0015558263, 0.009708601, -0.03751134, -0.04831637, 0.024341945, 0.04603776, 0.010020992, 0.005613838, -0.011184799, 0.013610418, -0.001983066, 0.07154351, -0.029597452, 0.007889387, -0.0070012184, -0.074679665, -0.012213849, 0.015852278, -0.033591148, 0.034105673, 0.022700364, 0.0013299559, 0.034987718, 0.019049684, 0.009488091, -0.065810226, 0.03648229, -0.048389874, 0.02915643, -0.052726585, 0.010002616, -0.009561594, 0.042681094, 0.03751134, 0.018522909, -0.030258985, 0.034718204, 0.008985816, -0.029303437, -0.026363293, -0.025603756, -0.013830928, -0.042534087, 0.053853642, -0.021548808, -0.015766524, -0.029303437, -0.020090986, -0.008912312, -0.020201242, 0.035820756, -0.007926139, 0.021965327, -0.010976538, 0.009604471, -0.04910041, -0.045376226, -0.04221557, -0.02443995, 0.027588353, 0.019466205, -0.0042417706, 0.005552585, -0.06556521, -0.009377835, 0.012060717, -0.024721712, -0.043122116, -0.013610418, 0.03141054, 0.015803276, 0.019343698, -0.024145935, 0.031631052, 0.010278254, 0.035379734, 0.015644018, 0.0015696082, 0.0488799, -0.026044779, -0.013879931, 0.017861376, -0.025505751, 0.041725546, 0.01607279, -0.01712634, 0.008275281, 0.0149089815, 0.042068563, 0.031484045, -0.035159227, -0.011368558, 0.020201242, -0.038246375, -0.016807824, 0.03787886, 0.05782284, 0.018412653, -0.0061099874, 0.025603756, -0.01325515, 0.035379734, 0.02059326, 0.04505771, -0.021548808, -0.023937674, -0.040819004, -0.0007576231, 0.022933125, 0.03748684, -0.007276857, -0.018241145, -0.050864495, 0.020887274, 0.029891467, 0.0060027945, -0.040402483, -0.0015711396, -0.020090986, -0.03420368, 0.033591148, -0.007944515, 0.034546696, 0.007154351, -0.045596737, -0.00632131, 0.027857866, 0.032537594, 0.029817963, -0.013781926, 0.0244522, -0.0050656237, 0.01836365, -0.061645024, -0.0024884033, -0.0019187503, -0.0367273, -0.024292942, -0.061155, -0.02834789, 0.0028742973, -0.038099367, 0.011491064, 0.033101123, -0.031337038, 0.04118652, 0.043783646, -0.020029733, 0.0039967587, -0.0020887274, 0.05017846, -0.0469443, 0.04625827, -0.014443459, -0.0013399095, 0.013855429, 0.028421395, 0.002627754, -0.0096841, -0.0043826527, 0.03915292, 0.02631429, -0.013181646, -0.021695815, 0.020409502, 0.009469715, 0.035820756, -0.039667446, 0.02100978, -0.04586625, -0.023545654, 0.0017824625, -0.027906869, -0.034081172, 0.086293235, -0.04907591, -0.036237277, -0.010357883, -0.009794355, -0.0027318841, -0.020311497, 0.0024531828, -0.011809579, 0.051452525, 0.009457464, -0.05458868, 0.0265103, -0.006269245, -0.01958871, 0.041701045, -0.0011010228, -0.0017411166, 0.03746234, 0.026461298, -0.032488592, 0.037560344, -0.0022127647, 0.0011109763, -0.026412295, -0.028445896, -0.0038160621, 0.020630011, -0.015962534, 0.029082926, 0.0018881239, -0.039887957, 0.0024148996, -0.027171833, -0.00793839, 0.024672711, 0.034375187, -0.030528497, -0.024182687, -0.028200883, -0.00090348185, 0.00774238, -0.06012595, 0.014026938, -0.018865926, 0.0026445985, 0.009010317, -0.012765126, 0.03403217, -0.06340911, 0.00591704, 0.0038865032, 0.0017962444, -0.0025971273, -0.06174303, -0.0126303695, 0.004247896, -0.005770033, -0.038001366, 0.017432606, 0.040426984, -0.012948886, -0.04669929, -0.00037153775, 0.056352764, 0.015129493, -0.06434016, 0.05213856, -0.023913173, 0.010584519, 0.022259342, 0.010872409, 0.021646813, -0.059243906, -0.021144537, 0.008391662, 0.0013889119, 0.011803454, 0.03765835, 0.004419404, -0.015043738, -0.006768457, -0.041725546, -0.015546013, 0.010560018, 0.00089965353, 0.0118769575, -0.025971275, 0.013585917, -0.0021086347, -0.022161337, -0.0043826527, -0.034987718, 0.001917219, -0.037633847, 0.012023965, -0.022467602, 0.01833915, -0.015950283, -0.0285194, -0.02059326, 0.016856827, 0.03729083, 0.014602716, -0.015925782, -0.032733604, 0.022798369, 0.004192768, 0.011092919, -0.0045909127, 0.025554754, -0.02320264, 0.042852603, -0.056940794, -0.0062478064, 0.0071972283, -0.013622669, -0.023251642, 0.0032096575, 0.012679372, -0.022565607, 0.026093781, 0.0155827645, -0.04444518, 0.0047103562, -0.024991225, 0.058263857, -0.032782607, -0.04584175, -0.018192142, 0.0124711115, -0.0066214497, 0.03591876, 0.0142351985, 0.006890963, 0.012415984, 0.001118633, 0.0034638573, -0.0038926285, -0.00095554686, 0.029523948, 0.004045761, 0.000932577, 0.018792422, -0.007282982, 0.007154351, 0.025309741, 0.028666407, 0.009708601, -0.0128876325, 0.014345454, -0.0094207125, -0.01445571, -0.0017181468, -0.06590823, -0.0285439, 0.03626178, 0.023937674, -0.0058251605, 0.027441347, 0.000107767, 0.0058619124, 0.03016098, 0.03687431, -0.020335998, -0.021818321, 0.025824267, 0.005953792, 0.0037762478, 0.0060395463, -0.029915968, -0.026975824, -0.00290033, 0.0020795395, 0.011429811, -0.045351725, -0.02303113, 0.0064499415, -0.02731884, 0.0017916504, 0.031337038, 0.018645415, 0.0032249708, -0.033787157, 0.023116885, -0.028617404, -0.009506467, 0.0025113733, 0.027514849, 0.04647878, -0.00089046557, 0.0057485946, -0.003941631, 0.003061119, 0.05483369, -0.036604796, -0.009739228, -0.040500488, -0.010204751, -0.01855966, -0.046111263, 0.0012533896, 0.0072033536, 0.0017885878, -0.015644018, -0.018069636, -0.006204929, -0.014516962, 0.0040090093, 0.008955189, 0.01996848, 0.01775112, -0.0115216905, 0.020924026, -0.05155053, 0.0040641367, -0.017665366, -0.01753061, -0.0012334824, -0.015925782, -0.021757068, 0.0032249708, 0.020458503, 0.002232672, -0.055519722, -0.0022877997, 0.024709461, -0.008826558, -0.021156788, -0.002019818, -0.0069460906, 0.016697569, 0.017236596, 0.012207724, -0.019098686, -0.044175666, 0.030945018, -0.027710859, -0.017824624, 0.008581546, -0.021352798, 0.0017503046, 0.014112692, -0.042313576, 0.013879931, -0.0070379702, 0.017653115, 0.01150944, 0.006590823, -0.0086489245, 0.029915968, -0.013806427, -0.015435757, 0.0071237246, -0.008869435, -0.0138186775, 0.020519756, -0.0011638071, -0.02138955, -0.015742023, -0.020532006, -0.009604471, 0.011533941, -0.051844545, -0.022149086, -0.008906187, 0.0085692955, -0.021303795, -0.0013031577, 0.008005768, -0.025260739, -0.0143944565, -0.0035434864, -0.006437691, 0.013095892, -0.0046123513, 0.024672711, -0.0069399653, -0.017052837, -0.028935919, -0.015546013, 0.020323748, -0.02994047, 0.01814314, 0.047605835, 0.0048267366, 0.0030549937, -0.0059323534, 0.001116336, 0.028298888, -0.010266003, -0.024684962, -0.040500488, -0.0052769464, 0.037021317, -0.0143944565, 0.0033689153, 0.03812387, 0.019123187, 0.024145935, 0.01977247, 0.00865505, 0.04939442, -0.0006730174, -0.0326601, 0.022087833, 0.010229251, -0.015215246, 0.009904611, 0.05649977, -0.008305907, 0.014382206, -0.07075947, 0.009187951, 0.002434807, 0.0037946235, -0.00539639, -0.03324813, 0.027833365, 0.048242867, 0.0147497235, -0.021867324, -0.044200167, 0.00044446712, 0.011993338, 0.012948886, 0.03765835, -0.021267043, 0.017983882, -0.0054270164, -0.01030888, 0.007093098, 0.059439916, 0.0007871011, -0.028617404, -0.02915643, 0.02464821, -0.00907157, 0.0043673394, -0.008514168, 0.021450803, 0.045694742, 0.022590108, 0.009647348, 0.0058986642, 0.011711574, 0.0069399653, 0.016121792, 0.028151881, -0.0053841393, 0.035575744, -0.024488952, 0.052873593, -0.015043738, -0.04466569, 0.019196691, 0.0285194, 0.022002079, 8.431859e-05, 0.033125624, 0.0070440955, 0.02222259, 0.0007158945, -0.030602, 0.004823674, 0.012262852, 0.020850522, 0.00969635, -0.06076298, 0.0054852064, -0.010933662, 0.022345096, 0.0326846, -0.021561058, 0.04728732, 0.0069093388, -0.003757872, -0.039397933, 0.018437155, -0.0019371263, -0.055568725, 0.014761974, -0.026216285, 0.035845257, -0.011307305, -0.00946359, 0.011325681, 0.052579578, -0.0032525347, -0.025260739, -0.013745175, -0.004177455, -0.029425943, -0.023165887, -0.02891142, -0.004492908, -0.009304332, 0.019025184, -0.027220836, -0.01753061, -0.038246375, 0.01978472, 0.03197407, -0.011307305, 0.007093098, -0.016379053, -0.021720316, -0.0054913317, -0.0030182418, 0.021144537, 0.017922629, -0.009867859, 0.019539708, 0.018326899, -0.0030197732, -0.030356988, -0.020740267, -0.023300642, -0.039054915, -0.013855429, -0.014173945, -0.06610424, 0.019600961, -0.013573666, -0.02832339, -0.03807487, -0.03381166, 0.011154172, 0.030871514, 0.0026415358, -0.01956421, 0.02344765, -0.018829174, 0.006609199, 0.0069032134, -0.013781926, -0.007748505, 0.0031759683, -0.0028697033, 0.013181646, -0.0012878444, 0.005010496, 0.033909664, 0.019453954, -0.022724865, 0.036580294, 0.027759861, 0.029793462, -0.048438877, 0.015840027, -0.044984207, -0.0142597, -0.0033321634, -0.01651381, 0.018657666, -0.01569302, -0.048806395, 0.0040243226, -0.037780855, 0.041676544, -0.013524664, -0.008256905, -0.005237132, -0.01855966, 0.02300663, -0.022185838, -0.020495255, 0.050006952, 0.013732924, -0.023067882, 0.005145252, 0.0097576035, 0.0011997932, 0.038270876, -0.0018176829, -0.042264573, -0.006768457, 0.017224345, 0.036751803, 0.008116023, -0.012569116, 0.02871541, -0.018522909, -0.002293925, 0.03302762, 0.02606928, 0.001061974, 0.050521478, 0.029278936, -0.028813414, -0.008079272, -0.014933483, 0.014994736, 0.0101741245, -0.009304332, 0.02365591, 0.011141921, -0.002656849, 0.025383245, -0.03687431, -0.021928575, 0.008753055, -0.014541463, 0.009518717, 0.022602359, -0.06291909, -0.00325866, -0.007840385, 0.047605835, 0.052285563, 0.026804315, -0.015803276, -0.0023490528, 0.05032547, -0.0071604764, -0.021548808, 0.022198088, 0.03785436, -0.025187235, 0.009145074, -0.0020045047, 0.024856469, 0.004345901, -0.024942223, -0.012569116, 0.0048543005, -0.006890963, 0.015460258, -0.017028335, 0.033566646, -0.017861376, -0.017469358, 0.0035924888, 0.0054729558, -0.010161874, -0.0031820936, 0.0045204717, 0.022332845, -0.031435043, 0.009206327, -0.0041652042, 0.026755312, 0.004630727, 0.021891823, 0.00076183426, -0.0119565865, 0.0026032527, -0.029474946, -0.016991584, 0.023190388, 0.04197056, 0.027367843, 0.02243085, 0.011791203, 0.00071895716, -0.029229933, -0.009212452, 0.010615146, 0.011484939, 0.014039189, -0.00784651, -0.0183514, -0.008802057, -0.00026836473, 0.046772793, -0.008073146, 0.0062294304, 0.0001824191, -0.011840206, -0.014345454, -0.014970235, -0.00236896, -0.0057945345, -0.0028084503, 0.016575063, -0.012532365, 0.022259342, 0.010210876, -0.025407746, -0.032096576, -0.036163773, 0.020201242, 0.014431208, 0.012973387, 0.0047256695, 0.004247896, 0.0060579223, -0.036604796, -0.0015971721, -0.0448862, -0.023570156, -0.034497693, -0.039495938, 0.049516927, -0.032023072, -0.013230649, 0.007209479, -0.033493143, -0.008207902, -0.0018529034, 0.01895168, -0.00025783686, -0.011319555, 0.012158722, -0.030430492, -0.02223484, 0.041554037, -0.0017962444, -0.020581009, -0.033517644, 0.025456749, -0.003678243, 0.0032709104, 0.021561058, -0.007135975, 0.042436082, -0.00020730314, -0.016893579, -0.010388509, -0.024844218, -0.018608663, -0.0142597, -0.014614967, 0.012513989, -0.015276499, 0.007864886, 0.0387854, 0.0030304925, -0.04464119, -0.03569825, 0.017922629, -0.003607802, 0.025432248, -0.003056525, -0.011135796, 0.017616365, -0.0155827645, -0.033787157, 0.01853516, 0.015925782, -0.015215246, 0.016611814, 0.0009119041, -0.035943262, 0.003904879, -0.021524306, -0.00515444, 0.013010139, -0.006382563, -0.0056536524, 0.022884123, 0.026975824, -0.024721712, 0.002110166, -0.007785257, -0.015987035, -0.030185482, 0.009022567, 0.03991246, -0.022945376, -0.022724865, -0.035159227, 0.03812387, 0.01874342, -0.0126303695, -0.002845202, 0.028984921, 0.03726633, 0.014222948, 0.025113732, -0.005534209, 0.010615146, -0.004318337, -0.0038283127, 0.010455888, -0.02834789, -0.036972314, -0.002670631, -0.018020634, 0.015227497, 0.011423686, -0.017971631, -0.0019371263, 0.022969877, 0.017775621, -0.00989236, -0.019270195, -0.024133684, -0.0029508634, 0.011368558, 0.03533073, -0.03177806, 0.031263534, 0.013463411, 0.026142782, 0.004563349, -0.042754598, 0.025971275, -0.0075647463, -0.027833365, -0.00025898535, -0.019147689, 0.009818857, 0.027637355, 0.024366446, -0.03687431, 0.0008896999, -0.011031666, -0.002223484, 0.025236238, -0.01917219, -0.03790336, 0.010939786, 0.018486157, 0.029009422, 0.015533762, 0.015104991, -0.030724507, -0.005638339, 0.035624746, 0.00018347189, -0.0064499415, -0.021573309, 0.0067562065, 0.03180256, -0.004848175, 0.017726619, -0.017800122, -0.01693033, -0.04032898, -0.01283863, 0.01957646, 0.00804252, -0.011668697, 0.009941363, -0.013010139, -0.015840027, 0.028004874, 0.021034282, -0.043146618, 0.026167283, -0.006743956, 0.011533941, -0.037780855, -0.028813414, 0.027514849, -0.05483369, 0.028788913, 0.0117973285, -0.007766881, -0.008397787, 0.0077607557, 0.03606577, 0.019074185, -0.01365942, 0.026338791, 0.0032004695, -0.0050564357, 0.023766166, -0.0028758286, 0.03805037, 0.027784362, 0.013157145, -0.010112871, -0.03807487, -0.022675863, -0.04032898, 0.00040082436, 0.0034883586, 0.0054331417, -0.004695043, 0.017285598, 0.0027226962, 0.0062110545, -0.032096576, 0.018314648, 0.023165887, 0.007515744, -0.02974446, 0.007111474, 0.00021955374, -0.020519756, 0.037584845, 0.025530253, 0.031043023, -0.0056812163, -0.0047256695, 0.017689867, 0.017481608, -0.019074185, 0.03501222, -0.03381166, -0.025334243, -0.00044331863, -0.01630555, -0.0173101, -0.0022602358, 0.011295054, 0.013095892, -0.014296452, -0.020826021, -0.000927983, -0.0031070586, 0.0062478064, 0.049247418, -0.008269155, 0.060027946, 0.007969016, -0.016440306, 0.018326899, -0.007607623, 0.022271592, -0.023619158, 0.02016449, 0.0039293803, -0.0135614155, -0.043710146, -0.023300642, -0.004569474, 0.019833723, 4.069975e-05, -0.024072431, 0.01630555, -0.016771073, -0.007944515, -0.03302762, 0.0002251048, 0.014357705, -0.0015389818, 0.0005080171, 0.0041284524, -0.021916324, -0.031484045, -0.011325681, 0.022516605, 0.028445896, 0.015754273, -0.016856827, 0.018020634, 0.03307662, 0.031704556, -0.03038149, -0.04101501, 0.0056812163, 0.047826346, -0.012581367, 0.016550561, 0.011515565, -0.019821472, -0.011785078, -0.02528524, -0.0142597, 0.036433287, 0.0003192813, 0.033983167, -0.0072952327, 0.02937694, 0.010259878, 0.052089557, 0.0024991226, -0.005782284, -0.016195295, 0.008795932, 0.024978975, 0.012066842, 0.011074543, 0.006682703, -0.046601284, -0.0214018, 0.0031729056, 0.005448455, 0.008336534, 0.0072952327, -0.0062110545, 0.021487555, -0.010786654, 0.024366446, 0.03403217, 0.020139989, -0.023680411, 0.021879572, 0.008949064, 0.015815526, 0.02159781, 0.017040586, -0.02223484, -0.02015224, 0.009126698, -0.021769319, -0.012679372, 0.025848769, -0.02631429, -0.009439088, -0.0043949033, -0.042240072, 0.032023072, -2.9812985e-05, 0.013402157, -0.013218398, -0.042117566, -0.024194937, 0.012544615, -0.002185201, 0.0037823732, -0.025505751, -0.024758464, 0.033713654, 0.0244522, -0.013806427, -0.022675863, 0.01938045, -0.0056352764, 0.030945018, 0.0065111946, 0.023888672, 0.009377835, 0.014651719, -0.020139989, -0.008722428, 0.0058956016, 0.043514136, 0.015006986, -0.032047573, -0.00048657856, -0.0053443247, -0.040083967, 0.013487912, 0.029278936, 0.009769854, 0.006419315, -0.008318158, 0.045547735, 0.016489308, 0.0044408427, -0.050521478, -0.015766524, -0.018902678, 0.027710859, 0.0015941095, 0.017555112, 0.026755312, -0.0012541553, 0.030626502, 0.0023766167, -0.00091726374, 0.01427195, 0.031508546, 0.0037670599, 0.018290147, 0.0224431, 0.015325502, 0.030651003, 4.9863775e-05, 0.029670956, 0.016771073, 0.010235377, 0.0138186775, 0.010762153, -0.031288035, 0.037339833, 0.029499447, -0.014296452, -0.009537092, 0.023496652, -0.007932264, -0.026657308, 0.010909161, 0.019539708, -0.01508049, -0.027147332, -0.021450803, -0.01833915, 0.027686357, 0.007399363, -0.004499033, -0.0224186, -0.011154172, 8.345722e-05, -0.0027303528, -0.0015489353, -0.016170794, 0.005270821, 0.008771431, 0.017395854, 0.0055801487, 0.0010964288, 0.029009422, -0.015325502, -0.028029375, -0.013573666, -0.0017227407, -0.011582944, -0.00035277902, 0.003371978, 0.025530253, 0.004921679, 0.046650287, -0.01998073, -0.031680055, -0.0088449335, 0.0057332814, 0.01528875, -0.047213815, -0.0049614934, -0.00524632, -0.011656446, -0.0008445258, 0.028641906, -0.012752876, -0.014970235, 0.0010367071, -0.0346447, -0.008403912, -0.000100876045, 0.022247091, -0.03040599, 0.04547423, 0.011007165, -0.02834789, -0.0040763873, -0.04976194, -0.014100442, 0.014700721, -0.010198626, -0.01549701, 0.015827777, 0.0017656179, 0.0076750014, 0.023104634, -0.029425943, 0.018412653, 0.023876421, -0.03569825, -0.012703873, 0.040843505, -0.022859622, 0.00580066, 0.002280143, -0.08849834, 0.010523266, 0.02488097, 0.01549701, 0.043146618, -0.019490706, -0.01690583, 0.0021775444, -0.016170794, 0.011625821, 0.0039998214, 0.013879931, 0.0024884033]"
../../../gradio,../../../gradio/gradio/components,image_editor.py,"r""""""gr.ImageEditor() component.""""""

from __future__ import annotations

import dataclasses
import warnings
from pathlib import Path
from typing import Any, Iterable, List, Literal, Optional, TypedDict, Union, cast

import numpy as np
import PIL.Image
from gradio_client import file
from gradio_client.documentation import document

from gradio import image_utils, utils
from gradio.components.base import Component
from gradio.data_classes import FileData, GradioModel
from gradio.events import Events

ImageType = Union[np.ndarray, PIL.Image.Image, str]


class EditorValue(TypedDict):
    background: Optional[ImageType]
    layers: list[ImageType]
    composite: Optional[ImageType]


class EditorExampleValue(TypedDict):
    background: Optional[str]
    layers: Optional[list[str | None]]
    composite: Optional[str]


class EditorData(GradioModel):
    background: Optional[FileData] = None
    layers: List[FileData] = []
    composite: Optional[FileData] = None


@dataclasses.dataclass
class Eraser:
    """"""
    A dataclass for specifying options for the eraser tool in the ImageEditor component. An instance of this class can be passed to the `eraser` parameter of `gr.ImageEditor`.
    Parameters:
        default_size: The default radius, in pixels, of the eraser tool. Defaults to ""auto"" in which case the radius is automatically determined based on the size of the image (generally 1/50th of smaller dimension).
    """"""

    default_size: int | Literal[""auto""] = ""auto""


@dataclasses.dataclass
class Brush(Eraser):
    """"""
    A dataclass for specifying options for the brush tool in the ImageEditor component. An instance of this class can be passed to the `brush` parameter of `gr.ImageEditor`.
    Parameters:
        default_size: The default radius, in pixels, of the brush tool. Defaults to ""auto"" in which case the radius is automatically determined based on the size of the image (generally 1/50th of smaller dimension).
        colors: A list of colors to make available to the user when using the brush. Defaults to a list of 5 colors.
        default_color: The default color of the brush. Defaults to the first color in the `colors` list.
        color_mode: If set to ""fixed"", user can only select from among the colors in `colors`. If ""defaults"", the colors in `colors` are provided as a default palette, but the user can also select any color using a color picker.
    """"""

    colors: Union[
        list[str],
        str,
        None,
    ] = None
    default_color: Union[str, Literal[""auto""]] = ""auto""
    color_mode: Literal[""fixed"", ""defaults""] = ""defaults""

    def __post_init__(self):
        if self.colors is None:
            self.colors = [
                ""rgb(204, 50, 50)"",
                ""rgb(173, 204, 50)"",
                ""rgb(50, 204, 112)"",
                ""rgb(50, 112, 204)"",
                ""rgb(173, 50, 204)"",
            ]
        if self.default_color is None:
            self.default_color = (
                self.colors[0] if isinstance(self.colors, list) else self.colors
            )


@document()
class ImageEditor(Component):
    """"""
    Creates an image component that, as an input, can be used to upload and edit images using simple editing tools such
    as brushes, strokes, cropping, and layers. Or, as an output, this component can be used to display images.

    Demos: image_editor
    """"""

    EVENTS = [
        Events.clear,
        Events.change,
        Events.select,
        Events.upload,
    ]
    data_model = EditorData

    def __init__(
        self,
        value: EditorValue | ImageType | None = None,
        *,
        height: int | str | None = None,
        width: int | str | None = None,
        image_mode: Literal[
            ""1"", ""L"", ""P"", ""RGB"", ""RGBA"", ""CMYK"", ""YCbCr"", ""LAB"", ""HSV"", ""I"", ""F""
        ] = ""RGBA"",
        sources: Iterable[Literal[""upload"", ""webcam"", ""clipboard""]] = (
            ""upload"",
            ""webcam"",
            ""clipboard"",
        ),
        type: Literal[""numpy"", ""pil"", ""filepath""] = ""numpy"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        show_download_button: bool = True,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        mirror_webcam: bool = True,
        show_share_button: bool | None = None,
        _selectable: bool = False,
        crop_size: tuple[int | float, int | float] | str | None = None,
        transforms: Iterable[Literal[""crop""]] = (""crop"",),
        eraser: Eraser | None | Literal[False] = None,
        brush: Brush | None | Literal[False] = None,
    ):
        """"""
        Parameters:
            value: Optional initial image(s) to populate the image editor. Should be a dictionary with keys: `background`, `layers`, and `composite`. The values corresponding to `background` and `composite` should be images or None, while `layers` should be a list of images. Images can be of type PIL.Image, np.array, or str filepath/URL. Or, the value can be a callable, in which case the function will be called whenever the app loads to set the initial value of the component.
            height: The height of the displayed images, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the displayed images, specified in pixels if a number is passed, or in CSS units if a string is passed.
            image_mode: ""RGB"" if color, or ""L"" if black and white. See https://pillow.readthedocs.io/en/stable/handbook/concepts.html for other supported image modes and their meaning.
            sources: List of sources that can be used to set the background image. ""upload"" creates a box where user can drop an image file, ""webcam"" allows user to take snapshot from their webcam, ""clipboard"" allows users to paste an image from the clipboard.
            type: The format the images are converted to before being passed into the prediction function. ""numpy"" converts the images to numpy arrays with shape (height, width, 3) and values from 0 to 255, ""pil"" converts the images to PIL image objects, ""filepath"" passes images as str filepaths to temporary copies of the images.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            show_download_button: If True, will display button to download image.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, will allow users to upload and edit an image; if False, can only be used to display images. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            mirror_webcam: If True webcam will be mirrored. Default is True.
            show_share_button: If True, will show a share icon in the corner of the component that allows user to share outputs to Hugging Face Spaces Discussions. If False, icon does not appear. If set to None (default behavior), then the icon appears if this Gradio app is launched on Spaces, but not otherwise.
            crop_size: The size of the crop box in pixels. If a tuple, the first value is the width and the second value is the height. If a string, the value must be a ratio in the form `width:height` (e.g. ""16:9"").
            transforms: The transforms tools to make available to users. ""crop"" allows the user to crop the image.
            eraser: The options for the eraser tool in the image editor. Should be an instance of the `gr.Eraser` class, or None to use the default settings. Can also be False to hide the eraser tool.
            brush: The options for the brush tool in the image editor. Should be an instance of the `gr.Brush` class, or None to use the default settings. Can also be False to hide the brush tool, which will also hide the eraser tool.
        """"""
        self._selectable = _selectable
        self.mirror_webcam = mirror_webcam
        valid_types = [""numpy"", ""pil"", ""filepath""]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        self.type = type
        self.height = height
        self.width = width
        self.image_mode = image_mode
        valid_sources = [""upload"", ""webcam"", ""clipboard""]
        if isinstance(sources, str):
            sources = [sources]  # type: ignore
        for source in sources:
            if source not in valid_sources:
                raise ValueError(
                    f""`sources` must be a list consisting of elements in {valid_sources}""
                )
        self.sources = sources

        self.show_download_button = show_download_button

        self.show_share_button = (
            (utils.get_space() is not None)
            if show_share_button is None
            else show_share_button
        )

        self.crop_size = crop_size
        self.transforms = transforms
        self.eraser = Eraser() if eraser is None else eraser
        self.brush = Brush() if brush is None else brush

        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def convert_and_format_image(
        self,
        file: FileData | None,
    ) -> np.ndarray | PIL.Image.Image | str | None:
        if file is None:
            return None
        im = PIL.Image.open(file.path)
        if file.orig_name:
            p = Path(file.orig_name)
            name = p.stem
            suffix = p.suffix.replace(""."", """")
            if suffix in [""jpg"", ""jpeg""]:
                suffix = ""jpeg""
        else:
            name = ""image""
            suffix = ""png""
        with warnings.catch_warnings():
            warnings.simplefilter(""ignore"")
            im = im.convert(self.image_mode)
        if self.crop_size and not isinstance(self.crop_size, str):
            im = image_utils.crop_scale(
                im, int(self.crop_size[0]), int(self.crop_size[1])
            )
        return image_utils.format_image(
            im,
            cast(Literal[""numpy"", ""pil"", ""filepath""], self.type),
            self.GRADIO_CACHE,
            format=suffix,
            name=name,
        )

    def preprocess(self, payload: EditorData | None) -> EditorValue | None:
        """"""
        Parameters:
            payload: An instance of `EditorData` consisting of the background image, layers, and composite image.
        Returns:
            Passes the uploaded images as an instance of EditorValue, which is just a `dict` with keys: 'background', 'layers', and 'composite'. The values corresponding to 'background' and 'composite' are images, while 'layers' is a `list` of images. The images are of type `PIL.Image`, `np.array`, or `str` filepath, depending on the `type` parameter.
        """"""
        if payload is None:
            return payload

        bg = self.convert_and_format_image(payload.background)
        layers = (
            [self.convert_and_format_image(layer) for layer in payload.layers]
            if payload.layers
            else None
        )
        composite = self.convert_and_format_image(payload.composite)
        return {
            ""background"": bg,
            ""layers"": [x for x in layers if x is not None] if layers else [],
            ""composite"": composite,
        }

    def postprocess(self, value: EditorValue | ImageType | None) -> EditorData | None:
        """"""
        Parameters:
            value: Expects a EditorValue, which is just a dictionary with keys: 'background', 'layers', and 'composite'. The values corresponding to 'background' and 'composite' should be images or None, while `layers` should be a list of images. Images can be of type `PIL.Image`, `np.array`, or `str` filepath/URL. Or, the value can be simply a single image (`ImageType`), in which case it will be used as the background.
        Returns:
            An instance of `EditorData` consisting of the background image, layers, and composite image.
        """"""
        if value is None:
            return None
        elif isinstance(value, dict):
            pass
        elif isinstance(value, (np.ndarray, PIL.Image.Image, str)):
            value = {""background"": value, ""layers"": [], ""composite"": value}
        else:
            raise ValueError(
                ""The value to `gr.ImageEditor` must be a dictionary of images or a single image.""
            )

        layers = (
            [
                FileData(
                    path=image_utils.save_image(
                        cast(Union[np.ndarray, PIL.Image.Image, str], layer),
                        self.GRADIO_CACHE,
                        format=""png"",
                    )
                )
                for layer in value[""layers""]
            ]
            if value[""layers""]
            else []
        )

        return EditorData(
            background=FileData(
                path=image_utils.save_image(value[""background""], self.GRADIO_CACHE)
            )
            if value[""background""] is not None
            else None,
            layers=layers,
            composite=FileData(
                path=image_utils.save_image(
                    cast(Union[np.ndarray, PIL.Image.Image, str], value[""composite""]),
                    self.GRADIO_CACHE,
                )
            )
            if value[""composite""] is not None
            else None,
        )

    def example_payload(self) -> Any:
        return {
            ""background"": file(
                ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png""
            ),
            ""layers"": [],
            ""composite"": None,
        }

    def example_value(self) -> Any:
        return {
            ""background"": ""https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png"",
            ""layers"": [],
            ""composite"": None,
        }
","The code defines an `ImageEditor` component for Gradio, which allows users to upload and edit images using tools like brushes, strokes, cropping, and layers. It can also be used to display images.

- The component accepts various parameters such as initial image(s), height, width, image mode, sources, type, label, and more.
- It provides options for the eraser tool and brush tool with customizable settings like default size, colors, color mode, etc.
- The component can convert and format images, preprocess uploaded images, and postprocess edited images.
- It includes methods for generating example payload and value for the component.

Overall, the `ImageEditor` component provides a versatile tool for image editing and display within the Gradio framework.","[-0.033985764, 0.04415166, -0.023728075, -0.01391787, -0.016453607, -0.045367897, 0.015822541, 0.04213225, -0.049750935, -0.0047043087, 0.017130569, -0.011393607, -0.011932882, -0.02064159, 0.026321182, -0.013367122, -0.02336091, -0.007452314, -0.024967259, 0.059067763, 0.013906396, -0.02341828, -0.00029742563, 0.06457525, 0.03382513, -0.057553202, -0.03988336, 0.045390844, -0.023016691, -0.015099684, -0.045597374, -0.022580683, 0.01973515, -0.027743949, 0.0003804323, -0.0016967065, 0.022110252, 0.033136692, -0.033090796, -0.015283267, -0.029442089, -0.014617779, -0.059480824, 0.013091748, -0.037841003, 0.023257645, -0.009947892, 0.031415604, 0.00362576, 0.018312383, -0.012391838, 0.018094378, 0.0057340935, -0.03175982, -0.0063967127, 0.0076244227, -0.02955683, 0.0059492295, -0.033412065, -0.037818056, 0.04137497, -0.018736918, 0.021330025, 0.024049345, -0.02868481, 0.0027523076, -0.019207349, 0.011072337, 0.0014414117, 0.00092795363, 0.045872748, -0.031232022, -8.462019e-05, -0.059480824, -0.004276905, -0.04754794, -0.026481817, -0.06999094, 0.028386489, -0.034582406, -0.036670662, 0.01690109, -0.054340504, -0.021341499, -0.04029642, 0.03937851, -0.018679548, -0.00036286286, -0.0031237758, -0.05356028, -0.07338722, 0.012506577, 0.011554241, 0.048190482, -0.004196588, 0.0059377556, -0.039837465, -0.019390931, 0.015971702, 0.05874649, 0.032172885, 0.017153516, -0.03690014, -0.04383039, 0.06989915, -0.0597103, 0.023051113, 0.041191388, -0.009615148, -0.014548936, -0.020871067, -0.03070422, -0.032287624, 0.032035198, 0.016281499, -0.07063348, 0.027583314, 0.023464175, -0.039126083, -0.01593728, -0.025104946, -0.011020704, -0.016602768, -0.022144673, 0.040594745, -0.05020989, -0.028615966, -0.017910795, -0.046790663, -0.009414354, -0.0040933224, 0.020618642, 0.036946036, -0.06654876, -0.028409436, 0.036188755, -0.007108096, -0.0038064744, -0.056268126, -0.020595694, 0.06751257, -0.014457145, 0.0017956691, -0.013149117, -0.018645126, -0.055946853, -0.05746141, 0.033756286, -0.027147304, -0.0065344, 0.009592201, 0.0056509078, -0.014778415, -0.048878916, -0.024485353, 0.03061243, 0.027055513, -0.022500366, -0.03442177, -0.0053812703, -0.019081136, 0.025540955, 0.024324719, 0.013562178, -0.03552327, -0.025586851, -0.009374196, 0.01871397, -0.027055513, 0.038460594, -0.024072293, -0.027812792, -0.034077555, 0.0032930162, 0.0069933566, -0.013573652, 0.039814517, -0.004144955, -0.008444808, 0.0025242632, -0.009552042, -0.0003391979, -0.038667124, 0.059067763, -0.017784582, -0.00685567, -0.0336186, -0.04502368, -0.049567353, -0.039424405, 0.0019075399, 0.02321175, 0.0018243539, 0.008766078, 0.022087304, -0.037267305, 0.005516089, 0.0088005, -0.011324763, -0.008593969, 0.06035284, 0.035224948, 0.03584454, 0.0033819391, -0.006522926, -0.0117263505, -0.012724582, 0.0027164517, 0.017773109, -0.009305352, -0.0026562135, -0.03850649, 0.0047674156, -0.046790663, -0.043233745, -0.00912177, 0.0012183873, 0.03827701, -0.04224699, -0.006063969, -0.05181624, 0.0056365654, 0.028088165, -0.019528618, 0.0007651673, -0.007578527, 0.025196737, -0.031736873, 0.020079367, -0.029235559, 0.043463226, 0.014629253, -0.035775695, -0.029373245, 0.051770344, -0.035454426, 0.019861363, -0.029625673, 0.0714596, 0.024072293, -0.022970796, -0.0221332, 0.029625673, -0.018381227, -0.03657887, 0.03155329, 4.3587464e-05, -0.041352022, 0.03499547, 0.061178964, 0.011909933, -0.003967109, 0.0135966, 0.020985808, 0.016453607, 0.04126023, 0.017991113, 0.03777216, -0.028455332, -0.011554241, 0.028638914, -0.021307077, -0.009173403, 0.008731657, 0.022110252, 0.051862136, 0.001508821, 0.040778328, -5.647322e-05, 0.0010290676, -0.013986713, 0.025678642, 0.027652157, 0.0065975063, 0.013986713, 0.02687193, 0.026504764, 0.039630935, -0.00063393434, 0.024806624, -0.033205535, -0.0071941502, -0.035683904, 0.03917198, -0.046125174, -0.0039814515, 0.036464132, -0.020859594, 0.012873743, -0.031851612, 0.051036015, -0.025265582, 0.060857695, 0.006551611, -0.0041134018, 0.007744899, -0.001622126, -0.003238515, 0.014468619, 0.0070679374, 0.019608937, 0.0011588663, -0.0026160546, -0.019264719, -0.03201225, 0.016992882, 0.027766896, 0.01146245, -0.014870206, -0.017153516, 0.036441185, 0.040686537, -0.004170771, -0.02336091, -0.056405813, 0.041742135, 0.014652201, 0.0367854, 0.01236889, 0.005123107, 0.02441651, 0.018358279, 0.040066943, -0.055809166, -0.047088984, -0.062968895, -0.044013973, -0.024118189, -0.005378402, -0.053927444, 0.02815701, 0.03563801, -0.04213225, 0.04277479, 0.045666218, 0.013481861, -0.056405813, 0.03839175, -0.03614286, -0.008846396, 0.010739593, -0.030451795, 0.027721, 0.043004267, 0.034513563, 0.0033733337, -0.06012336, 0.020331794, -0.0053956127, -0.032471206, -0.008806237, -0.01339007, -0.024393562, -0.012162359, 0.032884266, -0.0033790707, -0.04929198, -0.047318462, -0.07508536, -0.029143767, -0.033572704, 0.021456238, -0.025013154, 0.03862123, -0.034467667, -0.015650433, -0.036074016, -0.021249708, -0.015558641, -0.028134063, 0.024577146, 0.055120733, -0.012196781, -0.008565284, -0.04892481, 0.013826079, 0.017153516, -0.018473018, -0.059572615, -0.0020366216, 0.03701488, 0.0036601818, 0.026803087, 0.0012886651, -0.0026805955, -0.035660956, 0.0004973229, 0.02891429, -0.008100591, 0.019838415, -0.032356467, -0.008869343, -0.030681273, -0.0149161015, 0.034697145, 0.022833109, -0.00919635, 0.024026398, 0.024577146, 0.035202, -0.00989626, -0.015076736, -0.021685716, 0.03412345, -0.008496441, -0.033572704, 0.042935424, 0.011944355, 0.009620885, -0.00054070866, 0.029166715, 0.026183495, 0.022970796, 0.0034794675, 0.004122007, -0.0103494795, 0.017887847, -0.046538237, -0.018473018, 0.066870034, -0.0016665874, 0.0018343936, -0.011697666, -0.054202817, 0.043027215, 0.010085579, 0.018920502, -0.018576283, -0.0071539916, -0.055487897, -0.02084812, 0.018266488, 0.036555924, 0.007274468, 0.02441651, -0.014812836, 0.023200275, 0.009454514, 0.027124356, 0.06526368, -0.050163995, 0.025357373, 0.040365264, 0.038368803, -0.031943403, -0.0049395245, -0.010842858, -0.003195488, -0.03614286, -0.0319893, 0.006947461, -0.008961135, -0.0045752274, 0.015214424, 0.0016852326, -0.007957166, 0.02941914, 0.026642451, 0.0064253975, -0.03680835, -0.036555924, -0.0064253975, -0.021008756, 0.030222315, 0.008766078, -0.008943924, -0.027950479, 0.033457965, -0.045253158, -0.0074752616, 0.013653969, 0.04552853, 0.023051113, 0.040571798, -0.028730705, -0.02233973, -0.026917826, -0.012942586, -0.0042539574, 0.011135443, -0.031713925, -0.005960704, 0.023108482, -0.034926627, 0.00026407954, 0.061362546, -0.028340593, -0.049246084, 0.03125497, -0.046584133, -0.022408575, 0.011106758, -0.044587668, -0.009597938, 0.03315964, -0.009552042, -0.03582159, 0.002957404, -0.013332699, -0.031209074, 0.016820773, -0.009597938, 0.003769184, 0.06558495, 0.024577146, -0.0008842093, 0.031163178, -0.003327438, -0.0013453176, -0.026045809, -0.023016691, 0.003978583, 0.029901046, 0.0130688, 0.040135786, -0.028065218, -0.018174697, 0.025609799, -0.023682179, 0.00925372, -0.013160591, 0.030245265, -0.0037548416, -0.015260319, 0.015134106, 0.0052407146, -0.02985515, -0.035890434, 0.025885172, -0.008662812, -0.036624767, -0.024232928, -0.015042314, 0.0405259, -0.06760436, -0.040801276, -0.001031936, 0.008714446, 0.003803606, -0.055900957, 0.029235559, -0.0045350688, 0.020618642, 0.00789406, -0.015225898, 0.054661773, -0.019723676, -0.07008273, 0.023705127, 0.03263184, 0.04011284, -0.04617107, 0.04841996, -0.010091316, -0.0078022685, 0.029487984, -0.0073088896, 0.004707177, -0.0130688, -0.0038982658, 0.003803606, -0.0049710777, -0.0013388635, 0.029029028, -0.021892248, 0.017004356, 0.0076645813, -0.03382513, -0.023865763, 0.010429797, -0.018518914, 0.03584454, 0.005398481, 0.053697966, 0.034284085, 0.033457965, 0.00024651008, -0.0020366216, -0.010739593, -0.0011466753, -0.014732518, -0.03582159, -0.008817711, -0.013837553, -0.020297373, -0.003272937, -0.01578812, -0.018484492, 0.027284991, 0.0021499265, -0.00940288, 0.03511021, -6.9605485e-05, 0.019482723, 0.0007458051, 0.01242626, 0.013929344, 0.039493248, -0.01138787, 0.005593538, 0.00957499, -0.021295603, -0.014422723, 0.03543148, 0.055442, 0.002742268, 0.032058146, -0.013527757, -0.05576327, -0.035683904, -0.025862224, 0.01540948, -0.04213225, -0.012139412, -0.019161453, -0.00054070866, -0.01157719, 0.04424345, 0.027262043, -0.0074695246, -0.005283742, -0.023326488, -0.00029366073, -0.026390025, 0.0070736744, 0.044794198, 0.015902858, -0.026688349, 0.021157917, 0.035775695, 0.010200319, 0.01888608, 0.017623948, 0.015134106, 0.008920976, -0.014686623, 0.00861118, -0.023682179, -0.003155329, -0.021685716, 0.015593063, 0.03453651, 0.0016034809, 0.018059956, 0.0041822456, 0.018427122, -0.0011373528, 0.022741318, 0.018415648, -0.0010218964, -0.03740499, -0.005814411, 0.015180002, -0.002760913, 0.000948033, 0.0067122458, -0.028225854, 0.027147304, -0.055625584, -0.0061270753, -0.018851658, -0.017738687, -0.004514989, -0.0141702965, 0.014411249, 0.0022531918, 0.0005568439, -0.032907214, -0.029901046, 0.036762454, -0.022500366, -0.0065573477, 0.0194483, -0.0037950005, 0.02955683, -0.021708665, 0.0074006813, -0.0325171, 0.001878855, 0.015558641, -0.008702971, 0.0052148984, -0.027101409, 0.010940387, 0.0012707371, -0.02678014, -0.014950523, 0.0016508108, 0.007676055, -0.038024586, -0.008221067, 0.016201181, -0.004813311, -0.011909933, -0.019620411, 0.06452935, 0.026114652, -0.02122676, 0.014445671, -0.042384677, 0.025081998, 0.019390931, -0.028615966, 0.001956304, -0.018748391, -0.0033905446, -0.0085366, 0.001490176, 0.01994168, -0.008903765, -3.020869e-05, 0.019161453, -0.02073338, -0.0020050684, 0.018209118, -0.015925806, 0.036923088, 0.012139412, 0.0046784924, 0.005814411, -0.030796012, -0.0057111457, -0.074901775, -0.011921408, 0.017876374, -0.035890434, -0.0010706605, -0.008186645, -0.016304446, -0.0017096146, -0.027858688, -0.024347667, 0.024623042, 0.002702109, 0.00057764037, 0.052412886, 0.012816373, -0.014365353, 0.019023767, -0.008886554, 0.0154439015, 0.023119958, -0.006299184, -0.02815701, -0.03295311, -0.012862269, 0.01520295, 0.0013768709, -0.01567338, 0.024531249, 0.013160591, 0.006368028, -0.050301682, 0.009202087, -0.027009618, 0.0016508108, -0.011772246, -0.005742699, -0.033389118, 0.0038925288, 0.018427122, 0.03508726, -0.026206443, -0.0050829486, -0.021834878, -0.03490368, 0.033389118, -5.9520982e-05, 0.033113744, 0.023005217, 0.0016708903, 0.01801406, 0.005338243, 0.0020351873, 0.025678642, 0.0073834704, 0.028386489, -0.04874123, -0.013998187, 0.0037892635, -0.004030216, -0.0073433113, -0.0013302581, -0.023200275, 0.054983046, 0.019540092, -0.024439458, -0.0034593882, 0.010504378, -0.013401544, 0.008398913, -0.028845446, -0.008450545, -0.021697192, 0.0028225854, 0.016074969, -0.01274753, -0.015891384, -0.0048592067, 0.048603542, -0.010274899, -0.014686623, -0.034284085, 0.014353879, 0.025242632, 0.04405987, -0.01021753, -0.054753564, -0.01418177, 0.011267394, -0.0038781865, 0.018404175, -0.013894922, 0.0067294566, 0.013768709, 0.0008411821, 0.03543148, 0.025885172, -0.014009661, -0.016132338, -0.044105764, -0.0033044901, -0.0005919828, 0.014571884, -0.014686623, 0.03382513, 0.014342405, -0.011089548, 0.031002544, -0.013883448, 0.02485252, 0.023796918, 0.008955398, 0.028409436, -0.007899797, 0.026183495, -0.003769184, 0.027468575, 0.0067237196, -0.016270025, -0.009316826, -0.01086007, -0.013768709, 0.0003858107, 0.06374912, 0.0073261005, 0.019953154, 0.023796918, -0.019700728, 0.00711957, -0.008358754, -0.02400345, -0.0110952845, -0.045207262, 0.031002544, -0.0154439015, 0.03293016, -0.0013101787, 0.004202325, 0.03540853, 0.0067351935, -0.0096036745, -0.013149117, 0.037955742, 0.011582927, -0.0431649, -0.024278823, -0.0048391274, 0.038758915, 0.007274468, -0.010183108, -0.0143883005, -0.017555105, 0.011806668, -0.007945692, 0.016774878, 0.01652245, -0.011875511, -0.02321175, -0.02336091, 0.0148013625, 0.022603631, 0.046859507, -0.020182632, -0.030038733, -0.02014821, 0.00074293657, 0.006672087, 0.030451795, 0.047823317, -0.03350386, 0.0027264913, -0.02207583, 0.03637234, 0.018358279, 0.030543586, -0.019815467, 0.000787398, -0.007285942, 0.0040330845, -0.04190277, -0.0138490265, -0.052871842, -0.010722382, -0.017704265, 0.0076301596, -0.021731613, 0.008060432, 0.032402363, -0.013562178, -0.011278868, -0.023429753, -0.0005281591, 0.033893973, -0.0047961003, 0.016040547, 0.015007893, 0.033733338, 0.0005600709, -0.010510115, 0.010728119, 0.0019003687, -0.008582495, 0.0068958285, -0.013378596, -0.014021135, 0.027950479, 0.034949575, -0.015925806, -0.0044318032, 0.009833153, -0.010905965, 0.01958599, 0.0069130394, 0.03286132, -0.036968984, -0.01587991, -0.018094378, -0.0038839234, 0.024554199, -0.0023937474, -0.05218341, 0.009764309, -0.048787124, 0.016545398, -0.023257645, -0.011382133, -0.009615148, -0.02815701, 0.036831297, -0.008473493, 0.033572704, 0.05883828, -0.0025773302, -0.0014801362, -0.024668938, -0.004053164, 0.012586894, 0.012827847, -0.032999005, -0.013355648, -0.027858688, -0.01353923, 0.02058422, 0.0028426647, -0.024577146, 0.025472112, -0.002177177, -0.02032032, 0.011319026, 0.020836646, 0.013814605, 0.023842815, 0.0045293313, -0.031599186, 0.020572746, -0.00051130675, -0.04353207, 0.053422593, 0.007681792, 0.020767802, 0.024921363, 3.7872913e-05, 0.0050370526, -0.067696154, -0.0031295128, 0.0048706806, -0.008909502, 0.021777509, 0.020515377, -0.05736962, -0.0017727213, 0.022397099, -0.0071539916, 0.021559503, 0.024898415, 0.011244446, -0.012862269, 0.011204287, 0.017819004, -0.030314108, 0.01567338, 0.0410537, -0.025976965, 0.004572359, -0.0070048305, 0.030428847, -0.006379502, -0.038460594, -0.00015364302, -0.00944304, 0.012300047, 0.060215153, -0.017853426, 0.0009516186, -0.05172445, -0.009907734, 0.0141702965, -0.017463313, -0.010435534, -0.00964957, -0.007997325, 0.019471249, -0.0054529826, -0.010251951, 0.009741361, 0.024967259, 0.016786352, 0.01157719, -0.011433765, -0.01979252, 0.025724538, -0.013378596, -0.017463313, 0.004122007, 0.043096058, 0.021892248, -0.0012972705, 0.021995513, -0.03648708, -0.02698667, 0.0024324718, 0.0053325063, 0.035982225, 0.0024525514, -0.040984858, -0.033021953, -0.038873654, 0.017050251, 0.026642451, -0.024600094, 0.006620454, 0.0051919506, 0.009930681, -0.027721, 0.021525081, -0.02377397, 0.0059549664, -0.0056021437, 0.016074969, -0.008066169, 0.024301771, 0.024554199, -0.020825172, -0.03508726, 0.0077219508, 0.045276105, 0.039699778, 0.012667213, 0.00385237, -0.0148013625, 0.0018401305, 0.009901997, -0.002511355, -0.012598368, -0.002260363, -0.013022904, -0.037955742, -0.008714446, -0.011496872, 0.0009824547, -0.008324332, -0.003869581, 0.028202906, 0.014870206, 0.016568346, 0.042224042, -0.02420998, 0.046492342, -0.024554199, -0.014973471, 0.061683815, 0.01850744, -0.04277479, -0.0120476205, -0.014216192, -0.005843096, 0.035982225, 0.02307406, 0.0025744617, 0.018668074, -0.012713108, -0.018679548, -0.020113789, 0.012380364, -0.009414354, 0.012495103, -0.012529525, 0.0183927, -0.009844627, 0.016178234, 0.03474304, 0.011043652, -0.02336091, -0.016247077, 0.01418177, 0.008702971, 0.018082904, -0.013080274, 0.024967259, 0.024347667, 0.007136781, -0.056772977, -0.0027709526, 0.025403269, -0.03763447, 0.025311477, 0.018117325, -0.027262043, -0.0014019702, -0.021215286, -0.0052349777, 0.012506577, 0.006218867, -0.02921261, 0.007699003, 0.018335331, -0.015707802, 0.017130569, -0.035041366, 0.016866669, -0.031828664, -0.0018530388, 0.016832247, -0.02655066, -0.006620454, 0.0117320875, 0.0336186, 0.010401112, 0.016717508, -0.0011961566, 0.063290164, 0.01657982, -0.009408617, -0.0037950005, 0.03488073, -0.043876287, -0.020859594, -0.014285035, 0.027973427, -0.028661862, -0.014835784, -0.043004267, -0.035477374, 0.021410342, 0.014778415, 0.0074982094, -0.009334037, -0.010469955, 0.014525988, -0.0068900916, -0.01988431, -0.029625673, 0.024554199, -0.018277962, 0.037290253, -0.048052795, -0.0045408057, 0.032149937, 0.063795015, 0.03511021, -0.007825216, 0.0042310096, 0.004566622, -0.0145948315, 0.01994168, -0.020664537, 0.009454514, 0.022247938, 0.019390931, 0.009127507, 0.007354785, -0.012150886, 0.0066032433, -0.019310614, -0.01391787, -0.03114023, 0.007125307, 0.0110666, 0.013252382, 0.011364922, 0.0035397056, -0.016201181, 0.0022101647, 0.013734288, -0.0030635376, -0.021766035, -0.010544537, 0.06388681, 0.0020552666, 0.021949617, 0.006695035, 0.025770433, -0.013034378, -0.008203856, 0.03295311, -0.0015948755, 0.020308847, -0.008198119, 0.029832203, -0.04233878, 0.012701634, -0.006786826, 0.022006987, 0.017348573, 0.028340593, -0.0005299519, -0.04477125, -0.027698053, -0.0044863042, 0.027009618, -0.041237283, 0.043807443, 0.025311477, -0.013057326, -0.017727213, 0.028753653, 0.00989626, 0.010974809, -0.00013759745, 0.040135786, 0.026045809, -0.008852133, -0.025518008, 0.0039498983, 0.0059549664, 0.011691929, 0.017841952, 0.008043221, -0.01646508, -0.013814605, 0.003565522, 0.008984082, 0.019264719, 0.025357373, -0.020894015, 0.024508301, 0.008634128, 0.010492904, -0.03839175, 0.011187076, -0.0070392527, -0.010062631, -0.018484492, -0.008427598, -0.023028165, -0.025426216, 0.03091075, 0.031094335, 0.0041879825, 0.006649139, 0.004090454, 0.0168093, 0.017497735, -0.04169624, 0.00872592, -0.008955398, -0.019551566, 0.017187938, -0.0025472112, -0.012139412, -0.040938962, -0.03306785, 0.030841907, -0.031415604, 0.0043514855, 0.005246452, -0.03754268, -0.013688391, 0.03283837, 0.004919445, 0.060720008, 0.0020896886, -0.0002635417, 0.016889617, -0.008697234, 0.03231057, -0.036968984, -0.0055906693, -0.03639529, -0.019425353, 0.006482767, -0.019264719, 0.0020997282, 0.0127934255, -0.017199412, -0.007676055, -0.013229434, -0.025104946, -0.0091791395, 0.0054587196, 0.020767802, 0.0071482547, 0.00815796, 0.016969934, -0.01941388, -0.029189663, -0.028661862, -0.001675193, 0.019987576, 0.017692791, 0.0025830672, -0.0151226325, 0.013814605, 0.020618642, -0.001037673, -0.011101021, -0.022706896, -0.012506577, 0.04137497, -0.015478324, 0.017853426, -0.03272363, 0.00893245, -0.0071712025, -0.016797826, 0.005430035, -0.013871974, -0.0084390715, 0.018335331, 0.01418177, 0.013413018, 0.026665399, 0.046790663, 0.0056308284, 0.030084629, -0.0053525856, 0.0154439015, 0.029029028, 0.021100547, -0.00589186, -0.0012226901, -0.019390931, -0.006786826, 0.0015030841, -0.025357373, 0.022190569, 0.012713108, -0.02298227, 0.0053095585, 0.019861363, -0.0051976875, 0.01153703, 0.046262864, -0.041742135, 0.030933699, 0.0027350967, 0.012965534, -0.028707758, 0.01036669, -0.042315833, 0.01327533, 0.0138605, 0.0019175796, 0.0074867355, 0.00821533, -0.031484447, 0.010900228, -0.014307983, -0.030382952, -0.01242626, -0.006631928, 0.0036343655, -0.0148013625, -0.040709484, -0.024714833, -0.0052091614, -0.014204718, -0.006815511, -0.021008756, -0.026527712, 0.043968078, 0.033412065, 0.006953198, -0.0067409305, 0.01859923, -0.02043506, 0.021134969, 0.030107576, 0.021513607, -0.014399774, 0.010533063, 0.0015475455, 0.021421816, 0.013286804, 0.017497735, 0.0010469956, -0.052917738, 0.008846396, 0.023223223, -0.02602286, 0.017348573, 0.021295603, 0.050301682, -0.0054644565, 0.013149117, 0.032195833, -0.009523357, 0.023865763, -0.06806332, -0.002545777, 0.013871974, 0.036831297, 0.023911659, 0.005814411, -0.008094854, -0.016292972, -0.018495966, -0.00944304, -0.0049079712, 0.0074006813, 0.035752747, 0.042614155, -0.019207349, -0.020836646, -0.006672087, 0.003906871, 0.019161453, 0.001884592, -0.00989626, -0.00989626, 0.027583314, -0.0007142518, -0.0325171, -0.006224604, -0.010303584, -0.012001725, 0.002058135, -0.003935556, -0.030107576, -0.01745184, 0.022683948, 0.007354785, -0.023934606, -0.03891955, -0.00815796, -0.028661862, 0.0357298, -0.012150886, -0.0052407146, -0.039722726, -0.015478324, -0.018404175, -0.03490368, -0.0067581413, -0.0033618598, -0.008278436, -0.013619548, 0.027652157, 0.0039154766, -0.0012578289, 0.030451795, -0.03224173, -0.018323857, -0.051632658, 0.038667124, 0.02783574, 0.016063495, 0.012965534, 0.033733338, -0.007750636, 0.026435921, -0.018289436, -0.04187982, 0.04403692, 0.002224507, 0.0052292407, -0.03639529, -0.010928913, 0.0046899663, 0.0077276877, 0.0065688216, 0.030199368, -0.0048018373, -0.0113305, 0.0027881635, -0.030382952, -0.011978777, -0.0013489032, 0.040594745, -0.008203856, 0.0378869, 0.012185307, 0.0026332657, 0.018209118, -0.009081611, -0.0012958363, 0.014216192, -0.010544537, 0.013998187, 0.010596169, 0.0058660437, 0.0022345467, 0.015317689, -0.0035970751, 0.035592113, 0.015225898, -0.016327394, -0.008186645, 0.030428847, -0.015432428, -0.008645602, -0.020389164, -0.06787974, 0.005966441, -0.0056795925, 0.007435103, 0.024301771, -0.0178649, -0.027996374, -0.004991157, -0.005349717, 0.022190569, 0.00036824125, -0.011129706, 0.007607212]"
../../../gradio,../../../gradio/gradio/components,file.pyi,"""""""gr.File() component""""""

from __future__ import annotations

import tempfile
import warnings
from pathlib import Path
from typing import Any, Callable, List, Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.data_classes import FileData, GradioRootModel
from gradio.events import Events
from gradio.utils import NamedString

set_documentation_group(""component"")


class ListFiles(GradioRootModel):
    root: List[FileData]

    def __getitem__(self, index):
        return self.root[index]

    def __iter__(self):
        return iter(self.root)

from gradio.events import Dependency

@document()
class File(Component):
    """"""
    Creates a file component that allows uploading one or more generic files (when used as an input) or displaying generic files or URLs for download (as output).

    Demo: zip_files, zip_to_json
    """"""

    EVENTS = [Events.change, Events.select, Events.clear, Events.upload]

    def __init__(
        self,
        value: str | list[str] | Callable | None = None,
        *,
        file_count: Literal[""single"", ""multiple"", ""directory""] = ""single"",
        file_types: list[str] | None = None,
        type: Literal[""filepath"", ""binary""] = ""filepath"",
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        height: int | float | None = None,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: Default file(s) to display, given as a str file path or URL, or a list of str file paths / URLs. If callable, the function will be called whenever the app loads to set the initial value of the component.
            file_count: if single, allows user to upload one file. If ""multiple"", user uploads multiple files. If ""directory"", user uploads all files in selected directory. Return type will be list for each file in case of ""multiple"" or ""directory"".
            file_types: List of file extensions or types of files to be uploaded (e.g. ['image', '.json', '.mp4']). ""file"" allows any file to be uploaded, ""image"" allows only image files to be uploaded, ""audio"" allows only audio files to be uploaded, ""video"" allows only video files to be uploaded, ""text"" allows only text files to be uploaded.
            type: Type of value to be returned by component. ""file"" returns a temporary file object with the same base name as the uploaded file, whose full path can be retrieved by file_obj.name, ""binary"" returns an bytes object.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise.sed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            height: The maximum height of the file component, specified in pixels if a number is passed, or in CSS units if a string is passed. If more files are uploaded than can fit in the height, a scrollbar will appear.
            interactive: if True, will allow users to upload a file; if False, can only be used to display files. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        self.file_count = file_count
        if self.file_count in [""multiple"", ""directory""]:
            self.data_model = ListFiles
        else:
            self.data_model = FileData
        self.file_types = file_types
        if file_types is not None and not isinstance(file_types, list):
            raise ValueError(
                f""Parameter file_types must be a list. Received {file_types.__class__.__name__}""
            )
        valid_types = [
            ""filepath"",
            ""binary"",
        ]
        if type not in valid_types:
            raise ValueError(
                f""Invalid value for parameter `type`: {type}. Please choose from one of: {valid_types}""
            )
        if file_count == ""directory"" and file_types is not None:
            warnings.warn(
                ""The `file_types` parameter is ignored when `file_count` is 'directory'.""
            )
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )
        self.type = type
        self.height = height

    def _process_single_file(self, f: FileData) -> NamedString | bytes:
        file_name = f.path
        if self.type == ""filepath"":
            file = tempfile.NamedTemporaryFile(delete=False, dir=self.GRADIO_CACHE)
            file.name = file_name
            return NamedString(file_name)
        elif self.type == ""binary"":
            with open(file_name, ""rb"") as file_data:
                return file_data.read()
        else:
            raise ValueError(
                ""Unknown type: ""
                + str(type)
                + "". Please choose from: 'filepath', 'binary'.""
            )

    def preprocess(
        self, payload: ListFiles | FileData | None
    ) -> bytes | str | list[bytes] | list[str] | None:
        """"""
        Parameters:
            payload: File information as a FileData object, or a list of FileData objects.
        Returns:
            Passes the file as a `str` or `bytes` object, or a list of `str` or list of `bytes` objects, depending on `type` and `file_count`.
        """"""
        if payload is None:
            return None

        if self.file_count == ""single"":
            if isinstance(payload, ListFiles):
                return self._process_single_file(payload[0])
            return self._process_single_file(payload)
        if isinstance(payload, ListFiles):
            return [self._process_single_file(f) for f in payload]  # type: ignore
        return [self._process_single_file(payload)]  # type: ignore

    def _download_files(self, value: str | list[str]) -> str | list[str]:
        downloaded_files = []
        if isinstance(value, list):
            for file in value:
                if client_utils.is_http_url_like(file):
                    downloaded_file = processing_utils.save_url_to_cache(
                        file, self.GRADIO_CACHE
                    )
                    downloaded_files.append(downloaded_file)
                else:
                    downloaded_files.append(file)
            return downloaded_files
        if client_utils.is_http_url_like(value):
            downloaded_file = processing_utils.save_url_to_cache(
                value, self.GRADIO_CACHE
            )
            return downloaded_file
        else:
            return value

    def postprocess(self, value: str | list[str] | None) -> ListFiles | FileData | None:
        """"""
        Parameters:
            value: Expects a `str` filepath or URL, or a `list[str]` of filepaths/URLs.
        Returns:
            File information as a FileData object, or a list of FileData objects.
        """"""
        if value is None:
            return None
        value = self._download_files(value)
        if isinstance(value, list):
            return ListFiles(
                root=[
                    FileData(
                        path=file,
                        orig_name=Path(file).name,
                        size=Path(file).stat().st_size,
                    )
                    for file in value
                ]
            )
        else:
            return FileData(
                path=value,
                orig_name=Path(value).name,
                size=Path(value).stat().st_size,
            )

    def process_example(self, input_data: str | list | None) -> str:
        if input_data is None:
            return """"
        elif isinstance(input_data, list):
            return "", "".join([Path(file).name for file in input_data])
        else:
            return Path(input_data).name

    def example_payload(self) -> Any:
        if self.file_count == ""single"":
            return file(
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            )
        else:
            return [
                file(
                    ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
                )
            ]

    def example_value(self) -> Any:
        if self.file_count == ""single"":
            return ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
        else:
            return [
                ""https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf""
            ]

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def clear(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def upload(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `File` component in Gradio, which allows users to upload one or more generic files or display files for download. The component can be customized with parameters such as the type of files allowed, the type of value to be returned, label, height, and visibility. The component provides methods for preprocessing, postprocessing, and handling events like change, select, clear, and upload. The component can be used in Gradio interfaces to interact with files.","[-0.04406834, 0.035746213, -0.007062858, -0.025720727, 0.027983762, -0.049081083, -0.017483767, -0.0040485202, -0.02157183, -0.012544026, 0.027862092, -0.005195246, -0.03131748, -0.003680473, -0.0024759546, 0.0043648584, 0.024029534, -0.02849477, 0.01503823, 0.020975655, 0.0046629463, -0.030538801, -0.006679602, 0.038520254, 0.008443796, -0.020002306, -0.030173795, 0.07796519, -0.012823863, 0.0071419426, -0.04949476, -0.04085629, 0.016449586, -0.011856598, -0.008030123, -0.048764747, 0.013736377, 0.036038216, -0.013590375, -0.019539965, -0.05752488, -0.020306477, -0.03579488, 0.03265583, 0.017021427, 0.035673212, -0.004453068, 0.041926976, 0.01894379, 0.032972172, -0.036208555, -0.0056788786, -0.016376585, -0.043679003, -0.0080362065, 0.060104255, -0.05319348, 0.02478388, -0.014880061, -0.044895686, -0.0052317465, 0.010262741, -0.006789104, 0.013541707, -0.014466388, 0.014101382, -0.045187693, 0.020768818, 0.033726517, 0.009484062, 0.031560816, -0.027740424, 0.034042854, -0.054215495, -0.018335447, -0.0031055892, -0.021279825, -0.0567462, 0.04886208, -0.015305901, -0.0072575277, 0.015792575, -0.0700324, -0.013578208, -0.005368624, 0.014429888, -0.041391633, 0.036135554, -0.027983762, -0.054750837, -0.046331376, -0.0032059657, -0.038714927, 0.087698676, -0.019430464, 0.02284935, -0.034237523, -0.0239687, 0.012458857, 0.011254339, 0.00063229614, -0.004675113, -0.016741589, -0.060444925, 0.0459907, -0.031998824, -0.0006079624, 0.049884096, 0.008425546, -0.030198129, -0.0071845264, -0.016218415, -0.010956251, 0.03367785, 0.0023512442, -0.042827323, 0.030368464, -0.0033641348, -0.045674365, -0.02153533, -0.033531845, 0.023980867, -0.03428619, -0.04601504, 0.05265814, -0.023664529, -0.0086993, -0.03309384, -0.04978676, -0.025891062, 0.01697276, 0.024053868, 0.034237523, -0.065116994, -0.029516784, 0.03282617, -0.03774158, -0.01438122, -0.035089202, 0.02752142, 0.001963426, -0.04747506, 0.028397435, -0.011084002, -0.0061777197, -0.015403235, -0.023165688, 0.030052127, -0.030903807, -0.05192813, 0.022326175, 0.024151202, -0.021936836, -0.0028227097, -0.006685686, -0.0011642157, 0.047986068, -0.011832264, 0.0007417978, -0.024528375, -0.033312842, 0.0061685946, 0.029127445, -0.01260486, 0.006466682, 0.0051587457, 0.013590375, 0.0011193504, -0.047499392, 0.055918854, -0.009922069, -0.012081685, -0.04492002, -0.015646573, -0.005733629, -0.030027792, 0.0007494021, -0.042535316, 0.0011832265, -0.013821545, -0.00719061, 0.0077867857, -0.031341814, 0.011157004, 0.014673225, -0.0016881508, -0.006141219, -0.026012732, -0.047402058, 0.0065701003, -0.0056058774, 0.03452953, 0.018834287, 0.03382385, 0.008443796, -0.008918303, -0.0084802965, 0.0074400306, 0.0029413367, 0.022606013, 0.0261344, 0.012349356, -0.008924386, -0.038763594, -0.04937309, -0.027886426, 0.01177143, 0.023019686, 0.018408448, 0.0013406351, -0.000118056494, 0.00084939844, 0.0048636994, 0.0042766486, -0.062488955, -0.009039972, 0.006801271, 0.041391633, -0.025258387, -0.009119056, -0.00034504433, 0.020196976, 0.018469283, -0.034651197, 0.024966381, 0.016181914, 0.0041519385, -0.016717255, 0.038982596, -0.020805318, 0.058011554, 0.00050416397, 0.0021656998, -0.020136142, 0.043386996, 0.0007090994, 0.0012904468, -0.035892215, 0.051976796, 0.018724786, -0.03343451, -0.013699876, -0.008942637, -0.03350751, 0.010335742, 0.03900693, -0.017641937, -0.029443784, 0.049762428, 0.060298923, -0.015719574, -0.02269118, 0.018615285, 0.0006680363, 0.017873107, -4.1277e-05, 0.003963352, 0.023822697, 0.033848185, -0.012848197, -0.009915985, -0.034699865, -0.028616438, 0.047061387, 0.0009193578, 0.071687095, 0.024771713, 0.021194657, -0.004665988, 0.019625133, -0.0004729864, -0.018177278, 0.04255965, 0.0077989525, 0.024552708, 0.011637595, 0.04766973, 0.043240994, 0.014393386, 0.029638454, -0.029979125, 0.009088639, -0.053485487, 0.021231158, -0.02888411, 0.019880638, 0.0038751427, -0.011339507, 0.033653516, -0.05455617, 0.03742524, 0.004294899, 0.042656984, -0.055772852, -0.005058369, 0.010755498, 0.019990139, -0.0044196094, -0.0024318497, -0.0026706243, -0.0031633817, 0.000339151, -0.0037017649, -0.013164535, -0.032193493, 0.0027755634, -0.0033337176, 0.011394258, -0.00058514957, -0.013310537, 0.024297206, 0.01871262, -0.025453055, -0.02288585, -0.06740437, -0.0061564273, 0.037717246, 0.014843561, 0.0078111193, -0.007963205, 0.035502877, 0.035624545, 0.055237513, -0.034699865, -0.03080647, -0.029249115, -0.051976796, -0.00023706352, -0.016838925, -0.0458447, 0.021803001, 0.046720713, -0.028202765, 0.015841242, 0.043776337, -0.02567206, -0.055188846, 0.057670884, -0.057962887, 0.019685969, -0.020038806, -0.019381797, 0.025088051, 0.06127227, 0.017544601, 0.004696405, -0.0037838912, 0.04998143, -0.012690027, -0.04735339, -0.016656421, -0.010366159, -0.002790772, 0.017641937, 0.04419001, -0.013639042, -0.035186537, -0.07957122, -0.062732294, -0.028738106, -0.027935093, 0.061564274, -0.004973201, 0.035356876, -0.029614119, -0.0020622816, -0.049665093, -0.015330235, -0.009763899, -0.030198129, 0.026937412, 0.005611961, -0.023652362, 0.019527799, -0.04530936, -0.009806483, 0.008182208, -0.0041306466, -0.019917138, -0.026742743, 0.019101959, 0.039639607, -0.00093380595, -0.027107747, -0.03180415, -0.0036622228, -0.01797044, 0.04820507, 0.0196008, 0.00804229, -0.017276932, -0.012750862, 0.008820969, -0.008845302, 0.018603118, 0.025915397, 0.035332542, 0.016656421, 0.015208566, -0.01418655, -0.005830964, -0.028129764, -0.0347242, 0.059374243, -0.020537648, -0.017094428, 0.04399534, 0.047402058, -0.0003256534, -0.04925142, 0.008991304, 0.0104878275, 0.038836595, -0.012896864, 0.029979125, -0.007160193, -0.026742743, -0.02705908, -0.003126881, 0.070178404, -0.021291992, -0.005821839, 0.0041519385, -0.058206223, 0.011637595, 0.017386433, 0.02980879, 0.021304158, 0.04236498, -0.08589798, -0.029103111, -0.011546344, -0.026256068, 0.015950743, 0.018408448, -0.020318644, 0.016303582, 0.00205924, 0.022180174, 0.036038216, -0.034821533, 0.04616104, 0.03664656, 0.048375405, -0.03409152, -0.028908443, 0.021243325, 0.04328966, -0.041488968, -0.029249115, -0.0368899, -0.003990728, -0.06774504, 0.005426416, 0.028640771, -0.021596164, 0.03652489, -0.018688286, 0.038836595, -0.01376071, -0.000127847, 0.0459177, -0.013468706, 0.058595564, -0.016169747, -0.024832547, -0.003756516, 0.0015573571, -0.021924669, -0.03428619, -0.011546344, 0.010153239, 0.0030995058, 0.02331169, -0.051587455, -0.0037899746, -0.014223051, -0.01874912, -0.03401852, -0.004866741, -0.01171668, 0.020525482, -0.030636135, -0.037060235, -0.013687709, 0.11290839, 0.0036135553, -0.036865562, 0.02888411, -0.0239322, -0.022143671, -0.014247385, 0.018858623, -0.011303007, 0.015403235, -0.0022022005, -0.059812248, -0.008991304, -0.011814014, -0.015378902, 0.0024166412, 0.002757313, -0.008455963, 0.031171476, 0.0034766782, 0.016291415, 0.033994187, -0.023336023, 0.018615285, -0.008881803, 0.035332542, -0.007987539, 0.012896864, 0.013517373, 0.017958274, -0.04185397, -0.028275765, 0.028202765, -0.02327519, -0.010877166, -0.017702771, 0.032120492, -0.027886426, -0.0056575867, -0.002270639, 0.03452953, -0.014892228, -0.04650171, 0.021401495, -0.02482038, 0.017848773, -0.02810543, -0.026645407, 0.029322116, -0.046526045, -0.01287253, -0.0068864385, 0.01001332, 0.011668012, -0.03440786, -0.019126292, -0.0283001, -0.0031785902, -0.0051313704, -0.0031299228, 0.051246785, -0.024151202, -0.068475045, 0.025842395, -0.0032911338, 0.035405543, -0.050322104, 0.025550392, -0.03158515, 0.01352954, 0.014855728, 0.03080647, 0.019357463, -0.035429876, -0.007859787, -0.015987245, -0.010512161, 0.032801837, 0.03842292, -0.008857469, -0.031560816, -0.012282438, -0.018809954, -0.023482027, 0.01789744, -0.019393964, 0.03742524, 0.0017885274, 0.03769291, -0.017276932, 0.023445526, -0.010682497, -0.018846454, -0.0032880919, -0.001123913, 0.020634983, -0.00960573, -0.011205671, -0.030417131, -0.018846454, -0.00012081305, 0.004443943, -0.004234065, 0.014831394, -0.019308796, -0.015500571, 0.0023314732, -0.00011853176, 0.023190022, -0.0037838912, 0.035770547, -0.016413085, 0.035283875, -0.054994173, -0.0011246734, -0.011120504, -0.022581678, -0.018006941, 0.026621073, 0.045260694, -0.0028014178, 0.03630589, -0.006351097, -0.0718331, 0.00089654495, -0.04713439, 0.030149462, -0.048156403, -0.065409, -0.009885568, -0.018603118, -0.018530117, 0.02331169, 0.0092468085, -0.0047785314, -0.02980879, 0.016327916, 0.02567206, -0.026864411, 0.015354568, 0.030003458, 0.00674652, -0.004802865, -0.0039785607, 0.04117263, 0.016303582, 0.0026493322, 0.032144826, -0.009751732, 0.019491298, -0.025453055, 0.0034736365, -0.028786773, -0.011826181, -0.060444925, 0.03343451, 0.040758956, 0.027959427, 0.010183656, 0.029224781, 0.014259552, -0.010968418, -0.0019421339, 0.04051562, -0.012653527, -0.008577631, -0.0048454492, -0.007032441, 0.0010995793, -0.015305901, -0.013833712, -0.011741013, 0.00914339, -0.02246001, 0.058206223, -0.0014227614, -0.010165405, -0.00077525666, -0.01287253, -0.008121374, 0.01898029, 0.022983184, 0.004127605, -0.020391645, 0.04358167, -0.037254903, 0.005843131, -0.003501012, 0.029297782, 0.031049808, -0.051636122, -0.00411848, -0.022837183, -0.011801847, 0.027789092, -0.024917714, -0.010274908, -0.036038216, -0.030222462, -0.013772877, -0.029638454, 0.010785915, 0.013030699, -0.0055389595, -0.03428619, 0.00021234961, 0.014867894, -0.01287253, -0.010481744, -0.0015892951, 0.032607164, 0.0059982585, -0.032801837, 0.044433348, -0.017751439, 0.044311676, -0.010554745, -0.010597329, 0.0029185237, -0.032850504, 0.018347614, -0.009982903, 0.00589484, 0.012045184, -0.034967534, 0.017337766, 0.01894379, 0.005262164, 0.009064306, -0.0012372169, -0.005198288, 0.014332552, 0.010214073, 0.04905675, 0.012106018, -0.005262164, 0.0064545153, -0.053728823, -0.018688286, 0.019734636, -0.03637889, -0.02718075, 0.005955674, -0.0348702, -0.012519691, -0.022739848, 0.024139035, 0.03781458, 0.025185386, -0.016315749, 0.039761275, 0.0038933929, -0.007908454, 0.014454221, -0.0075008646, 0.015743908, 0.03367785, 0.015111231, -0.021742165, -0.02269118, -0.034067187, 0.0009193578, -0.014977396, -0.02903011, -0.010463493, 0.003169465, 0.008109207, -0.019539965, -0.003957269, -0.014612391, -0.012239854, -0.019491298, -0.0113151735, -0.024966381, -0.011017085, -0.009648315, 0.05260947, -1.1317312e-06, -0.023457693, -0.008747967, -0.03951794, 0.038033582, 0.007415697, 0.01267786, 0.018469283, 0.00619597, 0.0006262127, -0.011004918, -0.01216077, 0.05455617, -0.015196399, -0.010262741, -0.012580526, 0.010141072, 0.007075025, -0.0045869034, 0.002568727, 0.024966381, -0.011625428, 0.040174946, -0.0064605987, -0.00610776, 0.0067404364, -0.0010349429, -0.041318633, 0.021170324, 0.005110078, -0.026256068, -0.0049914513, 0.030441465, 0.009739566, 0.014502889, -0.061807614, -0.0058279224, 0.022326175, -0.012398023, -0.033069506, -0.036768228, 0.037108902, 0.048837747, 0.055870187, -0.01438122, -0.04715872, -0.020464646, 0.007604283, -0.015512737, 0.016340083, -0.004985368, 0.020002306, 0.0042249397, 0.0084194625, 0.02679141, 0.035162203, -0.035746213, -0.015841242, -0.013602542, 0.016218415, -0.024869047, 0.01615758, -0.031025475, 0.024491875, 0.021863835, 0.054750837, 0.030538801, 0.013651209, 0.030636135, 0.017313432, -0.0012775195, 0.029857457, -0.010420909, 0.028689438, -0.007488698, 0.0060195504, -0.0054659587, -0.04530936, 0.021754332, -0.012860363, 0.011090087, 0.0050218683, 0.049738094, 0.024151202, -0.013140201, 0.01871262, -0.023214355, 0.013310537, -0.015062564, -0.018895123, -0.010068071, -0.030003458, 0.039955944, -0.009806483, 0.009727399, 0.025380054, -0.01789744, 0.025112385, 0.0013048949, 0.0283001, -0.031147143, 0.031536482, -0.0009353268, -0.08487596, -0.034310523, 0.022289675, 0.03231516, -0.02535572, 0.019308796, -0.0005155704, 0.016364416, -0.002428808, -0.037668575, -0.011029252, 0.0052591222, -0.00168663, 0.007744202, -0.024601376, -0.0011368403, 0.030319797, 0.023555027, 0.0038538505, 0.010195822, 0.0027238543, 0.0043861503, 0.0008334294, 0.004221898, 0.03007646, -0.0020090516, 0.00012670636, -0.011266505, 0.00310711, 0.007196693, 0.022776349, -0.020549815, 0.015524904, -0.014296052, -0.0044986936, -0.012398023, -0.0005208934, -0.035819214, -0.01832328, -0.025647726, 9.006323e-05, -0.0348702, -0.00021101885, -0.0029854416, -0.013614709, -0.026158733, -0.013639042, -0.0013725731, 0.00608951, -0.0039511854, -0.0010212552, 0.011661928, 0.0053929575, 0.010974501, -0.0038629759, -0.009155557, -0.0015877743, 0.023068354, 0.0049579926, -0.020245643, 0.022338342, -0.0055085425, 0.008358628, 0.014965229, -0.0105182445, 0.03367785, 0.03204749, 0.024710879, -0.016023746, 0.03435919, -0.059471577, -0.023323856, 0.0068864385, -0.025501724, -0.0013915838, -0.033458844, -0.025088051, 0.020306477, -0.019150626, 0.033726517, -0.036013883, -0.0028576895, -0.004307066, -0.03460253, -0.008638466, -0.011759263, 0.024881214, 0.07480181, -0.00937456, -0.010128905, -0.0051526623, 0.01635225, 0.012118185, 0.02764309, -0.009338059, -0.074023135, 0.009234642, -0.0073244455, 0.025185386, -0.013699876, -0.017812273, 0.02771609, -0.031414814, 0.010293158, 0.027229417, 0.031901486, 0.02535572, 0.0065822676, -0.00912514, -0.03564888, -0.009776066, -0.012921197, -0.02334819, 0.031755485, 0.021425828, 0.020355145, 0.04229198, 0.012653527, 0.011704512, -0.05961758, -0.03231516, 0.016242748, -0.0064119315, 0.030149462, 0.033483177, -0.04686672, -0.00038800854, 0.0044986936, 0.0017064011, 0.037984915, 0.009502312, -0.010822415, -0.011150921, 0.03428619, 0.006223345, -0.027886426, -0.021803001, 0.03165815, -0.032874838, 0.013140201, -0.001166497, 0.026864411, -0.012099935, -0.008650633, -0.0196738, 0.0019679884, 0.0065944344, 0.05392349, -0.032388162, 0.03265583, -0.03630589, -0.028470436, 0.027594423, 0.0034128022, -0.028665105, -0.027545754, -0.022046337, 0.011680178, 0.0026903953, -0.020841818, 0.017179595, 0.035843547, 0.010469577, 0.029930457, 9.329505e-05, 0.010256656, 0.006138177, -0.02327519, -0.020038806, 0.015159898, 0.058157556, 0.02160833, -0.012775196, -0.0069594397, 0.02118249, -0.03350751, -0.01972247, -0.00074788125, 0.049932763, -0.012051268, -0.026475072, -0.007446114, -0.033483177, 0.0068073543, 0.012787363, -0.0034128022, 0.0078111193, 0.005420333, 0.017775772, -0.01109617, -0.0038903512, -0.0062111784, -0.0027056038, 0.0067282696, 0.031439148, -0.01844495, 0.031998824, 0.030149462, -0.027229417, -0.05640553, 0.005809672, 0.02249651, 0.017276932, 0.016607754, 0.002640207, -0.009970736, 0.009350226, 0.008638466, 0.0031542566, -0.024333706, -0.006600518, -0.013383538, -0.035332542, 0.03781458, -0.014782726, -0.025112385, -0.011138754, -0.0131037, 0.006862105, 0.007032441, 0.024710879, 0.010852832, -0.0049275756, 0.020196976, -0.026426405, -0.01805561, 0.04170797, -0.0065944344, -0.027278084, -0.030563135, -0.003564888, -0.012763029, 0.032339495, 0.0022508677, -0.00062165014, 0.01697276, -0.016924093, -0.018408448, -0.025964065, 0.0024577042, 0.011607178, 0.013712043, -0.00025607424, 0.027862092, -0.017568935, -0.006272013, 0.06730703, 0.0044196094, -0.06278096, -0.018968124, 0.0012714361, 0.00678302, 0.00059465494, -0.011175254, 0.013444372, 0.025720727, -0.026548073, -0.022155838, -0.0015725658, 0.027229417, -0.012994199, 0.028056763, 0.0174351, -0.021243325, 0.03737657, -0.0113151735, 0.002726896, 0.0013406351, -0.018590951, 0.013201036, 0.01882212, -0.0070567746, -0.011230005, 0.0021383243, -0.001856966, 0.0015064084, -0.04438468, 0.00468728, 0.027107747, -0.025769394, -0.018225946, 0.0017535477, 0.027618757, 0.0010607975, 0.013042866, 0.0037413072, 0.03796058, 0.02443104, 0.015111231, 0.009520562, -0.011674095, -1.397287e-05, -0.012282438, -0.00025702477, 0.002991525, -0.023092687, 0.0032850502, -0.03521087, -0.011880931, 0.017678438, 0.0046416544, -0.029443784, 0.008796634, -0.016498253, 0.051782124, 0.008249126, 0.020196976, -0.041002292, 0.009703065, -0.005003618, -0.016291415, -0.03800925, -0.007859787, 0.02048898, 0.03749824, 0.014855728, -0.037133235, -0.0061320937, -0.0026554156, -0.03151215, 0.010214073, -0.0056788786, -0.028178431, 0.0119661, 0.016632088, 0.012434524, 0.010068071, 0.00042583985, -0.028227098, 0.008364711, -0.0032880919, -0.04071029, 0.013310537, 0.03139048, 0.019284463, 0.0007357144, 0.01851795, -0.022508677, 0.0029033152, -0.0015999412, -0.024710879, -0.006521433, -0.04421434, 0.010007236, 0.037863247, 0.010347908, 0.030757803, 0.018761287, -0.01152201, -0.013845879, 0.012136436, -0.018530117, 0.020634983, 0.003966394, 0.016449586, 0.008176125, 0.011576761, 0.0073731127, 0.019710302, -0.016680755, 0.005715379, 0.019260127, -0.0005083463, -0.012349356, -0.010597329, 0.01244669, -0.048691746, 0.039566606, 0.018761287, 0.010798082, -0.027789092, 0.024066035, 0.011321257, 0.04202431, 0.010396576, 0.047913067, 0.0080666235, 0.015804742, 0.029176112, 0.0025702477, 0.033775184, 0.031901486, 0.010134988, -0.0015862534, 0.0058187973, -2.6638754e-05, -0.003330676, 0.016948426, 0.0023466817, -0.0022539096, 0.002472913, -0.013152367, -0.018663952, 0.011741013, -0.05489684, 0.00392381, 0.020355145, -0.017167429, -0.020038806, 0.0017489851, -0.0061716363, -0.007148026, 0.036038216, 0.0032911338, 0.010445243, -0.0069837733, 0.027594423, 0.033458844, 0.0071541094, -0.017325599, 0.04920275, -0.02327519, -0.008936553, 0.002459225, -0.015962912, -0.0052591222, -0.036330223, -0.019503465, 0.02242351, -0.04012628, 0.024528375, 0.0019330088, -0.04506602, 0.016838925, 0.022703348, -0.012343273, 0.06297563, 0.003117756, 0.004954951, 0.0073548625, 0.000901868, 0.0025276637, -0.016997093, 0.010998835, -0.0037200153, 0.003680473, 0.022934517, 0.0016699005, 0.0055632936, -0.019284463, -0.023056187, -0.010506078, 0.0009049097, -0.018335447, 0.018128611, -0.009173807, -0.004453068, 0.014819227, 0.010262741, 0.013128034, -0.010700747, -0.006223345, -0.017130928, -0.009295476, -0.016072413, 0.01356604, -0.006363264, -0.022776349, 0.00825521, 0.034578197, 0.03525954, -0.0018889039, -0.019454798, -0.017447267, 0.039882943, 0.004790698, 0.010919751, 0.017228264, -0.0028683355, -0.015768241, -0.03915293, -0.0047116135, 0.01546407, 0.015622239, 0.026767077, -0.006265929, 0.019491298, -0.010591245, 0.03915293, 0.017775772, 0.023165688, -0.015026064, -0.0077502853, 0.04058862, 0.019284463, -0.0065336, 0.030636135, -0.048156403, 0.0001800314, 0.020160476, -0.0014653454, -0.00031538765, 0.03231516, -0.021912502, 0.019625133, 0.025550392, 0.02033081, 0.021900335, 0.043313995, -0.0034979703, 0.020951321, -0.002185471, 0.041805305, 0.014356886, 0.004422651, -0.022752015, 0.007129776, 0.015561405, -0.003765641, 0.028056763, 0.033191174, 0.009265059, 0.018019108, -0.03715757, -0.028908443, 0.02153533, -0.0105182445, 0.001077527, -0.019381797, -0.001463064, -0.033702184, -0.029103111, -0.010189739, -0.016644254, -0.023372523, -0.02659674, 0.05504284, 0.020853985, -0.008322127, -0.03951794, 0.0016136288, -0.026718408, 0.019685969, -0.0010235365, 0.023980867, -0.016230581, -0.014454221, -0.023664529, 0.008668883, 0.031536482, 0.01130909, -0.017605435, -0.029468117, -0.0056241276, 0.00092087867, -0.029249115, 0.01418655, 0.018420614, -0.009484062, 0.013140201, -0.0015892951, 0.029541118, -0.011388174, 0.006387598, -0.052317467, -0.010767665, -0.01244669, 0.016924093, 0.046647713, -0.021401495, 0.0055632936, -0.011692345, 0.0007532042, 0.001761152, -0.010554745, 0.025988398, 0.015111231, 0.021936836, 0.0024881214, -0.013991881, -0.0068377713, 0.03440786, 0.033312842, 0.013918879, -0.0152329, 0.0015451903, 0.012519691, 0.019977972, -0.023822697, 0.014296052, 0.008279543, -0.024686545, 0.011047502, 0.01647392, -0.02718075, -0.0101045715, -0.011023168, -0.00234364, -0.034772865, -0.031049808, -0.017544601, -0.030003458, 0.03328851, -0.020014472, -0.0039298935, -0.025915397, -0.0072210273, 0.004888033, -0.027083414, -0.021486662, -0.008644549, -0.0029519827, -0.023834866, 0.015074731, -0.026937412, -0.010080238, 0.057622217, -0.0011041419, -0.022861516, -0.017654104, 0.005462917, -0.017410766, 0.012130353, 0.050468106, 0.011996517, -0.00919814, 0.012203353, 0.015427569, -0.036695227, 0.028689438, -0.034578197, 0.0028348768, -0.039542273, -0.0413673, -0.011747097, 0.004337483, -0.0038447254, 0.041148297, -0.0005969362, -0.007944955, -0.0025900188, -0.02149883, -0.026499406, 0.010238406, 0.008869636, 0.007774619, 0.0025732894, 0.027083414, 0.012860363, 0.008492463, -0.036013883, -0.007592116, 0.0058461726, 0.007969288, -0.010433076, 0.010871083, -0.00339151, 0.012440607, 0.0068438547, -0.00894872, 0.028640771, 0.0368899, -0.013359204, -0.011576761, 0.021583997, -0.03796058, 0.017581102, -0.009052139, -0.08361061, -0.0025945813, 0.0067100194, 0.019101959, 0.02423637, 0.014843561, -0.022472177, 0.00823696, 0.015135565, -0.0040485202, -0.0018752161, 0.011546344, 0.004273607]"
../../../gradio,../../../gradio/gradio/components,scatter_plot.pyi,"""""""gr.ScatterPlot() component.""""""

from __future__ import annotations

from typing import Any, Callable, Literal

import altair as alt
import pandas as pd
from gradio_client.documentation import document, set_documentation_group
from pandas.api.types import is_numeric_dtype

from gradio.components.plot import AltairPlot, AltairPlotData, Plot

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class ScatterPlot(Plot):
    """"""
    Creates a scatter plot component to display data from a pandas DataFrame (as output). As this component does
    not accept user input, it is rarely used as an input component.

    Guides: creating-a-dashboard-from-bigquery-data
    """"""

    data_model = AltairPlotData

    def __init__(
        self,
        value: pd.DataFrame | Callable | None = None,
        x: str | None = None,
        y: str | None = None,
        *,
        color: str | None = None,
        size: str | None = None,
        shape: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        size_legend_title: str | None = None,
        shape_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        size_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        shape_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | str | None = None,
        width: int | str | None = None,
        x_lim: list[int | float] | None = None,
        y_lim: list[int | float] | None = None,
        caption: str | None = None,
        interactive: bool | None = True,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        show_actions_button: bool = False,
    ):
        """"""
        Parameters:
            value: The pandas dataframe containing the data to display in a scatter plot, or a callable. If callable, the function will be called whenever the app loads to set the initial value of the component.
            x: Column corresponding to the x axis.
            y: Column corresponding to the y axis.
            color: The column to determine the point color. If the column contains numeric data, gradio will interpolate the column data so that small values correspond to light colors and large values correspond to dark values.
            size: The column used to determine the point size. Should contain numeric data so that gradio can map the data to the point size.
            shape: The column used to determine the point shape. Should contain categorical data. Gradio will map each unique value to a different shape.
            title: The title to display on top of the chart.
            tooltip: The column (or list of columns) to display on the tooltip when a user hovers a point on the plot.
            x_title: The title given to the x-axis. By default, uses the value of the x parameter.
            y_title: The title given to the y-axis. By default, uses the value of the y parameter.
            x_label_angle:  The angle for the x axis labels rotation. Positive values are clockwise, and negative values are counter-clockwise.
            y_label_angle:  The angle for the y axis labels rotation. Positive values are clockwise, and negative values are counter-clockwise.
            color_legend_title: The title given to the color legend. By default, uses the value of color parameter.
            size_legend_title: The title given to the size legend. By default, uses the value of the size parameter.
            shape_legend_title: The title given to the shape legend. By default, uses the value of the shape parameter.
            color_legend_position: The position of the color legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            size_legend_position: The position of the size legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            shape_legend_position: The position of the shape legend. If the string value 'none' is passed, this legend is omitted. For other valid position values see: https://vega.github.io/vega/docs/legends/#orientation.
            height: The height of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            width: The width of the plot, specified in pixels if a number is passed, or in CSS units if a string is passed.
            x_lim: A tuple or list containing the limits for the x-axis, specified as [x_min, x_max].
            y_lim: A tuple of list containing the limits for the y-axis, specified as [y_min, y_max].
            caption: The (optional) caption to display below the plot.
            interactive: Whether users should be able to interact with the plot by panning or zooming with their mouse or trackpad.
            label: The (optional) label to display on the top left corner of the plot.
            every:  If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: Whether the label should be displayed.
            visible: Whether the plot should be visible.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            show_actions_button: Whether to show the actions button on the top right corner of the plot.
        """"""
        self.x = x
        self.y = y
        self.color = color
        self.size = size
        self.shape = shape
        self.tooltip = tooltip
        self.title = title
        self.x_title = x_title
        self.y_title = y_title
        self.x_label_angle = x_label_angle
        self.y_label_angle = y_label_angle
        self.color_legend_title = color_legend_title
        self.color_legend_position = color_legend_position
        self.size_legend_title = size_legend_title
        self.size_legend_position = size_legend_position
        self.shape_legend_title = shape_legend_title
        self.shape_legend_position = shape_legend_position
        self.caption = caption
        self.interactive_chart = interactive
        self.width = width
        self.height = height
        self.x_lim = x_lim
        self.y_lim = y_lim
        self.show_actions_button = show_actions_button
        super().__init__(
            value=value,
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
        )

    def get_block_name(self) -> str:
        return ""plot""

    @staticmethod
    def create_plot(
        value: pd.DataFrame,
        x: str,
        y: str,
        color: str | None = None,
        size: str | None = None,
        shape: str | None = None,
        title: str | None = None,
        tooltip: list[str] | str | None = None,
        x_title: str | None = None,
        y_title: str | None = None,
        x_label_angle: float | None = None,
        y_label_angle: float | None = None,
        color_legend_title: str | None = None,
        size_legend_title: str | None = None,
        shape_legend_title: str | None = None,
        color_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        size_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        shape_legend_position: Literal[
            ""left"",
            ""right"",
            ""top"",
            ""bottom"",
            ""top-left"",
            ""top-right"",
            ""bottom-left"",
            ""bottom-right"",
            ""none"",
        ]
        | None = None,
        height: int | None = None,
        width: int | None = None,
        x_lim: list[int | float] | None = None,
        y_lim: list[int | float] | None = None,
        interactive: bool | None = True,
    ):
        """"""Helper for creating the scatter plot.""""""
        import altair as alt
        from pandas.api.types import is_numeric_dtype

        interactive = True if interactive is None else interactive
        encodings = {
            ""x"": alt.X(
                x,  # type: ignore
                title=x_title or x,  # type: ignore
                scale=AltairPlot.create_scale(x_lim),  # type: ignore
                axis=alt.Axis(labelAngle=x_label_angle)
                if x_label_angle is not None
                else alt.Axis(),
            ),  # ignore: type
            ""y"": alt.Y(
                y,  # type: ignore
                title=y_title or y,  # type: ignore
                scale=AltairPlot.create_scale(y_lim),  # type: ignore
                axis=alt.Axis(labelAngle=y_label_angle)
                if y_label_angle is not None
                else alt.Axis(),
            ),
        }
        properties = {}
        if title:
            properties[""title""] = title
        if height:
            properties[""height""] = height
        if width:
            properties[""width""] = width
        if color:
            if is_numeric_dtype(value[color]):
                domain = [value[color].min(), value[color].max()]
                range_ = [0, 1]
                type_ = ""quantitative""
            else:
                domain = value[color].unique().tolist()
                range_ = list(range(len(domain)))
                type_ = ""nominal""

            encodings[""color""] = {
                ""field"": color,
                ""type"": type_,
                ""legend"": AltairPlot.create_legend(
                    position=color_legend_position, title=color_legend_title or color
                ),
                ""scale"": {""domain"": domain, ""range"": range_},
            }
        if tooltip:
            encodings[""tooltip""] = tooltip
        if size:
            encodings[""size""] = {
                ""field"": size,
                ""type"": ""quantitative"" if is_numeric_dtype(value[size]) else ""nominal"",
                ""legend"": AltairPlot.create_legend(
                    position=size_legend_position, title=size_legend_title or size
                ),
            }
        if shape:
            encodings[""shape""] = {
                ""field"": shape,
                ""type"": ""quantitative"" if is_numeric_dtype(value[shape]) else ""nominal"",
                ""legend"": AltairPlot.create_legend(
                    position=shape_legend_position, title=shape_legend_title or shape
                ),
            }
        chart = (
            alt.Chart(value)  # type: ignore
            .mark_point(clip=True)  # type: ignore
            .encode(**encodings)
            .properties(background=""transparent"", **properties)
        )
        if interactive:
            chart = chart.interactive()

        return chart

    def preprocess(self, payload: AltairPlotData | None) -> AltairPlotData | None:
        """"""
        Parameters:
            payload: The data to display in a scatter plot.
        Returns:
            (Rarely used) passes the data displayed in the scatter plot as an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""scatter"").
        """"""
        return payload

    def postprocess(
        self, value: pd.DataFrame | dict | None
    ) -> AltairPlotData | dict | None:
        """"""
        Parameters:
            value: Expects a pandas DataFrame containing the data to display in the scatter plot. The DataFrame should contain at least two columns, one for the x-axis (corresponding to this component's `x` argument) and one for the y-axis (corresponding to `y`).
        Returns:
            The data to display in a scatter plot, in the form of an AltairPlotData dataclass, which includes the plot information as a JSON string, as well as the type of plot (in this case, ""scatter"").
        """"""
        # if None or update
        if value is None or isinstance(value, dict):
            return value
        if self.x is None or self.y is None:
            raise ValueError(""No value provided for required parameters `x` and `y`."")
        chart = self.create_plot(
            value=value,
            x=self.x,
            y=self.y,
            color=self.color,
            size=self.size,
            shape=self.shape,
            title=self.title,
            tooltip=self.tooltip,
            x_title=self.x_title,
            y_title=self.y_title,
            x_label_angle=self.x_label_angle,
            y_label_angle=self.y_label_angle,
            color_legend_title=self.color_legend_title,
            size_legend_title=self.size_legend_title,
            shape_legend_title=self.size_legend_title,
            color_legend_position=self.color_legend_position,  # type: ignore
            size_legend_position=self.size_legend_position,  # type: ignore
            shape_legend_position=self.shape_legend_position,  # type: ignore
            interactive=self.interactive_chart,
            height=self.height,
            width=self.width,
            x_lim=self.x_lim,
            y_lim=self.y_lim,
        )

        return AltairPlotData(type=""altair"", plot=chart.to_json(), chart=""scatter"")

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        import pandas as pd

        return pd.DataFrame({self.x: [1, 2, 3], self.y: [4, 5, 6]})","The code defines a `ScatterPlot` component that creates a scatter plot to display data from a pandas DataFrame. The component does not accept user input and is typically used as an output component. It allows customization of various plot attributes such as x-axis, y-axis, color, size, shape, title, tooltip, legends, labels, and more. The `create_plot` method generates the scatter plot using Altair library based on the provided parameters. The `preprocess` and `postprocess` methods handle the data processing before and after displaying the plot. The `example_payload` and `example_value` methods provide examples of the input data and output value for the component.","[-0.04690573, -0.023954082, 0.004432654, 0.011256539, 0.040619608, -0.016999671, -0.032349497, -0.018503329, -0.015255848, 0.0010383322, 0.0098155355, -0.026481062, -0.016456684, -0.024601491, -0.0016315717, -0.024162924, 0.014023685, 0.006714244, -0.005894542, -0.008828761, -0.018033436, -0.029425722, -0.008687793, 0.0060720574, -0.013052573, -0.032746296, -0.007633145, 0.025645696, -0.0068604327, 0.050330725, -0.02084235, -0.031451482, -0.015840603, 0.022701036, 0.0130003635, -0.013522467, -0.019255156, -0.0055865017, -0.020330688, -0.035461232, -0.013887938, 0.010348081, 0.0049155992, 0.014107222, -0.020518646, 0.011559359, -0.02332756, 0.0032657539, 0.026648134, 0.057681933, -0.018315371, 0.010368965, -0.038969763, -0.015913697, -0.029070692, 0.03596245, -0.06177522, 0.053296268, -0.0068813167, -0.024058504, 0.027107585, 0.02531155, -0.016519338, 0.04007662, -0.037152845, -0.015485574, -0.02322314, 0.023557285, -0.022930762, 0.047866397, 0.06724686, 0.02120782, 0.0075809346, -0.004077624, -0.013616445, -0.029049808, -0.047239874, -0.0066776965, 0.026585482, -0.010734436, -0.010859741, 0.0079516275, -0.001937002, -0.013261415, -0.018210951, -0.068374604, -0.011809968, -0.00846851, 0.02307695, -0.04874353, 0.004732863, -0.028799199, -0.042937744, 0.024726795, 0.017469564, 0.0674557, -0.04107906, -0.025791885, 0.049202982, 0.035503, 0.04153851, -0.023056066, -0.05559352, -0.029968709, 0.01207102, -0.052878585, -0.05688834, -0.018075204, 0.05137493, 0.032245077, -0.038656503, -0.004503138, -0.048868835, 0.039115954, -0.06996179, -0.0028637347, -0.0032605329, -0.03617129, 0.015475132, 0.0036860467, -0.038927995, 0.013021247, 0.037758484, -0.015986793, 0.010828415, -0.019265598, -0.0028846187, -0.06795692, -0.02364082, 0.02875743, 0.021019865, -0.0226175, -0.027274657, -0.039220374, -0.011977041, 0.05229383, -0.045569144, -0.0005599554, -0.032182425, 0.0155273415, 0.034772057, 0.049662434, 0.0155586675, -0.017824594, -0.03794644, -0.039784245, 0.019954775, -0.030240202, -0.04974597, 0.022784572, 0.014629325, 0.092725486, -0.019505765, -0.013282299, -0.0041611604, 0.019923449, 0.038009096, -0.04728164, -0.0009032381, -0.047949933, 0.013522467, -0.018440677, -0.035523884, -0.017720174, -0.017688848, -0.008202237, -0.010687447, -0.0019774649, -0.05471639, -0.025144478, -0.005471639, -0.036150407, -0.032537457, -0.019432671, 0.03003136, -0.010034818, -0.017083209, -0.00083471206, 0.06281943, -0.036254827, -0.036254827, 0.0050539565, -0.059102055, -0.028569473, -0.014890376, 0.032286845, -0.0006598076, 0.0048294524, -0.01272887, 0.045360304, 0.019745933, 0.008254448, -0.02378701, 0.0043047387, 0.002276369, -0.011434054, 0.03767495, 0.02155241, -0.03635925, 0.0168326, 0.017782826, 0.0059885206, -0.029697215, 0.03809263, 0.03646367, 0.02652283, -0.0416847, -0.034772057, 0.0055134073, -0.044524938, 0.014075896, -0.037654065, 0.04544384, 0.014848608, -0.044900853, 0.003362343, -0.00086799613, -0.0014135938, 0.023974966, -0.0039810347, -0.031179987, -0.0016263507, -0.01095372, -0.037591413, 0.005915426, -0.025499508, 0.05342157, -0.05012188, -0.02556216, -0.010520374, -0.009058486, 0.0026366198, 0.01095372, 0.025040057, 0.002161506, -0.04007662, -0.020957213, -0.0727185, 0.021531526, 0.011914389, -0.026669018, 0.0142638525, 0.035523884, 0.015433363, 0.040160157, 0.039846897, -0.02612603, -0.04682219, 0.009256885, 0.053630415, 0.029154228, -0.018837474, 0.009361306, -0.002186306, -0.037695833, -0.031263523, -0.003928825, -0.02612603, -0.01166378, -0.03291337, -0.018503329, -0.020706603, -0.03784202, 0.000768144, 0.0071997996, -0.0036129523, 0.028151792, 0.024685027, -0.040097505, -0.012916827, 0.0001721308, 0.038155284, 0.047991704, 0.0021001592, -0.03859385, -0.0027514824, 0.021949207, 0.040452536, 0.0048973258, -0.0034197744, -0.019589303, -0.018962778, -0.02257573, 0.024183808, -0.011266981, 0.020633508, 0.06336241, -0.010776205, -0.022993414, -0.06248528, 0.03529416, -0.054131635, 0.015924139, 0.032182425, -0.0009671957, 0.010734436, 0.041622046, 0.028506821, 0.017281607, -0.033247516, 0.007753229, -0.017657522, 0.003636447, -0.053296268, 0.014932144, -0.012854175, 0.0024747679, 0.027316427, -0.012885501, 0.008134364, 0.036296595, 0.008259669, 0.0025100098, -0.01800211, -0.002835019, 0.07104777, 0.06277766, 0.019610187, -0.012854175, -0.039262142, -0.057347786, -0.009523158, 0.0186704, -0.025395088, -0.03621306, -0.016665526, -0.029676331, 0.009356084, 0.01618519, 0.04728164, -0.006040731, -0.03727815, -0.03280895, 0.03788379, 0.02403762, -0.0031665543, -0.05467462, -0.06152461, -0.07835721, 0.040055737, -0.012958595, -0.032788064, 0.006709023, -0.002114517, 0.005842332, 0.016300054, 0.016801273, 0.02961368, 0.024872985, -0.00907937, -0.016644642, -0.00033251432, -0.019704165, -0.014524904, -0.0085729305, -0.029989593, -0.040515188, -0.0628612, -0.006609823, -0.00329708, -0.018294487, -0.013940149, -0.027379079, -0.017970784, 0.021197379, 0.02829798, -0.045402072, -0.012864617, -0.017511332, -0.007883755, -0.025436856, 0.002683609, -0.04356427, -0.014681535, 0.016571548, -0.026940512, 0.029864289, -0.039826013, -0.033957575, -0.020393342, 0.017312933, -0.014869492, -0.021343568, -0.0077845547, -0.02520713, 0.016268728, 0.054841693, -0.007977733, -0.00047870312, 0.025019173, 0.0049155992, -0.0628612, -0.058475528, 0.03479294, 0.060438637, -0.012279862, 0.021782136, 0.033957575, 0.049161214, -0.0071267053, -0.025896305, 0.0075600506, 0.0018064762, 0.007053611, -0.013073457, 0.014044569, 0.041977078, 0.019244714, 0.029676331, 0.01136096, 0.0006532813, -0.031639438, 0.02712847, -0.05705541, 0.033915807, -0.015036564, 0.016895251, -0.020664835, -0.005821448, 0.013574677, 0.00085233303, -0.052920353, 0.0053123976, -0.023619937, -0.030762305, 0.018169183, 0.04185177, -0.034354374, -0.007419083, -0.038489427, 0.05354688, 0.01780371, 0.047365177, 0.026355756, -0.02581277, -0.025290666, 0.0002308674, 0.020529088, 0.03965894, 0.005450755, 0.009721557, 0.04082845, -0.0012719732, -0.0006209762, -0.07777245, -0.02506094, 0.05843376, 0.005270629, -0.010556921, 0.018451119, 0.011642896, -0.0010716163, -0.03138883, -0.0055342913, 0.010849299, -0.043188356, -0.021615062, -0.0010057008, 0.017469564, 0.03353989, 0.047448717, 0.05279505, -0.038364124, 0.07317795, -0.0018182235, 0.0012719732, 0.028423285, -0.0075287246, 0.006928306, 0.005685701, -0.006933527, 0.0336652, 0.04285421, 0.013209204, -0.04732341, -0.010186228, -0.009658905, -0.03397846, -0.012749754, -0.025541276, 0.03237038, 0.025186246, -0.03844766, 0.015140985, 0.031033799, 0.099575475, 0.0028793977, -0.061148696, 0.0064845188, -0.0075757136, -0.03723638, -0.022450427, -0.0045762323, -0.0064270874, 0.041768234, -0.030052245, -0.04214415, 0.013324067, 0.024079388, 0.0018130025, 0.043188356, 0.022951646, 0.03266276, 0.008322321, 0.019651955, 0.0016198243, 0.0066515915, -0.007158031, -0.028820083, 0.010118355, -0.043731343, 0.04945359, 0.02946749, 0.011935273, -0.024664143, 0.0020414225, -0.01922383, 0.02028892, -0.00042975598, -0.045694448, 0.0029655448, -0.009789431, -0.00694919, 0.0016354874, 0.021510642, 0.016320938, 0.0059676366, -0.069711186, -0.035377696, -0.02389143, -0.009293432, -0.0098103145, -0.03738257, 0.024664143, -0.04548561, -0.020309804, -0.011047699, 0.01207102, -0.010426396, 0.006609823, 0.030741422, 0.017657522, -0.0053776605, -0.037716717, -0.0010487743, 0.016477568, -0.004787684, -0.0059519736, 0.014629325, 0.025436856, 0.063320644, -0.045109693, 0.009058486, -0.0004597769, 0.02064395, 0.032934252, -0.015683973, 0.0036860467, -0.01648801, -0.03894888, -0.00097045884, 0.055468217, 0.010473385, 0.019954775, 0.016978787, 0.0105517, -0.004148108, -0.027358195, -0.0284024, 0.028673893, -0.041705582, -0.015402037, -0.035941567, -0.053881023, 0.003722594, 0.008494615, 0.019463997, -0.030449044, 0.0013953202, 0.0017790658, -0.010692668, 0.02673167, -0.008332763, -0.018273603, -0.023118718, 0.010556921, -0.0064740763, 0.0065367287, 0.020414226, -0.02424646, -0.02861124, 0.011507149, -0.032328613, 0.014618882, -0.013334509, -0.017720174, 0.004711979, 0.0029133344, -0.005915426, -0.01491126, 0.011152118, -0.034312606, -0.019620629, -0.0072154626, -0.026188683, -0.03468852, 0.022241585, 0.044316098, -0.016540222, 0.004672821, 0.013867054, 0.03646367, -0.019108968, -0.047490485, -0.005281071, 0.044149026, -0.0062965616, 0.02089456, 0.02744173, -0.051542003, -0.003934046, -0.022951646, -0.04991304, -0.0051505454, -0.021166053, 0.011789084, 0.0015793614, -0.004137666, 0.004732863, 0.033957575, 0.012206767, 0.010029597, 0.051458467, 0.041350555, 0.020278478, -0.0010161429, 0.022680152, -0.0036912677, -0.0030308075, -0.004048908, -0.009700673, 0.037654065, 0.04068226, 0.026439292, 0.0021119064, -0.00019268862, -0.020602182, 0.039220374, 0.045235, -0.0034980897, 0.011026815, 0.0155377835, 0.020309804, 0.012332072, -0.008661687, -0.0045449063, -0.00867213, 0.0044091595, -0.008353647, 0.003357122, -0.011444497, -0.009058486, -0.013689539, -0.01597635, 0.0016002455, 0.040995523, 0.023264907, -0.02627222, 0.045402072, 0.02140622, -0.012822848, 0.03930391, -0.0010579111, -0.011152118, -0.014817282, -0.029947825, -0.01931781, -0.026105147, -0.010556921, 0.015642203, -0.023703473, -0.011830852, -0.03913684, 0.006056394, 0.009867745, -0.0085677095, 0.027734108, 0.0046075583, -0.00078184914, -0.049077675, -0.009048044, 0.004508359, 0.003135228, 0.021594178, -0.007466072, 0.026230453, 0.0006826496, 0.004098508, 0.03397846, -0.0055969437, -0.035878915, -0.009418737, 0.03539858, -0.04285421, 0.008056048, 0.0076749134, -0.003362343, 0.0021928323, 0.030574348, 0.006902201, -0.00043889278, -0.013825286, -0.018827032, 0.015673531, -0.042728905, 0.03333105, 0.041705582, 0.012081462, -0.033790503, 0.022763688, -0.018545097, -0.007868092, -0.07171606, -0.0142742945, 0.002175864, 0.026021611, 0.018983662, 0.015589993, -0.008818319, 0.0055917227, 0.005904984, -0.025979843, 0.03901153, 0.012927269, -0.013961033, -0.025290666, 0.0065054027, 0.0031691648, -0.010525595, 0.01166378, -0.0011995315, 0.024559723, 0.0036860467, -0.0032396486, -0.011590686, -0.029195996, -0.0034380478, -0.013532909, 0.0029655448, -0.025750117, 0.033414587, 0.0035711841, 0.02896627, -0.0027749771, -0.02992694, 0.002241127, -0.010452501, -0.018409349, 0.010572584, -0.0011930052, 0.005837111, 0.006233909, -0.008802655, -0.0032448699, -0.043063052, -0.02205363, 0.03270453, 0.008197016, -0.023870546, -0.033351935, -0.018847916, -0.019401345, -0.0071110423, -0.04143409, 0.001764708, 0.0040358556, 0.013209204, 0.009032381, -0.011872621, -0.0155691095, 0.009408295, 0.017177187, -0.0130108055, 0.019484881, 0.013313625, 0.017720174, -0.025666581, 0.0053228396, -0.016206075, -0.0117264325, -0.052168526, 0.00826489, 0.01897322, -0.053588647, 0.0461539, -0.03376962, 0.020717045, -0.05843376, -0.029759867, -0.018931452, -0.012175441, -0.021385336, -0.027065817, 0.02332756, 0.040515188, 0.012238093, -0.008578151, -0.030762305, -0.004751137, -0.026460176, 0.014650209, 0.047198106, -0.033456355, -0.0003592721, -0.013585119, -0.021447988, 0.011580244, -0.024058504, -0.03738257, -0.003646889, -0.02520713, -0.022116281, -0.032140657, -0.005717027, -0.002895061, 0.002550473, 0.024121156, 0.015610878, -0.004168992, -0.023306675, -0.014629325, 0.011371402, 0.026418408, 0.020205384, 0.038217936, 0.01744868, 0.0015402037, 0.0062756776, 0.0020701382, -0.009512716, 0.029279534, 0.035544768, -0.02247131, -0.052669745, 0.047031034, -0.024183808, 0.024016736, 0.00082883844, -0.03794644, 0.0028376295, 0.011517591, 0.015788393, -0.00420815, -0.048409384, 0.0029681553, 0.03823882, 0.011924831, -0.0012732785, 0.0002993934, 0.07213374, -0.02190744, -0.011528033, -0.0066359285, -0.0020401173, -0.0377376, -0.069920026, 0.020268036, -0.02982252, 0.01384617, -0.0023742632, 0.018472003, -0.017323375, -0.018952336, 0.020100962, -0.02003831, -0.014420483, 0.007163252, 0.038217936, 0.00055701856, -0.018753938, 0.0067977803, -0.02023671, 0.013835728, -0.0015467299, -0.018712169, -0.032328613, -0.00370171, -0.012718428, 0.014535346, -0.00083667, -0.046529815, 0.0073198834, 0.023056066, 0.0016681189, -0.0076801344, 0.04360604, -0.0072415676, 0.0013796571, -0.008452847, 0.035690956, 0.011966599, 0.004832063, 0.022492195, 0.0016602874, -0.0077741127, -0.012008368, 0.020727487, -0.051500235, -0.050581332, -0.044566706, -0.012739312, -0.0023468528, -0.0023168318, 0.018806148, 0.014796398, 0.018597307, -0.008390195, 0.008275332, -0.0041454975, 0.024162924, 0.038322356, -0.011162561, 0.031681206, 0.0034302163, -0.0059415316, 0.014785956, 0.0069909585, 0.004054129, -0.001850855, -0.006400982, 0.03241215, 0.05705541, -0.015757067, 0.0010448585, -0.011068583, -0.021970091, -0.02677344, -0.000113802125, 0.0001752308, -0.0066881385, 0.027086701, 0.028089138, -0.0055656172, 0.03333105, 0.0029838183, 0.010034818, 0.031200873, 0.011266981, 0.041517626, 0.02094677, 0.018472003, -0.026815208, 0.09172305, -0.0027253774, -0.050539564, -0.018336255, 0.009403074, 0.001820834, 0.019484881, 0.021928323, -0.018795706, -0.026648134, 0.04757402, -0.014932144, 0.022116281, -0.03333105, 0.019610187, -0.022847224, -0.010577805, 0.02677344, -0.0005234082, -0.025541276, -0.01430562, 0.025436856, 0.012342514, -0.05229383, 0.0123633975, -0.034584098, 0.038364124, 0.018659959, 0.019328251, 0.028026486, 0.019819027, 0.017939458, -0.03460498, -0.0190672, -0.022387775, -0.0032161542, -0.004620611, 0.0098311985, 0.017887248, 0.0066307075, 0.025938075, 0.006902201, 0.019276042, 0.006907422, 0.0057379114, 0.017824594, 0.04427433, -0.0063278875, -0.02282634, 0.035732724, -0.009778989, -0.036233943, -0.022659268, 0.007293778, 0.008499836, -0.02257573, -0.026710786, -0.013407604, 0.0061921407, -0.013021247, -0.0025400307, 0.0017712342, 0.018649517, -0.055468217, 0.003874004, -0.009632799, -0.006213025, -0.029906057, -0.028548589, -0.025791885, 0.022742804, -0.011705548, 0.017030997, -0.010577805, -2.0129515e-05, -0.006907422, 0.035482116, 0.03567007, 0.006009405, 0.013250973, -0.0157153, -0.005207977, 0.027650572, 0.049620662, -0.013950591, 0.025938075, 0.008995834, 0.019578861, -0.032641876, -0.02946749, 0.0044665905, 0.037654065, 0.011622012, 0.0014671093, -0.00048555573, -0.009596252, 0.012634891, 0.04103729, -0.0043438966, -0.024100272, 0.005093114, 0.03124264, 0.02364082, 0.01161157, -0.018430233, -0.021886555, 0.0319527, 0.044316098, -0.015422921, -0.03840589, -0.00044868223, -0.009632799, -0.026251337, 0.007988175, 0.007267673, -0.011705548, 0.010363744, 0.013063015, -0.022137165, 0.019777259, 0.0036077313, -0.039429214, -0.017782826, -0.0018743495, -0.021844788, -0.028005602, 0.016164307, -0.051542003, -0.004858168, 0.0045866743, 0.0016589821, -0.011256539, 0.01744868, -0.0031587228, -0.013063015, 0.022930762, 0.005127051, -0.014295178, -0.029780751, -0.00069896533, -0.0022228532, -0.03372785, 0.035461232, 0.01658199, -0.002895061, 0.016258286, -0.025290666, -0.026418408, 0.0031717755, -0.0014188148, -0.01049949, -0.02053953, -0.004427433, 0.0075861556, 0.009914735, -0.007815881, -0.026564598, 0.0034249953, 0.032036237, 0.051917918, -0.025144478, -0.012801964, 0.006004184, 0.0020779697, 0.008985392, -0.0051792613, 0.056512423, -0.010911952, 0.010186228, -0.015819719, 0.0067821173, -0.008129143, 0.004234255, -0.014441367, 0.007638366, -0.013021247, -0.0036912677, 0.011872621, -0.02297253, -0.0007374704, 0.0079516275, -0.012822848, -0.02013229, -0.00025387257, 0.028987156, -0.057389554, -0.009778989, 0.0072050206, -0.0002674146, -0.0045710113, -0.013428488, 0.028673893, -0.027024047, -0.031075567, -0.00026529355, 0.03387404, 0.008666909, -0.008745224, 0.010489048, 0.0628612, 0.014086338, -0.021990975, 0.025186246, -0.009622357, -0.019025432, 0.033498123, 0.003748699, -0.0070327264, -0.010891068, 0.01049949, -0.006933527, -0.012499144, 0.000978943, 0.020226268, -0.034145534, -0.013522467, 0.0155482255, 0.027671456, -0.0077219023, -0.013209204, -0.009705894, -0.013365835, -0.0003781983, -0.017584426, 0.023661705, 0.0042681918, -0.0130003635, 0.019244714, -0.0059571946, -0.019035874, -0.018430233, -0.019871239, 0.008035164, -0.00089279603, -0.008337984, -0.013167436, 0.015485574, -0.01090151, -0.002785419, -0.0085311625, -0.00029564078, -0.028130906, 0.007596598, -0.02829798, -0.02307695, 0.017239839, 0.024350882, -0.009497053, 0.003184828, 0.024789447, -0.0038948879, -0.011225213, -0.013856612, -0.009262106, 0.01658199, 0.016059887, -0.023974966, -0.014410041, -0.0038348462, 0.02652283, -0.03305956, -0.012937711, -0.025624812, 0.04473378, 0.014023685, -0.0031456703, 0.028235327, -0.011601128, 0.0012837206, 0.018022994, 0.009669347, 0.0373408, -0.0033910586, 0.0123947235, -0.019453555, -0.0072154626, -0.031681206, 0.034417026, 0.0076644714, -0.038176168, -0.029801635, -0.030950263, 0.022450427, -0.036421902, 0.02307695, 0.012614007, -0.009643242, 0.0068760957, -0.005346334, -0.0235364, 0.018900126, -0.0025778832, 0.0284024, 0.060647476, 0.019516207, 0.024538837, -0.00085690146, -0.020215826, 0.0006451234, -0.03940833, 0.028673893, 0.0068552117, -0.008275332, -0.010891068, -0.02009052, -0.018795706, -0.0028872292, -0.029446606, -0.02180302, 0.010160123, 0.04565268, 0.008640803, 0.025478624, -0.04203973, -0.040452536, 0.052878585, 0.017469564, 0.0020662225, -0.024831217, 0.031138219, -0.004991304, 0.036129523, -0.027024047, 0.011684664, -0.035544768, -0.01658199, 0.012185883, 0.02201186, -0.015871929, -0.010113134, 0.029634563, 0.028339747, -0.021280916, 0.02165683, -0.0020805802, -0.040786684, 0.031514134, 0.016675968, -0.047699325, 0.029676331, 0.004077624, -0.008458068, -0.008833982, 0.030574348, 0.03970071, -0.02424646, -0.0073355464, 0.032328613, -0.005502965, -0.04661335, -0.046279203, -0.03180651, 0.019140294, 0.024998289, -0.013418046, -0.01212323, -0.021270474, 0.005847553, -0.00674557, -0.0019030652, 0.012008368, -0.014389157, -0.0015088775, -0.033957575, -0.014316062, -0.028548589, -0.012342514, 0.022930762, -0.008693014, 0.043063052, -0.028778315, 0.026543714, 0.03404111, 0.013668655, -0.008087374, -0.008766108, -0.04018104, 0.054799926, 0.009048044, 0.04782463, 0.035252392, -0.014075896, -0.01815874, 0.0009221643, -0.011162561, 0.046738654, 0.0045501273, -0.0034902582, 0.0033101328, 0.0019252546, 0.053212732, 0.01810653, -0.0064270874, -0.010723994, 0.00023886209, 0.02403762, 0.008985392, 0.022951646, 0.01384617, 0.023202255, -0.044441402, -0.030073129, -0.025186246, 0.0070275054, 0.011517591, 0.014222085, 0.01501568, -0.0027932508, 0.0036129523, 0.03422907, -0.021782136, 0.013470256, 0.038677387, 0.029028924, -0.021228706, 0.038071748, 0.0050435145, 0.011340076, -0.021489758, -0.027922066, 0.011830852, 0.04728164, 0.0082179, -0.0005873658, -0.022638384, -0.02861124, -0.0071423682, 0.007053611, 0.023619937, -0.02089456, -0.0203829, 0.019056758, -0.008197016, 0.051542003, -0.019077642, -0.0065210657, -0.007476514, -0.00836931, -0.023411095, 0.030094014, -0.0063331085, -0.015234964, 0.033853155, 0.042895976, -0.026710786, 0.015099217, 0.012144115, -0.017730616, 0.0034067216, 0.01409678, -0.00603551, -0.0071789157, 0.009721557, 0.025541276, 0.053338036, 0.014430925, -0.021823904, 0.020957213, -0.0071319262, -0.01024366, 0.0136268865, 0.0009175959, -0.0052680187, 0.005093114, 0.03180651, 0.0048764413, 0.019631071, -0.027149353, 0.003743478, -0.018785264, 0.013334509, -0.005445534, 0.038552083, -0.011047699, -0.003534637, 0.010259323, 0.042979516, -0.029864289, 0.027191121, 0.017062325, 0.002855903, 0.014378715, 0.02272192, 0.010880625, 0.027107585, 0.0011042478, 0.010321975, 0.011914389, 0.025833653, 0.04087022, -0.020351572, -0.023369327, 0.02053953, 0.030950263, 0.013961033, 0.01673862, 0.010817973, -0.0016498453, -0.015673531, 0.0044509275, 0.007309441, -0.0070275054, -0.025666581, -0.059018515, -0.0038557302, 0.028151792, 0.028924502, 0.024204692, -0.025123594, 0.008019501, -0.00034001953, -0.016394032, -0.032078005, 0.00040560873, -0.0048712203, -0.006030289, -0.015057449, 0.02307695, -0.0050983354, 0.016070329, 0.003017755, -0.020518646, 0.015130543, -0.026146915, -0.021239148, 0.010457722, 0.032746296, 0.019338693, 0.012415608, -0.00044541908, -0.0024421364, 0.0073512094, 0.0065471707, -0.0024721574, 0.002342937, -8.696277e-05, 0.03412465, -0.026460176, -0.015349827, 0.00826489, 0.004398717, -0.008802655, -0.014650209, -0.017876804, -0.015443805, 0.010290649, 0.011225213, 0.020445552, -0.027671456, 0.018346697, -0.0033910586, -0.005286292, 0.032516573, -0.032286845, -0.010891068, 0.01917162, 0.036233943, -0.047657557, 0.019077642, -0.0008601646, -0.004367391, 0.012039694, -0.00765925, -0.010744879, -0.036254827, 0.017615754, 0.0048007364, 0.0124051655, -0.0068030013, -0.023097834, -0.029342186, -0.050038345, -0.0016067718, -0.0079620695, -0.027817644, 0.010087029, -0.005842332, -0.020811023, -0.008985392, 0.0130108055, -0.024434417, -0.025353318, 0.028632125, -0.011340076]"
../../../gradio,../../../gradio/gradio/components,checkbox.py,"""""""gr.Checkbox() component.""""""

from __future__ import annotations

from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import FormComponent
from gradio.events import Events


@document()
class Checkbox(FormComponent):
    """"""
    Creates a checkbox that can be set to `True` or `False`. Can be used as an input to pass a boolean value to a function or as an output
    to display a boolean value.

    Demos: sentence_builder, hello_world_3
    """"""

    EVENTS = [Events.change, Events.input, Events.select]

    def __init__(
        self,
        value: bool | Callable = False,
        *,
        label: str | None = None,
        info: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        interactive: bool | None = None,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
    ):
        """"""
        Parameters:
            value: if True, checked by default. If callable, the function will be called whenever the app loads to set the initial value of the component.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            info: additional component description.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            interactive: if True, this checkbox can be checked; if False, checking will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
        """"""
        super().__init__(
            label=label,
            info=info,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            interactive=interactive,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def api_info(self) -> dict[str, Any]:
        return {""type"": ""boolean""}

    def example_payload(self) -> bool:
        return True

    def example_value(self) -> bool:
        return True

    def preprocess(self, payload: bool | None) -> bool | None:
        """"""
        Parameters:
            payload: the status of the checkbox
        Returns:
            Passes the status of the checkbox as a `bool`.
        """"""
        return payload

    def postprocess(self, value: bool | None) -> bool | None:
        """"""
        Parameters:
            value: Expects a `bool` value that is set as the status of the checkbox
        Returns:
            The same `bool` value that is set as the status of the checkbox
        """"""
        return value
","The code defines a `Checkbox` component that can be used to create a checkbox interface element in Gradio. The component can be set to `True` or `False` and can be used as an input to pass a boolean value to a function or as an output to display a boolean value. The component has various parameters such as `value`, `label`, `info`, `every`, `show_label`, `container`, `scale`, `min_width`, `interactive`, `visible`, `elem_id`, `elem_classes`, and `render` that can be customized during initialization. The component provides methods for API information, generating example payload and value, preprocessing the input, and postprocessing the output.","[-0.029568337, 0.0125609, -0.03588829, 0.031351466, 0.002636604, 0.020934835, 0.021036405, -0.014287601, 0.016443156, 0.014039317, 0.035369147, -0.0037524702, 0.00075543154, 0.00026697558, 0.0066359476, -0.020709122, -0.024512377, -0.0015602376, 0.013858748, 0.03902569, -0.003986647, -0.014716455, -0.0037242563, 0.029636052, 0.0102699185, -0.049972747, -0.033811733, 0.017831286, 0.0069970875, -0.008684289, -0.054080714, -0.032999165, 0.031690035, -0.015122738, -0.032006033, -0.02726607, 0.0014911132, 0.0073638703, -0.02030284, -0.029026628, -0.07931537, 0.018305283, 0.0035690789, 0.02925234, -0.006827803, 0.045616496, -0.021950541, 0.031441752, 0.0007674225, -0.0013810784, -0.042343665, 0.036903992, -0.04803162, -0.019208133, 0.014310173, 0.02832692, -0.08360391, 0.020675264, 0.019320989, -0.0024024274, 0.016747868, -0.014502028, 0.004486036, 0.019490274, -0.015675733, -0.0005836784, 0.0050672456, 0.0069068023, 0.039296545, -0.0036198641, 0.08066965, 0.013858748, -0.0030753328, -0.010743915, 0.0045114285, -0.0063538067, 0.0020864299, -0.010901914, 0.025008945, 0.015156594, -0.018463282, 0.0096604945, -0.043810796, -0.033879448, -0.01697358, 0.016759153, -0.030290617, 0.016578583, -0.05633784, -0.04478136, -0.028981484, -0.023135532, -0.013813605, 0.06938402, 0.0116354795, -0.007454155, -0.030629186, -0.0030471187, 0.0025364442, -0.006709304, 0.03419544, -0.011009127, -0.021002548, -0.015416164, 0.05110131, -0.048392758, -0.027130643, 0.027356355, -0.016759153, -0.01787643, 0.014739026, -0.013926461, -0.10545288, 0.043088514, -0.016657582, -0.04263709, 0.038235698, -0.03340545, -0.025392655, -0.03534658, -0.012391616, -0.044894215, 0.03175775, -0.05168816, 0.022356823, -0.05313272, -0.010992198, -0.015213022, -0.034917723, 0.009383997, -0.00041545206, 0.020776836, 0.026069794, -0.040741105, -0.0038878978, 0.04139567, -0.04062825, -0.04247909, -0.03879998, 0.018463282, 0.016488299, -0.025731225, 0.035098292, -0.032931454, -0.0063876635, -0.014468171, -0.024805803, 0.0109752705, -0.05900125, 0.01833914, 0.0044691074, 0.02979405, -0.0039697187, -0.027717495, -0.0006884231, 0.04970189, 0.033315163, 0.003174082, -0.0009183677, -0.034421157, 0.014332743, 0.013994175, 0.04428479, -0.016172301, -0.03270574, -0.0076572965, 0.0038878978, 0.020415695, -0.021465259, 0.04753505, 0.011093769, 0.025144372, -0.009293712, 0.0074146558, -5.2592775e-05, 0.01996427, 0.022300394, -0.0124480445, -0.0040684678, 0.001691433, 0.0061224513, 0.021160547, -0.02283082, 0.008373934, -0.012120761, -0.0073017995, -0.0010777771, -0.05818868, -0.03575286, -0.031193467, 0.0066641616, -0.013091325, 0.021250831, 0.020675264, -0.0042716092, -0.023993239, 0.037603702, -0.026114935, 0.015009881, -0.03539172, 0.055705845, 0.003916112, 0.002385499, -0.022187538, -0.037152275, 0.016657582, -0.003083797, -0.03126118, 0.0009867868, -0.001777486, -0.017504005, -0.024715519, -0.012007905, -0.012594758, -0.056428123, 0.022300394, 0.0022359644, 0.034962866, 0.0010446256, -0.0066359476, -0.06392178, 0.00074767263, 0.022469679, -0.0418471, -0.008402147, -0.02148783, 0.004395751, -0.009485568, 0.0059136674, 0.0123464735, 0.033450592, -0.026972644, 0.0321866, 0.0041502886, 0.026069794, -0.02365467, 0.04315623, -0.029681193, 0.029207198, -0.010315062, -0.036159143, -0.0017718431, 0.033270024, -0.036903992, 0.012888184, 0.04281766, -0.019309703, -0.03209632, 0.020957405, 0.04094425, 0.0051913876, 0.031351466, 0.034218013, 0.008864858, 0.010986555, 0.014152174, -0.010710058, 0.037400562, 0.060852088, -0.005687955, -0.0128543265, -0.046722487, -0.038055126, 0.022074683, -0.024444664, 0.05078531, 0.008515004, 0.020810692, -0.014739026, 0.0026295506, -0.013102611, 0.01416346, 0.09254213, 0.021273402, 0.031644892, 0.0013295877, 0.028349489, 0.052320156, -0.015901446, 0.04606792, -0.056292698, 0.0020031985, 0.026227793, 0.045593925, -0.00065174483, -0.01039406, 0.024489805, -0.008334434, 0.018057, -0.02816892, 0.04821219, 0.026476076, 0.059362385, -0.0044352505, -0.005924953, 0.015698304, 0.06143894, -0.02197311, 0.021318546, -0.018192427, 0.013599178, 0.006116809, -0.036384854, -0.0067149466, 0.0033715805, 0.0015884517, -0.0044888575, 0.0325026, 0.0068785883, -0.012064333, 0.041892238, 0.031486895, -0.014750312, -0.031035468, -0.06812003, 0.0051913876, 0.026137507, 0.010501274, 0.000620004, -0.037287705, 0.0038427552, 0.026295505, 0.011246125, 0.0016420584, -0.03721999, -0.0015757554, -0.050965883, -0.011996619, 0.037084565, -0.0599041, 0.031012896, 0.012527044, -0.006788303, 0.017199293, 0.004257502, -0.027446639, -0.0650052, 0.05146245, -0.061077803, 0.023586957, -0.015935302, 0.002219036, 0.028868629, 0.08044393, 0.01581116, -0.010749558, -0.035730287, 0.008989, 0.028936341, -0.031577177, 0.014456886, -0.010399703, 0.0052196016, 0.0069632307, -0.012436759, -0.020991262, -0.0053888857, -0.032818597, -0.058233824, 0.012967183, -0.026137507, 0.043223944, 0.007126872, 0.048844185, -0.011601622, -0.0064215204, -0.06310921, -0.03360859, 0.014998595, 0.0031769034, 0.013836176, 0.009519424, -0.0047794622, -0.030787185, -0.036068857, -0.017571718, 0.024106095, -0.0053239935, -0.0084416475, -0.018361712, 0.042343665, -0.02853006, 0.0042264666, -0.014897025, -0.019106563, -0.0007582529, -0.04676763, 0.045819636, -0.0066754473, 0.01661244, 0.009107499, -0.014061889, 0.024128666, -0.03469201, 0.044668503, 0.017413719, -0.024602663, 0.052771583, 0.018147284, 0.004328037, -0.007561369, -0.04387851, -0.025866652, 0.06383149, -0.03681371, -0.028800914, 0.028236633, 0.021837683, 0.025324943, -0.0049092467, 0.040221967, 0.046903055, 0.04753505, -0.021013834, 0.0083908625, -0.029410338, -0.002470141, -0.03848398, 0.0028538525, 0.015687019, 0.03469201, -0.010805986, 0.020370552, -0.033179738, 0.04281766, -0.0047343196, -0.002532212, 0.045255356, 0.032006033, -0.067758895, -0.04785105, 0.020449553, 0.022063397, 0.01777486, 0.039838254, -0.021002548, 0.009124428, 0.006410235, 0.019117849, 0.01534845, -0.0469482, 0.034488868, 0.011680622, 0.020833263, -0.011725764, 0.0070027304, 0.012978469, -0.042907946, -0.022164967, -0.050649885, -0.021578114, 0.019704701, -0.05128188, 0.019998128, 0.015585448, 0.035730287, 0.042907946, 0.0063368785, 0.021239545, -0.022864675, -0.01761686, -0.010721344, 0.018169856, 0.057466403, -0.02383524, 0.036949135, 0.027108071, 0.009491211, 0.0022684105, -0.02022384, -0.042366236, -0.02439952, 0.053900145, 0.037626274, -0.033450592, 0.036114, 0.025956938, 0.042524233, 0.024128666, 0.0012569365, -0.0057697757, 0.014197316, 0.014987309, -0.011816049, 0.037174847, 0.09317412, 0.015788589, -0.057511546, -0.01418603, -0.03374402, 0.0075162263, -0.007978937, -0.0062127365, -0.008007151, 0.031735178, -0.010614131, -0.051417306, 0.039251402, 0.01681558, -0.02927491, 0.025482941, -0.0045227143, -0.0014473813, 0.036023714, 0.034376014, -0.015833732, 0.042456523, -0.021386258, -0.012414187, -0.014772883, -0.026927501, -0.010992198, 0.052545868, 0.0024108917, -0.022345537, -0.061484084, -0.009096214, 0.020517265, -0.043968793, 0.011291267, -0.029568337, 0.021532971, -0.01671401, -0.0026888002, 0.0078040096, 0.03554972, 0.0020553945, -0.0487539, 0.014851882, -0.0020257696, -0.037061993, -0.020393124, 0.016635012, 0.018057, -0.040763676, -0.0306969, -0.0037806844, -0.0076572965, 0.028349489, -0.020641407, 0.01093577, -0.024241522, -0.020810692, -0.008842287, 0.009062356, 0.046361346, -0.03304431, -0.05814354, 0.019873986, 0.029974619, 0.03394716, -0.07100915, 0.024670376, -0.015100166, 0.03557229, 0.037084565, 0.013317037, 0.023225816, -0.0058798105, -0.029545765, -0.0069914446, 0.0054537784, -0.001173705, 0.02961348, -0.02618265, -0.034624297, -0.030493759, -0.0072961566, 0.0027113713, 0.035640005, -0.007431584, 0.032592885, 0.0023840882, 0.049431037, 0.015111452, 0.002812942, -0.005812097, -0.019727273, 0.00916957, 0.005431207, 0.013317037, -0.049972747, 0.014197316, 0.008182078, -0.04331423, 0.013870033, 0.00967178, 0.010930127, 0.02853006, -0.0139716035, -0.015766017, 0.00051667, -0.0076347254, 0.0018536639, -0.01029249, 0.033112023, -0.031577177, 0.04329166, -0.034421157, 0.016691439, 0.0126511855, 0.007606511, 0.0150324525, 0.0051011024, 0.04575192, -0.0015038095, 0.029861763, -0.014231173, -0.018655138, 0.007990222, -0.04114739, 0.053042438, -0.03814541, -0.015551591, -0.0058910963, -0.014874454, -0.00216684, 0.0251218, 0.016984865, -0.019275848, -0.018485853, 0.019896558, -0.0046101776, -0.00848679, -0.0010545006, 0.030245475, 0.035843145, -0.005750026, 0.037423134, 0.027333783, -0.017086437, -0.0124480445, 0.008842287, 0.023609526, 0.00026415417, -0.03591086, 0.021420116, 0.016917152, -0.0024306416, -0.014287601, 0.034060016, 0.0048020333, -0.010078063, -0.01591273, 0.014739026, -0.011347696, 0.025166944, 0.05114645, 0.055344705, -0.0061901654, 0.02742407, 0.013757177, -0.022379395, -0.025753796, -0.004748427, -0.0048782113, -0.028214062, 0.00938964, 0.0015715233, 0.0011673569, -0.02239068, -0.019648273, 0.008802787, -0.010580273, -0.0095589245, 0.04879904, 0.016736582, 0.0030019763, -0.025753796, 0.01687201, -0.030990327, 0.008278006, -0.007962008, 0.017244434, -0.0058515966, 0.0062070936, -0.025956938, -0.0032276886, 0.0054481355, 0.02999719, -0.048121903, 0.0013415787, -0.024467235, -0.044149365, 0.0050446745, -0.05484814, 0.033157166, 0.0121433325, 0.007883009, -0.033360306, -0.0030132618, 0.038235698, 0.0028397453, 0.046722487, -0.048889328, 0.04094425, 0.026137507, -0.010219133, 0.047038484, -0.030990327, 0.033450592, 0.03270574, 0.021532971, -0.0418471, -0.02265025, 0.018327855, -0.01119534, 0.019806271, -0.012402901, 0.00031352876, -0.03645257, 0.042930517, 0.019309703, -0.007109944, -0.026318077, -0.022356823, -0.008537576, 0.014118317, 0.01777486, 0.0018720031, -0.032118887, 0.0058459537, -0.04191481, -0.018914707, 0.0374457, -0.03958997, -0.032570314, -0.02283082, -0.04983732, -0.008074865, -0.03263803, -0.01057463, -0.005431207, 0.040402535, 0.0005487635, 0.061168086, 0.008791502, -0.02742407, 0.013204182, -0.0032333315, 0.0059193103, 0.057601828, 0.007589583, -0.009163927, -0.00094023364, -0.017707145, 0.022887247, -0.029365197, -0.013204182, -0.0041643954, 0.007454155, 0.0060716663, -0.016115872, 0.010958342, -0.030110046, -0.024512377, 0.0045255357, -0.04532307, -0.01490831, 0.01867771, -0.002142858, 0.011251768, -0.017323434, -0.0021456794, -0.025595797, -0.03771656, 0.007990222, -0.014434314, 0.021995682, 0.025618369, 0.004234931, -0.009192142, -0.009581495, 0.009525067, 0.060400665, -0.022198824, -0.015201737, -0.033902016, -0.0003295755, 0.022740534, -0.004528357, 0.00575849, -0.003041476, -0.0068165176, 0.022401966, 0.021228261, 0.009017214, 0.045368213, 0.0069858017, -0.034624297, -0.008481147, 0.023880383, -0.045593925, -0.046316203, 0.0505596, 0.043043375, -0.023925524, -0.048302475, -0.0027960136, 0.03412773, -0.021510402, -0.032908883, -0.01859871, 0.040199395, 0.042524233, 0.007070444, -0.012098189, -0.05633784, -0.004689177, 0.007109944, -0.014863168, -0.016939724, -0.012041762, 0.0056456337, 0.0039894683, 0.03304431, 0.01934356, 0.031193467, -0.005402993, -0.013655606, -0.012391616, -0.00024546235, 0.012606043, -0.0018226284, -0.0022176253, 0.015156594, -0.025166944, 0.022853391, 0.049024753, 0.0126511855, 0.0032643669, 0.007708082, -0.0076685823, 0.031667463, -0.025663512, 0.012594758, 0.007279228, 0.05349386, -0.014874454, -0.022176253, 0.0053776004, 0.018993707, 0.019919127, 0.002441927, 0.0325026, 0.00020737336, -0.0024362842, 0.0111276265, 0.00088451087, 0.046903055, -0.012233618, -0.001548952, 0.008041007, -0.024512377, 0.0022458395, -0.012335188, -0.013350895, 0.0145246, -0.0063820207, 0.043246515, 0.009192142, -0.0128543265, -0.01687201, 0.038574267, -0.022988819, -0.047083627, -0.02746921, -0.012120761, 0.029116912, -0.0027099606, -0.0057669543, -0.0073356563, 0.020833263, -0.01007242, -0.013937747, -0.015766017, 0.025686081, -0.004776641, 0.016826866, -0.033179738, 0.007792724, 0.028281776, 0.022638964, -0.026092365, -0.01604816, -0.030042334, -0.007076087, -0.018813137, 0.012391616, -0.0019792165, -0.015145308, 0.030426044, 0.0004750543, 0.004257502, -0.018147284, 0.025189515, -0.02197311, 0.008148221, 0.012673757, 0.00028496204, -0.05484814, 0.028733201, -0.023428958, -0.0100667775, -0.013497608, -0.011962762, -0.030064905, -0.007871724, -0.018214999, -0.013215466, -0.014411743, -0.05493842, -0.014152174, 0.029387766, 0.014321458, 0.02546037, 0.02329353, 0.025370086, 0.015461306, 0.00075190474, -0.061845224, 0.0021414473, -0.018553568, -0.008814073, -0.0400414, 0.0019157348, -0.017188007, -0.010213491, 0.010958342, -0.0033377237, 0.009479925, 0.0144456, -0.0022232682, -0.021803828, 0.0052675656, -0.061168086, -0.03193832, 0.002523748, -0.015878875, -0.023079103, -0.010789057, -0.020494694, -0.019320989, 0.019535417, -0.0003815952, -0.04419451, -1.36221015e-05, -0.017910287, -0.022052111, -0.0040741106, 0.019196847, -0.0015687018, 0.06721718, 0.03794227, -0.0144456, 0.0016307728, 0.028936341, -0.010489988, 0.009942636, -0.0013916587, -0.040583108, -0.014987309, 0.0010185277, -0.01282047, 0.017041294, -0.008836645, 0.036046285, -0.03284117, 0.0033095095, 0.02058498, 0.007454155, -0.010952699, 0.046857916, -0.0043985723, 0.031644892, 0.007160729, -0.0063707354, -0.028417204, 0.04069596, 0.0087971445, 0.015867589, 0.03126118, 0.022198824, -0.027943207, -0.035278864, -0.0050333887, -0.024106095, 0.015483878, 0.025573226, 0.02764978, -0.0625675, -0.0016378263, -0.0041841455, 0.010021635, 0.029974619, 0.015946588, -0.0022740534, 0.010597202, 0.032480028, -0.019490274, -0.017932858, 0.020663979, -6.2952626e-05, 0.0091526415, 0.00062776287, -0.0076008686, 0.053313293, -0.01589016, -0.04934075, 0.012109475, 0.0024687306, 0.03017776, 0.0022486607, -0.022684107, 0.021510402, -0.04676763, 0.004672249, 0.034804866, 0.015009881, -0.027175784, -0.027288642, -0.0076347254, 0.030674329, 0.0132606095, -0.017944144, -0.0028312812, 0.015946588, 0.0030442972, 0.015055023, 0.0108342, -0.017786145, 0.016025588, -0.014795454, -0.003848398, -0.008108721, 0.024151238, 0.0028482096, -0.009327569, 0.0013119539, 0.020460838, -0.02437695, -0.016939724, -0.00012290751, 0.046857916, 0.0032756526, -0.0045452854, -0.018767994, -0.022255253, 0.015201737, 0.0003091203, -0.00816515, 0.013768462, -0.008492433, 0.022763105, -0.017989285, 0.007640368, -0.008142578, 0.00126399, -0.0163303, 0.03832598, -0.005355029, 0.0036903992, 0.036159143, -0.030380903, 0.0026013365, 0.009936993, -0.03685885, 0.026724359, 0.017041294, 0.019704701, -0.013091325, -0.0024151236, 0.019219419, -0.007375156, -0.028665487, -0.033134595, -0.0076460107, -0.032389745, 0.0012802131, -0.011872478, 0.006602091, 0.00066655723, -0.012797899, 0.030742042, 0.020652693, 0.010755201, -0.012910754, 0.0076911533, 0.02012227, -0.0020102519, -0.035120863, 0.033179738, -0.0073300134, -0.052545868, -0.036114, -0.018327855, 0.006652876, 0.041057102, 0.013892604, 0.008498075, 0.020957405, -0.0076855104, 0.016646296, 0.012481901, 0.02837206, -0.009440425, 0.00975078, -0.018192427, 0.0288912, 0.012222332, -0.025956938, 0.055931557, 0.008069222, -0.023564385, -0.014750312, 0.02120569, -0.02494123, -0.0023149638, 0.013836176, -0.020855835, 0.029929478, -0.027356355, 0.011849906, -0.014976025, 0.024106095, -0.017549146, 0.008932572, -0.02979405, -0.0032897596, 0.020810692, -0.019625701, 0.0024828375, 0.010049849, -0.035188578, -0.0028143527, 0.027017785, 0.019772414, -0.022717962, 0.022684107, -0.02192797, 0.008069222, 0.0022528928, 0.010219133, 0.071189724, -0.03444373, 0.0020934835, -0.030629186, 0.02455752, 0.009265498, 0.0016618082, -0.015935302, 0.031035468, 0.0048217834, 0.0016505227, 0.028507488, 0.0085432185, -0.030132618, -0.019490274, 0.011793478, -0.006438449, -0.0029906905, -0.022097254, -0.009615352, -0.02114926, 0.0076290825, 0.02742407, -0.024489805, -0.016465727, -9.980724e-05, 0.040989388, 0.040402535, -0.03017776, -0.027830351, 0.03356345, 0.004147467, 0.009615352, -0.01057463, -0.016307728, -0.0021626079, 0.022616392, 0.012572186, -0.023699813, 0.009479925, -0.016477013, 0.010202205, 0.043991365, -0.03444373, -0.005668205, 0.024805803, -0.0076460107, 0.0086447885, 0.015280736, -0.008396504, 0.0006824276, 0.019919127, -0.029636052, -0.0377617, 0.032118887, -0.013226752, 0.0069068023, 0.014287601, -0.009857994, -0.03175775, -0.017797431, 0.0010989377, -0.009632281, 0.013881318, -0.0129558975, 0.061303515, -0.01968213, 0.0016279514, -0.022334252, 0.0132606095, 0.008396504, -0.02102512, 0.0099144215, 0.0040092184, 0.008977715, 0.0045452854, 0.022763105, 0.030471187, 0.002993512, -0.01697358, 0.024647804, -0.020652693, -0.004770998, -0.008723788, -0.01563059, -0.025708653, -0.019219419, 0.024828374, -0.039296545, 0.05854982, 0.00048246045, 0.0053014224, -0.008661717, 0.009214712, 0.03252517, 0.021702256, 0.047805905, 0.017289577, 0.0016166657, -0.022503536, 0.026634075, 0.012617328, 0.018316569, 0.013113896, 0.03794227, -0.01596916, -0.023925524, -0.009519424, -0.01480674, 0.03017776, 0.013418608, -0.01001035, 0.020212553, 0.0100667775, -0.01689458, 0.022661535, -0.051372163, 0.03557229, -0.006619019, -0.0030019763, -0.007950723, 0.008294934, -0.020077126, 0.026453504, 0.017447576, -0.0233161, -0.022864675, 0.004105146, 0.02102512, -0.022853391, -0.0029963334, 0.0055327774, 0.05092074, -0.027717495, 0.018011857, 0.008983358, -0.013497608, -0.008706859, -0.036700852, -0.019388704, 0.008227221, -0.020268982, -0.03284117, 0.034985438, -0.041102245, -0.014716455, 0.058956105, -0.005992667, 0.060761806, -0.0107777715, -0.0048584617, 0.0034618655, -0.014118317, -0.0076911533, -0.0469482, -0.014073174, 0.015280736, -0.018542282, 0.0015503627, 0.003563436, 0.03263803, 0.015472592, -0.05182359, -0.006444092, -0.020099698, 0.0058233826, 0.0004221529, -0.0010545006, -0.006015238, 0.033586018, -0.004082575, 0.014964739, -0.011443623, -0.019264562, 0.020878406, 0.028620346, 0.01101477, 0.0044945, 0.021013834, -0.037964843, -0.0026055686, 0.0060095955, 0.018079571, 0.026295505, 0.011426696, 0.022684107, 0.053945288, 0.04209538, 0.007708082, -0.034940295, -0.019794986, -0.007104301, 0.023925524, 0.018835708, 0.016759153, -0.014095745, 0.04442022, 0.0020469301, 0.01354275, 0.003701685, 0.027311211, 0.005188566, 0.012685043, -0.01011192, 0.019004993, 0.006793946, 0.0030189047, -0.0002029649, -0.02349667, -0.051959015, -0.02169097, 0.042885374, 0.0060378094, 0.012741471, 0.021374974, 0.026498647, 0.010027277, 0.021905398, 0.036542855, -0.01354275, 0.010805986, -0.03214146, -0.0062014507, 0.025302371, 0.032412313, 0.019840129, 0.03354088, -0.020878406, -0.020415695, 0.028800914, -0.0082892915, 0.0031176538, 0.00052795565, -0.008639146, -0.0014897025, 0.023158101, -0.03394716, -0.006229665, -0.022187538, -0.015393592, -0.030313188, -0.0067205895, -0.014513314, -0.041485958, -0.02907177, 0.009925707, -0.021961827, 0.0036480783, 0.05615727, 0.040425107, -0.04394622, -0.029681193, 0.0233161, 0.002736764, -0.0029455482, 0.030200332, 0.0058741677, 0.017278291, -0.016025588, -0.0042180023, 0.008876144, -0.0010312239, 0.019907841, -0.02417381, -0.029658623, -0.022864675, 0.019219419, 0.017560432, 0.014897025, 0.0016928437, 0.03378916, -0.011550837, -0.008853572, 0.018971136, 0.004672249, 0.0108737, -0.05886582, 0.0061788796, 0.038438838, 0.030245475, 0.028913772, -0.0063763782, -0.007990222, -0.013982889, -0.013418608, -0.0071945856, -0.009440425, 0.012120761, -0.0021075904, 0.038303412, -0.007696796, -0.017346006, -0.020336697, 0.0453005, 0.0005096165, -0.0049205325, 0.025776368, 0.006884231, 0.014321458, 0.005047496, -0.034172874, 0.045797065, -0.004139003, -0.0090285, -0.0056428122, 6.145376e-05, -0.026137507, -0.012357759, 0.025415227, 0.014332743, -0.02507666, -0.027017785, -0.005744383, -0.017120292, 0.0011659461, 0.034376014, -0.0102699185, -0.032547742, 0.00068313297, 0.0326606, -0.022717962, 0.001292204, 0.02076555, -0.016522154, -0.024692947, 0.008063579, -0.03288631, -0.033879448, 0.001304195, -0.00026909163, -0.030471187, -0.010055492, 0.014671313, 0.002680336, 0.002417945, 0.0037073279, 0.053674433, -0.011364624, 0.025347514, -0.024286665, -0.010958342, -0.0039048262, 0.007160729, 0.01426503, 0.0015842196, 0.0059023816, -0.016386727, -0.0018367354, 0.0024532126, 0.027943207, 0.00880843, -0.017086437, 0.010687487, -0.006980159, -0.017109007, 0.014569742, 0.021657115, -0.011031698, -0.0039781826, -0.015269451, 0.0018818779, 0.03209632, 0.01906142, 0.019185562, 0.014073174, -0.032231744, 0.0027014965, 0.012910754, -0.005146245, 0.011330768, 0.001663219, -0.034782294, 0.028033493, 0.036610566, 0.011330768, -0.016781725, 0.016860723, -0.022977533, -0.0026634075, 0.01833914, -0.0577824, -0.0057754186, 0.012177189, 0.02726607, 0.016059443, -0.021837683, 0.007313085, 0.014897025, 0.012335188, 0.010456132, -0.013113896, 0.014411743, 0.0028199956]"
../../../gradio,../../../gradio/gradio/components,state.py,"""""""gr.State() component.""""""

from __future__ import annotations

import math
from copy import deepcopy
from typing import Any, Callable

from gradio_client.documentation import document

from gradio.components.base import Component


@document()
class State(Component):
    EVENTS = []
    """"""
    Special hidden component that stores session state across runs of the demo by the
    same user. The value of the State variable is cleared when the user refreshes the page.
    Demos: interface_state, blocks_simple_squares, state_cleanup
    Guides: real-time-speech-recognition
    """"""

    allow_string_shortcut = False

    def __init__(
        self,
        value: Any = None,
        render: bool = True,
        *,
        time_to_live: int | float | None = None,
        delete_callback: Callable[[Any], None] | None = None,
    ):
        """"""
        Parameters:
            value: the initial value (of arbitrary type) of the state. The provided argument is deepcopied. If a callable is provided, the function will be called whenever the app loads to set the initial value of the state.
            render: has no effect, but is included for consistency with other components.
            time_to_live: The number of seconds the state should be stored for after it is created or updated. If None, the state will be stored indefinitely. Gradio automatically deletes state variables after a user closes the browser tab or refreshes the page, so this is useful for clearing state for potentially long running sessions.
            delete_callback: A function that is called when the state is deleted. The function should take the state value as an argument.
        """"""
        self.time_to_live = self.time_to_live = (
            math.inf if time_to_live is None else time_to_live
        )
        self.delete_callback = delete_callback or (lambda a: None)  # noqa: ARG005
        try:
            self.value = deepcopy(value)
        except TypeError as err:
            raise TypeError(
                f""The initial value of `gr.State` must be able to be deepcopied. The initial value of type {type(value)} cannot be deepcopied.""
            ) from err
        super().__init__(value=self.value, render=render)

    @property
    def stateful(self):
        return True

    def preprocess(self, payload: Any) -> Any:
        """"""
        Parameters:
            payload: Value
        Returns:
            Passes a value of arbitrary type through.
        """"""
        return payload

    def postprocess(self, value: Any) -> Any:
        """"""
        Parameters:
            value: Expects a value of arbitrary type, as long as it can be deepcopied.
        Returns:
            Passes a value of arbitrary type through.
        """"""
        return value

    def api_info(self) -> dict[str, Any]:
        return {""type"": {}, ""description"": ""any valid json""}

    def example_payload(self) -> Any:
        return None

    def example_value(self) -> Any:
        return None

    @property
    def skip_api(self):
        return True
","The code defines a `State` component that is used to store session state across runs of a demo by the same user. The component allows for setting an initial value, specifying a time to live for the state, and providing a delete callback function. The state value is deepcopied to ensure immutability. The component has methods for preprocessing and postprocessing data, as well as providing API information. The component is designed to be skipped in the API.","[-0.0035987827, -0.002385317, -0.0027864766, 0.01683205, 0.039789688, -0.0095679015, -0.0111459065, -0.0060323724, 0.054650895, 0.014088851, 0.075850755, -0.052333824, -0.01367604, -0.0180838, 0.02119986, -0.01831018, 0.0005892549, 0.044929855, 0.024968429, 0.032385714, -0.010187118, -0.03179979, -0.0007698599, 0.005526345, -0.0061255875, -0.028390767, -0.012304441, -0.0075970604, 0.0021106645, -0.053479042, 0.025261391, -0.041307766, 0.022544825, 0.00019569005, 0.021945583, 0.038431406, -0.0074439207, 0.016872, -0.05497049, 0.021053378, -0.03401033, -0.049643893, -0.0070644007, 0.068127185, -0.043864533, 0.034729417, -0.036753524, 0.027778208, -0.0027598436, 0.047992647, -0.02697922, -0.04588864, 0.009474686, -0.0088155195, -0.031400297, -0.009095166, -0.013875788, 0.05262679, 0.013163355, 0.014688094, 0.028097805, -0.0056861434, -0.029722417, 0.057793587, -0.01728481, 0.024462402, -0.0007282458, 0.0490047, -0.04996349, 0.03757915, 0.03195959, 0.011618642, -0.011958213, -0.04873837, -0.019189069, 0.006798071, 0.0012475891, 0.045329347, 0.00892871, -0.002636666, -0.011758465, 0.010912867, 0.02210538, -0.01591321, -0.016685568, -0.0010212087, -0.04255952, -0.0033374466, -0.01447503, 0.025288023, 0.01303019, 0.02546114, 0.005349902, 0.054038335, 0.06120261, 0.0053998386, -0.024861896, -0.050576046, 0.017497875, 0.0053166104, 0.02294432, -0.036300763, -0.068446785, 0.0032925033, 0.020001376, 0.013496268, -0.03502238, 0.031693257, -0.08879439, -0.016099643, -0.0030677875, -0.03491585, -0.029189756, -0.008722304, -0.04008265, -0.036993224, -0.014621511, -0.021985533, -0.029243022, -0.037925377, -0.016925264, 0.028843528, -0.012877051, -0.015021007, 0.0007165939, -0.034676153, 0.0111259315, -0.036061067, 0.002431925, 0.030042013, 0.006045689, 0.0048838244, 0.01660567, -0.048072547, -0.0034023644, 0.008416025, -0.04016255, 0.0052799904, -0.012697278, 0.016898632, 0.010679829, -0.023184018, 0.035395242, -0.002853059, 0.012137985, 0.009641143, -0.015180804, 0.04865847, -0.05406497, 0.0063053602, 0.041760527, -0.006398576, -0.03171989, -0.013689357, 0.029269656, -0.0126639865, 0.00035559203, -0.0009438066, -0.015833313, -0.016805416, -0.029695783, 0.012703937, 0.061255876, -0.030521406, -0.025101593, 0.008542531, 0.015407184, -0.009274939, -0.0310008, -0.016499138, 0.046554465, -0.043092176, -0.03134703, -0.013875788, -0.032146018, -0.008995293, -0.004201354, -0.011984846, -0.026153596, -0.018057168, 0.008083113, -0.047246926, -0.057420727, 0.025248075, -0.045648944, 0.008755595, 0.024036273, 0.00090468937, -0.009514635, -0.002746527, -0.022411661, 0.026859371, -0.008655721, -0.016658936, 0.03765905, -0.045409247, 0.054650895, 0.032359082, 0.010020662, -0.020014692, -0.005010331, -0.028097805, 0.0020124554, 0.016166225, 8.624511e-05, 0.017125012, 0.003925037, 0.011611983, -0.010433474, -0.025740786, 0.015140855, 0.044823322, 0.038777635, -0.015380552, -0.04330524, -0.026672939, -0.025141543, -0.0006325335, -0.0046973936, 0.018709674, -0.022624725, -0.00034352395, 0.005569624, -0.027565144, 0.024036273, 0.010759728, 0.00070119667, -0.042293187, -0.030654572, -0.012770519, -0.01470141, 0.013689357, 0.03262541, -0.0038850873, -0.0031143953, -0.0015988117, -0.0037219604, -0.055609684, 0.00030274218, 0.017071746, -0.04604844, 0.024688782, -0.014355182, 0.017138328, 0.04319871, 0.05291975, -0.014767993, -0.027298814, -0.03893743, 0.029109858, -0.012810468, -0.024742048, 0.03582137, 0.007210882, -0.017910685, -0.01307014, 0.063226715, 0.0670086, 0.050549414, -0.012710595, -0.00877557, -0.061415676, -0.0096078515, 0.029562619, -0.027645044, 0.037179653, 0.06003076, -0.024981745, 0.010200435, -0.024462402, 0.015300653, 0.0058592577, 0.016219491, 0.020906897, 0.008955343, 0.0031576739, 0.03707312, 0.048445407, -0.017111696, 0.04588864, -0.0048039258, -0.014408448, 0.014621511, 0.06610308, 0.0061189295, 0.06599655, -0.019881526, 0.023397082, 0.019854894, -0.012277808, 0.02815107, 0.008802203, 0.039922852, 0.006588336, 0.04335851, 0.02097348, -0.024249338, 0.018589826, 0.008402708, 0.016246123, 0.017577773, -0.015979795, -0.026419926, -0.0032458957, 0.025780734, -0.013443002, 0.012777177, 0.001967512, 0.01865641, -0.050522782, 0.011578692, 0.011838364, 4.0469662e-05, -0.009940763, -0.025514403, -0.007969922, 0.0696719, 0.012797152, 0.0126506705, -0.03840477, 0.0066682347, -0.030494774, 0.02257146, -0.02716565, -0.029429454, 0.00908185, -0.036460564, -0.025021695, -0.0063852593, -0.01568683, -0.027671676, -0.028017905, -0.030388242, -0.018509928, 0.019841578, -0.0491645, -0.012897025, 0.0012542474, -0.016139591, 0.070950285, -0.052786585, -0.02214533, -0.031133965, 0.035315346, 0.040109284, 0.028044539, -0.0518278, -0.034143493, -0.023623463, -0.076010555, 0.015154171, -0.032518882, -0.0012758867, -0.04239972, 0.062321197, -0.004227987, 0.02214533, -0.024781996, -0.033371136, -0.029003326, -0.0133697605, 0.016965214, 0.025248075, -0.007177591, -0.015527033, 0.015433817, -0.06674227, -0.042000227, 0.030787736, 0.010899551, 0.031560093, -0.01728481, 0.01839008, 0.02321065, -0.031666625, 0.0490047, 3.7452643e-05, 0.017537823, 0.010080586, 0.0194554, 0.00015698899, -0.015819997, 0.011825047, -0.002515153, 0.04612834, 0.042080123, 0.001857651, 0.03587464, -0.0058892197, -0.021186544, -0.014461714, -0.021000113, 0.03619423, -0.0011052691, 0.03225255, 0.033610832, -0.03619423, 0.0389907, 0.023756627, -0.0194554, -0.017151646, -0.025634253, -0.0027831474, -0.005379864, 0.0070377677, -0.011292388, 0.032838475, -0.020494085, 0.06104281, -0.017870735, 0.045648944, 0.0018060496, 0.032305818, -0.0015239064, 0.008722304, -0.029083224, -0.0038418088, -0.029349554, 0.04069521, 0.021372974, 0.03920376, -0.05435793, -0.021253126, -0.041920327, 0.04088164, 0.03741935, 0.026126962, -0.016738834, 0.017617723, -0.05614234, 0.024555616, 0.012950291, 0.039070595, 0.005752726, 0.003931695, -0.0053166104, -0.012763861, -0.0017261506, 0.015127538, -0.043038912, -0.027458612, -0.015247387, -0.026379976, -0.010207093, -0.051641367, -0.036513828, -0.021119962, -0.035182178, -0.0047306847, -0.026486509, -0.002556767, 0.00025987971, -0.03989622, 0.022038799, -0.004148088, -0.048152447, 0.022584775, 0.013203304, 0.025261391, 0.002283779, -0.0219589, 0.0231707, -0.023144068, 0.07430604, 0.007410629, 0.033797264, 0.035927903, 0.018430028, -0.010846285, 0.0018693029, -0.0025068303, -0.0013133393, 0.059391566, -0.0006317012, 0.034622885, 0.01789737, -0.037445985, 0.01006727, 0.009215014, -0.024635516, -0.02408954, -0.00086141075, -0.039257027, 0.023383765, 0.06871311, 0.10440132, -0.015380552, -0.024382502, 0.030681204, 0.0063852593, -0.01097945, -0.006598323, 0.015433817, -0.014315232, 0.018549878, -0.009341521, -0.042905748, -0.011798414, 0.04122787, -0.0066316146, 0.061362408, -0.01968178, -0.013016874, 0.07830099, 0.013076798, -0.03464952, -0.022931004, 0.02390311, 0.041121338, -0.05177453, -0.010426816, 0.07073722, 0.018216966, -0.06242773, -0.0231707, -0.04764642, -0.0015313969, 0.006884628, -0.012430948, 0.008609114, 0.0004153082, 0.046208236, 0.021093328, -0.014568245, -0.001721157, 0.0006824704, 0.010406841, -0.047087125, 0.033903796, 0.003327459, 0.010912867, -0.009414762, 0.029509353, 0.03393043, -0.050203186, -0.010886234, 0.015620248, 0.011671908, 0.0014498334, -0.03464952, 0.019189069, -0.006461829, 0.040002752, -0.042959012, -0.00028692884, 0.027192283, -0.023956375, -0.016033059, 0.0069512106, -0.00535656, 0.013629433, -0.014102168, -0.0020390882, -0.043784637, 0.0335043, -0.0013016873, -0.004274595, -0.02534129, 0.001647084, 0.0035654914, -0.0068979445, -0.028230969, 0.021839052, -0.0038884166, 0.012564113, -0.0014964411, -0.0038817583, -0.020147856, -0.035581674, 0.022824472, -0.049377564, 0.06514429, -0.01591321, 0.007916656, -0.018789575, -0.0046940646, 0.02735208, -0.029269656, 0.007963264, -0.008089771, -0.007696934, -0.038244974, -0.05140167, 0.011252439, -0.03944346, 0.05869911, 0.0014673113, 0.021000113, -0.0018892777, 0.015846629, -0.028284235, -0.017311443, 0.015606932, 0.022518193, 0.026752839, 0.036513828, -0.0072241984, 0.0070910337, -0.044876587, 0.0042679366, 0.008609114, 0.008615772, -0.023050852, 0.0073573636, 0.023370448, -0.006112271, -0.040402245, 0.015207437, -0.017644355, 0.003415681, -0.00087139814, 0.057154395, 0.005696131, -0.033424404, -0.008495924, 0.011984846, -0.01812375, 0.0030478127, 0.03760578, -0.0149411075, 0.0040082647, 0.0076769595, -0.01504764, -0.037552517, 0.012877051, 0.04455699, -0.0051634707, 0.0049370904, -0.035927903, 0.013423027, -0.0142087005, 0.020680517, 0.018643092, 0.021865685, -0.013203304, 0.028017905, 0.016459187, 0.032305818, -0.013123406, -0.027072433, 0.0034123517, -0.0010228732, 0.04647457, -0.013010216, 0.057420727, 0.014235333, -0.030521406, 0.0620016, 0.019668464, -0.006195499, -0.019854894, -0.016432555, -0.016658936, 0.020028008, 0.016672252, -0.012510847, 0.024755364, -0.021905635, 0.022158647, -0.007996555, -0.021306392, -0.0010187118, -0.03313144, -0.0047306847, -0.0015006025, 0.03464952, 0.010393525, -0.0040249107, 0.035395242, 0.01660567, -0.059071973, -0.01751119, 0.027099067, 0.04231982, 0.044077598, -0.023037536, -0.015886579, -0.055183556, -0.0031044078, 0.010999424, -0.0076503265, 0.01591321, -0.007703592, 0.004843875, -0.030894268, -0.037019856, -0.016845366, -0.015606932, 0.025234757, -0.0016246124, -0.026792787, 0.035927903, 0.0095878765, 0.00087472727, 0.0017993913, 0.009448053, -0.016965214, 0.0072241984, 0.06306692, 0.003312478, -0.008842153, -0.0080098715, -0.031027433, 0.0032891743, -0.00042654396, -0.010193777, -0.021066695, 0.044237398, -0.0055096997, -0.039230395, -0.0026466534, -0.0055829403, -0.036673628, 0.045036387, -0.036567096, -0.03046814, -0.004081506, 0.0032425665, -0.0004390282, -0.009201698, -0.028976694, 0.020121224, -0.025141543, -0.031054066, 0.01048674, -0.008182986, -0.0061455625, 0.0007902507, -0.013096773, 0.010766386, -0.011685224, 0.02218528, 0.010127194, 0.027045801, -0.014568245, 0.031853057, -0.052866485, -0.01675215, -0.020507403, -0.008502582, -0.008196303, 0.016206175, -0.019175753, -0.015220754, 0.056089077, -0.0335842, -0.002648318, -0.010440132, 0.04239972, -0.02948272, 0.00050810754, 0.01117254, -0.037552517, 0.036806792, 0.019921476, -0.011392262, -0.0126573285, 0.009048558, -0.008089771, 0.036220867, 0.0040681893, 0.043251976, -0.033291236, 0.0053465725, -0.020534035, -0.037445985, 0.0054298006, 0.0068147164, -0.01876294, 0.014275283, -0.029908847, -0.019135803, -0.042186655, 0.022704624, 0.024489034, 0.01227115, 0.022358395, -0.02948272, -0.018403396, 0.021000113, -0.0063319933, 0.0080498215, 0.033024907, -0.03028171, 0.028417401, -0.0045043044, 0.0193755, 0.0042978986, -0.042666048, -0.021705886, -0.010726437, 0.007929972, 0.019082537, -0.0020157844, 0.004947078, -0.029749049, 0.0309209, -0.04943083, -0.004840546, 0.026792787, -0.019788312, 0.02902996, -0.029109858, 0.0031693259, -0.027778208, 0.0515881, -0.025900582, -0.032545514, -0.033371136, -0.0080498215, -0.015593615, -0.006225461, -0.049031336, -0.031240497, 0.011944896, -0.0061988286, -0.015806679, 0.014022269, -0.01660567, -0.042266555, 0.0067647793, 0.024835262, -0.0011818389, -0.013702673, 0.016845366, -0.02271794, 0.013915737, 0.036939956, -0.0059591313, 0.007843415, 0.013116747, -0.011259097, 0.029749049, 0.011605325, 0.019308917, 0.004371139, -0.025620935, 0.008342784, -0.043997698, -0.006222132, -0.0063253352, 0.049297664, -0.0044011017, -0.0026999193, 0.07883365, -0.03803191, 0.0015538685, -0.02378326, -0.014222017, 0.008562506, -0.021226494, 0.022731258, -0.012517505, -0.013516243, 0.02556767, 0.0074772118, 0.017963951, -0.008708987, 0.0037086438, 0.024022957, 0.031853057, 0.00642188, -0.016552404, 0.04429066, 0.014554929, 0.014022269, -0.007377338, 0.011032716, 0.036833424, 0.018483294, 0.006831362, 0.0063353223, 0.03502238, -0.01972173, -0.00063586264, -0.0020224426, 0.018190332, 0.017497875, -0.032945007, 0.020613935, 0.015979795, -0.008888761, -0.015873263, -0.027565144, -0.0017461254, -0.01675215, -0.008369417, 0.015527033, -0.025900582, 0.022464927, -0.025168175, 0.005276661, -0.0028730338, -0.022318445, 0.017631039, 0.0036220867, 0.005036964, 0.030334976, -0.011139248, 0.041840427, -0.023596829, -0.009501319, 0.0064451834, -0.000796909, -0.0048538623, -0.019335551, 0.035262078, -0.0025767419, -0.032225918, -0.040908273, -0.025021695, -0.046447933, -0.0022671332, 0.058752377, -0.009947422, -0.009401445, -0.006215474, -0.0038318215, -0.015527033, 0.0010053953, -0.018376762, -0.031560093, 0.014648144, 0.04197359, -0.008249569, 0.0036686943, 0.011259097, 0.028657097, 0.016885316, 0.014421764, 0.04801928, 0.015087589, 0.022957638, 0.017497875, 0.012084719, -0.048978068, -0.028790262, 0.0016762138, -0.027991273, -0.0041514174, -0.025780734, -0.0030827685, -0.0011535414, -0.043518305, 0.0026766155, -0.013329811, 0.036913324, -0.0054863957, -0.007051084, -0.0073307306, -0.024515668, 0.009374812, 0.076010555, -0.0134363435, -0.03795201, -0.019082537, 0.012464239, -0.0023270575, 0.047992647, -0.017338077, -0.015300653, -0.0021073353, -0.023583513, -0.0035322004, 0.0103602335, -0.028470665, -0.0030561355, -0.025967166, 0.014688094, 0.039257027, 0.01972173, 0.0439178, -0.0008580816, 0.0011235792, 0.027458612, 0.002025772, 0.0024119501, -0.0037785554, 0.0126639865, 0.015966477, -0.010699804, 0.051348403, 0.047007225, -0.009334863, -0.03315807, -0.010679829, 0.0167921, 0.032092754, 0.008369417, 0.021306392, 0.01097945, 0.022158647, -0.0077435416, -0.008542531, -0.011338996, -0.01447503, -0.028470665, 0.0012567443, 0.057740323, -0.006425209, -0.037259553, 0.033770632, 0.052014228, -0.008143037, 0.01504764, 0.006884628, 0.0025051655, -0.0020873605, -0.052333824, -0.0028830213, 0.023996323, -0.019348867, -0.02921639, -0.008023188, -0.007210882, -0.03454299, -0.01812375, 0.022864422, 0.002545115, -0.02191895, 0.004744001, -0.035208814, -0.0014997702, -0.03643393, 0.0070976918, -0.03797864, 0.031240497, -0.012783835, 0.00052308856, 0.01063988, -0.018922739, 0.058219716, -0.022012167, -0.00626874, -0.0062354486, 0.04247962, -0.0052333823, 0.0019608538, 0.0030344962, -0.030494774, -0.0049970145, 0.011179198, 0.038671102, -0.0118982885, 0.010992766, 0.011751806, 0.041414298, -0.013755939, 0.0031626676, 0.011352312, -0.02868373, 0.00038222503, 0.0066981968, -0.0022887725, -0.02279784, 0.009288255, -0.0088554695, -0.029056592, 0.00073282333, 0.010313625, -0.017484557, -0.001365773, 0.0011743484, -0.028523931, 0.0015297324, 0.0028181032, 0.014048902, -3.284909e-05, 0.048605207, 0.029562619, 0.012577429, 0.03028171, 0.0414942, -0.05497049, -0.041281134, 0.024236022, -0.028923428, -0.00079649285, -0.02115991, 0.008389392, -0.037019856, 0.031080699, -0.0310008, -0.02435587, 0.012544138, 0.004364481, -0.014461714, 0.02431592, 0.022837788, 0.0111259315, 0.0057693715, 0.016219491, -0.0058259666, -0.024662148, 0.0205873, 0.016632302, -0.01898932, -0.0077435416, 0.019801628, -0.012104694, 0.05092228, 0.0031976234, -0.004371139, 0.043331873, 0.006751463, 0.016712202, -0.00049229414, 0.032998275, 0.0039949487, 0.012783835, 0.012251175, 0.035581674, 0.044743422, -0.0008310325, -0.015646882, -0.019135803, 0.0020990125, -0.025234757, 0.013875788, -0.0036387322, 0.031054066, -0.0033357819, -0.0048771664, 0.034143493, -0.022291813, 0.007230857, 0.043678105, -0.055982545, 0.0005996584, 0.011392262, 0.014395131, 0.042106755, 0.036140967, 0.00919504, -0.007936631, 0.010786361, -0.0010744747, -0.022211913, -0.043864533, -0.04445046, 0.01572678, -0.0039483407, -0.006052347, -0.015433817, -0.04061531, 0.016126275, 0.0065550446, 0.039763052, 0.029456086, -0.005869245, -0.02632671, 0.016725518, 0.0077435416, 0.019189069, 0.01307014, -0.029775683, -0.0014365169, 0.0032126044, 0.0048239003, -0.01697853, 0.010426816, -0.037845477, 0.015593615, 0.008376075, -0.018722992, -0.005962461, -0.0023720006, 0.003635403, 0.020201122, 0.03678016, -0.015114222, 0.003339111, -0.008582481, 0.015393868, 0.0007274135, -0.02191895, 0.018709674, -0.019828262, -0.02472873, 0.020467453, -0.013316495, -0.023889791, -0.0027565144, 0.0017011822, 0.04018918, 0.010573297, 0.003928366, -0.007497187, -0.011785098, 0.0049337614, -0.020214438, 0.01880289, -0.000595497, -0.019854894, -0.031107333, 0.0069046025, 0.00626874, 0.0066848802, 0.03811181, -0.0070444257, 0.025168175, -0.007983238, -0.0063086892, 0.024329236, 0.035688207, -0.0059324983, -0.008469291, -0.011998162, 0.015846629, -0.02279784, 0.022171965, -0.016991848, 0.014554929, -0.028444033, -0.035661574, -0.00044859943, 0.021253126, -0.00013618197, 0.026340026, -0.00055305066, -0.0062887147, -0.0065583736, 0.026752839, 0.023796577, -0.0023503613, 0.030414874, 0.018683042, 0.013289862, 0.02142624, -0.03776558, 0.029855581, 0.024022957, 0.03286511, 0.007876706, 0.018603144, 0.019841578, 0.0014207036, 0.038644467, 0.012710595, -0.0050702556, 0.013556192, 0.00170035, 0.00084143603, -0.02400964, -0.019242335, -0.0023953046, -0.015327286, -0.006085638, 0.012517505, -0.015247387, 0.0035155546, -0.01022041, -0.0033490984, -0.005296636, 0.0149677405, -0.019482031, -0.030414874, -0.058645844, 0.025514403, -0.012717253, -0.010113878, 0.0036720235, -0.029296288, -0.036140967, -0.018283548, -0.039789688, -0.027511878, 0.019761678, -0.032119386, 0.0037252894, -0.034756053, 0.04647457, -0.005672827, 0.009874181, -0.035688207, 0.017164962, -0.059711162, -0.047246926, 0.019828262, -0.01785742, -0.010386866, -0.030361608, 0.008675696, -0.0029845594, 0.005499712, 0.008189645, 0.019015955, 0.01941545, 0.0032625413, 0.033291236, 0.020720467, 0.031240497, 0.043704737, 0.01394237, 0.0054564336, 0.02062725, 0.022424977, 0.004281253, 0.027991273, 0.020986795, -0.030255076, -0.0057660425, -0.034862585, 0.003795201, -0.016419237, 0.023010904, -0.0008077286, -0.010626563, -0.022012167, -0.032225918, -0.041653994, -0.0029712429, -0.025527721, -0.021905635, -0.020600617, -0.003282516, 0.0021223163, 0.010999424, -0.0069578686, 0.05443783, -0.010786361, 0.056461938, -0.02382321, 0.019348867, 0.0043977723, 0.0025883936, -0.032199286, -0.015859945, 0.013249912, 0.033424404, -0.0014273617, 0.037712313, 0.026273444, -0.026992535, -0.0059125237, -0.039656524, 0.0006716507, 0.040295713, 0.002218861, -0.012877051, 0.030814368, -0.029589253, 0.010846285, 0.040828373, 0.0013624439, -0.0206672, 0.0014148776, 0.0052899774, -0.015926529, -0.03528871, 0.030255076, 0.021519456, -0.027804842, 0.0042612785, -0.01732476, -0.009208356, 0.018443346, 0.015287336, 0.029269656, -0.010153827, -0.029109858, 0.05273332, 0.025234757, 0.026832737, 0.007963264, 0.027565144, -0.01215796, 0.0015122545, -0.018563194, 0.046021808, -0.036860056, -0.009374812, 0.000802735, 0.013176672, -0.013835838, 0.0080631375, 0.015939845, 0.029722417, -0.012337732, -0.0068446784, 0.019335551, 0.0149411075, -0.005732751, -0.030388242, -0.029695783, -0.0057993336, -0.017218228, -0.005116863, 0.0011002754, 0.011299046, -0.02378326, 0.022504877, 0.03305154, -0.0095878765, 0.029722417, -0.011725173, -0.013236596, -0.0027032485, 0.024795314, 0.021093328, -0.015340602, -0.016805416, 0.018469978, 0.04330524, 0.008236252, 0.010440132, 0.001967512, -0.008362759, -0.040855005, -0.0010311961, -0.022278495, 0.0030378255, -0.016499138, 0.0059091947, 0.015819997, -0.02724555, 0.033397768, -0.023237284, 0.0048072548, -0.058113184, 0.010673171, -0.023104118, -0.019095853, -0.007610377, 0.01599311, 0.008722304, -0.026087014, 0.009681092, -0.0026083684, -0.011085982, 0.03749925, 0.028657097, -0.014541612, -0.005756055, -0.016459187, 0.02913649, 0.02743198, 0.016112959, -0.013969003, 0.007051084, 0.017457925, 0.0049104574, 0.017164962, 0.006055676, -0.0027798184, -0.01697853, 0.025354607, 0.012337732, -0.026792787, -0.049750425, -0.0126773035, 0.0052566864, -0.018789575, -0.016645618, -0.02716565, -0.0036953273, 0.0029079895, 0.0012775513, 0.015966477, -0.01595316, -0.025767418, -0.005835954, -0.0014032257, -0.011665249, -0.0080165295, 0.025394555, 0.012450922, -0.022158647, 0.0021905634, -0.0058525996, 0.011505452, 0.016206175, 0.013929053, 0.008782228, -0.030388242, 0.020613935, 0.027325448, 0.011179198, 0.022891054, 0.012883709, -0.0087888865, 0.008269544, -0.015540349, -0.017564457, 0.018017218, -0.0065017785, 0.008389392, -0.02032097, 0.016738834, 0.030654572, -0.00554632, -0.005752726, 0.0095878765, -0.0076769595, 0.005839283, -0.027178966, 0.009055217, -0.016139591, 0.0056828144, -0.009514635, -0.0073040975, -0.0011868326, 0.00877557, 0.034436457, 0.006774767, 0.005386522, -0.021213176, -0.012204568, -0.026912637, -0.010986108, -0.007317414, -0.04461026, -0.0023303865, 0.003051142, -0.021892319, 0.021705886, 0.030361608, 0.013849155, 0.020680517, 0.0025933874, -0.02378326, 0.012171276, 0.005439788, -0.026619673, 0.016152909, -0.03182642, 0.021293076, 0.05443783, -0.025434505, 0.025700836, 0.0044743423, -0.019841578, 0.0022122026, -0.018256914, 0.0052899774, -0.037366085]"
../../../gradio,../../../gradio/gradio/components,label.pyi,"""""""gr.Label() component.""""""

from __future__ import annotations

import json
import operator
from pathlib import Path
from typing import Any, Callable, List, Optional, Union

from gradio_client.documentation import document, set_documentation_group

from gradio.components.base import Component
from gradio.data_classes import GradioModel
from gradio.events import Events

set_documentation_group(""component"")


class LabelConfidence(GradioModel):
    label: Optional[Union[str, int, float]] = None
    confidence: Optional[float] = None


class LabelData(GradioModel):
    label: Optional[Union[str, int, float]] = None
    confidences: Optional[List[LabelConfidence]] = None

from gradio.events import Dependency

@document()
class Label(Component):
    """"""
    Displays a classification label, along with confidence scores of top categories, if provided. As this component does not
    accept user input, it is rarely used as an input component.

    Guides: image-classification-in-pytorch, image-classification-in-tensorflow, image-classification-with-vision-transformers
    """"""

    CONFIDENCES_KEY = ""confidences""
    data_model = LabelData
    EVENTS = [Events.change, Events.select]

    def __init__(
        self,
        value: dict[str, float] | str | float | Callable | None = None,
        *,
        num_top_classes: int | None = None,
        label: str | None = None,
        every: float | None = None,
        show_label: bool | None = None,
        container: bool = True,
        scale: int | None = None,
        min_width: int = 160,
        visible: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        color: str | None = None,
    ):
        """"""
        Parameters:
            value: Default value to show in the component. If a str or number is provided, simply displays the string or number. If a {Dict[str, float]} of classes and confidences is provided, displays the top class on top and the `num_top_classes` below, along with their confidence bars. If callable, the function will be called whenever the app loads to set the initial value of the component.
            num_top_classes: number of most confident classes to show.
            label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            show_label: if True, will display label.
            container: If True, will place the component in a container - providing some extra padding around the border.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
            visible: If False, component will be hidden.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            color: The background color of the label (either a valid css color name or hexadecimal string).
        """"""
        self.num_top_classes = num_top_classes
        self.color = color
        super().__init__(
            label=label,
            every=every,
            show_label=show_label,
            container=container,
            scale=scale,
            min_width=min_width,
            visible=visible,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            value=value,
        )

    def preprocess(
        self, payload: LabelData | None
    ) -> dict[str, float] | str | int | float | None:
        """"""
        Parameters:
            payload: An instance of `LabelData` containing the label and confidences.
        Returns:
            Depending on the value, passes the label as a `str | int | float`, or the labels and confidences as a `dict[str, float]`.
        """"""
        if payload is None:
            return None
        if payload.confidences is None:
            return payload.label
        return {
            d[""label""]: d[""confidence""] for d in payload.model_dump()[""confidences""]
        }

    def postprocess(
        self, value: dict[str, float] | str | int | float | None
    ) -> LabelData | dict | None:
        """"""
        Parameters:
            value: Expects a `dict[str, float]` of classes and confidences, or `str` with just the class or an `int | float` for regression outputs, or a `str` path to a .json file containing a json dictionary in one of the preceding formats.
        Returns:
            Returns a `LabelData` object with the label and confidences, or a `dict` of the same format, or a `str` or `int` or `float` if the input was a single label.
        """"""
        if value is None or value == {}:
            return {}
        if isinstance(value, str) and value.endswith("".json"") and Path(value).exists():
            return LabelData(**json.loads(Path(value).read_text()))
        if isinstance(value, (str, float, int)):
            return LabelData(label=str(value))
        if isinstance(value, dict):
            if ""confidences"" in value and isinstance(value[""confidences""], dict):
                value = value[""confidences""]
                value = {c[""label""]: c[""confidence""] for c in value}
            sorted_pred = sorted(
                value.items(), key=operator.itemgetter(1), reverse=True
            )
            if self.num_top_classes is not None:
                sorted_pred = sorted_pred[: self.num_top_classes]
            return LabelData(
                label=sorted_pred[0][0],
                confidences=[
                    LabelConfidence(label=pred[0], confidence=pred[1])
                    for pred in sorted_pred
                ],
            )
        raise ValueError(
            ""The `Label` output interface expects one of: a string label, or an int label, a ""
            ""float label, or a dictionary whose keys are labels and values are confidences. ""
            f""Instead, got a {type(value)}""
        )

    def example_payload(self) -> Any:
        return {
            ""label"": ""Cat"",
            ""confidences"": [
                {""label"": ""cat"", ""confidence"": 0.9},
                {""label"": ""dog"", ""confidence"": 0.1},
            ],
        }

    def example_value(self) -> Any:
        return {""cat"": 0.9, ""dog"": 0.1}

    
    def change(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...
    
    def select(self,
        fn: Callable | None,
        inputs: Component | Sequence[Component] | set[Component] | None = None,
        outputs: Component | Sequence[Component] | None = None,
        api_name: str | None | Literal[False] = None,
        scroll_to_output: bool = False,
        show_progress: Literal[""full"", ""minimal"", ""hidden""] = ""full"",
        queue: bool | None = None,
        batch: bool = False,
        max_batch_size: int = 4,
        preprocess: bool = True,
        postprocess: bool = True,
        cancels: dict[str, Any] | list[dict[str, Any]] | None = None,
        every: float | None = None,
        trigger_mode: Literal[""once"", ""multiple"", ""always_last""] | None = None,
        js: str | None = None,
        concurrency_limit: int | None | Literal[""default""] = ""default"",
        concurrency_id: str | None = None,
        show_api: bool = True) -> Dependency:
        """"""
        Parameters:
            fn: the function to call when this event is triggered. Often a machine learning model's prediction function. Each parameter of the function corresponds to one input component, and the function should return a single value or a tuple of values, with each element in the tuple corresponding to one output component.
            inputs: List of gradio.components to use as inputs. If the function takes no inputs, this should be an empty list.
            outputs: List of gradio.components to use as outputs. If the function returns no outputs, this should be an empty list.
            api_name: Defines how the endpoint appears in the API docs. Can be a string, None, or False. If False, the endpoint will not be exposed in the api docs. If set to None, the endpoint will be exposed in the api docs as an unnamed endpoint, although this behavior will be changed in Gradio 4.0. If set to a string, the endpoint will be exposed in the api docs with the given name.
            scroll_to_output: If True, will scroll to output component on completion
            show_progress: If True, will show progress animation while pending
            queue: If True, will place the request on the queue, if the queue has been enabled. If False, will not put this event on the queue, even if the queue has been enabled. If None, will use the queue setting of the gradio app.
            batch: If True, then the function should process a batch of inputs, meaning that it should accept a list of input values for each parameter. The lists should be of equal length (and be up to length `max_batch_size`). The function is then *required* to return a tuple of lists (even if there is only 1 output component), with each list in the tuple corresponding to one output component.
            max_batch_size: Maximum number of inputs to batch together if this is called from the queue (only relevant if batch=True)
            preprocess: If False, will not run preprocessing of component data before running 'fn' (e.g. leaving it as a base64 string if this method is called with the `Image` component).
            postprocess: If False, will not run postprocessing of component data before returning 'fn' output to the browser.
            cancels: A list of other events to cancel when this listener is triggered. For example, setting cancels=[click_event] will cancel the click_event, where click_event is the return value of another components .click method. Functions that have not yet run (or generators that are iterating) will be cancelled, but functions that are currently running will be allowed to finish.
            every: Run this event 'every' number of seconds while the client connection is open. Interpreted in seconds.
            trigger_mode: If ""once"" (default for all events except `.change()`) would not allow any submissions while an event is pending. If set to ""multiple"", unlimited submissions are allowed while pending, and ""always_last"" (default for `.change()` and `.key_up()` events) would allow a second submission after the pending event is complete.
            js: Optional frontend js method to run before running 'fn'. Input arguments for js method are values of 'inputs' and 'outputs', return should be a list of values for output components.
            concurrency_limit: If set, this is the maximum number of this event that can be running simultaneously. Can be set to None to mean no concurrency_limit (any number of this event can be running simultaneously). Set to ""default"" to use the default concurrency limit (defined by the `default_concurrency_limit` parameter in `Blocks.queue()`, which itself is 1 by default).
            concurrency_id: If set, this is the id of the concurrency group. Events with the same concurrency_id will be limited by the lowest set concurrency_limit.
            show_api: whether to show this event in the ""view API"" page of the Gradio app, or in the "".view_api()"" method of the Gradio clients. Unlike setting api_name to False, setting show_api to False will still allow downstream apps to use this event. If fn is None, show_api will automatically be set to False.
        """"""
        ...","The code defines a `Label` component that displays a classification label along with confidence scores of top categories. It does not accept user input and is rarely used as an input component. The component can display a single label or multiple labels with their corresponding confidence scores. It provides methods for preprocessing and postprocessing data, as well as defining example payloads and values. Additionally, it includes methods for handling events such as `change` and `select`, which can trigger functions when the event is triggered.","[-0.008579795, 0.015200675, 0.026101911, 0.0036888667, -0.007651218, -0.031037362, -0.03869494, 0.0012418125, -0.008376271, 0.025147894, 0.011212883, -0.017057829, -0.04576739, -0.013203599, -0.005456979, -0.022438485, 0.035845608, 0.030121505, -0.008376271, 0.020123404, -0.05141517, -0.030528553, 0.042282045, 0.002542456, -0.019169386, -0.008134587, -0.047064852, 0.020097964, 0.016256453, 0.038262453, 0.0067226416, -0.04541122, -0.016828865, 0.010233426, 0.014946271, 0.014755467, 0.03599825, 0.017910084, -0.0016170592, -0.012974635, -0.07571081, 0.04693765, -0.03467535, -0.01382689, -0.0030687556, 0.003917831, -0.04070474, -0.008109147, -0.01937291, 0.071742095, -0.06253265, -0.0054442585, -0.0003919421, 0.014462901, 0.00016913931, 0.012294102, -0.07942512, 0.052712634, 0.017821042, -0.027959066, 0.022413045, -0.010704074, -0.016956067, 0.019512832, -0.027857304, -0.039890643, -0.017248632, -0.023125378, -0.008656116, -0.033530526, 0.048387755, -0.057749845, -0.01600205, 0.024092115, -0.0151879545, -0.003253199, -0.04487697, 0.026432639, -0.01051963, 0.010818556, 0.002102018, 0.010106223, -0.023964914, -0.018151768, -0.008166388, -0.008719718, -0.03704131, 0.008948682, -0.050677396, -0.043299664, -0.039966963, -0.004471161, -0.041315306, 0.09336649, -0.03154617, 0.024181157, -0.026916007, -0.030732077, 0.00054060976, -0.030706635, 0.0025551762, -0.004471161, 0.005135793, -0.015137074, 0.01824081, -0.03869494, -0.05469699, 0.0056096213, 0.015811246, 0.006302874, -0.0057813446, 0.04543666, -0.066552244, 0.05149149, 0.008427152, -0.036761466, 0.009368449, -0.007466775, -0.017490316, -0.008051906, 0.0154678, -0.017757442, -0.0112574035, -0.02538958, -0.035692967, -0.01601477, -7.920331e-05, -0.044419043, -0.018037286, -0.01382689, -0.038516857, -0.012364063, 0.008738798, -0.028595077, -0.045996353, -8.720314e-05, -0.04925273, -0.007880183, -0.05024491, 0.025173336, 0.035642084, -0.033479646, 0.012809272, -0.019538274, -0.015658604, -0.031775136, -0.062787056, 0.0063346745, -0.06858748, 0.008115507, 0.031164564, 0.04472433, -0.0840044, -0.021102862, -0.006140691, 0.00041658754, 0.017045109, -0.04907465, 0.0018635137, -0.04083194, 0.046021793, -0.028671399, 0.031851456, -0.011810734, -0.0046524242, 0.015887568, 0.01936019, -0.02268017, -0.039101988, 0.042256605, 0.005307516, 0.02593655, -0.00043845043, -0.06522934, -0.020899339, 0.039152868, 0.01437386, -0.006407816, -0.0045443024, -0.04480065, 0.022921855, 0.02928197, -0.02041597, -0.0008657707, -0.0064873174, -0.014017694, 0.00720601, -0.0054410785, 0.008885081, 0.012211421, -0.014081295, -0.010220705, 0.04312158, 0.034853432, -0.018380733, -0.0053870175, 0.028493315, 0.0042262967, -0.029612696, -0.04380847, -0.0022180902, 0.007339573, 0.01050691, -0.03531136, -0.005755904, 0.01771928, -0.07723724, -0.041213546, 0.012065139, -0.009597413, -0.009851818, -0.028569637, 0.03597281, -0.022285843, -0.06349939, -0.025287818, -0.034980632, 0.013470723, 0.0102843065, -0.0051421532, 0.012109659, 0.03604913, 0.039738, -0.064822294, -0.031800576, -0.0026155973, 0.029943421, -0.010729514, 0.019131226, -0.028874923, 0.027857304, -0.0071233287, 0.00942569, -0.0040545734, -0.0036252656, -0.025147894, 0.023837712, -0.047064852, 0.034064777, -0.0027253092, -0.02430836, 0.01437386, 0.00031323568, -0.013458003, 0.081969164, 0.022565689, -0.04210396, -0.027017768, 0.048667602, 0.036761466, 0.03706675, 0.0254659, 0.036761466, -0.043554068, -0.008458953, 0.0010327237, 0.0056573222, 0.010106223, 0.06690841, -0.021840636, -0.053679373, -0.051313408, -0.07952688, -0.023532426, -0.040272247, -0.010786755, 0.007066088, -0.014501062, -0.04149339, -0.029943421, -0.03309804, -0.016688941, 0.018546095, 0.03475167, -0.002431154, 0.018711459, 0.016803425, 0.08797311, -0.009012283, 0.016981507, -0.02930741, 0.0032690992, -0.019665476, 0.030375909, -0.0011162002, 0.02270561, -0.04642884, -0.05754632, 0.000415395, -0.022591129, 0.070012145, 0.0112637635, 0.030426791, -0.0077784206, -0.002386633, 0.017083269, 0.053272326, 0.017350394, 0.014857229, 0.0067226416, -0.02102654, -0.014526503, -0.011887055, -0.052203823, 0.019703636, -0.021395426, 0.017986406, -0.010564151, 0.016587181, -0.02489349, -0.016739823, 0.005250275, 0.029536374, 0.04032313, -0.056477822, -0.0069770464, 0.008357191, 0.031469848, 0.0034440022, 0.00943205, -0.022463927, -0.019004025, 0.045538425, 0.0054347184, 0.0007755365, -0.0042835376, -0.07728812, 0.017604798, 0.03271643, -0.0037842684, 0.03861862, 0.002038417, -0.020950219, 0.0075240163, 0.025707586, 0.0056000813, 0.003816069, 0.044978734, -0.0597342, 0.06548374, -0.025160614, -0.0063728355, -0.014869949, 0.028416995, 0.045614745, 0.011976097, -0.036125455, 0.05423906, 0.011187443, -0.035540324, -0.037168514, -0.018278971, 0.062685296, -0.04243469, 0.0011694662, -0.015556841, -0.053730253, -0.017223192, -0.03767732, 0.0009675325, -0.019690916, -0.027272174, 0.0056605022, -0.013712408, 0.014017694, 0.00030568303, -0.040145047, -0.057393678, 0.051313408, -0.028595077, 0.017337674, 0.02928197, 0.003035365, -0.04543666, -0.057241037, -0.049939625, 0.020212445, -0.017350394, -0.017579358, 0.006407816, 0.05698663, -0.039407272, 0.0023945833, -0.0046015433, 0.0093302885, 0.022362165, 0.0071169687, 0.008452593, -0.00825543, 0.0047319257, 0.015302436, -0.003210268, -0.03602369, -0.032309383, 0.013737849, 0.032843634, -0.01932203, 0.021395426, 0.031418968, 0.025834788, -0.004817787, -0.020835737, -0.012472185, 0.03925463, -0.018482495, -0.019169386, 0.024448283, 0.0044011995, 0.017808322, 0.058207773, 0.056630466, -0.0016313695, 0.017464876, -0.0152261155, 0.019436512, 0.013407122, 0.021916956, -0.03770276, -0.013776009, 0.049965065, 0.009673735, -0.037270274, 0.04248557, -0.0016456798, 0.020695815, 0.035743847, 0.073166765, -0.0498633, -0.017579358, -0.03442094, 0.019194826, 0.022247683, 0.0013515245, -0.008808759, 0.004929089, -0.013394402, 0.004534762, 0.03192778, -0.000120047174, 0.029994303, 0.020263327, 0.0012505576, 0.0014548763, -0.056732226, -0.0062265527, -0.016790703, -0.054493465, -0.059378035, -0.033352442, -0.017515756, -0.028086267, 0.048947446, -0.058920108, 0.01492083, 0.005708203, -0.023939474, -0.012771111, -0.01885138, 0.04144251, -0.00081965985, 0.03152073, 0.012052418, -0.0050054104, 0.030248707, -0.047115732, 0.012535787, 0.01887682, -0.017782882, 0.052152943, -0.0220696, 0.005476059, -0.003981432, 0.052814394, -0.002426384, -0.012446745, 0.007129689, -0.0051135323, -0.031215444, -0.0320041, -0.024715407, 0.019474672, 0.026051031, -0.015582282, -0.03648162, 0.026687043, 0.099065155, -0.015785806, -0.021357266, 0.0019159847, -0.012001537, -0.02811171, -0.016154692, 0.076524906, -0.012866513, 0.027221292, -0.022565689, -0.010964839, -0.02273105, -0.0037779084, -0.055358443, 0.0508046, 0.031240886, 0.0009532223, 0.030757517, -0.002478855, 0.014691866, 0.028544197, 0.00942569, 0.01770656, 0.0073713735, -0.007015207, 0.012332263, 0.023023617, -0.028238911, -0.01163901, -0.036125455, -0.004025953, 0.023532426, -0.042765412, -0.003695227, 0.0067290016, 0.008560715, 0.012637549, -0.0027873204, -0.039178308, 0.01270751, -0.019207548, -0.053984657, 0.0066017993, -0.013623366, -0.046250757, -0.041060902, 0.0029177028, 0.015315157, -0.062125605, 0.032919955, 0.001266458, -0.029714458, -0.0020956579, -0.0015407379, -0.012866513, 0.0060389293, 0.027297614, -0.002261021, 0.0024629545, 0.0210011, -0.01713415, -0.0151879545, 0.016638061, 0.03645618, 0.0045474824, -0.054798752, 0.054442585, -0.027323054, 0.015073473, -0.00010971198, 0.0112383235, -0.002257841, -0.016625341, -0.023850432, 0.024384681, -0.0006562844, 0.017248632, 0.03370861, 0.0054919594, -0.004032313, -0.008573435, 0.003596645, 0.0025535861, 0.021802474, -0.031749696, -0.001055779, -0.0038001689, -0.03421742, -0.024092115, 0.00096594245, 0.00021087757, -0.047013972, 0.04139163, 0.012923754, 0.00827451, -0.018546095, -0.019690916, -0.044444483, -0.024817169, -0.005269355, 0.027806424, 0.010360627, -0.016256453, 0.020695815, -0.008586155, -0.05179678, 0.0071233287, 0.033581406, -0.039229188, -0.01549324, -0.0071042487, -0.00032357086, -0.020899339, -0.001489857, -0.024142997, 0.014462901, -0.014997152, -0.011340085, -0.008134587, -0.011187443, 0.014068575, 0.019258428, -0.015416919, -0.009584693, -0.043859355, -0.00069206004, -0.025147894, -0.06955422, 0.0254023, -0.024588205, -0.0020606774, 0.008808759, 0.047319256, -0.024410121, -0.016243733, 0.026381757, 0.014081295, -0.008910521, -0.01605293, 0.052102063, 0.014869949, -0.023888592, -0.004461621, 0.0024645445, 0.013165439, 0.046225317, 0.022349445, -0.011200163, 0.014170337, 0.02374867, -0.025605824, 0.0042803576, 0.014666425, -0.03528592, 0.019449232, 0.027399376, 0.02042869, -0.005864026, 0.014602824, 0.012052418, 0.0050085904, 0.018088168, 0.025567662, 0.0041149943, -0.025236936, -0.020517731, 0.005857666, -0.0028286611, -0.016332775, 0.006506398, 0.0060929903, 0.025580382, 0.0018523835, 0.012586668, -0.04373215, -0.00013217115, -0.0020161564, -0.009718256, -0.033530526, 0.03192778, -0.018342571, -0.016956067, 0.028925803, 0.026229115, -0.0597342, 0.030452231, -0.00824271, 0.012351343, 0.00943841, -0.021866076, -0.007256891, -0.049049206, -0.024829889, 0.018762339, -0.021141022, 0.028900363, -0.044368163, -0.04197676, -0.0072250906, -0.024766289, 0.010201625, 0.026712483, 0.012637549, -0.0009500422, -0.008866, -0.0024629545, -0.011181083, 0.026483519, -0.01162629, 0.014755467, -0.002439104, 0.015442359, 0.020339647, 0.005215294, -0.0065890793, -0.021904236, -0.028442435, -0.026508959, 0.010207985, -0.028645959, -0.02430836, 0.016078372, 0.049990505, -0.027806424, -0.005918087, 0.013585206, -0.0055492003, -0.025351418, -0.031368088, -0.0036888667, -0.0013109787, 0.028849483, 0.039229188, -0.0026330876, -0.04317246, 0.018291691, -0.06421172, -0.041086342, 0.055358443, 0.0034980632, -0.022451207, 0.014144896, -0.0031434868, -0.021344546, 0.008617956, 0.015022592, -0.0012505576, 0.017464876, -0.030604873, 0.02376139, -0.032385707, -0.0016997408, -0.004910009, -0.009692815, -0.016943347, 0.0018396633, 0.030325029, -0.013585206, -0.0024232038, -0.013025516, 0.0039082905, -0.00064396166, -0.039000224, -0.047217496, -0.021777034, 0.009889979, 0.008357191, -0.012987355, -0.015836686, -0.0033136199, -0.00719965, 0.0011925215, 0.0070279273, 0.010163464, -0.002100428, 0.033912133, 0.0058449456, -0.026305435, -0.030655755, -0.039636236, 0.026458079, 0.014488342, -0.015391478, 0.015340597, -0.007415894, -0.024448283, -0.00606755, -0.011537249, 0.01817721, -0.014602824, -0.0060452893, 0.015455079, -0.031139124, 0.04075562, -0.031240886, -0.02658528, 0.009044084, -0.023036337, 0.006849844, 0.022845533, -0.020301487, 0.0071233287, 0.0022292202, -0.027195852, -0.03040135, 0.024740847, 0.0043344186, -0.030146945, 0.002712589, 0.021955118, 0.021853356, -0.07962864, -0.073421165, -0.0053393166, -0.028925803, -0.017070549, -0.03594737, 0.021459028, 0.011346445, 0.007867462, -0.014640985, -0.04139163, -0.018914983, 0.01378873, 0.03818613, -0.0057209237, -0.007256891, 0.02325258, 0.008497113, -0.01718503, -0.014081295, 0.0058322255, -0.028671399, -0.04083194, -0.0022928214, -0.016612621, -0.007301412, 0.005138973, 0.0103288265, 0.044444483, 0.05261087, 0.0017442616, 0.033505086, 0.017299512, 0.009737336, 0.014017694, -0.006849844, 0.003149847, -0.01102208, -0.0026473978, 0.0034408222, 0.026636163, 0.0024406943, -0.034955192, -0.024104835, 0.01330536, 0.0039528115, 0.006907085, 0.042180285, -0.02981622, -0.015137074, 0.03304716, -0.040094167, 0.039534476, -0.0063696555, 0.0083889915, -0.004875028, -0.035082396, -0.0044870614, -0.0038033489, 0.042282045, -0.011740772, -0.018965863, 0.016472697, -0.0009699176, -0.013915932, -0.021471748, 0.0013888901, 0.03375949, -0.0552058, -0.013699688, 0.0023627828, 0.00046587843, 0.0038828503, -0.0099663, 0.018469775, 0.02374867, 0.033479646, 0.013496164, -0.017528478, 0.019614594, 0.017464876, -0.038364213, -0.0014866769, 0.052712634, -0.0021226883, 0.044673447, -0.0152133955, 0.004925909, -0.014704586, 0.023150818, -0.0075430963, 0.02711953, -0.004859128, -0.0113146445, 0.0032118582, 0.029383732, 0.014183057, 0.017503036, 0.014119456, -0.02981622, 0.027323054, -0.0132290395, -0.021102862, 0.0018492035, -0.058258653, -0.012338623, 0.004569743, 0.010227065, 0.015874848, -0.01817721, -0.0026728383, -0.033174362, -0.014322979, -0.0016854305, -0.03775364, 0.016930627, 0.020746695, 0.020479571, 0.039051108, 0.0053965575, 0.0013936602, 0.02323986, -0.006862564, -0.0199326, 0.019156666, 0.056019895, 0.007555817, -0.017922804, -0.0055428403, 0.0063696555, 0.025593104, 0.030859279, 0.011817094, 0.0041881357, 0.02378683, 0.017286792, -0.0045061414, -0.0048432276, 0.000881671, 0.0062329127, -0.0068689245, 0.009648294, 0.0069388854, -0.013445283, -0.028009947, 0.00387331, -0.007854742, 0.0073713735, -0.0055046794, 0.041722354, -0.009877259, 0.019500112, 0.009266688, 0.030503113, -0.039966963, 0.0653311, 0.044291843, -0.040602975, 0.016180133, 0.037829965, 0.0010875796, 0.022514807, 0.039890643, -0.05156781, -0.010468749, 0.0016743003, -0.032283943, -0.009508372, -0.011429126, 0.037193954, -0.016332775, -0.04419008, 0.038949344, 0.017897364, -0.0071042487, 0.015684044, 0.011549969, 0.019042185, 0.0069198054, -0.032767314, -0.038262453, 0.024842609, -0.026127353, 0.068333074, 0.0298671, 0.02598743, 0.0023882233, -0.020250607, -0.05581637, 0.030553993, 0.029078446, 0.004579283, 0.020021642, -0.0064745974, 0.012395864, -0.007517656, -0.033988453, 0.030096065, 0.015684044, -0.0010828096, -0.0046842247, 0.008637036, 0.009546532, -0.02273105, 0.011689891, 0.013190879, -0.020517731, -0.019741798, 0.023367062, 0.005084912, -0.0067798826, 0.005581001, -0.0013229039, 0.012503986, 0.007861102, 0.022832813, 0.011098401, -0.017070549, -0.017274072, -0.010564151, -0.015302436, -0.016383657, 0.0027459797, 0.0082999505, 0.018266251, -0.011085681, 0.03363229, -0.008458953, -0.0010907598, 0.011696252, -0.0026108273, 0.024562765, 0.038898464, 0.0026919188, -0.0005982483, -0.012650269, -0.015035312, -0.008681557, 0.05154237, -0.014742747, 0.06141327, 0.025516782, -0.009998101, -0.008738798, 0.007918343, 0.012573947, 0.03431918, 0.010837636, -0.061107986, -0.011569049, 0.018418893, 0.007943784, 0.032767314, 0.0014731616, -0.007835662, -0.014322979, 0.008229989, -0.004636524, -0.011823454, 0.016727103, -0.009813658, 0.034522705, 0.0050054104, -0.037855405, -0.008013745, 0.016269173, -0.0016099041, -0.029510934, -0.008210909, 0.015747646, -0.03442094, 0.045563865, 0.013356241, -0.017732, 0.012624828, 0.030121505, -0.016332775, -0.033174362, -0.0008331751, -0.027679222, -0.024053955, 0.030045183, -0.0287986, -0.034522705, 0.031037362, 0.016612621, 0.016116532, 0.0014620315, 0.004127715, -0.025122454, 0.015340597, -0.011651731, -0.019105786, -0.023163538, 0.041646034, -0.0030703456, -0.0017363115, -0.03167337, 0.04647972, 0.02485533, 0.05347585, -0.0023023617, -0.018953143, 0.047828067, 0.023036337, -0.006401456, -0.037372038, -0.0064936774, -0.027730102, -0.01162629, 0.010118943, 0.013954093, 0.011448207, 0.018953143, 0.0035235037, 0.025682144, 0.0015367628, -0.007358653, 0.02102654, -0.0008665657, 0.001438181, 0.0058417656, -0.014322979, 0.001826943, -0.025745746, -0.00992178, -0.0032245785, 0.0046587843, -0.010398788, 0.04251101, 0.030426791, 0.012077859, 0.00087054074, -0.018304411, -0.012796552, 0.025478622, -0.039458156, -0.03424286, -0.014831788, -0.013127278, -0.0028652318, -0.013865051, 0.00276029, -0.006414176, -0.026483519, 0.0009071114, -2.5254129e-05, -0.011212883, 0.011149282, -0.02933285, 0.038440537, 0.0072314506, -0.03607457, -0.021433588, 0.03709219, 0.00775298, 0.00017231937, 0.021777034, 0.022870975, 0.023036337, 0.01651086, 0.04472433, -0.00022220652, 0.005374297, 0.0047255657, -0.014030414, 0.002882722, -0.020606773, 0.007924703, -0.016917907, 0.0040068724, 0.020670375, 0.0020082064, -0.013865051, -0.028849483, -0.0017172311, -0.00719329, -0.0071551297, -0.023952194, -0.00081568473, 0.003825609, -0.013979533, -0.010704074, 0.017274072, -0.044622567, 0.009012283, -0.001548688, -0.0006479367, 0.018380733, -0.018139048, -0.0122241415, 0.009031364, 0.047217496, 0.01771928, -0.01887682, 0.0042994376, -0.013597926, 0.0038065289, 0.018469775, -0.03762644, -0.0052375547, 0.0037715482, 0.02318898, -0.011562689, 1.6366116e-06, -0.010411508, -0.00059506827, 0.020517731, 0.009355729, -0.042256605, -0.022005998, 0.044571687, -0.0141576165, 0.034115657, 0.017821042, -0.0008292, -0.008401712, -0.014284818, 0.016968787, 0.007854742, -0.032512907, -0.0065318383, 0.013127278, -0.004703305, 0.022336723, 0.01492083, 0.040068723, 0.016968787, 0.019067625, 0.020148845, -0.00828087, -0.007345933, -0.0053393166, -0.00085225544, -0.030732077, -0.0112510435, -0.0026410378, 0.008624316, -0.051364288, -0.0024486443, 0.02600015, 0.014997152, 0.039636236, -0.003965532, 0.0012267072, 0.013928652, 0.012096939, 0.01441202, 0.034471825, -0.013712408, 0.010882157, -0.033988453, -0.017299512, -0.0077275396, -0.02150991, 0.018635137, -0.0070279273, 0.009845458, 0.002927243, -0.015722204, 0.012872873, 0.011168362, -0.0005358397, -0.00041340748, 0.02600015, 0.01816449, 0.0051071723, 0.00062806136, -0.022324003, -0.035591204, 0.011728052, 0.009158566, 0.012026978, 0.00014071754, 0.012771111, 0.017910084, -0.015251556, -0.014946271, 0.035158716, -0.016994227, -0.024651807, 0.0027221292, 0.0028906723, 0.007625778, -0.0011813914, -0.012917394, 0.00034801755, -0.0052725356, -0.021738874, 0.010087143, 0.008630676, -0.011441847, 0.03421742, -0.0024247938, 0.01933475, 0.04543666, 0.006576359, 0.0033517806, -0.040119607, -0.019627316, -0.029689018, -0.03536224, 0.016256453, -0.014666425, -0.02589839, -0.028416995, 0.01160721, 0.0010255686, 0.009788217, 0.0064427964, 0.0037461077, -0.011543609, -0.038847584, -0.022349445, 0.0154678, 0.017413994, -0.01270751, -0.029892541, -0.0036379858, -0.0073332125, -0.015925728, 0.013139998, 0.022934575, -0.018622417, 0.030274147, -0.030579433, 0.007816581, 0.027755542, 0.01939835, -0.008497113, -0.008401712, 0.0034344622, -0.002041597, 0.022552969, 0.0188005, -0.026381757, -0.0007353883, -0.004868668, -0.013954093, 0.007638498, 0.062634416, -0.0070851683, 0.0011519758, -0.022234963, -0.00992814, 0.055053156, 0.040501215, -0.004852768, 0.039330952, -0.012389504, 0.025872948, 0.0015844636, 0.004124535, -0.009044084, 0.007918343, -0.02816259, 0.022298563, -0.004910009, 0.013076397, 0.016701663, -0.0021401788, 0.0050912723, 0.0046142633, 0.018914983, 0.014539223, 0.021319106, 0.032360267, -0.025173336, 0.001547893, 0.00941933, 0.023685068, 0.013725128, 0.017248632, -0.026012871, -0.012669349, 0.019131226, -0.0014707766, -0.025682144, 0.020530451, -0.03208042, 0.0093048485, 0.00079859194, -0.022832813, 0.030553993, 0.0051675937, 0.016638061, -0.019054905, 0.008573435, 0.029180208, -0.031444408, -0.024346521, -0.0056700427, -0.017566638, -0.008516194, 0.028264351, 0.023850432, -0.015849406, 0.0036602463, 0.0058926465, -0.035209596, -0.0031164563, -0.0074731354, -0.011778933, 0.010487829, -0.0064459764, -0.0044043795, 0.0022483007, 0.037448358, 0.045080494, -0.030655755, -0.033250682, -0.0074731354, 0.03597281, -0.027730102, 0.013852331, 0.017223192, 0.022362165, 0.0046142633, 0.0028413814, 0.030452231, -0.018495215, 0.03976344, -0.057139274, -0.013992253, -0.0025297357, 0.029612696, 0.0030003842, 0.010704074, 0.01106024, -0.0012481726, 0.01936019, 0.0056159818, -0.006557279, 0.036659703, 0.0032213982, 0.0112828445, 0.013699688, 0.006147051, -0.0142466575, 0.06227825, -0.021815194, -0.0027777802, 0.009603774, -0.010964839, 0.030452231, -0.020034362, 0.018444333, -0.010061702, -5.1129362e-05, 0.009896339, 0.022578409, -0.02377411, -0.036634263, -0.010398788, 0.039356392, 0.011085681, 0.02210776, -0.033835813, -0.009743696, -0.0021338186, 0.0035489441, 0.0056255218, -0.019818118, -0.036100015, -0.01490811, -0.015747646, -0.015722204, -0.0018984943, -0.001933475, -0.0006459492, -0.023519706, -0.001992306, -0.00070915284, 0.0020654474, -0.0014262558, -0.018584257, -0.016930627, 0.007390454, 0.009769137, -0.03818613, 0.042180285, 0.018736899, 0.03599825, -0.006210652, 0.0465306, 0.030350469, 0.018100888, 0.033352442, 0.032156743, -0.010138024, -0.0051421532, 0.020784857, -0.03480255, 0.0064745974, 0.02039053, 0.007562177, -0.0112574035, -0.037372038, 0.0028016306, -0.02159895, -0.002987664, 0.021662552, -0.002385043, 0.0023421124, 0.018609697, 0.008611596, 0.032512907, 0.021967838, -0.019818118, -0.018495215, -0.010907597, 0.0043916595, -0.0016790704, 0.0041626953, -0.03373405, 0.009909059, -0.0028556916, -0.038211573, 0.027170412, 0.0018158129, 0.014984431, 0.0049513495, 0.028696839, 0.0069961264, -0.0023007717, 0.012860153, -0.069910385, -0.0023596026, -0.0040005124, 0.010907597, 0.018991305, -0.03373405, 0.021624392, -0.028391553, 0.00020193365, 7.0855654e-05, 0.013699688, 0.013839611, -0.013928652]"
../../../gradio,../../../gradio/gradio/components,duplicate_button.pyi,""""""" Predefined buttons with bound events that can be included in a gr.Blocks for convenience. """"""

from __future__ import annotations

from typing import Literal

from gradio_client.documentation import document, set_documentation_group

from gradio.components import Button
from gradio.utils import get_space

set_documentation_group(""component"")

from gradio.events import Dependency

@document()
class DuplicateButton(Button):
    """"""
    Button that triggers a Spaces Duplication, when the demo is on Hugging Face Spaces. Does nothing locally.
    """"""

    is_template = True

    def __init__(
        self,
        value: str = ""Duplicate Space"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = ""sm"",
        icon: str | None = None,
        link: str | None = None,
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = 0,
        min_width: int | None = None,
        _activate: bool = True,
    ):
        """"""
        Parameters:
            value: Default text for the button to display. If callable, the function will be called whenever the app loads to set the initial value of the component.
            every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.
            variant: 'primary' for main call-to-action, 'secondary' for a more subdued style, 'stop' for a stop button.
            size: Size of the button. Can be ""sm"" or ""lg"".
            icon: URL or path to the icon file to display within the button. If None, no icon will be displayed.
            link: URL to open when the button is clicked. If None, no link will be used.
            visible: If False, component will be hidden.
            interactive: If False, the Button will be in a disabled state.
            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.
            elem_classes: An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles.
            render: If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later.
            scale: relative size compared to adjacent Components. For example if Components A and B are in a Row, and A has scale=2, and B has scale=1, A will be twice as wide as B. Should be an integer. scale applies in Rows, and to top-level Components in Blocks where fill_height=True.
            min_width: minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first.
        """"""
        super().__init__(
            value=value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )
        if _activate and Context.root_block:
            self.activate()

    def activate(self):
        space_name = get_space()
        if space_name is not None:
            self.click(
                fn=None,
                js=f""() => {{ window.open(`https://huggingface.co/spaces/{space_name}?duplicate=true`, '_blank') }}"",
            )","This code defines a custom button component called `DuplicateButton` that inherits from the `Button` class in the Gradio library. The button is designed to trigger a Spaces Duplication action when used in a demo on Hugging Face Spaces. The button does not perform any action locally. The button has various customizable parameters such as text, size, icon, link, visibility, interactivity, and more. The `activate` method is used to set up the button to open a new window with a specific URL when clicked, based on the current space name retrieved using the `get_space` function.","[-0.016763447, -0.004401473, 0.049276963, 0.047909513, 0.0061107827, -0.020450672, 0.026640816, 0.020536138, 0.014236109, -0.056407228, 0.0008180269, -0.0032507412, -0.009352367, -0.015249486, -0.031011766, 0.018814618, 0.003150014, -0.017300658, 0.03931413, 0.020975674, -0.06275609, -0.0337955, 0.029180363, 0.060265385, 0.04080367, -0.035626903, 0.0027852594, -0.0067273555, 0.0115378415, 0.036847837, -0.008284048, -0.031475723, 0.012062844, 0.03738505, -0.034821086, 0.03169549, -0.002907353, 0.058995612, -0.025322206, 0.01328378, -0.06886077, -0.043318797, 0.032208283, 0.057970025, -0.020487301, 0.028350126, -0.03413736, 0.013613433, 0.020267531, 0.04138972, -0.05196302, -0.009059343, -0.02507802, -0.009273007, -0.037531562, -0.028545475, -0.066321224, 0.003105755, -0.030694323, -0.04707928, -0.0094561465, -0.0073317187, -0.027446633, 0.0053873784, 0.03054781, 0.052060697, -0.052256044, 0.03716528, 0.023087893, 0.02920478, 0.06827472, 0.041292045, -0.008754109, -0.021378582, 0.046566486, 0.0099567305, -0.016275072, 0.01651926, 0.017276239, 0.015603557, -0.00082489464, -0.0043801065, -0.013161686, 0.00086991664, -0.059874684, 0.013027383, 0.0020557505, -0.023185568, -0.01973032, -0.05235372, 0.023686152, 0.018350663, -0.010341325, 0.03091409, 0.010988421, 0.010915165, 0.0050455164, -0.019302992, 0.037849005, 0.06168167, 0.050546736, -0.04612695, -0.016348328, -0.0004418261, 0.029131524, -0.027055934, 0.023564057, 0.013540177, -0.0229658, 0.010194813, -0.059435148, 0.034601316, -0.01857043, 0.034503642, -0.015005299, -0.053721167, 0.05386768, -0.007899454, 0.003195799, -0.020377416, -0.039900176, -0.029058268, 0.036115278, -0.04385601, 0.06978868, -0.084342234, 0.028228031, -0.035773415, -0.029741993, -0.008192479, 0.02559081, 0.07608871, 0.008790737, -0.02449197, 0.034259453, -0.00053530396, -0.055674665, -0.011299759, -0.01708089, 0.03054781, -0.0117881335, -0.051621158, 0.022257658, -0.021537306, -0.0040718205, 0.006101626, -0.018423919, -0.005268337, -0.09181436, 0.0041359197, 0.011977378, 0.0042183325, -0.03186642, 0.017886708, -0.031451304, -0.007057008, 0.03472341, 0.00824742, -0.018191941, 0.01441925, -0.017202983, -0.012587846, 0.017508218, 0.0013621063, -0.0334048, 0.015005299, -0.002339618, -0.012300926, -0.06871426, 0.06514913, 0.019400667, -0.0077529415, -0.055479314, 0.022037888, -0.0126855215, -0.010249754, -0.025322206, -0.036310628, -0.0035407133, -0.0035376612, 0.018851247, 0.0014513873, 0.03225712, -0.02201347, -0.04798277, -0.03626179, -0.037849005, -0.057970025, 0.003925308, 0.023576267, 0.010469523, 0.0059795324, -0.0052835993, 0.021415211, -0.016958795, -0.017032051, 0.02334429, -0.01499309, -0.026982678, -0.047347885, -0.010469523, -0.0040626633, 0.0017322025, -0.017496008, -0.012032321, 0.039753664, 0.01861927, -0.021500677, 0.0042976933, 0.036750164, 0.04534555, -0.0151273925, 0.009260797, -0.032135025, -0.061974693, -0.048324633, 0.039802503, 0.039924596, 0.019254155, 0.046078112, -0.025468718, 0.025151275, 0.00806428, -0.020230904, 0.018106475, 0.006580843, 0.013076221, 0.008967772, -0.027959427, 0.07218172, 0.03284317, 0.04287926, 0.027739657, -0.043123446, -0.018631479, -0.011543946, 0.049472313, -0.039753664, 0.00882126, 0.002420505, -0.051328134, 0.0055064196, 0.028814081, -0.026323372, 0.039949015, -0.00082031614, -0.024406504, -0.010933478, 0.019693691, 0.027446633, -0.011427958, 0.025957093, 0.03696993, 0.015566929, -0.025541974, 0.011745401, -0.020072183, 0.08092362, 0.015652396, -0.030621067, 0.0079482915, -0.031475723, -0.00985295, 0.030401297, -0.04021762, 0.006336656, 0.04265949, -0.0183995, 0.020169856, 0.014907625, -0.019254155, 0.0067639835, 0.038410634, -0.01071371, 0.0046212412, 0.0018252988, 0.0124352295, 0.017862288, 0.030181529, -0.013247152, -0.024125688, 0.010536674, -0.0036750163, 0.02086579, -0.020963466, 0.036676906, 0.031964097, 0.044124614, -0.0034705095, -0.04993627, -0.020157648, -0.034674574, 0.02808152, -0.00692881, -0.032916427, 0.027764076, 0.0683724, -0.027422214, -0.0021122186, -0.015383789, 0.024907088, 0.0023609842, 0.009962835, 0.012343659, 0.010487837, -0.031475723, -0.0103901625, 0.064025864, 0.010524466, 0.038947847, 0.013869829, 0.030083854, 0.022697194, -0.009163122, -0.0017352548, -0.012026216, 0.04798277, 0.024882669, -0.0014345994, -0.033600148, 0.019510552, 0.011342492, 0.0026448518, 0.011617202, 0.030059436, -0.05098627, -0.012575638, -0.011812553, -0.014236109, -0.017593682, 0.027935008, 0.0025853312, 0.0097430665, 0.021158814, 0.052695584, -0.034503642, -0.0035681843, 0.0003456774, -0.052890934, 0.013454711, -0.049740918, 0.016189607, 0.008058175, 0.039118778, -0.01650705, 0.031426884, -0.011904122, 0.016165188, -0.016030885, -0.0132959895, -0.017373914, -0.053770006, -0.0044564153, -0.036676906, 0.031548977, -0.05025371, -0.027568728, -0.03645714, -0.025517555, 0.0067945067, 0.0014178115, 0.031378046, 0.014858787, 0.010493942, -0.0039833025, 0.034430385, 0.0010812911, -0.04178042, 0.0371897, -0.017312868, 0.015395999, 0.043172285, -0.037604816, 0.035431553, -0.07994687, 0.0085953865, 0.01328378, -0.021744864, -0.023747198, -0.03853273, 0.04231763, 0.012496277, -0.049423475, -0.045785088, 0.038068775, -0.013698898, 0.06734681, 0.013674479, -0.03130479, -0.018289616, -0.020072183, -0.0092058545, 0.02446755, -0.02563965, 0.026152441, 0.023014637, 0.003961936, -0.024943715, 0.0076918947, 0.025786161, -0.0088823065, -0.02825245, -0.009950626, 0.016104141, 0.009822427, 0.00092562183, 0.027935008, 0.023039056, 0.03604202, -0.0027669454, 0.017813452, -0.010738129, 0.041878093, 0.010878537, 0.030498972, 0.03164665, -0.039704826, -0.051474646, -0.003925308, 0.050546736, 0.012734359, -0.056797925, 0.030865254, -0.073598, -0.004068768, 0.05025371, -0.01820415, 0.0126855215, 0.05254907, -0.038923427, -0.04573625, 0.03130479, 0.03281875, 0.031158278, 0.018143104, -0.0053446456, -0.06094911, -0.023673942, 0.0187902, 0.005903224, -0.035162948, -0.0132959895, 0.017789032, 0.052256044, -0.04324554, 0.027300121, 0.0011064729, -0.046542067, -0.02976641, -0.027251285, -0.05123046, -0.031060603, -0.05240256, 0.043172285, 0.03855715, -0.020975674, -0.012392497, 0.016055305, 0.024333248, -0.032135025, -0.0125268, 0.0013483708, -0.03628621, 0.029302455, -0.012917499, 0.0067578787, 0.02507802, 0.02676291, 0.015982049, -0.0447595, 0.019608226, -0.023051266, 0.043978103, 0.024797203, -0.027397797, 0.01384541, 0.026787328, 0.037311792, -0.001935183, -0.009895683, -0.0048379577, -0.001926026, 0.00824742, -0.016104141, 0.02450418, 0.095867865, -0.015615767, -0.0364083, -0.00063870195, -0.022916961, -0.0033056834, 0.0028112044, 0.011592784, -0.0124352295, 0.013869829, 0.0017337286, -0.008625911, 0.008223002, 0.028325707, -0.00066006836, 0.004489991, -0.03599318, -0.008216897, 0.045296714, 0.0094561465, -0.012007902, 0.031329207, -0.009981149, -0.0011377594, 0.0047463872, -0.040144365, -0.025957093, 0.03626179, 0.013173896, -0.01594542, -0.021866957, -0.011977378, 0.02942455, 0.021171024, -0.0024891826, -0.04388043, 0.063977025, -0.040535063, 0.023820454, 0.019461714, 0.019937878, -0.008638119, -0.036725745, 0.008564863, -0.04307461, -0.037726913, -0.020414043, 0.017349496, 0.0027959426, -0.010414581, -0.017373914, -0.014175063, 0.008045966, 0.0020206484, -0.041682743, 0.005124877, 0.03494318, -0.0024235572, -0.0017291501, 0.014492506, 0.028447801, 0.02069486, -0.025371043, 0.05709095, -0.007301195, 0.044051357, -0.039607152, 0.051621158, -0.019425087, -0.0033972533, -0.008332886, -0.0013445554, 0.0067395647, -0.013967504, 0.0016818389, 0.0030019756, 0.018191941, -0.015786698, 0.019522762, -0.0016070566, -0.006544215, 0.015811117, -0.019815786, -0.0031103336, -0.023112312, -0.029961761, 0.034454804, 0.03037688, 0.048373472, -0.03093851, -0.006095521, 0.013430292, -0.020755906, -0.012563428, -0.03889901, 0.003311788, -0.057237465, 0.030254785, -0.012374183, -0.058360726, 0.029009432, 0.013943085, -0.044857174, 0.005952061, 0.026103605, -0.060070034, 0.017312868, 0.012288718, 0.0455409, 0.0028417278, 0.008479398, 0.0020465935, 0.015689023, -0.0053019132, 0.025541974, -0.013930876, -0.032012932, 0.006373284, -0.009077657, 0.036481556, -0.0292292, -0.02331987, 0.02976641, -0.02864315, 0.015273905, -0.012233775, 0.04759207, -0.03946064, -0.023551848, -0.01802101, 0.035016436, -0.05464908, 0.026909422, -0.012081158, -0.011061677, -0.014284947, 0.024333248, -0.0045022, -0.028960593, 0.020206485, 0.043758333, -0.00948667, -0.026030349, 0.022807078, 0.02393034, -0.004517462, -0.028350126, 0.03533388, -0.008564863, -0.013173896, 0.023246614, 0.0022755188, 0.004599875, 0.0371897, -0.008296258, -0.011434062, 0.009248587, -0.003824581, 0.014675646, -0.022111144, 0.04988743, 0.028594313, 0.02541988, 0.027666401, 0.019107644, -0.007380556, 0.012032321, 0.015872164, 0.013357036, 0.017691357, -0.00081497454, -0.019644855, -0.0073073, 0.0055949376, 0.03377108, -0.021476258, 0.02942455, -0.03965599, -0.035382714, -0.005100459, 0.018741362, 0.00910818, 0.038215287, -0.018680315, 0.009138703, -0.0039405697, -0.016739028, 0.03091409, 0.04441764, 0.022794869, 0.01205674, -0.008052071, -0.02390592, -0.023759408, -0.034405965, -0.033600148, 0.0012827455, -0.03491876, -0.014712275, 0.03950948, -0.02788617, 0.0072035203, 0.019425087, 0.021293119, -0.025664067, -0.03985134, -0.014541344, 0.025664067, -0.008931144, 0.0016635248, 0.009327948, 0.035626903, -0.047543235, 0.005851334, -0.013405873, 0.035431553, -0.0034338816, 0.0126488935, 0.018961132, -0.0017001529, 0.014822159, -0.0041023437, -0.035919927, -0.0047372305, 0.0032110608, 0.01167825, -0.0037299583, -0.021122187, 0.007246253, -0.01308843, -0.0024723946, -0.010707606, 0.00032526487, 0.000108358036, -0.017740196, -0.014028551, 0.027178027, -0.034283873, -0.026298953, -0.0012720623, -0.003528504, -0.034015268, 0.01575007, -0.03985134, -0.005430111, -0.034430385, 0.037922263, 0.01195296, 0.034503642, 0.0001212351, 0.015823325, 0.008509922, -0.015212858, -0.009236379, -0.022282075, 0.0013643956, 0.06270725, 0.0042244373, 0.00559799, 0.030840835, -0.00064480666, 0.036530394, -0.024772784, -0.017276239, 0.005347698, -0.017129727, 0.008387828, -0.017410543, 0.0050516212, -0.028203614, -0.0019885988, -0.019876832, -0.039338548, -0.004416735, 0.04192693, -0.004831853, 0.00702038, 0.0037146967, 0.0039375173, 0.007911663, -0.04231763, 0.012990755, -0.008345095, -0.0016070566, 0.047299046, -0.00076194014, -0.026518723, 0.010017777, -0.03054781, 0.04270833, -0.0497165, 0.00156585, -0.048642077, 0.037067607, -0.019437296, -0.02085358, 0.022086727, 0.010860222, 0.010964002, 0.034845505, -0.04822696, 0.005680403, 0.0019016073, -0.010786966, -0.011782029, 0.022648357, -0.009975044, 0.010158185, -0.0033148404, 0.026982678, 0.0019885988, 0.005805549, -0.052500233, -0.03816645, 0.036554813, -0.012325346, -0.026152441, 0.0077102087, 0.032159444, -0.0021839486, 0.018375082, 0.003949727, -0.0070447987, -0.011720982, -0.02693384, 0.010799176, -0.0033758872, -0.023588477, -0.009895683, 0.0005906276, -0.0064038076, -0.028960593, 0.01705647, -0.0064526447, -0.037262958, -0.041804835, -0.022477426, 0.020035554, 0.023405336, -0.008363409, -0.015994256, -0.03391759, 0.012880871, 0.022428587, -0.0076552667, -0.00014918308, -0.0025456508, 0.0045662993, 0.01913206, -0.028130358, 0.023112312, 0.014846577, 0.026225697, -0.0013117427, 0.005298861, -0.038435053, 0.008241315, -0.021036722, -0.029937342, 0.006391598, 0.021122187, 0.034845505, 0.00977359, -0.01954718, 0.0024998658, 0.053183958, -0.0029546642, 0.02598151, -0.008857888, 0.017251821, 0.00030180003, 0.026640816, 0.053428143, 0.0052897036, 0.0024830778, -0.022037888, -0.0032324272, -0.021280909, -0.00739887, 0.0073317187, 0.0013117427, -0.008491607, 0.0022816234, 0.06778635, 0.015408208, -0.009736962, -0.00093172654, 0.006129097, -0.0003178248, -0.025957093, 0.031426884, 0.033893175, 0.026152441, 0.0030431822, -0.020707069, 0.05293977, -0.029155944, -0.017288448, -0.014651228, -0.00035006515, 0.0015009878, 0.014272737, -0.0075026494, -0.0144802965, 0.054404892, -0.028105939, -0.022489635, 0.005573571, -0.051621158, -0.019302992, 0.025786161, -0.020462882, -0.0015826379, 0.0064221215, -0.019827995, -0.014114016, 0.01743496, 0.00036742532, -0.0067212507, 0.00016530324, 0.013515757, -0.05616304, -0.00037333922, 0.0114829, -0.032208283, 0.008412247, -0.04590718, 0.01919311, 0.047225792, -0.00059825846, -0.016275072, 0.013650061, 0.027837332, -0.003302631, 0.012014007, 0.0004815065, -0.022587309, -0.044906013, -0.023014637, 0.009181436, 0.016836703, 0.034088522, 0.0037238537, 0.032550145, 0.042268794, 0.0022266814, 0.011916332, 0.02219661, -0.013137268, 0.044149034, -0.039045524, -0.02065823, 0.022074517, -0.0057933396, 0.0074538123, 0.021146605, -0.018631479, 0.044466477, 0.030791998, 0.008528235, -0.046200205, -0.031622235, -0.012600056, 0.008851783, 0.0010416107, -0.010805281, 0.03338038, 0.064025864, -0.03584667, -0.0077712554, 0.0132959895, 0.049643245, -0.026128022, 0.016616935, 0.017496008, -0.058360726, 0.040119946, 0.018863456, -0.00464566, 0.017166356, -0.041072275, 0.008241315, 0.011586679, 0.045028105, 0.015237277, -0.0062634, 0.028814081, 0.020438462, 0.0150907645, -0.0011026575, -0.004535776, -0.006281714, -0.025151275, 0.027983844, 0.023283243, -0.0221844, 0.023246614, 0.040510643, 0.0126855215, -0.03494318, 0.018143104, 0.013723317, -0.018082056, 0.022892544, 0.012294822, -0.042073444, 0.0050729876, -0.00469755, 0.0066296807, -0.008052071, -0.0026524826, -0.006275609, -0.02959548, 0.0033636778, -0.009889578, -0.0015193018, 0.032769915, 0.00020832215, -0.02239196, 0.05005836, -0.008528235, 0.013808782, -0.05450257, -0.039362967, -0.033136193, 0.016677981, 0.031085022, 0.020023344, -0.0017581474, -0.024553016, -0.009089866, 0.0044625197, 0.047738586, 0.0016757342, 0.0052225525, -0.021378582, -0.0037238537, 0.020621603, -0.022721613, 0.00910818, -0.0041878093, 0.04549206, -0.00050478056, 0.006144359, 0.017410543, -0.0008538919, 0.019791367, -0.017544845, -0.026323372, -9.910564e-05, -0.0040901345, 0.044344384, -0.03071874, 0.0071424735, -0.0010179551, -0.026030349, -0.011525633, 0.0017840922, 0.035944346, -0.013430292, -0.009798009, 0.009327948, 0.0092424825, -0.019205317, 0.0060924687, -0.035016436, -0.010860222, 0.015884373, 0.0034399861, -0.017593682, 0.0031988514, -0.014565762, -0.0023533534, -0.0105671985, -0.0079605, -0.020731488, 0.020182066, 0.012154414, -0.015029718, -0.019217527, -0.011037258, 0.013210524, 0.029253619, 0.014980881, 0.0047280733, -0.0091692265, -0.005478949, 0.008314571, 0.0018100371, -0.010011672, -0.010292487, 0.010579407, 0.025322206, 0.01653147, -0.03054781, 0.0055827284, 0.00060360006, 0.004273275, 0.015139602, 0.020145439, 0.041047856, -0.013930876, 0.02976641, -0.01535937, 0.0014002606, -0.01936404, 0.021903586, -0.014443669, 0.034674574, -0.0020649075, 0.005411797, -0.017044261, 0.027788496, 0.026054766, -0.016641352, -0.00035082822, 0.037629236, 0.012105577, 0.0034796665, -0.008680852, 0.010359639, 0.024528597, -0.00673346, -0.014284947, -0.006947124, -0.005646827, 0.05543048, -0.0008577073, -0.026347792, -0.018668106, -0.018106475, 0.00050096516, 0.002313673, 0.01537158, 0.013808782, 0.0009340158, -0.00047540182, 0.004938685, 0.033282705, 0.018900083, -0.014883205, 0.029082688, -0.02654314, -0.0064282264, 0.021696027, -0.00088136294, -0.018912293, 0.014700065, -0.021280909, 0.011592784, 0.0054514776, -0.03826412, -0.015615767, 0.021207653, -0.033160612, 0.017972173, -0.011330283, -0.0040443493, 0.017813452, 0.017386124, 0.0021122186, -0.01747159, 0.046590906, -0.0008943354, 0.008100908, -0.0364083, 0.017752405, 0.015823325, -0.00059253536, 0.04055948, -0.048129283, -0.0010294013, -0.012746568, -0.02712919, -0.040681574, -0.0018558222, 0.014773321, -0.023014637, -0.007856721, -0.012807615, 0.024076851, -0.008345095, 0.011922437, 0.0145169245, 0.01308843, 0.005430111, -0.0058269156, -0.018765781, 0.040950183, 0.043196704, 0.015859954, -0.032769915, -0.011592784, 0.04160949, 0.02089021, 0.024650691, -0.030962927, -0.012068949, 0.014858787, -0.0048226956, 0.0023609842, -0.026152441, -0.025786161, -0.008809051, 0.020157648, -0.0032904216, 0.027275702, -0.0017856184, -0.01517623, -0.022880334, -0.014236109, -0.036554813, 0.029326875, -0.00019410969, 0.014272737, 0.012245985, -0.0062420336, -0.026689654, 0.0029546642, 0.014150645, 0.007057008, 0.018240778, -0.039582733, 0.030035017, 0.04131646, -0.0050607785, -0.025908254, 0.00012877055, -0.00096682843, -0.041438557, -0.014809949, 0.029912923, -0.023026846, 0.028716406, 0.02541988, 0.011922437, -0.02449197, -0.033160612, 0.019583808, 0.00062687416, 0.036774583, 0.045394387, -0.0023609842, 0.003842895, -0.008100908, 0.011354702, 0.0009141756, 0.017557055, 0.012441334, 0.0145169245, -0.021085558, 0.015066346, 0.020267531, -0.008979982, -0.0058818576, 0.02559081, 0.023368709, -0.025786161, -0.0011598889, 0.0075026494, 0.020230904, 0.008998295, 0.0016711557, 0.014907625, -0.016214026, 0.02751989, 0.00074400764, 0.011830866, 0.010170394, -0.03164665, -0.03853273, 0.014687856, 0.0037665865, 0.0065930523, -0.028228031, 0.014443669, 0.028960593, -0.029619899, -0.028203614, 0.022843705, -0.0197059, -0.01860706, -0.0059093283, 0.0022282077, 0.008357304, 0.005659037, 0.028521057, 0.01460239, 0.009083761, -0.0127587775, 0.04036413, -0.0029195624, -0.0037604817, 0.010487837, 0.028618732, -0.0025013918, -0.050790925, 0.012477962, -0.009736962, -0.029619899, 0.005286651, -0.0008584704, -0.02561523, -0.0011568365, 0.041658323, 0.015481464, 0.056065366, -0.020523928, 0.006904391, 0.009767485, 0.027641984, 0.0039924597, 0.0045479853, -0.0036963827, -0.012941918, -0.04212228, 0.022709403, -0.027178027, -0.0097430665, 0.017752405, -0.020218695, -0.014785531, 0.0070692175, -0.008979982, 0.026323372, -0.019412877, 0.0021564777, -0.013918666, -0.011128829, 0.0065747383, -0.0074110795, 0.013723317, -0.009083761, -0.023503011, -0.016458213, -0.010750338, 0.031451304, 0.0063977027, 0.024626272, 0.005011941, 0.015969839, -0.009553822, -0.040168785, 0.015029718, 0.032721076, 0.0006650284, -0.00156585, -0.005869648, -0.027300121, -0.0072218343, -0.0052225525, 0.005625461, -0.00036723455, 0.0029714522, 0.031719908, 0.014980881, 0.011501214, -0.0067212507, 0.0103169065, 0.021732654, -0.0045327237, 0.012368078, 0.008039861, -0.043001354, 0.018265197, -0.010957898, -0.007514859, -0.012697731, -0.018716944, 0.02467511, -0.0057200836, 0.02163498, 0.0034338816, 0.018277407, -0.0067578787, -0.013308198, 0.022257658, 0.008778527, 0.061242133, 0.0017123623, 0.035382714, 0.031548977, 0.015566929, 0.019449504, 0.024797203, -0.0074416026, -0.037458304, -0.012770987, 0.0023365656, 0.014919833, 0.001341503, 0.008863993, -0.0015406682, 0.0060894163, -0.005246971, -0.011489005, -0.009651496, 0.013601223, -0.010268069, -0.014626809, -0.036603652, -0.0035529227, -0.014236109, 0.009425623, -0.017813452, 0.0062359287, -0.016055305, 0.0170931, -0.020401835, -0.006165725, -0.018423919, 0.007630848, 0.0044258917, 0.02541988, 0.008363409, 0.021696027, 0.0002668889, -0.0021473207, 0.0334048, -0.0074293935, 0.0126488935, -0.0064099124, -0.020352997, -0.026103605, -0.0030050278, -0.04363624, 0.015261696, -0.010805281, 0.01897334, -0.005304965, -0.0021015354, 0.0033239974, 0.012209357, -0.0005555257, -0.016360538, -0.013234942, -0.00017264794, -0.026103605, 0.02446755, -0.030254785, -0.010365744, -0.026714072, -0.005765869, -0.018948922, -0.043562982, 0.009608763, 0.010664873, -0.0061046784, 0.012661103, -0.012117786, 9.529021e-05, 0.017776823, -0.024247782, -0.011550051, 0.019205317, 0.024626272, 0.021512887, 0.040730413, -0.037262958, 0.017276239, -0.013589013, 0.014687856, 0.0011041837, 0.01328378, -0.03396643, 0.011617202, -0.0074599166, 0.050644413, -0.044344384, 0.041658323, -0.007704104, -0.0046670265, 0.03609086, -0.012734359, -0.051767673, -0.012941918, -0.008235211, 0.018936712, 0.011983483, -0.0057017696, -0.031744327, -0.001845139, -0.028911756, -0.019425087, 0.01614077, 0.003690278, 0.014126225, 0.004322112, -0.005442321, -0.016677981, 0.020584974, 0.025395462, 0.015102974, 0.031011766, 0.03870366, 0.0017245716, 0.026689654, 0.005213395, -0.030328041, 0.0044258917, 0.026787328, -0.012368078, 0.0039649885, -0.004663974, -0.0102802785, 0.017520426, -0.016934378, 0.03816645, 0.028423382, -0.05503978, 0.019254155, -0.0021946318, -0.0049722604, -0.010481733, 0.013674479, 0.007606429, 0.02502918, 0.009248587, -0.02559081, -0.028545475, 0.0212687, -0.0037452201, -0.015872164, -0.031573396, 0.0020511718, -0.010463418, -0.038947847, 0.046053693, -0.0072401483, -0.014126225, 0.04366066, -0.0067578787, 0.008570968, -0.018668106, 0.0051645576, -0.03208619, 0.028789662, -0.035187364, -0.008192479, -0.0024647638, 0.015542511, -0.019083224, 0.011336387, -0.023197778, 0.011147142, -0.016287282, -0.017764613, 0.034088522, -0.04080367, -0.00910818, -0.04178042]"
../../../gradio,../../../gradio/gradio/components,logout_button.py,"""""""Predefined button to sign out from Hugging Face in a Gradio Space.""""""
from __future__ import annotations

import warnings
from typing import Literal

from gradio_client.documentation import document

from gradio.components import Button


@document()
class LogoutButton(Button):
    """"""
    Creates a Button to log out a user from a Space using OAuth.

    Note: `LogoutButton` component is deprecated. Please use `gr.LoginButton` instead
          which handles both the login and logout processes.
    """"""

    is_template = True

    def __init__(
        self,
        value: str = ""Logout"",
        *,
        every: float | None = None,
        variant: Literal[""primary"", ""secondary"", ""stop""] = ""secondary"",
        size: Literal[""sm"", ""lg""] | None = None,
        icon: str
        | None = ""https://huggingface.co/front/assets/huggingface_logo-noborder.svg"",
        # Link to logout page (which will delete the session cookie and redirect to landing page).
        link: str | None = ""/logout"",
        visible: bool = True,
        interactive: bool = True,
        elem_id: str | None = None,
        elem_classes: list[str] | str | None = None,
        render: bool = True,
        scale: int | None = 0,
        min_width: int | None = None,
    ):
        warnings.warn(
            ""The `gr.LogoutButton` component is deprecated. Please use `gr.LoginButton` instead which handles both the login and logout processes.""
        )
        super().__init__(
            value,
            every=every,
            variant=variant,
            size=size,
            icon=icon,
            link=link,
            visible=visible,
            interactive=interactive,
            elem_id=elem_id,
            elem_classes=elem_classes,
            render=render,
            scale=scale,
            min_width=min_width,
        )
","The code defines a `LogoutButton` class that inherits from the `Button` class in Gradio. This button is used to log out a user from a Space using OAuth. The button has various parameters such as the button label, variant, size, icon, link to the logout page, visibility, interactivity, and other styling options. The class issues a warning that the `LogoutButton` component is deprecated and suggests using `gr.LoginButton` instead, which handles both login and logout processes.","[-0.046377927, 0.044357408, 0.025373941, 0.022437142, 0.018231647, -0.0014236132, 0.0128749255, 0.009221548, 0.0182199, -0.028710146, 0.009315526, -0.007958725, -0.043135703, 0.0351946, 0.009438871, 0.045743577, -0.011283181, 0.0004515328, 0.009826529, 0.028733639, -0.0741483, -0.007993966, 0.0003074461, 0.06822771, 0.017409343, -0.010895523, 0.0011012995, 0.0011930745, 0.00061966456, 0.027723381, -0.0048251604, -0.035006642, -0.014026151, 0.017573804, 0.013720724, -0.020874767, 0.0083463825, 0.03730909, 0.04553213, -0.04543815, -0.092473924, -0.028851112, 0.022260934, 0.053379256, -0.0037003665, 0.014989421, -0.0013112806, 0.011670838, 0.037919946, -0.007735528, -0.08213639, -0.027112527, -0.0009647384, 0.00511003, -0.045626108, -0.00083698763, -0.03211683, 0.009573964, -0.0116532175, -0.017491573, -0.040527824, -0.00070336333, 0.003224605, -0.007606309, 0.034231327, 0.02110971, -0.028287247, 0.012252324, 0.036298834, 0.003606389, 0.051358737, -0.008534337, -0.03312709, -0.0228248, -0.0068074996, 0.0038765743, 0.015400573, 0.008035081, 0.05239249, -0.0099322535, -0.02362361, 0.03253973, -0.040786263, 0.011529872, -0.050137028, 0.03129453, -0.04426343, -0.022108221, -0.01650481, -0.03885972, -0.010443256, 0.00188983, -0.024974536, 0.014178865, -0.01111872, 0.0017268377, -0.028827617, -0.041021205, 0.027840853, 0.01972354, 0.025773346, -0.058876943, -0.010501993, -0.021426884, 0.019500345, -0.05173465, 0.022683835, 0.011782437, -0.0131451115, -0.014343325, -0.029837877, 0.043746553, -0.027394459, 0.04226641, -0.04365258, -0.07100005, 0.021180194, -0.0059617017, 0.034254823, -0.029180033, -0.014519533, -0.014425556, 0.020639822, -0.03632233, 0.022672087, -0.012123105, -0.016610535, 0.0035270953, -0.050277997, 0.025068514, 0.057984155, 0.031224044, -0.016316853, -0.06052155, -0.00940363, 0.04083325, -0.040692285, -0.022730824, -0.020111198, 0.025608886, -0.034419283, -0.06319991, -0.015424067, -0.035617497, -0.047881566, -0.0051452713, 0.021544356, 0.01838436, -0.081572525, -0.035030138, 0.016175888, -0.0033949395, -0.015471056, 0.037426565, -0.03209334, 0.0038002178, 0.050231006, -0.008651809, -0.004193749, 0.046730343, 0.0038736376, 0.008622441, 0.049949072, 0.03575846, -0.0004577735, -0.0041350126, 0.00042143062, 0.010267049, -0.031341515, 0.061790247, 0.03300962, 0.00024687464, -0.025702864, 0.002364123, -0.01562377, 0.0014353604, -0.009726678, 0.0060674264, -0.0004797995, -0.01621113, 0.01817291, -0.029508954, 0.01985276, -0.058407053, -0.07391335, -0.012181842, 0.0242932, -0.061978202, 0.0029059625, 0.04778759, 0.0140496455, -0.0076121823, -0.0066489126, -0.011406527, 0.006337612, -0.01985276, -0.015987933, -0.036698237, 3.7926002e-05, -0.023165468, -0.03885972, 0.008910247, -0.007459469, -0.06709998, -0.0288981, 0.062213145, 0.013720724, -0.0076121823, -0.0045755324, 0.014977674, 0.008581326, 0.0052157547, -0.012863179, -0.035899427, -0.033596978, -0.022213947, 0.0085754525, 0.024504649, 0.028075797, 0.011406527, -0.03383192, 0.03495965, 0.015858714, -0.013697229, 0.05554074, -0.008657683, 0.056809437, 0.0052627437, -0.012675224, 0.053708177, 0.026337212, 0.014989421, 0.019911496, -0.030965606, 0.028498696, -0.06014564, 0.038460318, -0.013638494, 0.0056180963, 0.0004820021, -0.07367841, -0.0020484172, -0.009368388, 0.0036034521, 0.0042201797, 0.0054095834, 0.0027708698, -0.01905395, 0.01541232, 0.045156218, -0.067240946, 0.042360388, 0.054882895, -0.00037774575, -0.021426884, 0.025115503, 0.04055132, 0.0077472753, 0.003532969, -0.018795513, 0.031764414, -0.038413327, 0.012675224, 0.054131076, -0.040480834, 0.020346142, 0.024410672, -0.019700047, -0.017209642, 0.040433846, -0.03690969, -0.010084967, 0.013720724, 0.016140645, 0.016493062, 0.017914472, 0.024011267, 0.02520948, -0.029837877, 0.00910995, -0.0005308264, 0.018313877, 0.024716098, 0.027276987, -0.020416625, 0.038812734, 0.020087704, 0.023752829, 0.015846966, -0.007488837, -0.0033420771, -0.001334775, -0.026031785, 0.015952691, -0.0143668195, 0.009145192, 0.065314405, -0.026149256, -0.003944121, -0.011030616, -0.008722292, 0.008117312, -0.027723381, -0.049667142, 0.042665813, -0.032633707, 0.017244883, 0.08006889, -0.04665986, 0.04318269, 0.0064374628, 0.008869132, 0.039141655, 0.001234924, -0.049150266, -0.00806445, -0.009444745, 0.014989421, 0.01088965, -0.0414676, 0.026783604, -0.015341837, -0.010830914, 0.00020374042, 0.017056927, -0.036886193, -0.04536767, -0.0039000688, 0.013121617, 0.005221628, 0.019194918, -0.036369316, -0.0106547065, 0.056010626, 0.05436602, 0.019700047, -0.022578109, 0.050137028, -0.03237527, 0.024105245, -0.08866783, 0.0044286926, -0.014249348, 0.0074535953, -0.016904214, 0.017937968, -0.06888555, 0.021039227, -0.049855098, -0.0005561563, -0.032939136, -0.04506224, -0.006002817, -0.05352022, 0.02868665, -0.02337692, -0.008822144, -0.054976873, -0.03585244, 0.023001008, 0.014531281, 0.0007246551, 0.0068544885, -0.011277308, 0.002960293, 0.00347717, -0.035453036, -0.054976873, 0.03806091, -0.035547014, 0.019958485, 0.034395788, -0.028592674, 0.012416786, -0.042407375, 0.0039793625, -0.025303459, -0.032633707, -0.007870621, -0.0102494275, 0.011394779, -0.007212778, -0.033620473, -0.011148089, 0.031552967, -0.013744218, 0.004067466, 0.013885185, 0.010455004, -0.0012011507, -0.036745228, 0.0030131557, 0.024340188, -0.0032069844, 0.04489778, -0.008640062, 0.014472544, -0.024316695, 0.0038178384, -0.020804282, -0.032704193, 0.00028119847, 0.033855416, 0.027605908, -0.027746875, -0.041726038, 0.05586966, 0.00808207, -0.0071305474, -0.021979002, 0.046260454, 0.0094799865, 0.02755892, -0.05436602, 0.043464623, 0.004651889, -0.008240658, -0.034395788, 0.018031945, 0.0762158, -0.009644447, -0.012628235, 0.014390314, -0.06771083, 0.022918778, 0.0347717, -0.027253494, -0.013579758, 0.04426343, -0.07973996, -0.032798167, 0.028827617, -0.0039940462, -0.002342097, -0.018842502, -0.02852219, -0.07880019, 0.0051305876, 0.024575133, 0.018748524, -0.043206185, -0.022954019, 0.04301823, 0.04426343, 0.0027121338, -0.01888949, -0.0061202887, -0.029978842, -0.014390314, -0.029274011, -0.010043852, 0.0039793625, -0.011664965, 0.03958805, 0.005227502, -0.05243948, 0.004974937, -0.012029128, -0.000257337, -0.04292425, 0.013932173, -0.0066312915, -0.020040715, 0.08133758, -0.014026151, -0.027958324, -0.018631052, 0.017244883, 0.009591585, -0.054976873, 0.038460318, -0.034019876, 0.050700895, -0.0075828144, -0.038812734, 0.03932961, 0.014178865, 0.01415537, 0.027206505, 0.024340188, -0.011747195, 0.031012595, 0.02035789, -0.041820016, -0.010061473, 0.033996385, 0.030213786, -0.019089192, -0.07912911, 0.012134853, -0.002268677, -0.008587199, -0.0038295856, -0.011136341, -0.0077472753, -0.0032040474, -0.013767713, -0.013861691, 0.04116217, -0.038131397, 0.023365172, -0.01356801, -0.013532769, 0.07522904, -0.015940944, -0.011048237, 0.0010153982, -0.019711794, -0.005882408, -0.041655555, -0.028851112, -0.031811405, -0.0069132242, -0.016258119, 0.0066195447, -0.0007701755, -0.033150584, 0.055728693, 0.0030278396, 0.006296497, -0.03693318, 0.062119167, 0.0068956036, 0.0037767233, -0.028169774, 0.05817211, -0.00473412, -0.0122405775, 0.021156698, 0.0012576841, -0.015294848, -0.044122465, 0.016810236, 0.008921995, -0.028851112, 0.008563706, -0.02341216, 0.0102494275, -0.0050747884, -0.038013924, 0.03928262, 0.019664805, 0.012863179, 0.010525487, -0.0023347551, 0.0035241586, -0.018372614, -0.046706848, 0.057890177, 0.0029147728, 0.029767392, -0.018114176, 0.030848134, -0.034489766, -0.050559927, -0.031646945, -0.0094799865, 0.015706, -0.02378807, 0.0015829345, -0.0057267575, -0.0027326914, -0.015071652, 0.031059584, -0.020428373, -0.037849464, -0.024645615, 0.019488597, -0.028545685, 0.025115503, -0.0143668195, 0.012639982, -0.011635597, 0.062119167, -0.013638494, 0.0077883904, 0.018924732, -0.037520543, 0.00044859602, -0.024763087, 0.00062406977, -0.044780307, 0.007283261, -0.010278796, -0.07786041, -0.024598626, 0.0070600645, -0.014460797, -0.036627755, -0.006713522, -0.02027566, -0.0035505898, 0.016352097, 0.015647264, 0.01993499, 0.016716259, 0.022225693, 0.0063258647, 0.0066312915, 0.02659565, -0.020122945, -0.050277997, 0.011271434, 0.0067193955, 0.02781736, -0.025068514, -0.015353584, 0.0048369076, -0.044662837, 0.021509115, -0.00919218, 0.006055679, 0.008510843, -0.0339259, -0.029743899, 0.0069367187, -0.0062377607, 0.0057003265, 0.0059176497, 0.018572316, 0.011899909, 0.0155415395, 0.03932961, -0.024974536, 0.00755932, 0.052110557, 0.007635677, -0.0015095146, -0.0012378606, 0.0069367187, 0.032234304, -0.0032011108, 0.030542707, -0.016175888, -0.00091481284, -0.01666927, 0.027065538, -0.0153183425, 0.0017606108, -0.027723381, 0.008281773, -0.03932961, -0.0019470976, -0.0022143463, -0.0029735088, 0.035406046, -0.021544356, 0.033737946, 0.030213786, 0.014648752, 0.0051452713, 0.02223744, 0.012358049, -0.003944121, -0.012686971, 0.013579758, 0.003809028, 0.01838436, 0.0108837765, 0.022589857, -0.016845478, 0.015283101, -0.025749851, 0.008076197, -0.013708977, 0.032680698, -0.028052302, -0.0011372754, -0.036839206, -0.019923244, -0.02558539, 0.009955748, 0.022049485, 0.016446073, 0.05314431, -0.0009280284, -0.030519214, -0.05286238, -0.008751661, -0.0068838564, -0.050606918, 0.015893955, 0.0035917049, 0.0075123315, 0.020263912, -0.049996063, 0.037520543, 0.01637559, 0.0033009618, -0.024058256, -0.0121466, 0.0064022215, 0.014061392, -0.0074183536, -0.00770616, 0.0066077975, 0.0066900277, -0.0061202887, 0.011341917, -0.01993499, 0.034583744, 0.014460797, 0.034325305, 0.014836707, -0.0017679529, 0.010484371, -0.032492742, 0.00063765247, -0.045297183, -0.0109718805, -0.041585073, 0.009280284, -0.005603412, 0.02953245, -0.012675224, 0.033855416, -0.010290543, 0.0038325225, 0.022754317, -0.018572316, -0.023588369, 0.024269706, -0.055728693, -0.0146370055, 0.02035789, -0.020205176, -0.040010948, 0.001977934, -0.0456496, -0.0039176894, -0.045931533, 0.007165789, 0.004396388, 0.021015732, -0.008405118, 0.037379574, 0.002386149, -0.0097501725, 0.02127417, -0.021849783, -0.024528144, 0.049855098, 0.0012980651, -0.034160845, 0.024810076, 0.00831114, 0.0056122225, -0.00010912043, 0.0034507385, -0.0014588548, 0.021579597, 0.0071892836, -0.02643119, -0.0020087704, -0.04243087, -0.012968903, -0.0065196934, -0.009151065, -0.024810076, 0.008933742, 0.0049132644, 0.03467772, 0.001809068, 0.0029294568, -0.012052623, -0.05046595, -0.006337612, 0.010167197, 0.028992077, 0.052298512, 0.014084887, -0.0222022, -0.010255301, -0.006466831, 0.047317702, -0.026525166, -0.001437563, -0.046049006, 0.059158877, -0.008792776, 0.0075064576, 0.024833571, 0.029837877, 0.0037414816, 0.031482484, -0.026689628, 0.0020542908, 0.014871949, -0.0023553127, -0.004058656, 0.023506138, 0.019194918, 0.0038883216, -0.0017077485, 0.036839206, 0.006537314, -0.0040645297, -0.062824, -0.013309572, 0.0087105455, -0.015435815, -0.030002337, 0.01252251, 0.044427894, 0.006319991, 0.023470895, -0.02777037, 0.006043932, -0.016481316, -0.013685483, 0.0032422259, -0.006784005, -0.0536142, 0.031271033, 0.022566361, 0.02659565, -0.0025050894, -0.00082964567, -0.015212618, -0.03495965, -0.006161404, -3.3038985e-05, -0.015565034, 0.0019368188, -0.0012444685, -0.0107016945, -0.0039294367, 0.024340188, 0.0051599555, 0.026478179, 0.003268657, -9.856631e-05, 0.014707488, 0.023517884, -0.026290223, -0.0052921115, -0.021685323, 0.03192888, -0.015247859, -0.001503641, -0.010167197, 0.0065020723, 0.005139398, 0.013391802, 0.0263842, -0.021920266, 0.007430101, -9.902519e-05, -0.015471056, 0.016516557, -0.0044463133, -0.012592994, -0.02621974, -0.0006134239, 0.004572596, -0.032351777, 0.00347717, 0.060803484, -0.023094986, -0.026478179, -0.031388506, 0.0030895122, -0.02466911, 0.006055679, 0.0057590622, -0.03324456, -0.024504649, 0.015247859, 0.0161289, 0.0033538241, 0.00017033433, 0.030331258, 0.013638494, -0.0025858514, -0.012087864, 0.014037899, 0.007976346, -0.013967415, -0.0058941552, 0.045297183, 0.0456496, -0.027511932, 0.014037899, 0.015024663, 0.015271354, -0.04933822, 0.004845718, -0.014578269, -0.0071305474, 0.0527684, -0.04365258, -0.001345788, 3.5964313e-06, -0.024528144, 0.005629843, 0.026478179, -0.033432517, -0.008722292, 0.007782517, -0.028592674, 0.04830447, 0.01670451, -0.05088885, -0.0020352015, -0.021379896, -0.0063082436, -0.035594, -0.011124594, -0.031059584, 0.009656195, 0.005952891, -0.053238288, 0.015247859, 0.048116513, 0.012193589, 0.014930685, 0.03237527, -0.024739593, 0.04938521, -0.010337532, 0.021321159, -0.01051374, -0.031130068, -0.0040821503, -0.023670599, -0.004651889, 0.07668569, -0.0030542708, -0.0015447561, -0.0036827456, -0.02488056, -0.011136341, 0.0066371653, 0.0028809996, 0.015976185, -0.032022852, 0.015518045, -0.011929276, -0.027676392, -0.03787296, 0.013098123, -0.039776005, 0.029438471, 0.0045872796, 0.02697156, -0.036463294, 0.00031075004, 0.015635516, 0.012992398, -0.00399111, 0.011377159, 0.02910955, 0.059017908, 0.004402261, -0.035500024, -0.012158347, 0.02948546, 0.024058256, 0.016175888, -0.038836226, -0.054835908, 0.021767553, 0.009990989, -0.025726357, 0.022260934, -0.025961302, 0.031482484, -0.01993499, 0.030989101, 0.01683373, 0.006872109, 0.024481155, 0.0030014084, 0.02048711, -0.005136461, 0.015024663, 0.009421251, -2.8473181e-05, 0.03690969, -0.02236666, 0.0107486835, 0.03822537, 0.027300483, -0.002919178, -0.005750252, -0.01888949, 0.024739593, 0.0045021125, 0.024739593, 0.012698718, -0.04720023, -0.0114241475, -0.03192888, 0.037332587, -0.014096634, 0.03023728, -0.0028031745, -0.020545844, 0.032140326, -0.015776483, 0.021015732, 0.0037150504, -0.011224445, -0.04120916, 0.027488437, 0.013203847, 0.008434487, -0.025655875, -0.032234304, 0.0034213706, 0.0039617415, -0.00093243364, 0.013074628, -0.009644447, -0.016469568, -0.021849783, -0.001831094, 0.027676392, -0.009256789, 0.025914313, -0.017691275, -0.010813293, 0.02349439, -0.02102748, -0.020804282, -0.02169707, 0.041702542, 0.016387338, -0.004478618, -0.0059352703, -0.017667782, 0.018454844, -0.03253973, -0.016939456, -0.013168606, 0.038930204, 0.044756815, -0.0101613235, -0.01332132, -0.012029128, -0.014331578, -0.02378807, 0.010278796, 0.019700047, -0.005952891, -0.026055278, 0.021567851, 0.018161165, -0.010261175, 0.028381223, -0.011512252, 0.021708816, 0.011218571, -0.0049661268, -0.020475361, 0.026948066, -0.030683674, -0.03380843, 0.020910008, -0.017832242, -0.045156218, 0.023435654, 0.041185666, -0.021250676, -0.01977053, 0.021685323, -0.013368309, 0.017738264, 0.033761438, -0.011512252, -0.0082582785, 0.0014015873, -0.024951043, -0.012369797, -0.0021776364, -0.011635597, 0.005415457, 0.036557272, 0.006372853, -0.014883696, 0.0019147928, 0.015565034, 0.025138998, 0.008957236, -0.013932173, 0.0422899, -0.026407694, 0.015905702, 0.03707415, -0.01859581, -0.02755892, -0.0010741341, 0.00042546872, 0.014378567, 0.0121466, -0.0065138196, 0.012040875, 0.015130388, 0.021039227, 0.008252405, 0.0033332666, 0.016716259, 0.022801306, -0.009151065, 0.016692765, 0.029156538, 0.025514908, 0.0025858514, -0.0056856424, -0.009021846, -0.017080422, 0.00020006942, -0.004193749, -0.021943761, -0.017092168, -0.0035740843, -0.027300483, 0.008980731, -0.01289842, -0.021603093, 0.010402141, -0.007406607, 0.018654546, 0.014531281, 0.029955348, -0.028451707, 0.037097644, -0.012592994, -0.0059176497, 0.0025417993, -0.023423906, -0.004281853, -0.0019647183, -0.019171422, -0.004786982, -0.015929196, -0.005209881, -0.012769201, -0.0012231767, -0.03667474, -0.013391802, 0.026854089, -0.0063552326, 0.0052480595, 0.006337612, 0.0146605, 0.011165709, 0.05173465, -0.012369797, 0.026266728, -0.020322647, 0.010948386, 0.0004610774, 0.00948586, 0.039987452, -0.015494551, 0.009004225, 0.021039227, -0.00518345, -0.012064369, -0.022672087, 0.0036093257, -0.01746808, -0.016034922, 0.026924571, 0.013955668, 0.011024742, -0.0036445672, 0.011477009, 0.022378407, -0.0076004355, 0.013979162, -0.023306435, 0.018349119, 0.049855098, 0.014343325, -0.0052627437, -0.013579758, -0.0024463534, 0.023106733, 0.019876255, -0.026266728, 0.015682505, 0.051828627, 0.020428373, -0.008252405, -0.012628235, 0.003838396, -0.009015973, 0.01809068, 0.008463854, 0.016222877, 0.019194918, -0.011365412, 0.0038295856, -0.02948546, 0.021943761, -0.0011042363, -0.020804282, 0.0027561856, 0.021215435, -0.023294687, -0.019993726, -0.013932173, 0.014460797, 0.04259533, -0.015459309, -0.011735448, 0.034348797, 0.024504649, 0.018983467, -0.00488977, 0.01415537, 0.017092168, -0.0029970033, -0.019911496, 0.015752988, -0.01901871, 0.017303618, -0.021532608, -0.006372853, -0.025162492, -0.027042042, -0.0036386938, -0.012322808, 0.01562377, 0.04365258, -0.014566522, -0.0041262023, -0.0050454205, 0.028874606, -0.010349279, 0.014425556, -0.0028545684, 0.014143623, 0.0032334155, -0.029133044, 0.03136501, -0.019418113, -0.02370584, 0.053896133, 0.0016460757, -0.024316695, -0.010014484, -0.008487348, 0.021838035, 0.009462366, 0.014096634, 0.004249548, -0.0146370055, -0.0030601444, 0.009767793, 0.0047928556, -0.0054418882, -0.013967415, -0.04029288, 0.005914713, 0.0053302897, 0.02798182, -0.027370965, 0.04602551, 0.031646945, -0.030143304, 0.027394459, 0.01893648, -0.0050865356, -0.021802794, -0.004904454, -0.00185312, 0.0070013283, -0.02525647, 0.0059470176, 0.019617816, 0.0016387338, -0.0072656404, 0.036251843, 0.0040057935, -0.010913145, 0.035124112, -0.012957157, -0.012311061, -0.019970233, -0.0020968744, 0.007242146, -0.0064022215, -0.043370645, 0.020393131, -0.026830593, -0.0011879351, 0.0146605, 0.021415137, 0.01244028, -0.00055578916, 0.01340355, -0.006584303, -0.011576861, -0.021250676, -0.013932173, 0.034066867, -0.008087944, -0.005638654, 0.0067311428, -0.050700895, 0.02403476, -0.020616328, -0.027535425, -0.019406367, 0.01725663, 0.0019001089, 0.018830754, -0.008446233, -0.0073948596, 0.016692765, -0.0007731123, -0.008181921, 0.0004434566, -0.005104156, 0.00084726646, -0.019594321, 0.019758783, 2.048876e-05, 0.021685323, -0.004657763, 0.007242146, -0.015870461, -0.017832242, -0.0033596978, -0.0042583584, 0.011377159, 0.03333854, -0.03627534, -0.01784399, -0.028968584, 0.007529952, -0.007606309, -0.011617976, 0.030801145, -0.010660579, -0.016998192, 0.04520321, -0.002158547, 0.022190452, 0.018431349, 0.04687131, -0.042830274, 0.031224044, 0.003253973, 0.004114455, 0.0068544885, 0.0115592405, -0.011042364, 0.014813214, -0.014578269, -0.007083559, 0.011565113, -0.001831094, 0.03472471, -0.013333066, 0.008281773, 0.029274011, 0.020757293, 0.029367989, 0.029555943, 0.05281539, -0.03634582, 0.014084887, 0.032304786, 0.004264232, -0.0068486147, -0.0022451826, -0.026924571, -0.003253973, -0.03822537, 0.010131956, 0.009803034, 0.014308084, -0.03848381, 0.018795513, 0.017456332, -0.031153562, -0.041773025, -0.013239089, 0.024199221, -0.026948066, 0.008504969, -0.02755892, -0.024128739, 0.008052702, -0.030425236, -0.045250196, -0.004481555, 0.03942359, 0.025373941, 0.023482643, -0.012064369, -0.0056092856, 0.023071492, 0.042830274, 0.025185987, 0.011776563, -0.0074712164, -0.012299313, -0.014225854, -0.029414976, 0.0008692925, 0.01244028, -0.009368388, -0.025608886, 0.00083992444, 0.025115503, -0.01905395, 0.016093658, 0.005239249, 0.012405038, -0.0058706608, -0.024199221, -0.018748524, -0.0049514426, -0.021873277, -0.019230159, 0.04088024, -0.029790888, 0.010901397, 0.028545685, -0.008916121, -0.0030425235, -0.036204856, 0.017432837, 0.02290703, -0.03627534, -0.0048985803, 0.0155415395, 0.026619144, -0.0060615526, -0.026619144, -0.03300962, 0.01813767, -0.015447562, -0.022343166, 0.022895284, 0.032046348, 0.028075797, 0.012428532, 0.001992618, 0.023752829, -0.0076004355, 0.0028986204, 0.01755031, 0.0124637745, -0.012416786, -0.021133205, -0.014331578, 0.031388506, -0.042195924, 0.016305108, -0.007107053, -0.011453515, 0.06977834, -0.024998032, -0.028498696, -0.005151145, -0.016340349, 0.00636698, 0.0038941952, -0.020252164, -0.031482484, 0.00829352, 0.0036269466, -0.030566202, -0.0033215194, 0.007923483, 0.017937968, 0.0020616327, -0.014930685, -0.010590097, 0.019253653, 0.012040875, 0.021074468, 0.025138998, 0.042031463, -0.0056680217, -0.02035789, 0.016528303, -0.028592674, -0.009421251, 0.0016695701, -0.0077002863, -0.02777037, 0.0071775364, 0.0035858313, 0.0023435655, -0.0150011685, 0.03291564, 0.00031588943, -0.02831074, 0.0023244761, -0.010319911, 0.014202359, -0.0117883105, -0.004275979, 0.024998032, 0.03803742, 0.008234784, -0.013180353, -0.038883217, 0.0068838564, -0.01910094, -0.0048369076, -0.027840853, 0.009438871, -0.03651028, -0.028263751, -0.013509274, -0.006819247, -0.010924892, 0.02676011, 0.007124674, 0.011588608, -0.04938521, 0.004607837, -0.027300483, 0.026172752, 0.0027253493, -0.021074468, -0.013744218, 0.0067605106, -0.0015432878, 0.015870461, 0.0032480995, 0.020169934, -0.01289842, -0.0064903256, 0.007083559, 0.023929037, 0.022425396, -0.057138357]"
